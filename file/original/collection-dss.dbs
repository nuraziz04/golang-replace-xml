<root>
<data enableBoxcarring="true" name="collection-dss" serviceNamespace="DataService" transports="http https local">
   <config enableOData="false" id="collectiondso1">
      <property name="carbon_datasource_name">OMSocket</property>
   </config>
   <query id="insertMstCollDayHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_COLL_DAY_HDR (COMPANY_CODE, PRODUCT_CODE, COLL_DAY_CODE, DESCRIPTION, FLAG_ACTIVE, CREATED_DATE, CREATED_BY) VALUES (:companyCode, :productCode, :collDayCode, :collDayName, :flagActive, GETDATE(), :createdBy)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collDayCode" sqlType="STRING"/>
      <param name="collDayName" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="updateMstCollDayHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE MST_COLL_DAY_HDR SET DESCRIPTION=:collDayName, FLAG_ACTIVE=:flagActive, UPDATE_DATE=GETDATE(), UPDATE_BY=:updateBy WHERE COMPANY_CODE=:companyCode AND PRODUCT_CODE=:productCode AND COLL_DAY_CODE=:collDayCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="collDayName" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collDayCode" sqlType="STRING"/>
   </query>
   <query id="insertMstCollDayDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_COLL_DAY_DTL (COMPANY_CODE, PRODUCT_CODE, COLL_DAY_CODE, DAY_CODE, FLAG_ACTIVE, CREATED_DATE, CREATED_BY) VALUES (:companyCode, :productCode, :collDayCode, :dayCode, :flagActive, GETDATE(), :createdBy)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collDayCode" sqlType="STRING"/>
      <param name="dayCode" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="insertMstCollAttendance" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_COLL_ATTENDANCE&#xd;(&#xd;	COMPANY_CODE,&#xd;	ATT_CODE,&#xd;	ATT_NAME,&#xd;	ATTEND_FLAG,&#xd;	CASH_FLAG,&#xd;	UTJ_FLAG,&#xd;	FLAG_ACTIVE,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;SELECT&#xd;	:companyCode,&#xd;	:attCode,&#xd;	:attName,&#xd;	:attendFlag,&#xd;	:cashFlag,&#xd;	:utjFlag,&#xd;	:flagActive,&#xd;	GETDATE(),&#xd;	:createdBy</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="attName" sqlType="STRING"/>
      <param name="attendFlag" sqlType="STRING"/>
      <param name="cashFlag" sqlType="STRING"/>
      <param name="utjFlag" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="attCode" sqlType="STRING"/>
   </query>
   <query id="updateMstCollAttendance" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE MST_COLL_ATTENDANCE SET&#xd;	ATT_NAME = :attName,&#xd;	ATTEND_FLAG = :attendFlag,&#xd;	CASH_FLAG = :cashFlag,&#xd;	UTJ_FLAG = :utjFlag,&#xd;	FLAG_ACTIVE = :flagActive,&#xd;	UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = :updateBy&#xd;WHERE&#xd;	COMPANY_CODE = :companyCode AND ATT_CODE = :attCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="attName" sqlType="STRING"/>
      <param name="attendFlag" sqlType="STRING"/>
      <param name="cashFlag" sqlType="STRING"/>
      <param name="utjFlag" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="attCode" sqlType="STRING"/>
   </query>
   <query id="getColumnMstCollAttendance" useConfig="collectiondso1">
      <sql>SELECT 1 as attCode, 1 attName, 1 attendFlag, 1 cashFlag, 1 utjFlag</sql>
      <result element="Entries" rowName="">
         <element column="attCode" name="attCode" xsdType="string"/>
         <element column="attName" name="attName" xsdType="string"/>
         <element column="attendFlag" name="attendFlag" xsdType="string"/>
         <element column="cashFlag" name="cashFlag" xsdType="string"/>
         <element column="utjFlag" name="utjFlag" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstCollAttendance" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.company_code companyCode,&#xd;		A.att_code attCode,&#xd;		A.att_name attName,&#xd;		A.attend_flag attendFlag,&#xd;		A.cash_flag cashFlag,&#xd;		A.utj_flag utjFlag,&#xd;		A.flag_Active flagActive,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updatedDateStr&#xd;	FROM MST_COLL_ATTENDANCE A&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMstCollAttendance" useConfig="collectiondso1">
      <sql>SELECT companyCode, attCode, attName, attendFlag, cashFlag, utjFlag, flagActive, updatedDateStr FROM (&#xd;	SELECT &#xd;		A.company_code companyCode,&#xd;		A.att_code attCode,&#xd;		A.att_name attName,&#xd;		A.attend_flag attendFlag,&#xd;		A.cash_flag cashFlag,&#xd;		A.utj_flag utjFlag,&#xd;		A.flag_Active flagActive,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updatedDateStr&#xd;	FROM MST_COLL_ATTENDANCE A&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="attCode" name="attCode" xsdType="string"/>
         <element column="attName" name="attName" xsdType="string"/>
         <element column="attendFlag" name="attendFlag" xsdType="string"/>
         <element column="cashFlag" name="cashFlag" xsdType="string"/>
         <element column="utjFlag" name="utjFlag" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertMstBucket" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_BUCKET&#xd;(&#xd;    COMPANY_CODE,&#xd;    BUCKET_CODE,&#xd;    PRODUCT_CODE,&#xd;    DESCRIPTION,&#xd;    BUCKET_TYPE,&#xd;    OD_DAY_FROM,&#xd;    OD_DAY_TO,&#xd;    FLAG_ACTIVE,&#xd;	FLAG_REVITALIZATION,&#xd;    CREATED_DATE,&#xd;    CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;    :companyCode,&#xd;    :bucketCode,&#xd;    :productCode,&#xd;    :description,&#xd;    :bucketType,&#xd;    :odDayFrom,&#xd;    :odDayTo,&#xd;    :flagActive,&#xd;	:flagRevitalisasi,&#xd;    GETDATE(),&#xd;    :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="odDayFrom" sqlType="STRING"/>
      <param name="odDayTo" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="description" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="flagRevitalisasi" sqlType="STRING"/>
   </query>
   <query id="updateMstBucket" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE MST_BUCKET SET&#xd;	DESCRIPTION = :description,&#xd;	OD_DAY_FROM = :odDayFrom,&#xd;	OD_DAY_TO = :odDayTo,&#xd;	FLAG_ACTIVE = :flagActive,&#xd;	FLAG_REVITALIZATION = :flagRevitalisasi,&#xd;    UPDATED_DATE = GETDATE(),&#xd;	UPDATED_BY = :updateBy&#xd;WHERE&#xd;	COMPANY_CODE = :companyCode AND BUCKET_CODE = :bucketCode AND BUCKET_TYPE = :bucketType AND PRODUCT_CODE = :productCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="odDayFrom" sqlType="STRING"/>
      <param name="odDayTo" sqlType="STRING"/>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="description" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="flagRevitalisasi" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
   </query>
   <query id="getColumnMstBucket" useConfig="collectiondso1">
      <sql>SELECT 1 as productCode, 1 productName, 1 bucketCode, 1 description, 1 odDayFrom, 1 odDayTo, 1 flagActive, 1 flagRevitalisasi, 1 bucketTypeName, 1 odDayFrom, 1 odDayTo</sql>
      <result element="Entries" rowName="">
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="odDayFrom" name="odDayFrom" xsdType="string"/>
         <element column="odDayTo" name="odDayTo" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="description" name="description" xsdType="string"/>
         <element column="flagRevitalisasi" name="flagRevitalisasi" xsdType="string"/>
         <element column="bucketTypeName" name="bucketTypeName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstBucket" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;        A.COMPANY_CODE companyCode,&#xd;        A.PRODUCT_CODE productCode, &#xd;        B.PARAM_DESCRIP productName, &#xd;        A.BUCKET_CODE bucketCode, &#xd;        A.DESCRIPTION description, &#xd;        A.BUCKET_TYPE bucketType, &#xd;        C.PARAM_DESCRIP bucketTypeName,&#xd;        A.OD_DAY_FROM odDayFrom, &#xd;        A.OD_DAY_TO odDayTo, &#xd;        A.FLAG_ACTIVE flagActive,&#xd;		A.FLAG_REVITALIZATION flagRevitalisasi,&#xd;		CONVERT(varchar, A.UPDATED_DATE, 121) as updatedDateStr,&#xd;		A.CREATED_DATE createdDate&#xd;    FROM MST_BUCKET A &#xd;    JOIN MST_GLOBAL_PARAM B &#xd;    ON A.PRODUCT_CODE=B.PARAM_CODE AND B.CONDITION = 'PRODUCT_CODE' AND B.FLAG_ACTIVE = '1'&#xd;    JOIN MST_GLOBAL_PARAM C &#xd;    ON A.BUCKET_TYPE=C.PARAM_CODE AND C.CONDITION = 'BUCKET_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMstBucket" useConfig="collectiondso1">
      <sql>SELECT companyCode, productCode, productName, bucketCode, description, bucketType, bucketTypeName, odDayFrom, odDayTo, flagActive, flagRevitalisasi, updatedDateStr, createdDate FROM (&#xd;	SELECT &#xd;        A.COMPANY_CODE companyCode,&#xd;        A.PRODUCT_CODE productCode, &#xd;        B.PARAM_DESCRIP productName, &#xd;        A.BUCKET_CODE bucketCode, &#xd;        A.DESCRIPTION description, &#xd;        A.BUCKET_TYPE bucketType, &#xd;        C.PARAM_DESCRIP bucketTypeName,&#xd;        A.OD_DAY_FROM odDayFrom, &#xd;        A.OD_DAY_TO odDayTo, &#xd;        A.FLAG_ACTIVE flagActive,&#xd;		A.FLAG_REVITALIZATION flagRevitalisasi,&#xd;		CONVERT(varchar, A.UPDATED_DATE, 121) as updatedDateStr,&#xd;		A.CREATED_DATE createdDate&#xd;    FROM MST_BUCKET A &#xd;    JOIN MST_GLOBAL_PARAM B &#xd;    ON A.PRODUCT_CODE=B.PARAM_CODE AND B.CONDITION = 'PRODUCT_CODE' AND B.FLAG_ACTIVE = '1'&#xd;    JOIN MST_GLOBAL_PARAM C &#xd;    ON A.BUCKET_TYPE=C.PARAM_CODE AND C.CONDITION = 'BUCKET_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="odDayFrom" name="odDayFrom" xsdType="string"/>
         <element column="odDayTo" name="odDayTo" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="description" name="description" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="bucketTypeName" name="bucketTypeName" xsdType="string"/>
         <element column="flagRevitalisasi" name="flagRevitalisasi" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="deleteMstCollDayDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DELETE FROM MST_COLL_DAY_DTL WHERE COMPANY_CODE=:companyCode AND PRODUCT_CODE=:productCode AND COLL_DAY_CODE=:collDayCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collDayCode" sqlType="STRING"/>
   </query>
   <query id="insertMstExtColl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_EXT_COLL&#xd;(&#xd;	COMPANY_CODE,&#xd;	EXT_COLL_CODE,&#xd;	EXT_COLL_TYPE,&#xd;	EXT_COLL_NAME,&#xd;	ADDRESS,&#xd;	RT,&#xd;	RW,&#xd;	VILLAGE_CODE,&#xd;	AREA_CODE_PHONE1,&#xd;	PHONE_NO1,&#xd;	AREA_CODE_PHONE2,&#xd;	PHONE_NO2,&#xd;	HP_NO,&#xd;	EMAIL,&#xd;	NPWP,&#xd;	PIC_NAME,&#xd;	ID_TYPE,&#xd;	ID_NO,&#xd;	ACCOUNT_NO,&#xd;	ACCOUNT_NAME,&#xd;	BANK_CODE,&#xd;	FLAG_ACTIVE,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES &#xd;(&#xd;	:companyCode,&#xd;	:extCollCode,&#xd;	:extCollType,&#xd;	:extCollName,&#xd;	:address,&#xd;	:rt,&#xd;	:rw,&#xd;	:villageCode,&#xd;	:areaCodePhone1,&#xd;	:phoneNo1,&#xd;	:areaCodePhone2,&#xd;	:phoneNo2,&#xd;	:hpNo,&#xd;	:email,&#xd;	:npwp,&#xd;	:pic,&#xd;	:idType,&#xd;	:idNo,&#xd;	:accountNo,&#xd;	:accountName,&#xd;	:bankCode,&#xd;	:flagActive,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
      <param name="extCollName" sqlType="STRING"/>
      <param name="address" sqlType="STRING"/>
      <param name="rt" sqlType="STRING"/>
      <param name="rw" sqlType="STRING"/>
      <param name="villageCode" sqlType="STRING"/>
      <param name="areaCodePhone1" sqlType="STRING"/>
      <param name="phoneNo1" sqlType="STRING"/>
      <param name="areaCodePhone2" sqlType="STRING"/>
      <param name="phoneNo2" sqlType="STRING"/>
      <param name="hpNo" sqlType="STRING"/>
      <param name="email" sqlType="STRING"/>
      <param name="npwp" sqlType="STRING"/>
      <param name="pic" sqlType="STRING"/>
      <param name="accountNo" sqlType="STRING"/>
      <param name="accountName" sqlType="STRING"/>
      <param name="bankCode" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="idType" sqlType="STRING"/>
      <param name="idNo" sqlType="STRING"/>
      <param name="extCollType" sqlType="STRING"/>
   </query>
   <query id="updateMstExtColl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE MST_EXT_COLL SET&#xd;	ADDRESS = :address,&#xd;	RT = :rt,&#xd;	RW = :rw,&#xd;	VILLAGE_CODE = :villageCode,&#xd;	AREA_CODE_PHONE1 = :areaCodePhone1,&#xd;	PHONE_NO1 = :phoneNo1,&#xd;	AREA_CODE_PHONE2 = :areaCodePhone2,&#xd;	PHONE_NO2 = :phoneNo2,&#xd;	HP_NO = :hpNo,&#xd;	EMAIL = :email,&#xd;	NPWP = :npwp,&#xd;	PIC_NAME = :pic,&#xd;	ID_TYPE = :idType,&#xd;	ID_NO = :idNo,&#xd;	ACCOUNT_NO = :accountNo,&#xd;	ACCOUNT_NAME = :accountName,&#xd;	BANK_CODE = :bankCode,&#xd;	FLAG_ACTIVE = :flagActive,&#xd;	UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = :updateBy&#xd;WHERE&#xd;	COMPANY_CODE = :companyCode AND&#xd;	EXT_COLL_CODE = :extCollCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="address" sqlType="STRING"/>
      <param name="rt" sqlType="STRING"/>
      <param name="rw" sqlType="STRING"/>
      <param name="villageCode" sqlType="STRING"/>
      <param name="areaCodePhone1" sqlType="STRING"/>
      <param name="phoneNo1" sqlType="STRING"/>
      <param name="areaCodePhone2" sqlType="STRING"/>
      <param name="phoneNo2" sqlType="STRING"/>
      <param name="hpNo" sqlType="STRING"/>
      <param name="email" sqlType="STRING"/>
      <param name="npwp" sqlType="STRING"/>
      <param name="pic" sqlType="STRING"/>
      <param name="accountNo" sqlType="STRING"/>
      <param name="accountName" sqlType="STRING"/>
      <param name="bankCode" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
      <param name="idType" sqlType="STRING"/>
      <param name="idNo" sqlType="STRING"/>
   </query>
   <query id="getColumnMstExtColl" useConfig="collectiondso1">
      <sql>SELECT 1 as extCollCode, 1 extCollName, 1 address, 1 areaCodePhone1, 1 phoneNo1, 1 hpNo, 1 email, 1 pic, 1 flagActive, 1 mappingBranch</sql>
      <result element="Entries" rowName="">
         <element column="extCollCode" name="extCollCode" xsdType="string"/>
         <element column="extCollName" name="extCollName" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="areaCodePhone1" name="areaCodePhone1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="hpNo" name="hpNo" xsdType="string"/>
         <element column="email" name="email" xsdType="string"/>
         <element column="pic" name="pic" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="mappingBranch" name="mappingBranch" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstExtColl" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.company_code companyCode,&#xd;		A.ext_coll_code extCollCode,&#xd;		A.ext_coll_type extCollType,&#xd;		B.param_descrip extCollTypeName,&#xd;		A.ext_coll_name extCollName,&#xd;		A.address address,&#xd;		A.rt rt,&#xd;		A.rw rw,&#xd;		C.zipcode zipCode,&#xd;		A.village_code villageCode,&#xd;		C.village_name villageName,&#xd;		D.subdistrict_name subdistrictName,&#xd;		E.city_name cityName,&#xd;		F.province_name provinceName,&#xd;		A.area_code_phone1 areaCodePhone1,&#xd;		A.phone_no1 phoneNo1,&#xd;		A.area_code_phone2 areaCodePhone2,&#xd;		A.phone_no2 phoneNo2,&#xd;		A.hp_no hpNo,&#xd;		A.email email,&#xd;		A.npwp npwp,&#xd;		A.pic_name pic,&#xd;		A.account_no accountNo,&#xd;		A.account_name accountName,&#xd;		A.bank_code bankCode,&#xd;		G.bank_name bankName,&#xd;		A.flag_active flagActive,&#xd;		(SELECT COUNT (*) FROM MST_EXT_COLL_BRANCH H WHERE H.ext_coll_code = A.ext_coll_code) as mappingBranch,&#xd;		A.ID_TYPE idType,&#xd;		H.PARAM_DESCRIP idTypeName,&#xd;		A.ID_NO idNo,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updatedDateStr&#xd;	FROM MST_EXT_COLL A&#xd;	LEFT JOIN MST_GLOBAL_PARAM B&#xd;	ON A.ext_coll_type = B.param_code AND B.condition = 'BUSINESS_OWNERSHIP' AND B.flag_active = '1' &#xd;	LEFT JOIN MST_VILLAGE C&#xd;	ON A.village_code = C.village_code&#xd;	LEFT JOIN MST_SUBDISTRICT D&#xd;	ON C.subdistrict_code = D.subdistrict_code&#xd;	LEFT JOIN MST_CITY E&#xd;	ON C.city_code = E.city_code&#xd;	LEFT JOIN MST_PROVINCE F&#xd;	ON C.province_code = F.province_code&#xd;	LEFT JOIN MST_BANK G&#xd;	ON A.bank_code = G.bank_code&#xd;	LEFT JOIN MST_GLOBAL_PARAM H&#xd;	ON A.ID_TYPE = H.PARAM_CODE AND H.CONDITION = 'ID_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMstExtColl" useConfig="collectiondso1">
      <sql>SELECT companyCode, extCollCode, extCollType, extCollTypeName, extCollName, address, rt, rw, zipCode, villageCode, villageName, subdistrictName, cityName, provinceName, areaCodePhone1, phoneNo1, areaCodePhone2,&#xd;phoneNo2, hpNo, email, npwp, pic, accountNo, accountName, bankCode, bankName, flagActive, mappingBranch, idType, idTypeName, idNo, updatedDateStr FROM (&#xd;	SELECT &#xd;		A.company_code companyCode,&#xd;		A.ext_coll_code extCollCode,&#xd;		A.ext_coll_type extCollType,&#xd;		B.param_descrip extCollTypeName,&#xd;		A.ext_coll_name extCollName,&#xd;		A.address address,&#xd;		A.rt rt,&#xd;		A.rw rw,&#xd;		C.zipcode zipCode,&#xd;		A.village_code villageCode,&#xd;		C.village_name villageName,&#xd;		D.subdistrict_name subdistrictName,&#xd;		E.city_name cityName,&#xd;		F.province_name provinceName,&#xd;		A.area_code_phone1 areaCodePhone1,&#xd;		A.phone_no1 phoneNo1,&#xd;		A.area_code_phone2 areaCodePhone2,&#xd;		A.phone_no2 phoneNo2,&#xd;		A.hp_no hpNo,&#xd;		A.email email,&#xd;		A.npwp npwp,&#xd;		A.pic_name pic,&#xd;		A.account_no accountNo,&#xd;		A.account_name accountName,&#xd;		A.bank_code bankCode,&#xd;		G.bank_name bankName,&#xd;		A.flag_active flagActive,&#xd;		(SELECT COUNT (*) FROM MST_EXT_COLL_BRANCH H WHERE H.ext_coll_code = A.ext_coll_code) as mappingBranch,&#xd;		A.ID_TYPE idType,&#xd;		H.PARAM_DESCRIP idTypeName,&#xd;		A.ID_NO idNo,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updatedDateStr &#xd;	FROM MST_EXT_COLL A&#xd;	LEFT JOIN MST_GLOBAL_PARAM B&#xd;	ON A.ext_coll_type = B.param_code AND B.condition = 'BUSINESS_OWNERSHIP' AND B.flag_active = '1' &#xd;	LEFT JOIN MST_VILLAGE C&#xd;	ON A.village_code = C.village_code&#xd;	LEFT JOIN MST_SUBDISTRICT D&#xd;	ON C.subdistrict_code = D.subdistrict_code&#xd;	LEFT JOIN MST_CITY E&#xd;	ON C.city_code = E.city_code&#xd;	LEFT JOIN MST_PROVINCE F&#xd;	ON C.province_code = F.province_code&#xd;	LEFT JOIN MST_BANK G&#xd;	ON A.bank_code = G.bank_code&#xd;	LEFT JOIN MST_GLOBAL_PARAM H&#xd;	ON A.ID_TYPE = H.PARAM_CODE AND H.CONDITION = 'ID_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="extCollCode" name="extCollCode" xsdType="string"/>
         <element column="extCollName" name="extCollName" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="areaCodePhone1" name="areaCodePhone1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="areaCodePhone2" name="areaCodePhone2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="hpNo" name="hpNo" xsdType="string"/>
         <element column="email" name="email" xsdType="string"/>
         <element column="npwp" name="npwp" xsdType="string"/>
         <element column="pic" name="pic" xsdType="string"/>
         <element column="accountNo" name="accountNo" xsdType="string"/>
         <element column="accountName" name="accountName" xsdType="string"/>
         <element column="bankCode" name="bankCode" xsdType="string"/>
         <element column="bankName" name="bankName" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="mappingBranch" name="mappingBranch" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="extCollType" name="extCollType" xsdType="string"/>
         <element column="extCollTypeName" name="extCollTypeName" xsdType="string"/>
         <element column="idType" name="idType" xsdType="string"/>
         <element column="idNo" name="idNo" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
         <element column="idTypeName" name="idTypeName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertMstExtCollBranchLoop" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_EXT_COLL_BRANCH&#xd;(&#xd;	COMPANY_CODE,&#xd;	EXT_COLL_CODE,&#xd;	BRANCH_CODE,&#xd;	FLAG_ACTIVE,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;	:extCollCode,&#xd;	:branchCode,&#xd;	:flagActive,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="deleteMstExtCollBranch" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DELETE FROM MST_EXT_COLL_BRANCH&#xd;WHERE COMPANY_CODE = :companyCode AND EXT_COLL_CODE = :extCollCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
   </query>
   <query id="getMstExtCollBranch" useConfig="collectiondso1">
      <sql>SELECT &#xd;	BRANCH_CODE branchCode,&#xd;	FLAG_ACTIVE flagActive&#xd;FROM MST_EXT_COLL_BRANCH&#xd;WHERE COMPANY_CODE = :companyCode AND EXT_COLL_CODE = :extCollCode</sql>
      <result element="Entries" rowName="contents">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
   </query>
   <query id="getDataMstCollDay" useConfig="collectiondso1">
      <sql>SELECT companyCode, productCode, productName, collDayCode, collDayName, flagActive, createdDate, createdBy, updatedDateStr, updateBy, collDay FROM (&#xd;	SELECT &#xd;		H.COMPANY_CODE companyCode, &#xd;		H.PRODUCT_CODE productCode, &#xd;		P.PARAM_DESCRIP productName, &#xd;		H.COLL_DAY_CODE collDayCode, &#xd;		H.DESCRIPTION collDayName, &#xd;		H.FLAG_ACTIVE flagActive, &#xd;		H.CREATED_DATE createdDate, &#xd;		H.CREATED_BY createdBy, &#xd;		CONVERT(varchar, H.UPDATE_DATE, 121) as updatedDateStr, &#xd;		H.UPDATE_BY updateBy,&#xd;		(SELECT STUFF((SELECT ', '+ &#xd;			CASE&#xd;				WHEN D.DAY_CODE = '1' THEN 'Minggu'&#xd;				WHEN D.DAY_CODE = '2' THEN 'Senin'&#xd;				WHEN D.DAY_CODE = '3' THEN 'Selasa'&#xd;				WHEN D.DAY_CODE = '4' THEN 'Rabu'&#xd;				WHEN D.DAY_CODE = '5' THEN 'Kamis'&#xd;				WHEN D.DAY_CODE = '6' THEN 'Jumat'&#xd;				WHEN D.DAY_CODE = '7' THEN 'Sabtu'&#xd;			END&#xd;		FROM MST_COLL_DAY_DTL D  WHERE D.FLAG_ACTIVE = '1' AND D.COLL_DAY_CODE = H.COLL_DAY_CODE AND D.COMPANY_CODE = H.COMPANY_CODE AND D.PRODUCT_CODE = H.PRODUCT_CODE FOR XML PATH('')),1,2,'')) AS collDay&#xd;	FROM MST_COLL_DAY_HDR H &#xd;	LEFT JOIN MST_GLOBAL_PARAM P ON (P.CONDITION = 'PRODUCT_CODE' AND P.PARAM_CODE = H.PRODUCT_CODE AND P.COMPANY_CODE = H.COMPANY_CODE AND P.FLAG_ACTIVE = '1')&#xd;) AS TBL WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collDayCode" name="collDayCode" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
         <element column="collDay" name="collDay" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="createdBy" name="createdBy" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
         <element column="updateBy" name="updateBy" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getCountMstCollDay" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) AS total FROM (&#xd;	SELECT &#xd;		H.COMPANY_CODE companyCode, &#xd;		H.PRODUCT_CODE productCode, &#xd;		P.PARAM_DESCRIP productName, &#xd;		H.COLL_DAY_CODE collDayCode, &#xd;		H.DESCRIPTION collDayName, &#xd;		H.FLAG_ACTIVE flagActive, &#xd;		H.CREATED_DATE createdDate, &#xd;		H.CREATED_BY createdBy, &#xd;		CONVERT(varchar, H.UPDATE_DATE, 121) as updatedDateStr, &#xd;		H.UPDATE_BY updateBy, &#xd;		(SELECT STUFF((SELECT ', '+ &#xd;			CASE&#xd;				WHEN D.DAY_CODE = '1' THEN 'Minggu'&#xd;				WHEN D.DAY_CODE = '2' THEN 'Senin'&#xd;				WHEN D.DAY_CODE = '3' THEN 'Selasa'&#xd;				WHEN D.DAY_CODE = '4' THEN 'Rabu'&#xd;				WHEN D.DAY_CODE = '5' THEN 'Kamis'&#xd;				WHEN D.DAY_CODE = '6' THEN 'Jumat'&#xd;				WHEN D.DAY_CODE = '7' THEN 'Sabtu'&#xd;			END&#xd;		FROM MST_COLL_DAY_DTL D  WHERE D.FLAG_ACTIVE = '1' AND D.COLL_DAY_CODE = H.COLL_DAY_CODE AND D.COMPANY_CODE = H.COMPANY_CODE AND D.PRODUCT_CODE = H.PRODUCT_CODE FOR XML PATH('')),1,2,'')) AS collDay&#xd;	FROM MST_COLL_DAY_HDR H LEFT JOIN MST_GLOBAL_PARAM P ON (P.CONDITION = 'PRODUCT_CODE' AND P.PARAM_CODE = H.PRODUCT_CODE AND P.COMPANY_CODE = H.COMPANY_CODE AND P.FLAG_ACTIVE = '1')&#xd;) AS TBL WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getColumnMstCollDay" useConfig="collectiondso1">
      <sql>SELECT 1 as productName, 1 collDayCode, 1 collDayName, 1 collDay, 1 flagActive</sql>
      <result element="Entries" rowName="">
         <element column="collDayCode" name="collDayCode" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
         <element column="collDay" name="collDay" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
      </result>
   </query>
   <query id="getMstCollDayDtl" useConfig="collectiondso1">
      <sql>SELECT COMPANY_CODE companyCode, PRODUCT_CODE productCode, COLL_DAY_CODE collDayCode, DAY_CODE dayCode, FLAG_ACTIVE flagActive FROM MST_COLL_DAY_DTL WHERE COLL_DAY_CODE = :collDayCode AND COMPANY_CODE = :companyCode AND PRODUCT_CODE = :productCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="collDayCode" name="collDayCode" xsdType="string"/>
         <element column="dayCode" name="dayCode" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
      </result>
      <param name="collDayCode" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
   </query>
   <query id="insertMstRating" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_RATING &#xd;(&#xd;    COMPANY_CODE, &#xd;    PRODUCT_CODE, &#xd;    PAYMENT_FREQ, &#xd;    RATING_CODE, &#xd;    CRITERIA_CODE, &#xd;    VALUE_FROM, &#xd;    VALUE_TO, &#xd;    FLAG_ACTIVE, &#xd;    CREATED_DATE, &#xd;    CREATED_BY&#xd;) &#xd;VALUES &#xd;(&#xd;    :companyCode, &#xd;    :productCode, &#xd;    :paymentFreq, &#xd;    :ratingCode, &#xd;    :criteriaCode, &#xd;    :valueFrom, &#xd;    :valueTo, &#xd;    :flagActive, &#xd;    GETDATE(), &#xd;    :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="paymentFreq" sqlType="STRING"/>
      <param name="ratingCode" sqlType="STRING"/>
      <param name="valueFrom" sqlType="STRING"/>
      <param name="valueTo" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="criteriaCode" sqlType="STRING"/>
   </query>
   <query id="updateMstRating" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE MST_RATING SET &#xd;    VALUE_FROM=:valueFrom, &#xd;    VALUE_TO=:valueTo, &#xd;    FLAG_ACTIVE=:flagActive, &#xd;    UPDATE_DATE=GETDATE(), &#xd;    UPDATE_BY=:updateBy &#xd;WHERE &#xd;    COMPANY_CODE=:companyCode AND &#xd;    PRODUCT_CODE=:productCode AND &#xd;    PAYMENT_FREQ=:paymentFreq AND &#xd;    RATING_CODE=:ratingCode AND &#xd;    CRITERIA_CODE=:criteriaCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="valueFrom" sqlType="STRING"/>
      <param name="valueTo" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="paymentFreq" sqlType="STRING"/>
      <param name="ratingCode" sqlType="STRING"/>
      <param name="criteriaCode" sqlType="STRING"/>
   </query>
   <query id="getDataMstRating" useConfig="collectiondso1">
      <sql>SELECT companyCode, productCode, productName, paymentFreq, paymentFreqName, ratingCode, ratingName, bobotRating, criteriaCode, criteriaName, valueFrom, valueTo, flagActive, createdDate, createdBy, updateDate, updateBy, updatedDateStr FROM (&#xd;SELECT R.COMPANY_CODE companyCode, R.PRODUCT_CODE productCode, P.PARAM_DESCRIP productName, R.PAYMENT_FREQ paymentFreq, PF.PARAM_DESCRIP paymentFreqName, R.RATING_CODE ratingCode, RC.PARAM_DESCRIP ratingName, RC.VALUES_PARAM bobotRating, R.CRITERIA_CODE criteriaCode, RCC.PARAM_DESCRIP criteriaName, R.VALUE_FROM valueFrom, R.VALUE_TO valueTo, R.FLAG_ACTIVE flagActive, R.CREATED_DATE createdDate, R.CREATED_BY createdBy, CONVERT(varchar, R.UPDATE_DATE, 121) as  updateDate, R.UPDATE_BY updateBy, CONVERT(varchar, R.UPDATE_DATE, 121) as updatedDateStr&#xd;FROM MST_RATING R&#xd;LEFT JOIN MST_GLOBAL_PARAM P ON (P.CONDITION = 'PRODUCT_CODE' AND P.PARAM_CODE = R.PRODUCT_CODE AND P.COMPANY_CODE = R.COMPANY_CODE AND P.FLAG_ACTIVE = '1')&#xd;LEFT JOIN MST_GLOBAL_PARAM PF ON (PF.CONDITION = 'PAYMENT_FREQ' AND PF.PARAM_CODE = R.PAYMENT_FREQ AND PF.COMPANY_CODE = R.COMPANY_CODE AND PF.FLAG_ACTIVE = '1')&#xd;LEFT JOIN MST_GLOBAL_PARAM RC ON (RC.CONDITION = 'RATING_CODE' AND RC.PARAM_CODE = R.RATING_CODE AND RC.COMPANY_CODE = R.COMPANY_CODE AND RC.FLAG_ACTIVE = '1')&#xd;LEFT JOIN MST_GLOBAL_PARAM RCC ON (RCC.CONDITION IN ('RATING_CRITERIA_CODE1','RATING_CRITERIA_CODE2') AND RCC.PARAM_CODE = R.CRITERIA_CODE AND RCC.COMPANY_CODE = R.COMPANY_CODE AND RCC.FLAG_ACTIVE = '1')) AS TBL WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="paymentFreq" name="paymentFreq" xsdType="string"/>
         <element column="paymentFreqName" name="paymentFreqName" xsdType="string"/>
         <element column="ratingCode" name="ratingCode" xsdType="string"/>
         <element column="ratingName" name="ratingName" xsdType="string"/>
         <element column="bobotRating" name="bobotRating" xsdType="string"/>
         <element column="valueFrom" name="valueFrom" xsdType="string"/>
         <element column="valueTo" name="valueTo" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="createdBy" name="createdBy" xsdType="string"/>
         <element column="updateDate" name="updateDate" xsdType="string"/>
         <element column="updateBy" name="updateBy" xsdType="string"/>
         <element column="criteriaCode" name="criteriaCode" xsdType="string"/>
         <element column="criteriaName" name="criteriaName" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getCountMstRating" useConfig="collectiondso1">
      <sql>SELECT count(*) as total FROM (&#xd;SELECT R.COMPANY_CODE companyCode, R.PRODUCT_CODE productCode, P.PARAM_DESCRIP productName, R.PAYMENT_FREQ paymentFreq, PF.PARAM_DESCRIP paymentFreqName, R.RATING_CODE ratingCode, RC.PARAM_DESCRIP ratingName, RC.VALUES_PARAM bobotRating, R.CRITERIA_CODE criteriaCode, RCC.PARAM_DESCRIP criteriaName, R.VALUE_FROM valueFrom, R.VALUE_TO valueTo, R.FLAG_ACTIVE flagActive, R.CREATED_DATE createdDate, R.CREATED_BY createdBy, CONVERT(varchar, R.UPDATE_DATE, 121) as  updateDate, R.UPDATE_BY updateBy, CONVERT(varchar, R.UPDATE_DATE, 121) as updatedDateStr&#xd;FROM MST_RATING R&#xd;LEFT JOIN MST_GLOBAL_PARAM P ON (P.CONDITION = 'PRODUCT_CODE' AND P.PARAM_CODE = R.PRODUCT_CODE AND P.COMPANY_CODE = R.COMPANY_CODE AND P.FLAG_ACTIVE = '1')&#xd;LEFT JOIN MST_GLOBAL_PARAM PF ON (PF.CONDITION = 'PAYMENT_FREQ' AND PF.PARAM_CODE = R.PAYMENT_FREQ AND PF.COMPANY_CODE = R.COMPANY_CODE AND PF.FLAG_ACTIVE = '1')&#xd;LEFT JOIN MST_GLOBAL_PARAM RC ON (RC.CONDITION = 'RATING_CODE' AND RC.PARAM_CODE = R.RATING_CODE AND RC.COMPANY_CODE = R.COMPANY_CODE AND RC.FLAG_ACTIVE = '1')&#xd;LEFT JOIN MST_GLOBAL_PARAM RCC ON (RCC.CONDITION IN ('RATING_CRITERIA_CODE1','RATING_CRITERIA_CODE2') AND RCC.PARAM_CODE = R.CRITERIA_CODE AND RCC.COMPANY_CODE = R.COMPANY_CODE AND RCC.FLAG_ACTIVE = '1')) AS TBL WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getColumnMstRating" useConfig="collectiondso1">
      <sql>SELECT 1 as productName, 1 paymentFreqName, 1 ratingName, 1 bobotRating, 1 criteriaName, 1 valueFrom, 1 valueTo</sql>
      <result element="Entries" rowName="">
         <element column="productName" name="productName" xsdType="string"/>
         <element column="paymentFreqName" name="paymentFreqName" xsdType="string"/>
         <element column="ratingName" name="ratingName" xsdType="string"/>
         <element column="bobotRating" name="bobotRating" xsdType="string"/>
         <element column="valueFrom" name="valueFrom" xsdType="string"/>
         <element column="valueTo" name="valueTo" xsdType="string"/>
         <element column="criteriaName" name="criteriaName" xsdType="string"/>
      </result>
   </query>
   <query id="lovGetAtasanKolektorInternal" useConfig="collectiondso1">
      <sql>SELECT A.NIK nik, &#xd;A.FULLNAME fullname, &#xd;A.POSITION_CODE positionCode, &#xd;B.POSITION_NAME positionName, &#xd;A.BRANCH_CODE branchCode, &#xd;C.BRANCH_NAME branchName,&#xd;A.JOIN_DATE joinDate &#xd;FROM MST_EMPLOYEE A&#xd;JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;WHERE A.BRANCH_CODE = :branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="fullname" name="fullname" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
      </result>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="lovGetColectorKolektorInternal" useConfig="collectiondso1">
      <sql>SELECT A.NIK nik, &#xd;A.FULLNAME fullname, &#xd;A.POSITION_CODE positionCode, &#xd;B.POSITION_NAME positionName, &#xd;A.BRANCH_CODE branchCode, &#xd;C.BRANCH_NAME branchName,&#xd;A.JOIN_DATE joinDate &#xd;FROM MST_EMPLOYEE A&#xd;JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;WHERE A.BRANCH_CODE = :branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="fullname" name="fullname" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
      </result>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="insertMstCollector" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_COLLECTOR&#xd;(&#xd;	COMPANY_CODE,&#xd;    BRANCH_CODE,&#xd;    PRODUCT_CODE,&#xd;	BUCKET_TYPE,&#xd;    COLL_CODE,&#xd;    COLL_HEAD_CODE,&#xd;	BUCKET_CODE,&#xd;	JOIN_DATE,&#xd;	FLAG_ACTIVE,&#xd;    CREATED_DATE,&#xd;    CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;    :branchCode,&#xd;    :productCode,&#xd;	:bucketType,&#xd;	:collCode,&#xd;	:collHeadCode,&#xd;	:bucketCode,&#xd;	:joinDate,&#xd;    :flagActive,&#xd;    GETDATE(),&#xd;    :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="collHeadCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="joinDate" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
   </query>
   <query id="updateMstCollector" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @BUCKET_CODE VARCHAR(30) = :bucketCode&#xd;DECLARE @COLL_HEAD_CODE VARCHAR(30) = :collHeadCode&#xd;&#xd;UPDATE MST_COLLECTOR SET&#xd;	FLAG_ACTIVE = :flagActive,&#xd;	BUCKET_CODE = @BUCKET_CODE,&#xd;	COLL_HEAD_CODE = @COLL_HEAD_CODE,&#xd;UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = :updateBy&#xd;WHERE&#xd;	COMPANY_CODE = :companyCode &#xd;	AND COLL_CODE = :collCode &#xd;	AND BUCKET_CODE = @BUCKET_CODE &#xd;	AND BUCKET_TYPE = :bucketType &#xd;	AND COLL_HEAD_CODE = @COLL_HEAD_CODE&#xd;	AND PRODUCT_CODE = :productCode&#xd;	AND BRANCH_CODE = :branchCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="collHeadCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="findOneMstCollectorByCollHeadCode" useConfig="collectiondso1">
      <sql>SELECT A.COLL_CODE collCode, &#xd;B.POSITION_CODE collPositionCode,&#xd;PS.POSITION_NAME collPositionName,&#xd;A.BUCKET_CODE bucketCode,&#xd;A.BUCKET_TYPE bucketType,&#xd;GP.PARAM_DESCRIP bucketTypeName,&#xd;A.FLAG_ACTIVE flagActive,&#xd;B.JOIN_DATE joinDate,&#xd;B.FULLNAME fullnameColl&#xd;FROM MST_COLLECTOR A&#xd;JOIN MST_EMPLOYEE B ON A.COLL_CODE=B.NIK&#xd;LEFT JOIN MST_GLOBAL_PARAM GP&#xd;ON A.COMPANY_CODE = GP.COMPANY_CODE AND A.BUCKET_TYPE = GP.PARAM_CODE AND GP.CONDITION = 'BUCKET_TYPE' AND GP.FLAG_ACTIVE = '1'&#xd;LEFT JOIN MST_POSITION PS&#xd;ON B.POSITION_CODE = PS.POSITION_CODE&#xd;WHERE A.COLL_HEAD_CODE = :collHeadCode</sql>
      <result element="Entries" rowName="contents">
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="bucketTypeName" name="bucketTypeName" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
      </result>
      <param name="collHeadCode" sqlType="STRING"/>
   </query>
   <query id="getColumnMstCollector" useConfig="collectiondso1">
      <sql>SELECT 1 as branchName, 1 collCode, 1 collHeadPositionName, 1 joinDate, 1 fullnameColl, 1 collHeadCode, 1 bucketTypeName, 1 bucketCode, 1 flagActive, 1 productName, 1 collPositionName, 1 fullnameCollHead</sql>
      <result element="Entries" rowName="">
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="bucketTypeName" name="bucketTypeName" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="collHeadPositionName" name="collHeadPositionName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
         <element column="fullnameCollHead" name="fullnameCollHead" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstCollector" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode, &#xd;		B.BRANCH_NAME branchName, &#xd;		A.PRODUCT_CODE productCode, &#xd;		C.PARAM_DESCRIP productName, &#xd;		A.COLL_CODE collCode,&#xd;		D.FULLNAME fullnameColl, &#xd;		D.POSITION_CODE collPositionCode, A.COLL_HEAD_CODE collHeadCode, &#xd;		E.FULLNAME fullnameCollHead,&#xd;		E.POSITION_CODE collHeadPositionCode, A.BUCKET_CODE bucketCode, &#xd;		A.JOIN_DATE joinDate, &#xd;		A.FLAG_ACTIVE flagActive,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.CREATED_BY createdBy,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updateDateStr,&#xd;		A.UPDATE_BY updateBy,&#xd;		F.POSITION_NAME collPositionName,&#xd;		G.POSITION_NAME collHeadPositionName,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		H.PARAM_DESCRIP bucketTypeName&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_BRANCH B ON A.BRANCH_CODE=B.BRANCH_CODE&#xd;	JOIN MST_GLOBAL_PARAM C ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	JOIN MST_EMPLOYEE D ON A.COLL_CODE = D.NIK&#xd;	JOIN MST_EMPLOYEE E ON A.COLL_HEAD_CODE = E.NIK&#xd;	JOIN MST_POSITION F ON D.POSITION_CODE = F.POSITION_CODE&#xd;	JOIN MST_POSITION G ON E.POSITION_CODE = G.POSITION_CODE&#xd;	JOIN MST_GLOBAL_PARAM H ON A.BUCKET_TYPE = H.PARAM_CODE AND H.CONDITION = 'BUCKET_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMstCollector" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName,&#xd;productCode, productName, collCode, fullnameColl, collPositionCode, collPositionName, collHeadCode, fullnameCollHead, collHeadPositionCode, collHeadPositionName, bucketCode, joinDate, flagActive, createdDate, createdBy, updateDateStr, updateBy, bucketType, bucketTypeName FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode, &#xd;		B.BRANCH_NAME branchName, &#xd;		A.PRODUCT_CODE productCode, &#xd;		C.PARAM_DESCRIP productName, &#xd;		A.COLL_CODE collCode,&#xd;		D.FULLNAME fullnameColl, &#xd;		D.POSITION_CODE collPositionCode, A.COLL_HEAD_CODE collHeadCode, &#xd;		E.FULLNAME fullnameCollHead,&#xd;		E.POSITION_CODE collHeadPositionCode, A.BUCKET_CODE bucketCode, &#xd;		A.JOIN_DATE joinDate, &#xd;		A.FLAG_ACTIVE flagActive,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.CREATED_BY createdBy,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updateDateStr,&#xd;		A.UPDATE_BY updateBy,&#xd;		F.POSITION_NAME collPositionName,&#xd;		G.POSITION_NAME collHeadPositionName,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		H.PARAM_DESCRIP bucketTypeName&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_BRANCH B ON A.BRANCH_CODE=B.BRANCH_CODE&#xd;	JOIN MST_GLOBAL_PARAM C ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	JOIN MST_EMPLOYEE D ON A.COLL_CODE = D.NIK&#xd;	JOIN MST_EMPLOYEE E ON A.COLL_HEAD_CODE = E.NIK&#xd;	JOIN MST_POSITION F ON D.POSITION_CODE = F.POSITION_CODE&#xd;	JOIN MST_POSITION G ON E.POSITION_CODE = G.POSITION_CODE&#xd;	JOIN MST_GLOBAL_PARAM H ON A.BUCKET_TYPE = H.PARAM_CODE AND H.CONDITION = 'BUCKET_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;) Z WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="fullnameCollHead" name="fullnameCollHead" xsdType="string"/>
         <element column="collHeadPositionCode" name="collHeadPositionCode" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="createdBy" name="createdBy" xsdType="string"/>
         <element column="updateDateStr" name="updateDateStr" xsdType="string"/>
         <element column="updateBy" name="updateBy" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
         <element column="collHeadPositionName" name="collHeadPositionName" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="bucketTypeName" name="bucketTypeName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovGetAtasan" useConfig="collectiondso1">
      <sql>SELECT 1 AS nik, 1 fullname, 1 positionCode, 1 positionName, 1 branchCode, 1 branchName, 1 joinDate</sql>
      <result element="Entries" rowName="">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="fullname" name="fullname" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovGetAtasan" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) total FROM (&#xd;	SELECT A.NIK nik, &#xd;		A.FULLNAME fullname, &#xd;		A.POSITION_CODE positionCode, &#xd;		B.POSITION_NAME positionName, &#xd;		A.BRANCH_CODE branchCode, &#xd;		C.BRANCH_NAME branchName,&#xd;		A.JOIN_DATE joinDate&#xd;	FROM MST_EMPLOYEE A&#xd;	JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;	JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;	WHERE A.NIK NOT IN (SELECT COLL_HEAD_CODE FROM MST_COLLECTOR WHERE BRANCH_CODE = A.BRANCH_CODE AND PRODUCT_CODE = C.PRODUCT_CODE AND FLAG_ACTIVE = 1)&#xd;	AND A.STATUS= 1&#xd;) Z WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovGetAtasan" useConfig="collectiondso1">
      <sql>SELECT nik, fullname, positionCode,&#xd;positionName, branchCode, branchName, joinDate FROM (&#xd;	SELECT A.NIK nik, &#xd;		A.FULLNAME fullname, &#xd;		A.POSITION_CODE positionCode, &#xd;		B.POSITION_NAME positionName, &#xd;		A.BRANCH_CODE branchCode, &#xd;		C.BRANCH_NAME branchName,&#xd;		A.JOIN_DATE joinDate&#xd;	FROM MST_EMPLOYEE A&#xd;	JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;	JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;	WHERE A.NIK NOT IN (SELECT COLL_HEAD_CODE FROM MST_COLLECTOR WHERE BRANCH_CODE = A.BRANCH_CODE AND PRODUCT_CODE = C.PRODUCT_CODE AND FLAG_ACTIVE = 1)&#xd;	AND A.STATUS= 1&#xd;) Z WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="fullname" name="fullname" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovGetKolektor" useConfig="collectiondso1">
      <sql>select 1 as nik, 1 fullname, 1 positionCode, 1 positionName, 1 branchCode, 1 branchName, 1 joinDate</sql>
      <result element="Entries" rowName="">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="fullname" name="fullname" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovGetKolektor" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT A.NIK nik, &#xd;A.FULLNAME fullname, &#xd;A.POSITION_CODE positionCode, &#xd;B.POSITION_NAME positionName, &#xd;A.BRANCH_CODE branchCode, &#xd;C.BRANCH_NAME branchName,&#xd;A.JOIN_DATE joinDate &#xd;FROM MST_EMPLOYEE A&#xd;JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;WHERE A.STATUS = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovGetKolektor" useConfig="collectiondso1">
      <sql>SELECT nik, fullname, positionCode,&#xd;positionName, branchCode, branchName, joinDate FROM (&#xd;	SELECT A.NIK nik, &#xd;A.FULLNAME fullname, &#xd;A.POSITION_CODE positionCode, &#xd;B.POSITION_NAME positionName, &#xd;A.BRANCH_CODE branchCode, &#xd;C.BRANCH_NAME branchName,&#xd;A.JOIN_DATE joinDate &#xd;FROM MST_EMPLOYEE A&#xd;JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;WHERE A.STATUS = '1'&#xd;) Z WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="fullname" name="fullname" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovGetCodeHead" useConfig="collectiondso1">
      <sql>SELECT TOP 1 A.NIK nik, &#xd;A.POSITION_CODE positionCode, &#xd;B.POSITION_NAME positionName,&#xd;A.BRANCH_CODE branchCode&#xd;FROM MST_EMPLOYEE A&#xd;JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE</sql>
      <result element="Entries" rowName="">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovGetCodeHead" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT A.NIK nik, &#xd;A.POSITION_CODE positionCode, &#xd;B.POSITION_NAME positionName,&#xd;A.BRANCH_CODE branchCode&#xd;FROM MST_EMPLOYEE A&#xd;JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovGetCodeHead" useConfig="collectiondso1">
      <sql>SELECT nik, positionCode, positionName, branchCode FROM (&#xd;SELECT A.NIK nik, &#xd;A.POSITION_CODE positionCode, &#xd;B.POSITION_NAME positionName,&#xd;A.BRANCH_CODE branchCode&#xd;FROM MST_EMPLOYEE A&#xd;JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;)t where :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnMstCollArea" useConfig="collectiondso1">
      <sql>select 1 as branchName, 1 productName, 1 bucketCode, 1 effectiveDate</sql>
      <result element="Entries" rowName="">
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstCollArea" useConfig="collectiondso1">
      <sql>select count(*) total from (&#xd;	SELECT &#xd;		A.company_code companyCode, &#xd;		A.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		A.product_code productCode,&#xd;		gb.param_descrip productName,&#xd;		A.bucket_code bucketCode, &#xd;		bc.description bucketName,&#xd;		CONVERT(datetime,A.effective_date) as effectiveDate,&#xd;		CONVERT(varchar, A.update_date, 121) as updatedDateStr &#xd;	FROM (&#xd;		select hdr.*&#xd;			FROM mst_coll_area_hdr hdr&#xd;			WHERE CONVERT(datetime, hdr.effective_date) &gt;= GETDATE()&#xd;&#xd;		UNION ALL&#xd;&#xd;		SELECT COMPANY_CODE, BRANCH_CODE, PRODUCT_CODE, BUCKET_CODE, EFFECTIVE_DATE, CREATED_DATE, CREATED_BY, UPDATE_DATE, UPDATE_BY&#xd;			FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [company_code],&#xd;	  			[branch_code],&#xd;	  			[product_code],&#xd;	  			[bucket_code]&#xd;	  			ORDER BY effective_date desc) RN&#xd;			FROM [dbo].[mst_coll_area_hdr] WHERE effective_date &lt;= GETDATE()&#xd;			) X&#xd;			WHERE RN = 1&#xd;	) A&#xd;	join mst_branch br on (A.branch_code = br.branch_code and A.company_code = br.company_code)&#xd;	join mst_global_param gb on (A.product_code = gb.param_code and A.company_code = gb.company_code and gb.condition = 'PRODUCT_CODE')&#xd;	join mst_bucket bc on (A.bucket_code = bc.bucket_code) and bc.bucket_type = 'FCOL' and a.product_code = bc.product_code&#xd;) t where :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMstCollArea" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName, productCode, productName, bucketCode, bucketName, effectiveDate, updatedDateStr FROM (&#xd;	SELECT &#xd;		A.company_code companyCode, &#xd;		A.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		A.product_code productCode,&#xd;		gb.param_descrip productName,&#xd;		A.bucket_code bucketCode, &#xd;		bc.description bucketName,&#xd;		CONVERT(datetime,A.effective_date) as effectiveDate,&#xd;		CONVERT(varchar, A.update_date, 121) as updatedDateStr &#xd;	FROM (&#xd;		select hdr.*&#xd;			FROM mst_coll_area_hdr hdr&#xd;			WHERE CONVERT(datetime, hdr.effective_date) &gt;= GETDATE()&#xd;&#xd;		UNION ALL&#xd;&#xd;		SELECT COMPANY_CODE, BRANCH_CODE, PRODUCT_CODE, BUCKET_CODE, EFFECTIVE_DATE, CREATED_DATE, CREATED_BY, UPDATE_DATE, UPDATE_BY&#xd;			FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [company_code],&#xd;	  			[branch_code],&#xd;	  			[product_code],&#xd;	  			[bucket_code]&#xd;	  			ORDER BY effective_date desc) RN&#xd;			FROM [dbo].[mst_coll_area_hdr] WHERE effective_date &lt;= GETDATE()&#xd;			) X&#xd;			WHERE RN = 1&#xd;	) A&#xd;	join mst_branch br on (A.branch_code = br.branch_code and A.company_code = br.company_code)&#xd;	join mst_global_param gb on (A.product_code = gb.param_code and A.company_code = gb.company_code and gb.condition = 'PRODUCT_CODE')&#xd;	join mst_bucket bc on (A.bucket_code = bc.bucket_code) and bc.bucket_type = 'FCOL' and a.product_code = bc.product_code&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertMstCollAreaHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_COLL_AREA_HDR&#xd;(&#xd;	COMPANY_CODE,&#xd;	BRANCH_CODE,&#xd;	PRODUCT_CODE,&#xd;	BUCKET_CODE,&#xd;	EFFECTIVE_DATE,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;	:branchCode,&#xd;	:productCode,&#xd;	:bucketCode,&#xd;	:effectiveDate,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="insertMstCollAreaDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_COLL_AREA_DTL&#xd;(&#xd;	COMPANY_CODE,&#xd;	BRANCH_CODE,&#xd;	PRODUCT_CODE,&#xd;	BUCKET_CODE,&#xd;	EFFECTIVE_DATE,&#xd;	VILLAGE_CODE,&#xd;	QTY_AGGR_NO,&#xd;	COLL_CODE,&#xd;	COLL_DAY_CODE,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;	:branchCode,&#xd;	:productCode,&#xd;	:bucketCode,&#xd;	:effectiveDate,&#xd;	:villageCode,&#xd;	:qtyAggrNo,&#xd;	:collCode,&#xd;	:collDayCode,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
      <param name="villageCode" sqlType="STRING"/>
      <param name="qtyAggrNo" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="collDayCode" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="deleteMstCollAreaDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DELETE FROM MST_COLL_AREA_DTL &#xd;WHERE &#xd;	COMPANY_CODE = :companyCode AND&#xd;	BRANCH_CODE = :branchCode AND&#xd;	PRODUCT_CODE = :productCode AND&#xd;	BUCKET_CODE = :bucketCode AND&#xd;	EFFECTIVE_DATE = :effectiveDate</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
   </query>
   <query id="getColumMstCollAreaDtl" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode, 1 branchCode, 1 branchName, 1 productCode, 1 productName, 1 bucketCode, 1 bucketName, 1 effectiveDate, 1 villageCode, 1 villageName, 1 subdistrictName, 1 totalAggr, 1 qtyAggrNo, 1 collCode, 1 fullnameColl, 1 collCodeDay, 1 collDayName</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="totalAggr" name="totalAggr" xsdType="string"/>
         <element column="qtyAggrNo" name="qtyAggrNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collCodeDay" name="collCodeDay" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstCollAreaDtl" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.PRODUCT_CODE productCode,&#xd;		C.PARAM_DESCRIP productName,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		D.DESCRIPTION bucketName,&#xd;		A.EFFECTIVE_DATE effectiveDate,&#xd;		A.VILLAGE_CODE villageCode,&#xd;		E.VILLAGE_NAME villageName,&#xd;		F.SUBDISTRICT_NAME subdistrictName,&#xd;		ISNULL(I.TOT_AGGR, 0) totalAggr,&#xd;		ISNULL(A.QTY_AGGR_NO, 0) qtyAggrNo,&#xd;		A.COLL_CODE collCode,&#xd;		G.FULLNAME fullnameColl,&#xd;		A.COLL_DAY_CODE collCodeDay,&#xd;		H.DESCRIPTION collDayName&#xd;	FROM MST_COLL_AREA_DTL A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.PRODUCT_CODE = C.PARAM_CODE AND C.CONDITION = 'PRODUCT_CODE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BUCKET D&#xd;	ON A.BUCKET_CODE = D.BUCKET_CODE AND BUCKET_TYPE = 'FCOL' AND A.PRODUCT_CODE = D.PRODUCT_CODE&#xd;	LEFT JOIN MST_VILLAGE E&#xd;	ON A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT F&#xd;	ON E.SUBDISTRICT_CODE = F.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_EMPLOYEE G&#xd;	ON A.COLL_CODE = G.NIK&#xd;	LEFT JOIN MST_COLL_DAY_HDR H&#xd;	ON A.COLL_DAY_CODE = H.COLL_DAY_CODE AND A.PRODUCT_CODE = H.PRODUCT_CODE&#xd;	LEFT JOIN MST_TOTAL_AGGR I&#xd;	ON A.COMPANY_CODE = I.COMPANY_CODE AND A.BRANCH_CODE = I.BRANCH_CODE AND A.VILLAGE_CODE = I.VILLAGE_CODE&#xd;) t where :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMstCollAreaDtl" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName, productCode, productName, bucketCode, bucketName, effectiveDate, villageCode, villageName, subdistrictName, totalAggr, qtyAggrNo,&#xd;collCode, fullnameColl, collCodeDay, collDayName FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.PRODUCT_CODE productCode,&#xd;		C.PARAM_DESCRIP productName,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		D.DESCRIPTION bucketName,&#xd;		A.EFFECTIVE_DATE effectiveDate,&#xd;		A.VILLAGE_CODE villageCode,&#xd;		E.VILLAGE_NAME villageName,&#xd;		F.SUBDISTRICT_NAME subdistrictName,&#xd;		ISNULL(I.TOT_AGGR, 0) totalAggr,&#xd;		ISNULL(A.QTY_AGGR_NO, 0) qtyAggrNo,&#xd;		A.COLL_CODE collCode,&#xd;		G.FULLNAME fullnameColl,&#xd;		A.COLL_DAY_CODE collCodeDay,&#xd;		H.DESCRIPTION collDayName&#xd;	FROM MST_COLL_AREA_DTL A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.PRODUCT_CODE = C.PARAM_CODE AND C.CONDITION = 'PRODUCT_CODE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BUCKET D&#xd;	ON A.BUCKET_CODE = D.BUCKET_CODE AND BUCKET_TYPE = 'FCOL' AND A.PRODUCT_CODE = D.PRODUCT_CODE&#xd;	LEFT JOIN MST_VILLAGE E&#xd;	ON A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT F&#xd;	ON E.SUBDISTRICT_CODE = F.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_EMPLOYEE G&#xd;	ON A.COLL_CODE = G.NIK&#xd;	LEFT JOIN MST_COLL_DAY_HDR H&#xd;	ON A.COLL_DAY_CODE = H.COLL_DAY_CODE AND A.PRODUCT_CODE = H.PRODUCT_CODE&#xd;	LEFT JOIN MST_TOTAL_AGGR I&#xd;	ON A.COMPANY_CODE = I.COMPANY_CODE AND A.BRANCH_CODE = I.BRANCH_CODE AND A.VILLAGE_CODE = I.VILLAGE_CODE&#xd;) a where :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="totalAggr" name="totalAggr" xsdType="string"/>
         <element column="qtyAggrNo" name="qtyAggrNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collCodeDay" name="collCodeDay" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnTrxSp" useConfig="collectiondso1">
      <sql>select spNo,spStsName,aggrNo,collName,customerFullname from (&#xd;select 1 spNo,1 spStsName,1 aggrNo,1 collName,1 customerFullname&#xd;) t</sql>
      <result element="Entries" rowName="">
         <element column="spNo" name="spNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="spStsName" name="spStsName" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxSp" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;     SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;        A.BRANCH_CODE branchCode,&#xd;        A.SP_NO spNo,&#xd;        A.SP_DATE spDate,&#xd;        A.AGGR_NO aggrNo,&#xd;        A.CUSTOMER_CODE customerCode,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		D.COLL_ADDRESS_TYPE collAddressType,&#xd;		&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_ADDRESS&#xd;			end as idAddress,&#xd;&#xd;		&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.HP_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.HP_NO&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.HP_NO&#xd;			end as hpNo1,&#xd;&#xd;		&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_AREA1&#xd;			end as phoneArea1,&#xd;&#xd;		&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_NO1&#xd;			end as phoneNo1,&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;			end as phoneArea2,&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;			END as phoneNo2,&#xd;		CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RT&#xd;			END as idRt,&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RW&#xd;			END as idRw,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END as villageName,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END as subdistrictName,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END as cityName,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END as provinceName,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END as zipCode,&#xd;		(SELECT H.PARAM_DESCRIP FROM MST_GLOBAL_PARAM H (NOLOCK) WHERE H.COMPANY_CODE = 'EDV' AND B.PRODUCT_CODE = H.PARAM_CODE AND H.CONDITION = 'PRODUCT_CODE' AND H.FLAG_ACTIVE = '1' ) productName,&#xd;        A.SP_TYPE spType,&#xd;		I.PARAM_DESCRIP spTypeName,&#xd;		I.VALUES_PARAM valuesParam,&#xd;        A.SP_SOLVING_DAY spSolvingDay,&#xd;        A.EXPIRED_DATE expiredDate,&#xd;        A.COLL_CODE collCode,&#xd;		(SELECT K.FULLNAME from MST_EMPLOYEE K (nolock) where K.company_code = 'EDV' and K.nik=A.COLL_CODE) collName,&#xd;        A.INST_FROM instFrom,&#xd;        A.INST_TO instTo,&#xd;        A.OS_INSTALLMENT osInstallment,&#xd;        A.PENALTY_FEE penaltyFee,&#xd;        A.DUE_DATE dueDate,&#xd;        A.DAY_OVERDUE dayOverdue,&#xd;        A.SP_STS spSts,&#xd;		(SELECT J.PARAM_DESCRIP from MST_GLOBAL_PARAM J (nolock) where A.SP_STS = J.PARAM_CODE AND J.CONDITION = 'SP_STS' AND J.FLAG_ACTIVE = '1' AND J.COMPANY_CODE = A.COMPANY_CODE) spStsName,&#xd;        ISNULL(A.PRINTED_DATE, '1900-01-01') printedDate,&#xd;        A.SENT_DATE sentDate,&#xd;        ISNULL(A.RETURNED_DATE, '1900-01-01') returnedDate,&#xd;        A.CANCELED_DATE canceledDate,&#xd;		L.BRANCH_NAME branchName,&#xd;		L.ADDRESS addressBranch,&#xd;		L.RT rtBranch,&#xd;		L.RW rwBranch,&#xd;		VB.VILLAGE_NAME villageNameBranch,&#xd;		VB.ZIPCODE zipCodeBranch,&#xd;		SB.SUBDISTRICT_NAME subdistrictNameBranch,&#xd;		CB.CITY_NAME cityNameBranch,&#xd;		PB.PROVINCE_NAME provinceNameBranch,&#xd;		L.PHONE_AREA1 phoneArea1Branch,&#xd;		L.PHONE_NO1 phoneNo1Branch,&#xd;		L.MANAGER_CODE managerCode,&#xd;		(select top 1 M.FULLNAME from MST_EMPLOYEE M (nolock) where M.COMPANY_CODE = 'EDV' AND L.MANAGER_CODE = M.POSITION_CODE AND L.BRANCH_CODE = M.BRANCH_CODE AND M.STATUS=1) fullNameBM,&#xd;		A.COLL_FEE collFee,&#xd;		A.UTJ_BALANCE utjBalance,&#xd;		A.INSTALLMENT_PAID installmentPaid,&#xd;		(A.OS_INSTALLMENT + A.PENALTY_FEE + A.COLL_FEE) as totalTagihanUkm,&#xd;		A.TENOR tenor,&#xd;		B.GROUP_CODE groupCode,&#xd;		N.GROUP_NAME groupName,&#xd;		N.GROUP_ADDRESS groupAddress,&#xd;		(A.OS_INSTALLMENT - A.UTJ_BALANCE - A.INSTALLMENT_PAID) as sisaAngsuran,&#xd;		O.COMPANY_NAME companyName,&#xd;		P.ID_ADDRESS addressCustomer,&#xd;		P.ID_RT rtCustomer,&#xd;		P.ID_RW rwCustomer,&#xd;		P.ID_VILLAGE_CODE villageCodeCustomer,&#xd;		Q.VILLAGE_NAME villageNameCustomer,&#xd;		Q.ZIPCODE zipCodeCustomer,&#xd;		R.SUBDISTRICT_NAME subdistrictNameCustomer,&#xd;		S.CITY_NAME cityNameCustomer,&#xd;		T.PROVINCE_NAME provinceNameCustomer,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.DATE_DISSCUSSION dateDisscussion,&#xd;		A.TIME_DISSCUSSION timeDisscussion,&#xd;        B.BRANCH_CODE branchCodeAggr,&#xd;		ISNULL(A.REPRINTED_COUNT, 0) as reprintedCount,&#xd;		A.PRINTED_BY printedBy,&#xd;		(&#xd;			select top 1 param_descrip from trx_dkh_dtl x (nolock) left join mst_global_param y (nolock)&#xd;			on x.company_code = y.company_code and&#xd;			x.sp_receipt_type = y.param_code and&#xd;			y.condition = 'SP_RECEIPT_TYPE'&#xd;			where x.company_code = 'EDV' and sp_no = A.SP_NO and aggr_no = A.AGGR_NO order by x.created_date desc&#xd;		) as spReceiptType,&#xd;		(&#xd;			select top 1 sp_receipt_name from trx_dkh_dtl (nolock) where company_code = 'EDV' and sp_no = A.SP_NO and aggr_no = A.AGGR_NO order by created_date desc&#xd;		) as spReceiptName,&#xd;		(&#xd;			select top 1 sp_notes from trx_dkh_dtl (nolock) where company_code = 'EDV' and sp_no = A.SP_NO and aggr_no = A.AGGR_NO order by created_date desc&#xd;		) as spNotes&#xd;	FROM TRX_SP A (nolock)&#xd;    LEFT JOIN TRX_AGGR B (nolock)&#xd;    ON A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE = B.COMPANY_CODE&#xd;	LEFT JOIN TRX_APPL D (nolock)&#xd;	ON B.APPL_NO = D.APPL_NO AND B.COMPANY_CODE = D.COMPANY_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM I (nolock)&#xd;	ON A.SP_TYPE = I.PARAM_CODE AND I.CONDITION = 'SP_TYPE' AND I.FLAG_ACTIVE = '1' AND A.COMPANY_CODE = I.COMPANY_CODE&#xd;	LEFT JOIN MST_BRANCH L (nolock)&#xd;	ON A.BRANCH_CODE = L.BRANCH_CODE AND A.COMPANY_CODE = L.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE VB (nolock)&#xd;	ON L.VILLAGE_CODE = VB.VILLAGE_CODE AND L.COMPANY_CODE = VB.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT SB (nolock)&#xd;	ON VB.SUBDISTRICT_CODE = SB.SUBDISTRICT_CODE AND VB.COMPANY_CODE = SB.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY CB (nolock)&#xd;	ON VB.CITY_CODE = CB.CITY_CODE AND VB.COMPANY_CODE = CB.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE PB (nolock)&#xd;	ON VB.PROVINCE_CODE = PB.PROVINCE_CODE AND VB.COMPANY_CODE = PB.COMPANY_CODE&#xd;	LEFT JOIN MST_GROUP_HDR N (nolock)&#xd;	ON B.GROUP_CODE = N.GROUP_CODE AND B.COMPANY_CODE = N.COMPANY_CODE&#xd;	LEFT JOIN MST_COMPANY O (nolock)&#xd;	ON L.COMPANY_CODE = O.COMPANY_CODE AND L.COMPANY_CODE = O.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER P (nolock)&#xd;	ON B.CUSTOMER_CODE = P.CUSTOMER_CODE AND B.COMPANY_CODE = P.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE Q (nolock)&#xd;	ON P.ID_VILLAGE_CODE = Q.VILLAGE_CODE AND P.COMPANY_CODE = Q.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT R (nolock)&#xd;	ON Q.SUBDISTRICT_CODE = R.SUBDISTRICT_CODE AND Q.COMPANY_CODE = R.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY S (nolock)&#xd;	ON Q.CITY_CODE = S.CITY_CODE AND Q.COMPANY_CODE = S.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE T (nolock)&#xd;	ON Q.PROVINCE_CODE = T.PROVINCE_CODE AND Q.COMPANY_CODE = T.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON B.CUSTOMER_CODE = CS.CUSTOMER_CODE AND B.COMPANY_CODE = CS.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE AND CS.COMPANY_CODE = IV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE AND ISUB.COMPANY_CODE = IV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE AND IV.COMPANY_CODE = IC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE AND IV.COMPANY_CODE = IP.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE AND VB.COMPANY_CODE = CB.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE AND DSUB.COMPANY_CODE = DV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE AND DV.COMPANY_CODE = DC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE AND DV.COMPANY_CODE = DP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON A.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O' AND A.COMPANY_CODE = F.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE AND F.COMPANY_CODE = KV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE AND KSUB.COMPANY_CODE = KV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE AND KV.COMPANY_CODE = KC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE AND KV.COMPANY_CODE = KP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON A.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B' AND A.COMPANY_CODE = G.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE AND G.COMPANY_CODE = BV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE AND BSUB.COMPANY_CODE = BV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE AND BV.COMPANY_CODE = BC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE AND BV.COMPANY_CODE = BP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE AND CO.COMPANY_CODE = COV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE AND COV.COMPANY_CODE = COSUB.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE AND COV.COMPANY_CODE = COVC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE AND COV.COMPANY_CODE = COP.COMPANY_CODE&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxSp" useConfig="collectiondso1">
      <sql>SELECT spReceiptType, spReceiptName, spNotes, companyCode, branchCode, spNo, spDate, aggrNo, customerCode, customerFullname, idAddress, idRt, idRw, zipCode, villageName, subdistrictName, cityName, provinceName, productName,&#xd;spType, spTypeName, spSolvingDay, expiredDate, collCode, collName, instFrom, instTo, osInstallment, penaltyFee, dueDate, dayOverdue, spSts, spStsName, printedDate, sentDate, returnedDate, canceledDate,&#xd;branchName, addressBranch, rtBranch, rwBranch, villageNameBranch, zipCodeBranch, subdistrictNameBranch, cityNameBranch, provinceNameBranch, phoneArea1Branch, phoneNo1Branch, managerCode, &#xd;collFee, utjBalance, installmentPaid, totalTagihanUkm, tenor, groupCode, groupName, groupAddress, sisaAngsuran, companyName, fullNameBM, addressCustomer, rtCustomer, rwCustomer, villageCodeCustomer, &#xd;villageNameCustomer, zipCodeCustomer, subdistrictNameCustomer, cityNameCustomer, provinceNameCustomer, createdDate, productCode, bucketType, bucketCode, dateDisscussion, timeDisscussion, branchCodeAggr, reprintedCount, printedBy FROM (&#xd;    SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;        A.BRANCH_CODE branchCode,&#xd;        A.SP_NO spNo,&#xd;        A.SP_DATE spDate,&#xd;        A.AGGR_NO aggrNo,&#xd;        A.CUSTOMER_CODE customerCode,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		D.COLL_ADDRESS_TYPE collAddressType,&#xd;		&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_ADDRESS&#xd;			end as idAddress,&#xd;&#xd;		&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.HP_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.HP_NO&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.HP_NO&#xd;			end as hpNo1,&#xd;&#xd;		&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_AREA1&#xd;			end as phoneArea1,&#xd;&#xd;		&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_NO1&#xd;			end as phoneNo1,&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;			end as phoneArea2,&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;			END as phoneNo2,&#xd;		CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RT&#xd;			END as idRt,&#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RW&#xd;			END as idRw,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END as villageName,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END as subdistrictName,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END as cityName,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END as provinceName,&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END as zipCode,&#xd;		(SELECT H.PARAM_DESCRIP FROM MST_GLOBAL_PARAM H (NOLOCK) WHERE H.COMPANY_CODE = 'EDV' AND B.PRODUCT_CODE = H.PARAM_CODE AND H.CONDITION = 'PRODUCT_CODE' AND H.FLAG_ACTIVE = '1' ) productName,&#xd;        A.SP_TYPE spType,&#xd;		I.PARAM_DESCRIP spTypeName,&#xd;		I.VALUES_PARAM valuesParam,&#xd;        A.SP_SOLVING_DAY spSolvingDay,&#xd;        A.EXPIRED_DATE expiredDate,&#xd;        A.COLL_CODE collCode,&#xd;		(SELECT K.FULLNAME from MST_EMPLOYEE K (nolock) where K.company_code = 'EDV' and K.nik=A.COLL_CODE) collName,&#xd;        A.INST_FROM instFrom,&#xd;        A.INST_TO instTo,&#xd;        A.OS_INSTALLMENT osInstallment,&#xd;        A.PENALTY_FEE penaltyFee,&#xd;        A.DUE_DATE dueDate,&#xd;        A.DAY_OVERDUE dayOverdue,&#xd;        A.SP_STS spSts,&#xd;		(SELECT J.PARAM_DESCRIP from MST_GLOBAL_PARAM J (nolock) where A.SP_STS = J.PARAM_CODE AND J.CONDITION = 'SP_STS' AND J.FLAG_ACTIVE = '1' AND J.COMPANY_CODE = A.COMPANY_CODE) spStsName,&#xd;        ISNULL(A.PRINTED_DATE, '1900-01-01') printedDate,&#xd;        A.SENT_DATE sentDate,&#xd;        ISNULL(A.RETURNED_DATE, '1900-01-01') returnedDate,&#xd;        A.CANCELED_DATE canceledDate,&#xd;		L.BRANCH_NAME branchName,&#xd;		L.ADDRESS addressBranch,&#xd;		L.RT rtBranch,&#xd;		L.RW rwBranch,&#xd;		VB.VILLAGE_NAME villageNameBranch,&#xd;		VB.ZIPCODE zipCodeBranch,&#xd;		SB.SUBDISTRICT_NAME subdistrictNameBranch,&#xd;		CB.CITY_NAME cityNameBranch,&#xd;		PB.PROVINCE_NAME provinceNameBranch,&#xd;		L.PHONE_AREA1 phoneArea1Branch,&#xd;		L.PHONE_NO1 phoneNo1Branch,&#xd;		L.MANAGER_CODE managerCode,&#xd;		(select top 1 M.FULLNAME from MST_EMPLOYEE M (nolock) where M.COMPANY_CODE = 'EDV' AND L.MANAGER_CODE = M.POSITION_CODE AND L.BRANCH_CODE = M.BRANCH_CODE AND M.STATUS=1) fullNameBM,&#xd;		A.COLL_FEE collFee,&#xd;		A.UTJ_BALANCE utjBalance,&#xd;		A.INSTALLMENT_PAID installmentPaid,&#xd;		(A.OS_INSTALLMENT + A.PENALTY_FEE + A.COLL_FEE) as totalTagihanUkm,&#xd;		A.TENOR tenor,&#xd;		B.GROUP_CODE groupCode,&#xd;		N.GROUP_NAME groupName,&#xd;		N.GROUP_ADDRESS groupAddress,&#xd;		(A.OS_INSTALLMENT - A.UTJ_BALANCE - A.INSTALLMENT_PAID) as sisaAngsuran,&#xd;		O.COMPANY_NAME companyName,&#xd;		P.ID_ADDRESS addressCustomer,&#xd;		P.ID_RT rtCustomer,&#xd;		P.ID_RW rwCustomer,&#xd;		P.ID_VILLAGE_CODE villageCodeCustomer,&#xd;		Q.VILLAGE_NAME villageNameCustomer,&#xd;		Q.ZIPCODE zipCodeCustomer,&#xd;		R.SUBDISTRICT_NAME subdistrictNameCustomer,&#xd;		S.CITY_NAME cityNameCustomer,&#xd;		T.PROVINCE_NAME provinceNameCustomer,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.DATE_DISSCUSSION dateDisscussion,&#xd;		A.TIME_DISSCUSSION timeDisscussion,&#xd;        B.BRANCH_CODE branchCodeAggr,&#xd;		ISNULL(A.REPRINTED_COUNT, 0) as reprintedCount,&#xd;		A.PRINTED_BY printedBy,&#xd;		(&#xd;			select top 1 param_descrip from trx_dkh_dtl x (nolock) left join mst_global_param y (nolock)&#xd;			on x.company_code = y.company_code and&#xd;			x.sp_receipt_type = y.param_code and&#xd;			y.condition = 'SP_RECEIPT_TYPE'&#xd;			where x.company_code = 'EDV' and sp_no = A.SP_NO and aggr_no = A.AGGR_NO order by x.created_date desc&#xd;		) as spReceiptType,&#xd;		(&#xd;			select top 1 sp_receipt_name from trx_dkh_dtl (nolock) where company_code = 'EDV' and sp_no = A.SP_NO and aggr_no = A.AGGR_NO order by created_date desc&#xd;		) as spReceiptName,&#xd;		(&#xd;			select top 1 sp_notes from trx_dkh_dtl (nolock) where company_code = 'EDV' and sp_no = A.SP_NO and aggr_no = A.AGGR_NO order by created_date desc&#xd;		) as spNotes&#xd;	FROM TRX_SP A (nolock)&#xd;    LEFT JOIN TRX_AGGR B (nolock)&#xd;    ON A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE = B.COMPANY_CODE&#xd;	LEFT JOIN TRX_APPL D (nolock)&#xd;	ON B.APPL_NO = D.APPL_NO AND B.COMPANY_CODE = D.COMPANY_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM I (nolock)&#xd;	ON A.SP_TYPE = I.PARAM_CODE AND I.CONDITION = 'SP_TYPE' AND I.FLAG_ACTIVE = '1' AND A.COMPANY_CODE = I.COMPANY_CODE&#xd;	LEFT JOIN MST_BRANCH L (nolock)&#xd;	ON A.BRANCH_CODE = L.BRANCH_CODE AND A.COMPANY_CODE = L.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE VB (nolock)&#xd;	ON L.VILLAGE_CODE = VB.VILLAGE_CODE AND L.COMPANY_CODE = VB.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT SB (nolock)&#xd;	ON VB.SUBDISTRICT_CODE = SB.SUBDISTRICT_CODE AND VB.COMPANY_CODE = SB.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY CB (nolock)&#xd;	ON VB.CITY_CODE = CB.CITY_CODE AND VB.COMPANY_CODE = CB.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE PB (nolock)&#xd;	ON VB.PROVINCE_CODE = PB.PROVINCE_CODE AND VB.COMPANY_CODE = PB.COMPANY_CODE&#xd;	LEFT JOIN MST_GROUP_HDR N (nolock)&#xd;	ON B.GROUP_CODE = N.GROUP_CODE AND B.COMPANY_CODE = N.COMPANY_CODE&#xd;	LEFT JOIN MST_COMPANY O (nolock)&#xd;	ON L.COMPANY_CODE = O.COMPANY_CODE AND L.COMPANY_CODE = O.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER P (nolock)&#xd;	ON B.CUSTOMER_CODE = P.CUSTOMER_CODE AND B.COMPANY_CODE = P.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE Q (nolock)&#xd;	ON P.ID_VILLAGE_CODE = Q.VILLAGE_CODE AND P.COMPANY_CODE = Q.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT R (nolock)&#xd;	ON Q.SUBDISTRICT_CODE = R.SUBDISTRICT_CODE AND Q.COMPANY_CODE = R.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY S (nolock)&#xd;	ON Q.CITY_CODE = S.CITY_CODE AND Q.COMPANY_CODE = S.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE T (nolock)&#xd;	ON Q.PROVINCE_CODE = T.PROVINCE_CODE AND Q.COMPANY_CODE = T.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON B.CUSTOMER_CODE = CS.CUSTOMER_CODE AND B.COMPANY_CODE = CS.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE AND CS.COMPANY_CODE = IV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE AND ISUB.COMPANY_CODE = IV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE AND IV.COMPANY_CODE = IC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE AND IV.COMPANY_CODE = IP.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE AND VB.COMPANY_CODE = CB.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE AND DSUB.COMPANY_CODE = DV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE AND DV.COMPANY_CODE = DC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE AND DV.COMPANY_CODE = DP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON A.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O' AND A.COMPANY_CODE = F.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE AND F.COMPANY_CODE = KV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE AND KSUB.COMPANY_CODE = KV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE AND KV.COMPANY_CODE = KC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE AND KV.COMPANY_CODE = KP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON A.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B' AND A.COMPANY_CODE = G.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE AND G.COMPANY_CODE = BV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE AND BSUB.COMPANY_CODE = BV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE AND BV.COMPANY_CODE = BC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE AND BV.COMPANY_CODE = BP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE AND CO.COMPANY_CODE = COV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE AND COV.COMPANY_CODE = COSUB.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE AND COV.COMPANY_CODE = COVC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE AND COV.COMPANY_CODE = COP.COMPANY_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="spNo" name="spNo" xsdType="string"/>
         <element column="spDate" name="spDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="idAddress" name="idAddress" xsdType="string"/>
         <element column="idRt" name="idRt" xsdType="string"/>
         <element column="idRw" name="idRw" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="spType" name="spType" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="spSolvingDay" name="spSolvingDay" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="osInstallment" name="osInstallment" xsdType="string"/>
         <element column="penaltyFee" name="penaltyFee" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="spSts" name="spSts" xsdType="string"/>
         <element column="spStsName" name="spStsName" xsdType="string"/>
         <element column="printedDate" name="printedDate" xsdType="string"/>
         <element column="sentDate" name="sentDate" xsdType="string"/>
         <element column="returnedDate" name="returnedDate" xsdType="string"/>
         <element column="canceledDate" name="canceledDate" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="addressBranch" name="addressBranch" xsdType="string"/>
         <element column="rtBranch" name="rtBranch" xsdType="string"/>
         <element column="rwBranch" name="rwBranch" xsdType="string"/>
         <element column="villageNameBranch" name="villageNameBranch" xsdType="string"/>
         <element column="zipCodeBranch" name="zipCodeBranch" xsdType="string"/>
         <element column="subdistrictNameBranch" name="subdistrictNameBranch" xsdType="string"/>
         <element column="cityNameBranch" name="cityNameBranch" xsdType="string"/>
         <element column="provinceNameBranch" name="provinceNameBranch" xsdType="string"/>
         <element column="phoneArea1Branch" name="phoneArea1Branch" xsdType="string"/>
         <element column="phoneNo1Branch" name="phoneNo1Branch" xsdType="string"/>
         <element column="managerCode" name="managerCode" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="utjBalance" name="utjBalance" xsdType="string"/>
         <element column="installmentPaid" name="installmentPaid" xsdType="string"/>
         <element column="totalTagihanUkm" name="totalTagihanUkm" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="sisaAngsuran" name="sisaAngsuran" xsdType="string"/>
         <element column="companyName" name="companyName" xsdType="string"/>
         <element column="fullNameBM" name="fullNameBM" xsdType="string"/>
         <element column="addressCustomer" name="addressCustomer" xsdType="string"/>
         <element column="rtCustomer" name="rtCustomer" xsdType="string"/>
         <element column="rwCustomer" name="rwCustomer" xsdType="string"/>
         <element column="villageCodeCustomer" name="villageCodeCustomer" xsdType="string"/>
         <element column="villageNameCustomer" name="villageNameCustomer" xsdType="string"/>
         <element column="zipCodeCustomer" name="zipCodeCustomer" xsdType="string"/>
         <element column="subdistrictNameCustomer" name="subdistrictNameCustomer" xsdType="string"/>
         <element column="cityNameCustomer" name="cityNameCustomer" xsdType="string"/>
         <element column="provinceNameCustomer" name="provinceNameCustomer" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="dateDisscussion" name="dateDisscussion" xsdType="string"/>
         <element column="timeDisscussion" name="timeDisscussion" xsdType="string"/>
         <element column="branchCodeAggr" name="branchCodeAggr" xsdType="string"/>
         <element column="reprintedCount" name="reprintedCount" xsdType="string"/>
         <element column="printedBy" name="printedBy" xsdType="string"/>
         <element column="spReceiptName" name="spReceiptName" xsdType="string"/>
         <element column="spNotes" name="spNotes" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxSp" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_SP &#xd;(&#xd;    COMPANY_CODE,&#xd;    BRANCH_CODE,&#xd;    SP_NO,&#xd;    SP_DATE,&#xd;    AGGR_NO,&#xd;    CUSTOMER_CODE,&#xd;    SP_TYPE,&#xd;    SP_SOLVING_DAY,&#xd;    EXPIRED_DATE,&#xd;	PRODUCT_CODE,&#xd;	BUCKET_TYPE,&#xd;	BUCKET_CODE,&#xd;    COLL_CODE,&#xd;    INST_FROM,&#xd;    INST_TO,&#xd;    OS_INSTALLMENT,&#xd;    PENALTY_FEE,&#xd;	COLL_FEE,&#xd;	UTJ_BALANCE,&#xd;	INSTALLMENT_PAID,&#xd;	TENOR,&#xd;    DUE_DATE,&#xd;    DAY_OVERDUE,&#xd;    SP_STS,&#xd;    PRINTED_DATE,&#xd;    SENT_DATE,&#xd;    RETURNED_DATE,&#xd;    CANCELED_DATE,&#xd;	DATE_DISSCUSSION,&#xd;	TIME_DISSCUSSION,&#xd;    CREATED_DATE,&#xd;    CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;    :companyCode,&#xd;    :branchCode,&#xd;    :spNo,&#xd;    :spDate,&#xd;    :aggrNo,&#xd;    :customerCode,&#xd;    :spType,&#xd;    :spSolvingDay,&#xd;    :expiredDate,&#xd;	:productCode,&#xd;	:bucketType,&#xd;	:bucketCode,&#xd;    :collCode,&#xd;    :instFrom,&#xd;    :instTo,&#xd;    :osInstallment,&#xd;    :penaltyFee,&#xd;	:collFee,&#xd;	:utjBalance,&#xd;	:installmentPaid,&#xd;	:tenor,&#xd;    :dueDate,&#xd;    :dayOverdue,&#xd;    :spSts,&#xd;    :printedDate,&#xd;    :sentDate,&#xd;    :returnedDate,&#xd;    :canceledDate,&#xd;	:dateDisscussion,&#xd;	:timeDisscussion,&#xd;    GETDATE(),&#xd;    :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="spNo" sqlType="STRING"/>
      <param name="spDate" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="customerCode" sqlType="STRING"/>
      <param name="spType" sqlType="STRING"/>
      <param name="spSolvingDay" sqlType="STRING"/>
      <param name="expiredDate" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="instFrom" sqlType="STRING"/>
      <param name="instTo" sqlType="STRING"/>
      <param name="osInstallment" sqlType="STRING"/>
      <param name="penaltyFee" sqlType="STRING"/>
      <param name="dueDate" sqlType="STRING"/>
      <param name="dayOverdue" sqlType="STRING"/>
      <param name="spSts" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
      <param name="sentDate" sqlType="STRING"/>
      <param name="returnedDate" sqlType="STRING"/>
      <param name="canceledDate" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="collFee" sqlType="STRING"/>
      <param name="utjBalance" sqlType="STRING"/>
      <param name="installmentPaid" sqlType="STRING"/>
      <param name="tenor" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="dateDisscussion" sqlType="STRING"/>
      <param name="timeDisscussion" sqlType="STRING"/>
   </query>
   <query id="updateTrxSp" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @SP_NO varchar(50) = :spNo&#xd;&#xd;UPDATE TRX_SP SET&#xd;    SP_DATE = :spDate,&#xd;    AGGR_NO = :aggrNo,&#xd;    CUSTOMER_CODE = :customerCode,&#xd;    SP_TYPE = :spType,&#xd;    SP_SOLVING_DAY = :spSolvingDay,&#xd;    EXPIRED_DATE = :expiredDate,&#xd;	PRODUCT_CODE = :productCode,&#xd;	BUCKET_TYPE = :bucketType,&#xd;	BUCKET_CODE = :bucketCode,&#xd;    COLL_CODE = :collCode,&#xd;    INST_FROM = :instFrom,&#xd;    INST_TO = :instTo,&#xd;    OS_INSTALLMENT = :osInstallment,&#xd;    PENALTY_FEE = :penaltyFee,&#xd;    DUE_DATE = :dueDate,&#xd;    DAY_OVERDUE = :dayOverdue,&#xd;    SP_STS = :spSts,&#xd;    PRINTED_DATE = :printedDate,&#xd;	PRINTED_BY = :printedBy,&#xd;    SENT_DATE = :sentDate,&#xd;    RETURNED_DATE = :returnedDate,&#xd;    CANCELED_DATE = :canceledDate,&#xd;	DATE_DISSCUSSION = :dateDisscussion,&#xd;	TIME_DISSCUSSION = :timeDisscussion,&#xd;	UPDATED_DATE = GETDATE(),&#xd;	UPDATED_BY = :updatedBy&#xd;WHERE&#xd;    COMPANY_CODE = @COMPANY_CODE AND&#xd;    SP_NO = @SP_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="spDate" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="customerCode" sqlType="STRING"/>
      <param name="spType" sqlType="STRING"/>
      <param name="spSolvingDay" sqlType="STRING"/>
      <param name="expiredDate" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="instFrom" sqlType="STRING"/>
      <param name="instTo" sqlType="STRING"/>
      <param name="osInstallment" sqlType="STRING"/>
      <param name="penaltyFee" sqlType="STRING"/>
      <param name="dueDate" sqlType="STRING"/>
      <param name="dayOverdue" sqlType="STRING"/>
      <param name="spSts" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
      <param name="returnedDate" sqlType="STRING"/>
      <param name="canceledDate" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="spNo" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="sentDate" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="dateDisscussion" sqlType="STRING"/>
      <param name="timeDisscussion" sqlType="STRING"/>
      <param name="printedBy" sqlType="STRING"/>
   </query>
   <query id="getColumnMstCollFee" useConfig="collectiondso1">
      <sql>SELECT 1 as productName, 1 collKindFeeName, 1 collFee, 1 effectiveDate, 1 categoryName</sql>
      <result element="Entries" rowName="">
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collKindFeeName" name="collKindFeeName" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstCollFee" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;SELECT&#xd;		A.COMPANY_CODE companyCode, &#xd;		A.PRODUCT_CODE productCode,&#xd;		B.PARAM_DESCRIP productName, &#xd;		A.COLL_KIND_FEE collKindFee,&#xd;		C.PARAM_DESCRIP collKindFeeName,&#xd;		A.CATEGORY_CODE categoryCode,&#xd;		D.PARAM_DESCRIP categoryName,&#xd;		A.COLL_FEE collFee, &#xd;		A.EFFECTIVE_DATE, &#xd;		 CONVERT(datetime, A.effective_date) as effectiveDate,&#xd;		 CONVERT(varchar, A.UPDATE_DATE, 121) as updatedDateStr&#xd;	FROM (&#xd;	SELECT A.*&#xd;		FROM MST_COLL_FEE A&#xd;		WHERE CONVERT(datetime, A.effective_date) &gt;= GETDATE()&#xd;	UNION ALL&#xd;	SELECT COMPANY_CODE, PRODUCT_CODE, COLL_KIND_FEE, CATEGORY_CODE, COLL_FEE, EFFECTIVE_DATE, CREATED_DATE, CREATED_BY, UPDATE_DATE, UPDATE_BY&#xd;		  FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [company_code],&#xd;	  			[product_code],&#xd;	  			[coll_kind_fee],&#xd;	  			[category_code]&#xd;	  			ORDER BY effective_date desc) RN&#xd;		  FROM [dbo].[MST_COLL_FEE] WHERE effective_date &lt;= GETDATE()&#xd;		  ) X&#xd;		  WHERE RN = 1) A&#xd;	LEFT JOIN MST_GLOBAL_PARAM B&#xd;		ON A.product_code = B.param_code AND B.condition = 'PRODUCT_CODE' AND B.flag_active = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;		ON A.coll_kind_fee = C.param_code AND C.condition = 'COLL_KIND_FEE' AND C.flag_active = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;		ON A.category_code = D.param_code AND D.condition = 'CATEGORY_CODE' AND D.flag_active = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMstCollFee" useConfig="collectiondso1">
      <sql>SELECT companyCode, productCode, productName, collKindFee, collKindFeeName, categoryCode, categoryName, collFee, effectiveDate, updatedDateStr FROM (&#xd;SELECT&#xd;		A.COMPANY_CODE companyCode, &#xd;		A.PRODUCT_CODE productCode,&#xd;		B.PARAM_DESCRIP productName, &#xd;		A.COLL_KIND_FEE collKindFee,&#xd;		C.PARAM_DESCRIP collKindFeeName,&#xd;		A.CATEGORY_CODE categoryCode,&#xd;		D.PARAM_DESCRIP categoryName,&#xd;		A.COLL_FEE collFee, &#xd;		A.EFFECTIVE_DATE, &#xd;		 CONVERT(datetime, A.effective_date) as effectiveDate,&#xd;		 CONVERT(varchar, A.UPDATE_DATE, 121) as updatedDateStr&#xd;	FROM (&#xd;	SELECT A.*&#xd;		FROM MST_COLL_FEE A&#xd;		WHERE CONVERT(datetime, A.effective_date) &gt;= GETDATE()&#xd;	UNION ALL&#xd;	SELECT COMPANY_CODE, PRODUCT_CODE, COLL_KIND_FEE, CATEGORY_CODE, COLL_FEE, EFFECTIVE_DATE, CREATED_DATE, CREATED_BY, UPDATE_DATE, UPDATE_BY&#xd;		  FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [company_code],&#xd;	  			[product_code],&#xd;	  			[coll_kind_fee],&#xd;	  			[category_code]&#xd;	  			ORDER BY effective_date desc) RN&#xd;		  FROM [dbo].[MST_COLL_FEE] WHERE effective_date &lt;= GETDATE()&#xd;		  ) X&#xd;		  WHERE RN = 1) A&#xd;	LEFT JOIN MST_GLOBAL_PARAM B&#xd;		ON A.product_code = B.param_code AND B.condition = 'PRODUCT_CODE' AND B.flag_active = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;		ON A.coll_kind_fee = C.param_code AND C.condition = 'COLL_KIND_FEE' AND C.flag_active = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;		ON A.category_code = D.param_code AND D.condition = 'CATEGORY_CODE' AND D.flag_active = '1'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collKindFee" name="collKindFee" xsdType="string"/>
         <element column="collKindFeeName" name="collKindFeeName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertMstCollFee" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO MST_COLL_FEE&#xd;(&#xd;	COMPANY_CODE,&#xd;	PRODUCT_CODE,&#xd;	COLL_KIND_FEE,&#xd;	CATEGORY_CODE,&#xd;	COLL_FEE,&#xd;	EFFECTIVE_DATE,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;	:productCode,&#xd;	:collKindFee,&#xd;	:categoryCode,&#xd;	:collFee,&#xd;	:effectiveDate,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collKindFee" sqlType="STRING"/>
      <param name="categoryCode" sqlType="STRING"/>
      <param name="collFee" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="updateMstCollFee" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE MST_COLL_FEE SET&#xd;	COLL_FEE = :collFee,&#xd;	EFFECTIVE_DATE = :effectiveDateNew,&#xd;	UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = :updateBy&#xd;WHERE&#xd;	COMPANY_CODE = :companyCode AND&#xd;	PRODUCT_CODE = :productCode AND&#xd;	COLL_KIND_FEE = :collKindFee AND&#xd;	EFFECTIVE_DATE = :effectiveDate</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="collFee" sqlType="STRING"/>
      <param name="effectiveDate" optional="false" sqlType="STRING"/>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collKindFee" sqlType="STRING"/>
      <param name="effectiveDateNew" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxDkh" useConfig="collectiondso1">
      <sql>SELECT 1 as dkhNo, 1 nameDay, 1 dkhDate, 1 collName, 1 jumlahTertagih, 1 totCollFee, 1 totPenaltyValue, 1 totInstallBill, 1 totBill,  1 jumlahTidakTertagih, 1 totPaidCollFee, &#xd;1 totPaidPenalty, 1 totUtjPlus, 1 totPaidCash, 1 cashierDepositValue, 1 paymentPointDeposit, 1 collCashOnHand, 1 totUtjUsage, 1 submittedDate, 1 canceledDate, 1 closedDate, 1 dkhStsName, 1 sp1, 1 sp2, 1 sp3, 1 totPaidInstallBill, 1 sp1Mikro, 1 sp2Mikro, 1 sp3Mikro, 1 createdDate, 1 createdBy</sql>
      <result element="Entries" rowName="">
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="nameDay" name="nameDay" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="totCollFee" name="totCollFee" xsdType="string"/>
         <element column="totPenaltyValue" name="totPenaltyValue" xsdType="string"/>
         <element column="totInstallBill" name="totInstallBill" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="jumlahTertagih" name="jumlahTertagih" xsdType="string"/>
         <element column="jumlahTidakTertagih" name="jumlahTidakTertagih" xsdType="string"/>
         <element column="totPaidCollFee" name="totPaidCollFee" xsdType="string"/>
         <element column="totPaidPenalty" name="totPaidPenalty" xsdType="string"/>
         <element column="totUtjPlus" name="totUtjPlus" xsdType="string"/>
         <element column="totPaidCash" name="totPaidCash" xsdType="string"/>
         <element column="paymentPointDeposit" name="paymentPointDeposit" xsdType="string"/>
         <element column="collCashOnHand" name="collCashOnHand" xsdType="string"/>
         <element column="totUtjUsage" name="totUtjUsage" xsdType="string"/>
         <element column="submittedDate" name="submittedDate" xsdType="string"/>
         <element column="canceledDate" name="canceledDate" xsdType="string"/>
         <element column="closedDate" name="closedDate" xsdType="string"/>
         <element column="dkhStsName" name="dkhStsName" xsdType="string"/>
         <element column="sp1" name="sp1" xsdType="string"/>
         <element column="sp2" name="sp2" xsdType="string"/>
         <element column="sp3" name="sp3" xsdType="string"/>
         <element column="totPaidInstallBill" name="totPaidInstallBill" xsdType="string"/>
         <element column="sp1Mikro" name="sp1Mikro" xsdType="string"/>
         <element column="sp2Mikro" name="sp2Mikro" xsdType="string"/>
         <element column="sp3Mikro" name="sp3Mikro" xsdType="string"/>
         <element column="cashierDepositValue" name="cashierDepositValue" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="createdBy" name="createdBy" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxDkh" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) as total FROM (&#xd;	SELECT DISTINCT companyCode, branchCode, productCode, productName, dkhNo, nameDay, dkhDate, picHead, collCode, collName, dkhSts, dkhStsName, qtyCustomer, qtyGroup, qtyGroupVisit, qtyGroupCash, totCollFee,&#xd;	totPenaltyValue, totInstallBill, totBill, totPaidCollFee, totPaidPenalty, totPaidInstallBill, totUtjPlus, totPaidCash, cashierDepositValue, paymentPointDeposit, collCashOnHand,&#xd;	totUtjUsage, submittedDate, submittedBy, canceledDate, canceledBy, closedDate, closedBy, jumlahTertagih, jumlahTidakTertagih, sp1, sp2, sp3, sp1Mikro, sp2Mikro, sp3Mikro, createdDate, createdBy, qtyCustomerCash, updatedDateStr, dkhStatusDateFilter, totalPenugasan, totalDikunjungi, totalTidakDikunjungi, totalBelumDikunjungi from (&#xd;		SELECT DISTINCT companyCode, branchCode, productCode, productName, dkhNo, nameDay, dkhDate, picHead, collCode, collName, dkhSts, dkhStsName, qtyCustomer, qtyGroup, qtyGroupVisit, qtyGroupCash, totCollFee,&#xd;		totPenaltyValue, totInstallBill, totBill, totPaidCollFee, totPaidPenalty, totPaidInstallBill, totUtjPlus, totPaidCash, cashierDepositValue, paymentPointDeposit, collCashOnHand,&#xd;		totUtjUsage, submittedDate, submittedBy, canceledDate, canceledBy, closedDate, closedBy, jumlahTertagih, jumlahTidakTertagih, sp1, sp2, sp3, sp1Mikro, sp2Mikro, sp3Mikro, createdDate, createdBy, qtyCustomerCash, flagSend, flagSendDate, updatedDateStr, dkhStatusDateFilter, totalPenugasan, totalDikunjungi, totalTidakDikunjungi, totalBelumDikunjungi FROM (&#xd;			SELECT &#xd;				A.COMPANY_CODE companyCode,&#xd;				A.BRANCH_CODE branchCode,&#xd;				A.PRODUCT_CODE productCode,&#xd;				E.PARAM_DESCRIP productName,&#xd;				A.DKH_NO dkhNo,&#xd;				(&#xd;					case&#xd;						when datename(dw, A.DKH_DATE) = 'Sunday' then 'Minggu'&#xd;						when datename(dw, A.DKH_DATE) = 'Monday' then 'Senin'&#xd;						when datename(dw, A.DKH_DATE) = 'Tuesday' then 'Selasa'&#xd;						when datename(dw, A.DKH_DATE) = 'Wednesday' then 'Rabu'&#xd;						when datename(dw, A.DKH_DATE) = 'Thursday' then 'Kamis'&#xd;						when datename(dw, A.DKH_DATE) = 'Friday' then 'Jumat'&#xd;						when datename(dw, A.DKH_DATE) = 'Saturday' then 'Sabtu'&#xd;					end&#xd;				) as nameDay,&#xd;				A.DKH_DATE dkhDate,&#xd;				A.PIC_HEAD picHead,&#xd;				A.COLL_CODE collCode,&#xd;				B.FULLNAME collName,&#xd;				A.DKH_STS dkhSts,&#xd;				C.PARAM_DESCRIP dkhStsName,&#xd;				A.QTY_CUSTOMER qtyCustomer,&#xd;				A.QTY_GROUP qtyGroup,&#xd;				A.QTY_GROUP_VISIT qtyGroupVisit,&#xd;				A.QTY_GROUP_CASH qtyGroupCash,&#xd;				A.TOT_COLL_FEE totCollFee,&#xd;				A.TOT_PENALTY_VALUE totPenaltyValue,&#xd;				A.TOT_INSTALL_BILL totInstallBill,&#xd;				A.TOT_BILL totBill,&#xd;				A.TOT_PAID_COLL_FEE totPaidCollFee,&#xd;				A.TOT_PAID_PENALTY totPaidPenalty,&#xd;				A.TOT_PAID_INSTALL_BILL totPaidInstallBill,&#xd;				A.TOT_UTJ_PLUS totUtjPlus,&#xd;				A.TOT_PAID_CASH totPaidCash,&#xd;				A.CASHIER_DEPOSIT_VALUE cashierDepositValue,&#xd;				A.PAYMENT_POINT_DEPOSIT paymentPointDeposit,&#xd;				A.COLL_CASH_ON_HAND collCashOnHand,&#xd;				A.TOT_UTJ_USAGE totUtjUsage,&#xd;				A.SUBMITTED_DATE submittedDate,&#xd;				A.SUBMITTED_BY submittedBy,&#xd;				A.CANCELED_DATE canceledDate,&#xd;				A.CANCELED_BY canceledBy,&#xd;				A.CLOSED_DATE closedDate,&#xd;				A.CLOSED_BY closedBy,&#xd;				CASE WHEN A.PRODUCT_CODE = 'PC02' THEN (&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;				  f.company_code = a.company_code&#xd;				  and f.branch_code = a.branch_code&#xd;                  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH &gt; 0 &#xd;                  AND PAID_STS != '999'&#xd;              )+(&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;                  f.company_code = a.company_code&#xd;				  and f.branch_code = a.branch_code&#xd;				  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH = 0 &#xd;                  AND F.UTJ_APPV_STS = 'APPD' &#xd;                  AND F.PAID_STS != '999'&#xd;              ) ELSE (&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;                  f.company_code = a.company_code&#xd;				  and f.branch_code = a.branch_code&#xd;				  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH &gt; 0 &#xd;                  AND F.PAID_STS != '999'&#xd;              ) END as jumlahTertagih, &#xd;              CASE WHEN A.PRODUCT_CODE = 'PC02' THEN A.QTY_CUSTOMER - (&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;                  f.company_code = a.company_code&#xd;				  and f.branch_code = a.branch_code&#xd;				  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH &gt; 0 &#xd;                  AND PAID_STS != '999'&#xd;              )+(&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;				f.company_code = a.company_code&#xd;                  and f.branch_code = a.branch_code&#xd;				  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH = 0 &#xd;                  AND F.UTJ_APPV_STS = 'APPD' &#xd;                  AND F.PAID_STS != '999'&#xd;              ) ELSE (&#xd;                A.QTY_CUSTOMER -(&#xd;                  SELECT &#xd;                    COUNT(0) PAID_CASH &#xd;                  FROM &#xd;                    TRX_DKH_DTL F (NOLOCK) &#xd;                  WHERE &#xd;                    f.company_code = a.company_code&#xd;					and f.branch_code = a.branch_code&#xd;					and F.DKH_NO = A.DKH_NO &#xd;                    AND F.PAID_CASH &gt; 0 &#xd;                    AND F.PAID_STS != '999'&#xd;                )&#xd;              ) END jumlahTidakTertagih, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE &#xd;					company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '001' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp1, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE &#xd;                  company_code = a.company_code&#xd;				  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '002' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp2, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '003' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp3, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '004' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp1Mikro, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '005' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp2Mikro, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '006' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp3Mikro,&#xd;				D.PAYMENT_DATE paymentDate,&#xd;				A.CREATED_DATE createdDate,&#xd;				A.CREATED_BY createdBy,&#xd;				A.QTY_CUSTOMER_CASH qtyCustomerCash,&#xd;				ISNULL(D.FLAG_SEND, '') flagSend,&#xd;				CONVERT(DATE,D.FLAG_SEND_DATE) flagSendDate,&#xd;				CONVERT(varchar, A.UPDATED_DATE, 121) as updatedDateStr,&#xd;				CASE&#xd;					WHEN A.DKH_STS = 'OPEN' THEN CONVERT(DATE, A.CREATED_DATE)&#xd;					WHEN A.DKH_STS = 'PROC' THEN CONVERT(DATE, A.SUBMITTED_DATE)&#xd;					WHEN A.DKH_STS = 'CLOS' THEN CONVERT(DATE, A.CLOSED_DATE)&#xd;					WHEN A.DKH_STS = 'CANC' THEN CONVERT(DATE, A.CANCELED_DATE)&#xd;				END dkhStatusDateFilter,&#xd;				(&#xd;					select count(aggr_no) as totalPenugasan from trx_dkh_dtl (NOLOCK) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999'&#xd;				) as totalPenugasan,&#xd;				(&#xd;					select count(aggr_no) as totalPenugasan from trx_dkh_dtl (NOLOCK) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and visit_code = '1'&#xd;				) as totalDikunjungi,&#xd;				(&#xd;					select count(aggr_no) as totalPenugasan from trx_dkh_dtl (NOLOCK) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and visit_code = '0'&#xd;				) as totalTidakDikunjungi,&#xd;				(&#xd;					select count(aggr_no) as totalPenugasan from trx_dkh_dtl (NOLOCK) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and isnull(visit_code, '') = ''&#xd;				) as totalBelumDikunjungi&#xd;			FROM TRX_DKH_HDR A (NOLOCK)&#xd;			LEFT JOIN MST_EMPLOYEE B (NOLOCK)&#xd;			ON A.COLL_CODE = B.NIK and a.company_code = b.company_code&#xd;			LEFT JOIN MST_GLOBAL_PARAM C (NOLOCK)&#xd;			ON A.DKH_STS = C.PARAM_CODE AND C.CONDITION = 'DKH_STS' AND C.FLAG_ACTIVE = '1' and c.company_code = a.company_code&#xd;			LEFT JOIN TRX_DKH_DTL D (NOLOCK)&#xd;			ON a.company_code = d.company_code and a.branch_code = d.branch_code and A.DKH_NO = D.DKH_NO AND (convert(date,D.FLAG_SEND_DATE) BETWEEN :dateFrom AND :dateUntil OR D.FLAG_SEND_DATE IS NULL)&#xd;			LEFT JOIN MST_GLOBAL_PARAM E (NOLOCK)&#xd;			ON e.company_code = a.company_code and A.PRODUCT_CODE = E.PARAM_CODE AND E.CONDITION = 'PRODUCT_CODE' AND E.FLAG_ACTIVE = '1'&#xd;		)  A &#xd;	) a WHERE  :search :filter :customFilter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="dateFrom" sqlType="STRING"/>
      <param name="dateUntil" sqlType="STRING"/>
      <param name="customFilter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxDkh" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, branchCode, productCode, productName, dkhNo, nameDay, dkhDate, picHead, collCode, collName, dkhSts, dkhStsName, qtyCustomer, qtyGroup, qtyGroupVisit, qtyGroupCash, totCollFee,&#xd;totPenaltyValue, totInstallBill, totBill, totPaidCollFee, totPaidPenalty, totPaidInstallBill, totUtjPlus, totPaidCash, cashierDepositValue, paymentPointDeposit, collCashOnHand,&#xd;totUtjUsage, submittedDate, submittedBy, canceledDate, canceledBy, closedDate, closedBy, jumlahTertagih, jumlahTidakTertagih, sp1, sp2, sp3, sp1Mikro, sp2Mikro, sp3Mikro, createdDate, createdBy, qtyCustomerCash, updatedDateStr, dkhStatusDateFilter, totalPenugasan, totalDikunjungi, totalTidakDikunjungi, totalBelumDikunjungi from (&#xd;	SELECT DISTINCT companyCode, branchCode, productCode, productName, dkhNo, nameDay, dkhDate, picHead, collCode, collName, dkhSts, dkhStsName, qtyCustomer, qtyGroup, qtyGroupVisit, qtyGroupCash, totCollFee,&#xd;	totPenaltyValue, totInstallBill, totBill, totPaidCollFee, totPaidPenalty, totPaidInstallBill, totUtjPlus, totPaidCash, cashierDepositValue, paymentPointDeposit, collCashOnHand,&#xd;	totUtjUsage, submittedDate, submittedBy, canceledDate, canceledBy, closedDate, closedBy, jumlahTertagih, jumlahTidakTertagih, sp1, sp2, sp3, sp1Mikro, sp2Mikro, sp3Mikro, createdDate, createdBy, qtyCustomerCash, flagSend, flagSendDate, updatedDateStr, dkhStatusDateFilter, totalPenugasan, totalDikunjungi, totalTidakDikunjungi, totalBelumDikunjungi FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			E.PARAM_DESCRIP productName,&#xd;			A.DKH_NO dkhNo,&#xd;			(&#xd;				case&#xd;					when datename(dw, A.DKH_DATE) = 'Sunday' then 'Minggu'&#xd;					when datename(dw, A.DKH_DATE) = 'Monday' then 'Senin'&#xd;					when datename(dw, A.DKH_DATE) = 'Tuesday' then 'Selasa'&#xd;					when datename(dw, A.DKH_DATE) = 'Wednesday' then 'Rabu'&#xd;					when datename(dw, A.DKH_DATE) = 'Thursday' then 'Kamis'&#xd;					when datename(dw, A.DKH_DATE) = 'Friday' then 'Jumat'&#xd;					when datename(dw, A.DKH_DATE) = 'Saturday' then 'Sabtu'&#xd;				end&#xd;			) as nameDay,&#xd;			A.DKH_DATE dkhDate,&#xd;			A.PIC_HEAD picHead,&#xd;			A.COLL_CODE collCode,&#xd;			B.FULLNAME collName,&#xd;			A.DKH_STS dkhSts,&#xd;			C.PARAM_DESCRIP dkhStsName,&#xd;			A.QTY_CUSTOMER qtyCustomer,&#xd;			A.QTY_GROUP qtyGroup,&#xd;			A.QTY_GROUP_VISIT qtyGroupVisit,&#xd;			A.QTY_GROUP_CASH qtyGroupCash,&#xd;			A.TOT_COLL_FEE totCollFee,&#xd;			A.TOT_PENALTY_VALUE totPenaltyValue,&#xd;			A.TOT_INSTALL_BILL totInstallBill,&#xd;			A.TOT_BILL totBill,&#xd;			A.TOT_PAID_COLL_FEE totPaidCollFee,&#xd;			A.TOT_PAID_PENALTY totPaidPenalty,&#xd;			A.TOT_PAID_INSTALL_BILL totPaidInstallBill,&#xd;			A.TOT_UTJ_PLUS totUtjPlus,&#xd;			A.TOT_PAID_CASH totPaidCash,&#xd;			A.CASHIER_DEPOSIT_VALUE cashierDepositValue,&#xd;			A.PAYMENT_POINT_DEPOSIT paymentPointDeposit,&#xd;			A.COLL_CASH_ON_HAND collCashOnHand,&#xd;			A.TOT_UTJ_USAGE totUtjUsage,&#xd;			A.SUBMITTED_DATE submittedDate,&#xd;			A.SUBMITTED_BY submittedBy,&#xd;			A.CANCELED_DATE canceledDate,&#xd;			A.CANCELED_BY canceledBy,&#xd;			A.CLOSED_DATE closedDate,&#xd;			A.CLOSED_BY closedBy,&#xd;			CASE WHEN A.PRODUCT_CODE = 'PC02' THEN (&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;				  f.company_code = a.company_code&#xd;				  and f.branch_code = a.branch_code&#xd;                  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH &gt; 0 &#xd;                  AND PAID_STS != '999'&#xd;              )+(&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;                  f.company_code = a.company_code&#xd;				  and f.branch_code = a.branch_code&#xd;				  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH = 0 &#xd;                  AND F.UTJ_APPV_STS = 'APPD' &#xd;                  AND F.PAID_STS != '999'&#xd;              ) ELSE (&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;                  f.company_code = a.company_code&#xd;				  and f.branch_code = a.branch_code&#xd;				  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH &gt; 0 &#xd;                  AND F.PAID_STS != '999'&#xd;              ) END as jumlahTertagih, &#xd;              CASE WHEN A.PRODUCT_CODE = 'PC02' THEN A.QTY_CUSTOMER - (&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;                  f.company_code = a.company_code&#xd;				  and f.branch_code = a.branch_code&#xd;				  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH &gt; 0 &#xd;                  AND PAID_STS != '999'&#xd;              )+(&#xd;                SELECT &#xd;                  COUNT(0) PAID_CASH &#xd;                FROM &#xd;                  TRX_DKH_DTL F (NOLOCK) &#xd;                WHERE &#xd;				f.company_code = a.company_code&#xd;                  and f.branch_code = a.branch_code&#xd;				  and F.DKH_NO = A.DKH_NO &#xd;                  AND F.PAID_CASH = 0 &#xd;                  AND F.UTJ_APPV_STS = 'APPD' &#xd;                  AND F.PAID_STS != '999'&#xd;              ) ELSE (&#xd;                A.QTY_CUSTOMER -(&#xd;                  SELECT &#xd;                    COUNT(0) PAID_CASH &#xd;                  FROM &#xd;                    TRX_DKH_DTL F (NOLOCK) &#xd;                  WHERE &#xd;                    f.company_code = a.company_code&#xd;					and f.branch_code = a.branch_code&#xd;					and F.DKH_NO = A.DKH_NO &#xd;                    AND F.PAID_CASH &gt; 0 &#xd;                    AND F.PAID_STS != '999'&#xd;                )&#xd;              ) END jumlahTidakTertagih, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE &#xd;					company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '001' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp1, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE &#xd;                  company_code = a.company_code&#xd;				  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '002' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp2, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '003' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp3, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '004' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp1Mikro, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '005' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp2Mikro, &#xd;              (&#xd;                SELECT &#xd;                  COUNT(0) SP_NO &#xd;                FROM &#xd;                  TRX_DKH_DTL (NOLOCK) &#xd;                WHERE company_code = a.company_code&#xd;                  and branch_code = a.branch_code&#xd;				  and SP_TYPE = '006' &#xd;                  AND DKH_NO = A.DKH_NO&#xd;              ) as sp3Mikro,&#xd;			D.PAYMENT_DATE paymentDate,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.CREATED_BY createdBy,&#xd;			A.QTY_CUSTOMER_CASH qtyCustomerCash,&#xd;			ISNULL(D.FLAG_SEND, '') flagSend,&#xd;			CONVERT(DATE,D.FLAG_SEND_DATE) flagSendDate,&#xd;			CONVERT(varchar, A.UPDATED_DATE, 121) as updatedDateStr,&#xd;			CASE&#xd;				WHEN A.DKH_STS = 'OPEN' THEN CONVERT(DATE, A.CREATED_DATE)&#xd;				WHEN A.DKH_STS = 'PROC' THEN CONVERT(DATE, A.SUBMITTED_DATE)&#xd;				WHEN A.DKH_STS = 'CLOS' THEN CONVERT(DATE, A.CLOSED_DATE)&#xd;				WHEN A.DKH_STS = 'CANC' THEN CONVERT(DATE, A.CANCELED_DATE)&#xd;			END dkhStatusDateFilter,&#xd;			(&#xd;				select count(aggr_no) as totalPenugasan from trx_dkh_dtl (NOLOCK) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999'&#xd;			) as totalPenugasan,&#xd;			(&#xd;				select count(aggr_no) as totalPenugasan from trx_dkh_dtl (NOLOCK) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and visit_code = '1'&#xd;			) as totalDikunjungi,&#xd;			(&#xd;				select count(aggr_no) as totalPenugasan from trx_dkh_dtl (NOLOCK) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and visit_code = '0'&#xd;			) as totalTidakDikunjungi,&#xd;			(&#xd;				select count(aggr_no) as totalPenugasan from trx_dkh_dtl (NOLOCK) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and isnull(visit_code, '') = ''&#xd;			) as totalBelumDikunjungi&#xd;		FROM TRX_DKH_HDR A (NOLOCK)&#xd;		LEFT JOIN MST_EMPLOYEE B (NOLOCK)&#xd;		ON A.COLL_CODE = B.NIK and a.company_code = b.company_code&#xd;		LEFT JOIN MST_GLOBAL_PARAM C (NOLOCK)&#xd;		ON A.DKH_STS = C.PARAM_CODE AND C.CONDITION = 'DKH_STS' AND C.FLAG_ACTIVE = '1' and c.company_code = a.company_code&#xd;		LEFT JOIN TRX_DKH_DTL D (NOLOCK)&#xd;		ON a.company_code = d.company_code and a.branch_code = d.branch_code and A.DKH_NO = D.DKH_NO AND (convert(date,D.FLAG_SEND_DATE) BETWEEN :dateFrom AND :dateUntil OR D.FLAG_SEND_DATE IS NULL)&#xd;		LEFT JOIN MST_GLOBAL_PARAM E (NOLOCK)&#xd;		ON e.company_code = a.company_code and A.PRODUCT_CODE = E.PARAM_CODE AND E.CONDITION = 'PRODUCT_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	)  A &#xd;) a WHERE  :search :filter :customFilter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="nameDay" name="nameDay" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="picHead" name="picHead" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhSts" name="dkhSts" xsdType="string"/>
         <element column="dkhStsName" name="dkhStsName" xsdType="string"/>
         <element column="qtyCustomer" name="qtyCustomer" xsdType="string"/>
         <element column="qtyGroup" name="qtyGroup" xsdType="string"/>
         <element column="qtyGroupVisit" name="qtyGroupVisit" xsdType="string"/>
         <element column="qtyGroupCash" name="qtyGroupCash" xsdType="string"/>
         <element column="totCollFee" name="totCollFee" xsdType="string"/>
         <element column="totPenaltyValue" name="totPenaltyValue" xsdType="string"/>
         <element column="totInstallBill" name="totInstallBill" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="totPaidCollFee" name="totPaidCollFee" xsdType="string"/>
         <element column="totPaidPenalty" name="totPaidPenalty" xsdType="string"/>
         <element column="totPaidInstallBill" name="totPaidInstallBill" xsdType="string"/>
         <element column="totUtjPlus" name="totUtjPlus" xsdType="string"/>
         <element column="totPaidCash" name="totPaidCash" xsdType="string"/>
         <element column="paymentPointDeposit" name="paymentPointDeposit" xsdType="string"/>
         <element column="collCashOnHand" name="collCashOnHand" xsdType="string"/>
         <element column="totUtjUsage" name="totUtjUsage" xsdType="string"/>
         <element column="submittedDate" name="submittedDate" xsdType="string"/>
         <element column="submittedBy" name="submittedBy" xsdType="string"/>
         <element column="canceledDate" name="canceledDate" xsdType="string"/>
         <element column="canceledBy" name="canceledBy" xsdType="string"/>
         <element column="closedDate" name="closedDate" xsdType="string"/>
         <element column="closedBy" name="closedBy" xsdType="string"/>
         <element column="jumlahTertagih" name="jumlahTertagih" xsdType="string"/>
         <element column="jumlahTidakTertagih" name="jumlahTidakTertagih" xsdType="string"/>
         <element column="sp1" name="sp1" xsdType="string"/>
         <element column="sp2" name="sp2" xsdType="string"/>
         <element column="sp3" name="sp3" xsdType="string"/>
         <element column="sp1Mikro" name="sp1Mikro" xsdType="string"/>
         <element column="sp2Mikro" name="sp2Mikro" xsdType="string"/>
         <element column="sp3Mikro" name="sp3Mikro" xsdType="string"/>
         <element column="cashierDepositValue" name="cashierDepositValue" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="createdBy" name="createdBy" xsdType="string"/>
         <element column="qtyCustomerCash" name="qtyCustomerCash" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
         <element column="dkhStatusDateFilter" name="dkhStatusDateFilter" xsdType="string"/>
         <element column="totalPenugasan" name="totalPenugasan" xsdType="string"/>
         <element column="totalDikunjungi" name="totalDikunjungi" xsdType="string"/>
         <element column="totalTidakDikunjungi" name="totalTidakDikunjungi" xsdType="string"/>
         <element column="totalBelumDikunjungi" name="totalBelumDikunjungi" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="dateFrom" sqlType="STRING"/>
      <param name="dateUntil" sqlType="STRING"/>
      <param name="customFilter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="insertTrxDkhHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_DKH_HDR&#xd;(&#xd;	COMPANY_CODE,&#xd;	BRANCH_CODE,&#xd;	DKH_NO,&#xd;	PRODUCT_CODE,&#xd;	DKH_DATE,&#xd;	PIC_HEAD,&#xd;	COLL_CODE,&#xd;	DKH_STS,&#xd;	QTY_CUSTOMER,&#xd;	QTY_CUSTOMER_CASH,&#xd;	QTY_GROUP,&#xd;	QTY_GROUP_VISIT,&#xd;	QTY_GROUP_CASH,&#xd;	TOT_COLL_FEE,&#xd;	TOT_PENALTY_VALUE,&#xd;	TOT_INSTALL_BILL,&#xd;	TOT_BILL,&#xd;	TOT_PAID_COLL_FEE,&#xd;	TOT_PAID_PENALTY,&#xd;	TOT_PAID_INSTALL_BILL,&#xd;	TOT_UTJ_PLUS,&#xd;	TOT_PAID_CASH,&#xd;	CASHIER_DEPOSIT_VALUE,&#xd;	PAYMENT_POINT_DEPOSIT,&#xd;	COLL_CASH_ON_HAND,&#xd;	TOT_UTJ_USAGE,&#xd;	SUBMITTED_DATE,&#xd;	SUBMITTED_BY,&#xd;	CANCELED_DATE,&#xd;	CANCELED_BY,&#xd;	CLOSED_DATE,&#xd;	CLOSED_BY,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;	:branchCode,&#xd;	:dkhNo,&#xd;	:productCode,&#xd;	:dkhDate,&#xd;	:picHead,&#xd;	:collCode,&#xd;	:dkhSts,&#xd;	:qtyCustomer,&#xd;	'0',&#xd;	:qtyGroup,&#xd;	:qtyGroupVisit,&#xd;	:qtyGroupCash,&#xd;	:totCollFee,&#xd;	:totPenaltyValue,&#xd;	:totInstallBill,&#xd;	:totBill,&#xd;	:totPaidCollFee,&#xd;	:totPaidPenalty,&#xd;	:totPaidInstallBill,&#xd;	:totUtjPlus,&#xd;	:totPaidCash,&#xd;	:cashierDepositValue,&#xd;	:paymentPointDeposit,&#xd;	:collCashOnHand,&#xd;	:totUtjUsage,&#xd;	:submittedDate,&#xd;	:submittedBy,&#xd;	:canceledDate,&#xd;	:canceledBy,&#xd;	:closedDate,&#xd;	:closedBy,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="dkhDate" sqlType="STRING"/>
      <param name="picHead" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="dkhSts" sqlType="STRING"/>
      <param name="qtyCustomer" sqlType="STRING"/>
      <param name="qtyGroup" sqlType="STRING"/>
      <param name="qtyGroupVisit" sqlType="STRING"/>
      <param name="qtyGroupCash" sqlType="STRING"/>
      <param name="totCollFee" sqlType="STRING"/>
      <param name="totPenaltyValue" sqlType="STRING"/>
      <param name="totInstallBill" sqlType="STRING"/>
      <param name="totBill" sqlType="STRING"/>
      <param name="totPaidCollFee" sqlType="STRING"/>
      <param name="totPaidPenalty" sqlType="STRING"/>
      <param name="totPaidInstallBill" sqlType="STRING"/>
      <param name="totUtjPlus" sqlType="STRING"/>
      <param name="totPaidCash" sqlType="STRING"/>
      <param name="cashierDepositValue" sqlType="STRING"/>
      <param name="paymentPointDeposit" sqlType="STRING"/>
      <param name="collCashOnHand" sqlType="STRING"/>
      <param name="totUtjUsage" sqlType="STRING"/>
      <param name="submittedDate" sqlType="STRING"/>
      <param name="submittedBy" sqlType="STRING"/>
      <param name="canceledDate" sqlType="STRING"/>
      <param name="canceledBy" sqlType="STRING"/>
      <param name="closedDate" sqlType="STRING"/>
      <param name="closedBy" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="insertTrxDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_DKH_DTL&#xd;(&#xd;	COMPANY_CODE,&#xd;	BRANCH_CODE,&#xd;	DKH_NO,&#xd;	AGGR_NO,&#xd;	DKH_TIME,&#xd;	GROUP_CODE,&#xd;	CUSTOMER_CODE,&#xd;	PROMISEE_STS,&#xd;	DUE_DATE,&#xd;	INST_FROM,&#xd;	INST_TO,&#xd;	DAY_OVERDUE,&#xd;	TOT_UNDUE_INSTALL,&#xd;	INSTALLMENT,&#xd;	COLL_FEE,&#xd;	PENALTY_VALUE,&#xd;	INSTALL_BILL,&#xd;	TOT_BILL,&#xd;	VISIT_CODE,&#xd;	VISIT_TIME,&#xd;	VISIT_TIME_VALUE,&#xd;	PAID_STS,&#xd;	RECEIPT_NO,&#xd;	JB_DATE,&#xd;	JB_TIME,&#xd;	TU_DATE,&#xd;	TU_TIME,&#xd;	TU_TIME_VALUE,&#xd;	MEET_CODE,&#xd;	MEET_NAME,&#xd;	ADDR_STS,&#xd;	UNIT_STS,&#xd;	PAYMENT_DATE,&#xd;	CUSTOMER_PAYMENT_DATE,&#xd;	PRESENCE_STS,&#xd;	PREPAYMENT_STS,&#xd;	PAID_COLL_FEE,&#xd;	PAID_PENALTY,&#xd;	PAID_INSTALL,&#xd;	PAID_CASH,&#xd;	DISCOUNT,&#xd;	ATT_CODE,&#xd;	UTJ_BALANCE,&#xd;	UTJ_PLUS_VALUE,&#xd;	UTJ_USAGE_VALUE,&#xd;	UTJ_USAGE_REASON,&#xd;	UTJ_APPV_STS,&#xd;	UTJ_APPV_DATE,&#xd;	UTJ_POSTED,&#xd;	UTJ_POSTED_DATE,&#xd;	SP_NO,&#xd;	SP_TYPE,&#xd;	SP_RECEIPT_TYPE,&#xd;	SP_RECEIPT_NAME,&#xd;	SP_NOTES,&#xd;	STTU_NO,&#xd;	COLL_NOTES,&#xd;	FLAG_SEND,&#xd;	FLAG_SEND_DATE,&#xd;	LONGTITUDE,&#xd;	LATITUDE,&#xd;	CASHIER_CODE,&#xd;	BILL_STS,&#xd;	TEAM_NO,&#xd;	CREATED_DATE,&#xd;	CREATED_BY,&#xd;	COLL_FEE_RATE&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;	:branchCode,&#xd;	:dkhNo,&#xd;	:aggrNo,&#xd;	:dkhTime,&#xd;	:groupCode,&#xd;	:customerCode,&#xd;	:promiseeSts,&#xd;	:dueDate,&#xd;	:instFrom,&#xd;	:instTo,&#xd;	:dayOverdue,&#xd;	:totUndueInstall,&#xd;	:installment,&#xd;	:collFee,&#xd;	:penaltyValue,&#xd;	:installBill,&#xd;	:totBill,&#xd;	:visitCode,&#xd;	:visitTime,&#xd;	:visitTimeValue,&#xd;	:paidSts,&#xd;	:receiptNo,&#xd;	:jbDate,&#xd;	:jbTime,&#xd;	:tuDate,&#xd;	:tuTime,&#xd;	:tuTimeValue,&#xd;	:meetCode,&#xd;	:meetName,&#xd;	:addrSts,&#xd;	:unitSts,&#xd;	:paymentDate,&#xd;	:customerPaymentDate,&#xd;	:presenceSts,&#xd;	:prepaymentSts,&#xd;	:paidCollFee,&#xd;	:paidPenalty,&#xd;	:paidInstall,&#xd;	:paidCash,&#xd;	:discount,&#xd;	:attCode,&#xd;	:utjBalance,&#xd;	:utjPlusValue,&#xd;	:utjUsageValue,&#xd;	:utjUsageReason,&#xd;	:utjAppvSts,&#xd;	:utjAppvDate,&#xd;	:utjPosted,&#xd;	:utjPostedDate,&#xd;	:spNo,&#xd;	:spType,&#xd;	:spReceiptType,&#xd;	:spReceiptName,&#xd;	:spNotes,&#xd;	:sttuNo,&#xd;	:collNotes,&#xd;	:flagSend,&#xd;	:flagSendDate,&#xd;	:longtitude,&#xd;	:latitude,&#xd;	:cashierCode,&#xd;	:billSts,&#xd;	:teamNo,&#xd;	GETDATE(),&#xd;	:createdBy,&#xd;	:collFeeRate&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="dkhTime" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
      <param name="customerCode" sqlType="STRING"/>
      <param name="promiseeSts" sqlType="STRING"/>
      <param name="dueDate" sqlType="STRING"/>
      <param name="instFrom" sqlType="STRING"/>
      <param name="instTo" sqlType="STRING"/>
      <param name="dayOverdue" sqlType="STRING"/>
      <param name="totUndueInstall" sqlType="STRING"/>
      <param name="installment" sqlType="STRING"/>
      <param name="collFee" sqlType="STRING"/>
      <param name="penaltyValue" sqlType="STRING"/>
      <param name="installBill" sqlType="STRING"/>
      <param name="totBill" sqlType="STRING"/>
      <param name="visitCode" sqlType="STRING"/>
      <param name="visitTime" sqlType="STRING"/>
      <param name="paidSts" sqlType="STRING"/>
      <param name="receiptNo" sqlType="STRING"/>
      <param name="jbDate" sqlType="STRING"/>
      <param name="jbTime" sqlType="STRING"/>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="meetCode" sqlType="STRING"/>
      <param name="meetName" sqlType="STRING"/>
      <param name="addrSts" sqlType="STRING"/>
      <param name="unitSts" sqlType="STRING"/>
      <param name="paymentDate" sqlType="STRING"/>
      <param name="presenceSts" sqlType="STRING"/>
      <param name="prepaymentSts" sqlType="STRING"/>
      <param name="paidCollFee" sqlType="STRING"/>
      <param name="paidPenalty" sqlType="STRING"/>
      <param name="paidInstall" sqlType="STRING"/>
      <param name="paidCash" sqlType="STRING"/>
      <param name="discount" sqlType="STRING"/>
      <param name="attCode" sqlType="STRING"/>
      <param name="utjBalance" sqlType="STRING"/>
      <param name="utjPlusValue" sqlType="STRING"/>
      <param name="utjUsageValue" sqlType="STRING"/>
      <param name="utjUsageReason" sqlType="STRING"/>
      <param name="utjAppvSts" sqlType="STRING"/>
      <param name="utjAppvDate" sqlType="STRING"/>
      <param name="utjPosted" sqlType="STRING"/>
      <param name="utjPostedDate" sqlType="STRING"/>
      <param name="spNo" sqlType="STRING"/>
      <param name="spType" sqlType="STRING"/>
      <param name="spReceiptType" sqlType="STRING"/>
      <param name="spReceiptName" sqlType="STRING"/>
      <param name="spNotes" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="collNotes" sqlType="STRING"/>
      <param name="flagSend" sqlType="STRING"/>
      <param name="flagSendDate" sqlType="STRING"/>
      <param name="longtitude" sqlType="STRING"/>
      <param name="latitude" sqlType="STRING"/>
      <param name="cashierCode" sqlType="STRING"/>
      <param name="billSts" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="customerPaymentDate" sqlType="STRING"/>
      <param name="visitTimeValue" sqlType="STRING"/>
      <param name="tuTimeValue" sqlType="STRING"/>
      <param name="teamNo" optional="false" sqlType="STRING"/>
      <param name="collFeeRate" sqlType="STRING"/>
   </query>
   <query id="insertTrxDkhGroup" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_DKH_GROUP&#xd;(&#xd;	COMPANY_CODE,&#xd;	BRANCH_CODE,&#xd;	DKH_NO,&#xd;	GROUP_CODE,&#xd;	COLL_TIME,&#xd;	VISIT_CODE,&#xd;	VISIT_TIME,&#xd;	JB_DATE,&#xd;	JB_TIME,&#xd;	TU_DATE,&#xd;	TU_TIME,&#xd;	REASON_UNVISIT,&#xd;	RECEIPT_NO,&#xd;	QTY_CUSTOMER_PAID,&#xd;	TOT_COLL_FEE,&#xd;	TOT_PENALTY_VALUE,&#xd;	TOT_INSTALL_BILL,&#xd;	TOT_BILL,&#xd;	TOT_PAID_COLL_FEE,&#xd;	TOT_PAID_PENALTY,&#xd;	TOT_PAID_INSTALL_BILL,&#xd;	TOT_UTJ_PLUS_VALUE,&#xd;	TOT_PAID_CASH,&#xd;	TOT_UTJ_USAGE_VALUE,&#xd;	BILL_STS,&#xd;	FLAG_SEND,&#xd;	FLAG_SEND_DATE,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;	:branchCode,&#xd;	:dkhNo,&#xd;	:groupCode,&#xd;	:collTime,&#xd;	:visitCode,&#xd;	:visitTime,&#xd;	:jbDate,&#xd;	:jbTime,&#xd;	:tuDate,&#xd;	:tuTime,&#xd;	:reasonUnvisit,&#xd;	:receiptNo,&#xd;	:qtyCustomerPaid,&#xd;	:totCollFee,&#xd;	:totPenaltyValue,&#xd;	:totInstallBill,&#xd;	:totBill,&#xd;	:totPaidCollFee,&#xd;	:totPaidPenalty,&#xd;	:totPaidInstallBill,&#xd;	:totUtjPlusValue,&#xd;	:totPaidCash,&#xd;	:totUtjUsageValue,&#xd;	:billSts,&#xd;	:flagSend,&#xd;	:flagSendDate,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
      <param name="collTime" sqlType="STRING"/>
      <param name="visitCode" sqlType="STRING"/>
      <param name="visitTime" sqlType="STRING"/>
      <param name="jbDate" sqlType="STRING"/>
      <param name="jbTime" sqlType="STRING"/>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="reasonUnvisit" sqlType="STRING"/>
      <param name="receiptNo" sqlType="STRING"/>
      <param name="qtyCustomerPaid" sqlType="STRING"/>
      <param name="totCollFee" sqlType="STRING"/>
      <param name="totPenaltyValue" sqlType="STRING"/>
      <param name="totInstallBill" sqlType="STRING"/>
      <param name="totBill" sqlType="STRING"/>
      <param name="totPaidCollFee" sqlType="STRING"/>
      <param name="totPaidPenalty" sqlType="STRING"/>
      <param name="totPaidInstallBill" sqlType="STRING"/>
      <param name="totUtjPlusValue" sqlType="STRING"/>
      <param name="totPaidCash" sqlType="STRING"/>
      <param name="totUtjUsageValue" sqlType="STRING"/>
      <param name="billSts" sqlType="STRING"/>
      <param name="flagSend" sqlType="STRING"/>
      <param name="flagSendDate" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="updateTrxDkhHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(10) = :branchCode&#xd;DECLARE @DKH_NO VARCHAR(50) = :dkhNo&#xd;DECLARE @DKH_STS VARCHAR(10) = :dkhSts&#xd;DECLARE @QTY_CUSTOMER NUMERIC(5,0) = :qtyCustomer&#xd;DECLARE @QTY_CUSTOMER_CASH NUMERIC(5,0) = :qtyCustomerCash&#xd;DECLARE @QTY_GROUP NUMERIC(5,0) = :qtyGroup&#xd;DECLARE @QTY_GROUP_VISIT NUMERIC(5,0) = :qtyGroupVisit&#xd;DECLARE @QTY_GROUP_CASH NUMERIC(5,0) = :qtyGroupCash&#xd;DECLARE @TOT_COLL_FEE NUMERIC(20,4) = :totCollFee&#xd;DECLARE @TOT_PENALTY_VALUE NUMERIC(20,4) = :totPenaltyValue&#xd;DECLARE @TOT_INSTALL_BILL NUMERIC(20,4) = :totInstallBill&#xd;DECLARE @TOT_BILL NUMERIC(20,4) = :totBill&#xd;DECLARE @TOT_PAID_COLL_FEE NUMERIC(20,4) = :totPaidCollFee&#xd;DECLARE @TOT_PAID_PENALTY NUMERIC(20,4) = :totPaidPenalty&#xd;DECLARE @TOT_PAID_INSTALL_BILL NUMERIC(20,4) = :totPaidInstallBill&#xd;DECLARE @TOT_UTJ_PLUS NUMERIC(20,4) = :totUtjPlus&#xd;DECLARE @TOT_PAID_CASH NUMERIC(20,4) = :totPaidCash&#xd;DECLARE @COLL_CASH_ON_HAND NUMERIC(20,4) = :collCashOnHand&#xd;DECLARE @TOT_UTJ_USAGE NUMERIC(20,4) = :totUtjUsage&#xd;DECLARE @SUBMITTED_DATE DATETIME = :submittedDate&#xd;DECLARE @SUBMITTED_BY VARCHAR(30) = :submittedBy&#xd;DECLARE @CANCELED_DATE DATETIME = :canceledDate&#xd;DECLARE @CANCELED_BY VARCHAR(30) = :canceledBy&#xd;DECLARE @CLOSED_DATE DATETIME = :closedDate&#xd;DECLARE @CLOSED_BY VARCHAR(30) = :closedBy&#xd;DECLARE @UPDATED_BY VARCHAR(30) = :updatedBy&#xd;&#xd;UPDATE TRX_DKH_HDR SET&#xd;	DKH_STS = IIF(DKH_STS = 'CLOS',DKH_STS,@DKH_STS),&#xd;	QTY_CUSTOMER = @QTY_CUSTOMER,&#xd;	QTY_CUSTOMER_CASH = @QTY_CUSTOMER_CASH,&#xd;	QTY_GROUP = @QTY_GROUP,&#xd;	QTY_GROUP_VISIT = @QTY_GROUP_VISIT,&#xd;	QTY_GROUP_CASH = @QTY_GROUP_CASH,&#xd;	TOT_COLL_FEE = @TOT_COLL_FEE,&#xd;	TOT_PENALTY_VALUE = @TOT_PENALTY_VALUE,&#xd;	TOT_INSTALL_BILL = @TOT_INSTALL_BILL,&#xd;	TOT_BILL = @TOT_BILL,&#xd;	TOT_PAID_COLL_FEE = @TOT_PAID_COLL_FEE,&#xd;	TOT_PAID_PENALTY = @TOT_PAID_PENALTY,&#xd;	TOT_PAID_INSTALL_BILL = @TOT_PAID_INSTALL_BILL,&#xd;	TOT_UTJ_PLUS = @TOT_UTJ_PLUS,&#xd;	TOT_PAID_CASH = @TOT_PAID_CASH,&#xd;	COLL_CASH_ON_HAND = @COLL_CASH_ON_HAND,&#xd;	TOT_UTJ_USAGE = @TOT_UTJ_USAGE,&#xd;	SUBMITTED_DATE = @SUBMITTED_DATE,&#xd;	SUBMITTED_BY = @SUBMITTED_BY,&#xd;	CANCELED_DATE = @CANCELED_DATE,&#xd;	CANCELED_BY = @CANCELED_BY,&#xd;	CLOSED_DATE = @CLOSED_DATE,&#xd;	CLOSED_BY = @CLOSED_BY,&#xd;	UPDATED_DATE = GETDATE(),&#xd;	UPDATED_BY = @UPDATED_BY&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="dkhSts" sqlType="STRING"/>
      <param name="qtyCustomer" sqlType="STRING"/>
      <param name="qtyGroup" sqlType="STRING"/>
      <param name="qtyGroupVisit" sqlType="STRING"/>
      <param name="qtyGroupCash" sqlType="STRING"/>
      <param name="totCollFee" sqlType="STRING"/>
      <param name="totPenaltyValue" sqlType="STRING"/>
      <param name="totInstallBill" sqlType="STRING"/>
      <param name="totBill" sqlType="STRING"/>
      <param name="totPaidCollFee" sqlType="STRING"/>
      <param name="totPaidPenalty" sqlType="STRING"/>
      <param name="totPaidInstallBill" sqlType="STRING"/>
      <param name="totUtjPlus" sqlType="STRING"/>
      <param name="totPaidCash" sqlType="STRING"/>
      <param name="collCashOnHand" sqlType="STRING"/>
      <param name="totUtjUsage" sqlType="STRING"/>
      <param name="submittedDate" sqlType="STRING"/>
      <param name="submittedBy" sqlType="STRING"/>
      <param name="canceledDate" sqlType="STRING"/>
      <param name="canceledBy" sqlType="STRING"/>
      <param name="closedDate" sqlType="STRING"/>
      <param name="closedBy" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="qtyCustomerCash" sqlType="STRING"/>
   </query>
   <query id="updateTrxDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @PAID_CASH NUMERIC(20,4) = :paidCash&#xd;DECLARE @FLAG_SEND tinyint = :flagSend&#xd;DECLARE @COMPANYCODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCHCODE VARCHAR(30) = :branchCode&#xd;DECLARE @DKHNO VARCHAR(50) = :dkhNo&#xd;DECLARE @AGGRNO VARCHAR(50) = :aggrNo&#xd;DECLARE @TUDATE date = :tuDate&#xd;DECLARE @TUTIME varchar(10) = :tuTime&#xd;DECLARE @TUTIMEVALUE varchar(5) = :tuTimeValue&#xd;DECLARE @UPDATEBY varchar(30) = :updatedBy&#xd;DECLARE @EXIST_FLAG_SEND tinyint = 0&#xd;DECLARE @DKH_TIME VARCHAR(10) = :dkhTime&#xd;DECLARE @PROMISEE_STS tinyint = :promiseeSts&#xd;DECLARE @DUE_DATE DATE = :dueDate&#xd;DECLARE @INST_FROM tinyint = :instFrom&#xd;DECLARE @INST_TO tinyint = :instTo&#xd;DECLARE @DAY_OVERDUE NUMERIC(5,0) = :dayOverdue&#xd;DECLARE @TOT_UNDUE_INSTALL NUMERIC(20,4) = :totUndueInstall&#xd;DECLARE @INSTALLMENT NUMERIC(20,4) = :installment&#xd;DECLARE @COLL_FEE NUMERIC(20,4) = :collFee&#xd;DECLARE @PENALTY_VALUE NUMERIC(20,4) = :penaltyValue&#xd;DECLARE @INSTALL_BILL NUMERIC(20,4) = :installBill&#xd;DECLARE @TOT_BILL NUMERIC(20,4) = :totBill&#xd;DECLARE @VISIT_CODE VARCHAR(10) = :visitCode&#xd;DECLARE @VISIT_TIME VARCHAR(10) = :visitTime&#xd;DECLARE @VISIT_TIME_VALUE VARCHAR(5) = :visitTimeValue&#xd;DECLARE @PAID_STS VARCHAR(10) = :paidSts&#xd;DECLARE @RECEIPT_NO VARCHAR(50) = :receiptNo&#xd;DECLARE @JB_DATE DATE = :jbDate&#xd;DECLARE @JB_TIME VARCHAR(10) = :jbTime&#xd;DECLARE @MEET_CODE VARCHAR(10) = :meetCode&#xd;DECLARE @MEET_NAME VARCHAR(100) = :meetName&#xd;DECLARE @ADDR_STS VARCHAR(10) = :addrSts&#xd;DECLARE @UNIT_STS VARCHAR(10) = :unitSts&#xd;DECLARE @PAYMENT_DATE DATE = :paymentDate&#xd;DECLARE @CUSTOMER_PAYMENT_DATE DATE = :customerPaymentDate&#xd;DECLARE @PRESENCE_STS tinyint = :presenceSts&#xd;DECLARE @PREPAYMENT_STS tinyint = :prepaymentSts&#xd;DECLARE @PAID_COLL_FEE NUMERIC(20,4) = :paidCollFee&#xd;DECLARE @PAID_PENALTY NUMERIC(20,4) = :paidPenalty&#xd;DECLARE @PAID_INSTALL NUMERIC(20,4) = :paidInstall&#xd;DECLARE @DISCOUNT NUMERIC(20,4) = :discount&#xd;DECLARE @ATT_CODE VARCHAR(50) = :attCode&#xd;DECLARE @UTJ_BALANCE NUMERIC(20,4) = :utjBalance&#xd;DECLARE @UTJ_PLUS_VALUE NUMERIC(20,4) = :utjPlusValue&#xd;DECLARE @UTJ_USAGE_VALUE NUMERIC(20,4) = :utjUsageValue&#xd;DECLARE @UTJ_USAGE_REASON VARCHAR(500) = :utjUsageReason&#xd;DECLARE @UTJ_APPV_STS VARCHAR(10) = :utjAppvSts&#xd;DECLARE @UTJ_APPV_DATE DATETIME = :utjAppvDate&#xd;DECLARE @SP_NO VARCHAR(50) = :spNo&#xd;DECLARE @SP_TYPE VARCHAR(10) = :spType&#xd;DECLARE @SP_RECEIPT_TYPE VARCHAR(10) = :spReceiptType&#xd;DECLARE @SP_RECEIPT_NAME VARCHAR(100) = :spReceiptName&#xd;DECLARE @SP_NOTES VARCHAR(500) = :spNotes&#xd;DECLARE @STTU_NO VARCHAR(50) = :sttuNo&#xd;DECLARE @COLL_NOTES VARCHAR(500) = :collNotes&#xd;DECLARE @FLAG_SEND_DATE DATETIME = :flagSendDate&#xd;DECLARE @BILL_STS VARCHAR(10) =  :billSts&#xd;&#xd;&#xd;SELECT @EXIST_FLAG_SEND = FLAG_SEND FROM TRX_DKH_DTL(nolock)&#xd;WHERE COMPANY_CODE = @COMPANYCODE  AND BRANCH_CODE = @BRANCHCODE AND&#xd;DKH_NO = @DKHNO AND AGGR_NO = @AGGRNO&#xd;&#xd;IF @EXIST_FLAG_SEND = 2        &#xd;        BEGIN&#xd;                UPDATE TRX_DKH_DTL SET&#xd;                        TU_DATE = @TUDATE,&#xd;                        TU_TIME = @TUTIME,&#xd;                        TU_TIME_VALUE =@TUTIMEVALUE,&#xd;                        LATITUDE =LATITUDE,&#xd;                        UPDATED_DATE = GETDATE(),&#xd;                        UPDATED_BY = @UPDATEBY&#xd;                WHERE&#xd;                        COMPANY_CODE =@COMPANYCODE AND&#xd;                        BRANCH_CODE =@BRANCHCODE AND&#xd;                        DKH_NO = @DKHNO AND&#xd;                        AGGR_NO = @AGGRNO&#xd;                &#xd;        END&#xd;ELSE&#xd;        BEGIN&#xd;                UPDATE TRX_DKH_DTL SET&#xd;                        DKH_TIME = @DKH_TIME,&#xd;                        PROMISEE_STS = @PROMISEE_STS,&#xd;                        DUE_DATE = @DUE_DATE,&#xd;                        INST_FROM = @INST_FROM,&#xd;                        INST_TO = @INST_TO,&#xd;                        DAY_OVERDUE = @DAY_OVERDUE,&#xd;                        TOT_UNDUE_INSTALL = @TOT_UNDUE_INSTALL,&#xd;                        INSTALLMENT = @INSTALLMENT,&#xd;                        COLL_FEE = @COLL_FEE,&#xd;                        PENALTY_VALUE = @PENALTY_VALUE,&#xd;                        INSTALL_BILL = @INSTALL_BILL,&#xd;                        TOT_BILL = @TOT_BILL,&#xd;                        VISIT_CODE = @VISIT_CODE,&#xd;                        VISIT_TIME = @VISIT_TIME,&#xd;                        VISIT_TIME_VALUE = @VISIT_TIME_VALUE,&#xd;                        PAID_STS = @PAID_STS,&#xd;                        RECEIPT_NO = IIF(PAID_CASH &gt; 0,RECEIPT_NO,@RECEIPT_NO),-- 2 kondisi&#xd;                        JB_DATE = @JB_DATE,&#xd;                        JB_TIME = @JB_TIME,&#xd;                        TU_DATE = @TUDATE,&#xd;                        TU_TIME = @TUTIME,&#xd;                        TU_TIME_VALUE = @TUTIMEVALUE,&#xd;                        MEET_CODE = @MEET_CODE,&#xd;                        MEET_NAME = @MEET_NAME,&#xd;                        ADDR_STS = @ADDR_STS,&#xd;                        UNIT_STS = @UNIT_STS,&#xd;                        PAYMENT_DATE = CASE WHEN @PAID_CASH = 0 THEN NULL ELSE @PAYMENT_DATE END, -- 2 kondisi&#xd;                        CUSTOMER_PAYMENT_DATE = CASE WHEN @PAID_CASH = 0 THEN NULL ELSE @CUSTOMER_PAYMENT_DATE END, -- 2 kondisi&#xd;                        PRESENCE_STS = @PRESENCE_STS,&#xd;                        PREPAYMENT_STS = @PREPAYMENT_STS,&#xd;                        PAID_COLL_FEE = @PAID_COLL_FEE,&#xd;                        PAID_PENALTY = @PAID_PENALTY,&#xd;                        PAID_INSTALL = IIF(PAID_CASH &gt; 0,PAID_INSTALL, @PAID_INSTALL), --2 kondisi&#xd;                        PAID_CASH = IIF(PAID_CASH &gt; 0,PAID_CASH,@PAID_CASH), -- 2 kondisi&#xd;                        DISCOUNT = @DISCOUNT,&#xd;                        ATT_CODE = @ATT_CODE,&#xd;                        UTJ_BALANCE = @UTJ_BALANCE,&#xd;                        UTJ_PLUS_VALUE = @UTJ_PLUS_VALUE,&#xd;                        UTJ_USAGE_VALUE = @UTJ_USAGE_VALUE,&#xd;                        UTJ_USAGE_REASON = @UTJ_USAGE_REASON,&#xd;                        UTJ_APPV_STS = @UTJ_APPV_STS,&#xd;                        UTJ_APPV_DATE = @UTJ_APPV_DATE,&#xd;                        SP_NO = @SP_NO,&#xd;                        SP_TYPE = @SP_TYPE,&#xd;                        SP_RECEIPT_TYPE = @SP_RECEIPT_TYPE,&#xd;                        SP_RECEIPT_NAME = @SP_RECEIPT_NAME,&#xd;                        SP_NOTES = @SP_NOTES,&#xd;                        STTU_NO = @STTU_NO,&#xd;                        COLL_NOTES = @COLL_NOTES,&#xd;                        FLAG_SEND = @FLAG_SEND,&#xd;                        FLAG_SEND_DATE = @FLAG_SEND_DATE,&#xd;                        LATITUDE = LATITUDE,&#xd;                        BILL_STS = @BILL_STS,&#xd;                        UPDATED_DATE = GETDATE(),&#xd;                        UPDATED_BY = @UPDATEBY&#xd;                WHERE&#xd;                        COMPANY_CODE = @COMPANYCODE AND&#xd;                        BRANCH_CODE = @BRANCHCODE AND&#xd;                        DKH_NO = @DKHNO AND&#xd;                        AGGR_NO = @AGGRNO&#xd;        END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="promiseeSts" sqlType="STRING"/>
      <param name="dueDate" sqlType="STRING"/>
      <param name="instFrom" sqlType="STRING"/>
      <param name="instTo" sqlType="STRING"/>
      <param name="dayOverdue" sqlType="STRING"/>
      <param name="totUndueInstall" sqlType="STRING"/>
      <param name="installment" sqlType="STRING"/>
      <param name="collFee" sqlType="STRING"/>
      <param name="penaltyValue" sqlType="STRING"/>
      <param name="installBill" sqlType="STRING"/>
      <param name="totBill" sqlType="STRING"/>
      <param name="visitCode" sqlType="STRING"/>
      <param name="visitTime" sqlType="STRING"/>
      <param name="paidSts" sqlType="STRING"/>
      <param name="receiptNo" sqlType="STRING"/>
      <param name="jbDate" sqlType="STRING"/>
      <param name="jbTime" sqlType="STRING"/>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="meetCode" sqlType="STRING"/>
      <param name="meetName" sqlType="STRING"/>
      <param name="addrSts" sqlType="STRING"/>
      <param name="unitSts" sqlType="STRING"/>
      <param name="paymentDate" sqlType="STRING"/>
      <param name="presenceSts" sqlType="STRING"/>
      <param name="prepaymentSts" sqlType="STRING"/>
      <param name="paidCollFee" sqlType="STRING"/>
      <param name="paidPenalty" sqlType="STRING"/>
      <param name="paidInstall" sqlType="STRING"/>
      <param name="paidCash" sqlType="STRING"/>
      <param name="discount" sqlType="STRING"/>
      <param name="attCode" sqlType="STRING"/>
      <param name="utjBalance" sqlType="STRING"/>
      <param name="utjPlusValue" sqlType="STRING"/>
      <param name="utjUsageValue" sqlType="STRING"/>
      <param name="utjUsageReason" sqlType="STRING"/>
      <param name="utjAppvSts" sqlType="STRING"/>
      <param name="utjAppvDate" sqlType="STRING"/>
      <param name="spNo" sqlType="STRING"/>
      <param name="spType" sqlType="STRING"/>
      <param name="spReceiptType" sqlType="STRING"/>
      <param name="spReceiptName" sqlType="STRING"/>
      <param name="spNotes" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="collNotes" sqlType="STRING"/>
      <param name="flagSend" sqlType="STRING"/>
      <param name="flagSendDate" sqlType="STRING"/>
      <param name="billSts" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="customerPaymentDate" sqlType="STRING"/>
      <param name="visitTimeValue" sqlType="STRING"/>
      <param name="tuTimeValue" sqlType="STRING"/>
      <param name="dkhTime" sqlType="STRING"/>
   </query>
   <query id="updateTrxDkhGroup" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>set transaction isolation level READ UNCOMMITTED&#xd;&#xd;declare @visitCode varchar(10) = :visitCode&#xd;declare @companycode varchar(10) = :companyCode&#xd;declare @branchcode varchar(10) = :branchCode&#xd;declare @dkhno varchar(50) = :dkhNo&#xd;declare @groupcode varchar(50) = :groupCode&#xd;declare @COLL_TIME varchar(10) = :collTime&#xd;declare @VISIT_TIME varchar(10) = :visitTime&#xd;declare @JB_DATE date = :jbDate&#xd;declare @JB_TIME varchar(10) = :jbTime&#xd;declare @TU_DATE date = :tuDate&#xd;declare @TU_TIME varchar(10) = :tuTime&#xd;declare @REASON_UNVISIT varchar(500) = :reasonUnvisit&#xd;declare @RECEIPT_NO varchar(50) = :receiptNo&#xd;declare @QTY_CUSTOMER_PAID numeric(5,0) = :qtyCustomerPaid&#xd;declare @TOT_COLL_FEE numeric(20,4) = :totCollFee&#xd;declare @TOT_PENALTY_VALUE numeric(20,4) = :totPenaltyValue&#xd;declare @TOT_INSTALL_BILL numeric(20,4) = :totInstallBill&#xd;declare @TOT_BILL numeric(20,4) = :totBill&#xd;declare @TOT_PAID_COLL_FEE numeric(20,4) = :totPaidCollFee&#xd;declare @TOT_PAID_PENALTY numeric(20,4) = :totPaidPenalty&#xd;declare @TOT_PAID_INSTALL_BILL numeric(20,4) = :totPaidInstallBill&#xd;declare @TOT_UTJ_PLUS_VALUE numeric(20,4) = :totUtjPlusValue&#xd;declare @TOT_PAID_CASH numeric(20,4) = :totPaidCash&#xd;declare @TOT_UTJ_USAGE_VALUE numeric(20,4) = :totUtjUsageValue&#xd;declare @BILL_STS varchar(10) = :billSts&#xd;declare @FLAG_SEND tinyint = :flagSend&#xd;declare @FLAG_SEND_DATE datetime = :flagSendDate&#xd;declare @UPDATED_BY varchar(30) = :updatedBy&#xd;&#xd;&#xd;UPDATE TRX_DKH_GROUP SET&#xd;	COLL_TIME = @COLL_TIME,&#xd;	VISIT_CODE = case when isnull(VISIT_CODE,'') = '' AND flag_send not in ('2')  then  @visitCode else VISIT_CODE end,&#xd;	VISIT_TIME = @VISIT_TIME,&#xd;	JB_DATE = @JB_DATE,&#xd;	JB_TIME = @JB_TIME,&#xd;	TU_DATE = @TU_DATE,&#xd;	TU_TIME = @TU_TIME,&#xd;	REASON_UNVISIT = @REASON_UNVISIT,&#xd;	RECEIPT_NO = case when isnull(RECEIPT_NO,'') = '' then @RECEIPT_NO else RECEIPT_NO end,&#xd;	QTY_CUSTOMER_PAID = @QTY_CUSTOMER_PAID,&#xd;	TOT_COLL_FEE = @TOT_COLL_FEE,&#xd;	TOT_PENALTY_VALUE = @TOT_PENALTY_VALUE,&#xd;	TOT_INSTALL_BILL = @TOT_INSTALL_BILL,&#xd;	TOT_BILL = @TOT_BILL,&#xd;	TOT_PAID_COLL_FEE = @TOT_PAID_COLL_FEE,&#xd;	TOT_PAID_PENALTY = @TOT_PAID_PENALTY,&#xd;	TOT_PAID_INSTALL_BILL = @TOT_PAID_INSTALL_BILL,&#xd;	TOT_UTJ_PLUS_VALUE = @TOT_UTJ_PLUS_VALUE,&#xd;	TOT_PAID_CASH = @TOT_PAID_CASH,&#xd;	TOT_UTJ_USAGE_VALUE = @TOT_UTJ_USAGE_VALUE,&#xd;	BILL_STS = @BILL_STS,&#xd;	FLAG_SEND = case&#xd;		when FLAG_SEND = '2' then '2'&#xd;		when FLAG_SEND = '1' AND @visitCode = '' then '1'&#xd;		else @FLAG_SEND&#xd;	end,&#xd;	FLAG_SEND_DATE = @FLAG_SEND_DATE,&#xd;	UPDATED_DATE = 	GETDATE(),&#xd;	UPDATED_BY = @UPDATED_BY&#xd;WHERE&#xd;	COMPANY_CODE = @companycode  AND&#xd;	BRANCH_CODE = @branchcode AND&#xd;	DKH_NO = @dkhno AND&#xd;	GROUP_CODE = @groupcode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="collTime" sqlType="STRING"/>
      <param name="visitCode" sqlType="STRING"/>
      <param name="visitTime" sqlType="STRING"/>
      <param name="jbDate" sqlType="STRING"/>
      <param name="jbTime" sqlType="STRING"/>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="reasonUnvisit" sqlType="STRING"/>
      <param name="receiptNo" sqlType="STRING"/>
      <param name="qtyCustomerPaid" sqlType="STRING"/>
      <param name="totCollFee" sqlType="STRING"/>
      <param name="totPenaltyValue" sqlType="STRING"/>
      <param name="totInstallBill" sqlType="STRING"/>
      <param name="totBill" sqlType="STRING"/>
      <param name="totPaidCollFee" sqlType="STRING"/>
      <param name="totPaidPenalty" sqlType="STRING"/>
      <param name="totPaidInstallBill" sqlType="STRING"/>
      <param name="totUtjPlusValue" sqlType="STRING"/>
      <param name="totPaidCash" sqlType="STRING"/>
      <param name="totUtjUsageValue" sqlType="STRING"/>
      <param name="billSts" sqlType="STRING"/>
      <param name="flagSend" sqlType="STRING"/>
      <param name="flagSendDate" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
   </query>
   <query id="lovCollAllBucket" useConfig="collectiondso1">
      <sql>SELECT bucketCode, collName FROM (&#xd;	SELECT  A.BUCKET_CODE bucketCode, B.FULLNAME collName&#xd;	FROM MST_COLL_AREA_DTL A&#xd;	LEFT JOIN MST_EMPLOYEE B ON A.COLL_CODE = B.NIK&#xd;	WHERE A.COMPANY_CODE = :companyCode AND A.BRANCH_CODE= :branchCode AND A.PRODUCT_CODE = :productCode AND A.EFFECTIVE_DATE = :effectiveDate AND A.VILLAGE_CODE = :villageCode&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
      <param name="villageCode" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxDkhGroup" useConfig="collectiondso1">
      <sql>SELECT collTime, groupName, qtyCustomerPaid, provinceName, cityName, subdistrictName, villageName, groupAddress, totInstallBill, totPenaltyValue, totCollFee FROM (&#xd;SELECT 1 collTime,1 groupName,1 qtyCustomerPaid,1 provinceName,1 cityName,1 subdistrictName,1 villageName,1 groupAddress,1 totInstallBill,1 totPenaltyValue,1 totCollFee&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="qtyCustomerPaid" name="qtyCustomerPaid" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="totInstallBill" name="totInstallBill" xsdType="string"/>
         <element column="totPenaltyValue" name="totPenaltyValue" xsdType="string"/>
         <element column="totCollFee" name="totCollFee" xsdType="string"/>
         <element column="collTime" name="collTime" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxDkhGroup" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT companyCode, branchCode, dkhNo, groupCode, groupName, groupAddress, groupRt, groupRw, villageCode, villageName, subdistrictName, cityName, provinceName, collCode, collName,&#xd;	dkhDate, collTime, visitCode, visitTime, jbDate, jbTime, tuDate, tuTime, reasonUnvisit, receiptNo, qtyCustomerPaid, totCollFee, totPenaltyValue, totInstallBill, totBill, totPaidCollFee,&#xd;	totPaidPenalty, totPaidInstallBill, totUtjPlusValue, totPaidCash, totUtjUsageValue, billSts, flagSend, flagSendDate, dkhSts, dkhStsName, janjiTagih, billStsName, collTimeDescrip, jumlahDebitur, jumlahDebiturHapus, flagRevitalization, flagGroup FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.DKH_NO dkhNo,&#xd;			concat(A.GROUP_CODE,'') groupCode,&#xd;			B.GROUP_NAME groupName,&#xd;			B.GROUP_ADDRESS groupAddress,&#xd;			B.GROUP_RT groupRt,&#xd;			B.GROUP_RW groupRw,&#xd;			B.GROUP_VILLAGE_CODE villageCode,&#xd;			B.FLAG_REVITALIZATION flagRevitalization,&#xd;			C.VILLAGE_NAME villageName,&#xd;			D.SUBDISTRICT_NAME subdistrictName,&#xd;			E.CITY_NAME cityName,&#xd;			F.PROVINCE_NAME provinceName,&#xd;			G.COLL_CODE collCode,&#xd;			H.FULLNAME collName,&#xd;			G.DKH_DATE dkhDate,&#xd;			G.DKH_STS dkhSts,&#xd;			I.PARAM_DESCRIP dkhStsName,&#xd;			A.COLL_TIME collTime,&#xd;			K.PARAM_DESCRIP collTimeDescrip,&#xd;			A.VISIT_CODE visitCode,&#xd;			A.VISIT_TIME visitTime,&#xd;			A.JB_DATE jbDate,&#xd;			A.JB_TIME jbTime,&#xd;			A.TU_DATE tuDate,&#xd;			A.TU_TIME tuTime,&#xd;			A.REASON_UNVISIT reasonUnvisit,&#xd;			A.RECEIPT_NO receiptNo,&#xd;			A.QTY_CUSTOMER_PAID qtyCustomerPaid,&#xd;			A.TOT_COLL_FEE totCollFee,&#xd;			A.TOT_PENALTY_VALUE totPenaltyValue,&#xd;			A.TOT_INSTALL_BILL totInstallBill,&#xd;			A.TOT_BILL totBill,&#xd;			A.TOT_PAID_COLL_FEE totPaidCollFee,&#xd;			A.TOT_PAID_PENALTY totPaidPenalty,&#xd;			A.TOT_PAID_INSTALL_BILL totPaidInstallBill,&#xd;			A.TOT_UTJ_PLUS_VALUE totUtjPlusValue,&#xd;			A.TOT_PAID_CASH totPaidCash,&#xd;			A.TOT_UTJ_USAGE_VALUE totUtjUsageValue,&#xd;			A.BILL_STS billSts,&#xd;			A.FLAG_SEND flagSend,&#xd;			A.FLAG_SEND_DATE flagSendDate,&#xd;			(SELECT COUNT(0) GROUP_CODE &#xd;			FROM TRX_TAGIH_ULANG(nolock) Q &#xd;			LEFT JOIN TRX_DKH_GROUP(nolock) R &#xd;			ON Q.GROUP_CODE = R.GROUP_CODE WHERE Q.GROUP_CODE = A.GROUP_CODE AND Q.TU_DATE = CONVERT(DATE, GETDATE())) as janjiTagih,&#xd;			J.PARAM_DESCRIP billStsName,&#xd;			(select count(0) as total from trx_dkh_dtl(nolock) where dkh_no = A.DKH_NO and group_code = A.GROUP_CODE) jumlahDebitur,&#xd;			(select count(0) as total from trx_dkh_dtl(nolock) where dkh_no = A.DKH_NO and group_code = A.GROUP_CODE and paid_sts = '999') jumlahDebiturHapus,&#xd;			'0' as flagGroup&#xd;		FROM TRX_DKH_GROUP A (nolock)&#xd;		LEFT JOIN MST_GROUP_HDR B (nolock)&#xd;		ON A.COMPANY_CODE = B.COMPANY_CODE AND A.GROUP_CODE = B.GROUP_CODE	&#xd;		LEFT JOIN MST_VILLAGE C (nolock)&#xd;		ON B.COMPANY_CODE = C.COMPANY_CODE AND B.GROUP_VILLAGE_CODE = C.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT D (nolock)&#xd;		ON C.COMPANY_CODE = D.COMPANY_CODE AND C.SUBDISTRICT_CODE = D.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY E (nolock)&#xd;		ON C.COMPANY_CODE = E.COMPANY_CODE AND C.CITY_CODE = E.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE F (nolock)&#xd;		ON C.COMPANY_CODE = F.COMPANY_CODE AND C.PROVINCE_CODE = F.PROVINCE_CODE&#xd;		LEFT JOIN TRX_DKH_HDR G (nolock)&#xd;		ON A.COMPANY_CODE = G.COMPANY_CODE AND A.DKH_NO = G.DKH_NO&#xd;		LEFT JOIN MST_EMPLOYEE H (nolock)&#xd;		ON G.COMPANY_CODE = H.COMPANY_CODE AND G.COLL_CODE = H.NIK&#xd;		LEFT JOIN MST_GLOBAL_PARAM I (nolock)&#xd;		ON G.COMPANY_CODE = I.COMPANY_CODE AND G.DKH_STS = I.PARAM_CODE AND I.CONDITION = 'DKH_STS' AND I.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_GLOBAL_PARAM J (nolock)&#xd;		ON A.COMPANY_CODE = J.COMPANY_CODE AND A.BILL_STS = J.PARAM_CODE AND J.CONDITION = 'BILL_STS' AND J.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_GLOBAL_PARAM K (nolock)&#xd;		ON A.COMPANY_CODE = K.COMPANY_CODE AND A.COLL_TIME = K.PARAM_CODE AND K.CONDITION = 'VISIT_TIME' AND K.FLAG_ACTIVE = '1'&#xd;	) t WHERE jumlahDebitur != jumlahDebiturHapus&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxDkhGroup" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, dkhNo, groupCode, groupName, groupAddress, groupRt, groupRw, villageCode, villageName, subdistrictName, cityName, provinceName, collCode, collName,&#xd;dkhDate, collTime, visitCode, visitTime, jbDate, jbTime, tuDate, tuTime, reasonUnvisit, receiptNo, qtyCustomerPaid, totCollFee, totPenaltyValue, totInstallBill, totBill, totPaidCollFee,&#xd;totPaidPenalty, totPaidInstallBill, totUtjPlusValue, totPaidCash, totUtjUsageValue, billSts, flagSend, flagSendDate, dkhSts, dkhStsName, janjiTagih, billStsName, collTimeDescrip, flagRevitalization, flagGroup FROM (&#xd;	SELECT companyCode, branchCode, dkhNo, groupCode, groupName, groupAddress, groupRt, groupRw, villageCode, villageName, subdistrictName, cityName, provinceName, collCode, collName,&#xd;	dkhDate, collTime, visitCode, visitTime, jbDate, jbTime, tuDate, tuTime, reasonUnvisit, receiptNo, qtyCustomerPaid, totCollFee, totPenaltyValue, totInstallBill, totBill, totPaidCollFee,&#xd;	totPaidPenalty, totPaidInstallBill, totUtjPlusValue, totPaidCash, totUtjUsageValue, billSts, flagSend, flagSendDate, dkhSts, dkhStsName, janjiTagih, billStsName, collTimeDescrip, jumlahDebitur, jumlahDebiturHapus, flagRevitalization, flagGroup FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.DKH_NO dkhNo,&#xd;			concat(A.GROUP_CODE,'') groupCode,&#xd;			B.GROUP_NAME groupName,&#xd;			B.GROUP_ADDRESS groupAddress,&#xd;			B.GROUP_RT groupRt,&#xd;			B.GROUP_RW groupRw,&#xd;			B.GROUP_VILLAGE_CODE villageCode,&#xd;			B.FLAG_REVITALIZATION flagRevitalization,&#xd;			C.VILLAGE_NAME villageName,&#xd;			D.SUBDISTRICT_NAME subdistrictName,&#xd;			E.CITY_NAME cityName,&#xd;			F.PROVINCE_NAME provinceName,&#xd;			G.COLL_CODE collCode,&#xd;			H.FULLNAME collName,&#xd;			G.DKH_DATE dkhDate,&#xd;			G.DKH_STS dkhSts,&#xd;			I.PARAM_DESCRIP dkhStsName,&#xd;			A.COLL_TIME collTime,&#xd;			K.PARAM_DESCRIP collTimeDescrip,&#xd;			A.VISIT_CODE visitCode,&#xd;			A.VISIT_TIME visitTime,&#xd;			A.JB_DATE jbDate,&#xd;			A.JB_TIME jbTime,&#xd;			A.TU_DATE tuDate,&#xd;			A.TU_TIME tuTime,&#xd;			A.REASON_UNVISIT reasonUnvisit,&#xd;			A.RECEIPT_NO receiptNo,&#xd;			A.QTY_CUSTOMER_PAID qtyCustomerPaid,&#xd;			A.TOT_COLL_FEE totCollFee,&#xd;			A.TOT_PENALTY_VALUE totPenaltyValue,&#xd;			A.TOT_INSTALL_BILL totInstallBill,&#xd;			A.TOT_BILL totBill,&#xd;			A.TOT_PAID_COLL_FEE totPaidCollFee,&#xd;			A.TOT_PAID_PENALTY totPaidPenalty,&#xd;			A.TOT_PAID_INSTALL_BILL totPaidInstallBill,&#xd;			A.TOT_UTJ_PLUS_VALUE totUtjPlusValue,&#xd;			A.TOT_PAID_CASH totPaidCash,&#xd;			A.TOT_UTJ_USAGE_VALUE totUtjUsageValue,&#xd;			A.BILL_STS billSts,&#xd;			A.FLAG_SEND flagSend,&#xd;			A.FLAG_SEND_DATE flagSendDate,&#xd;			(SELECT COUNT(0) GROUP_CODE &#xd;			FROM TRX_TAGIH_ULANG(nolock) Q &#xd;			LEFT JOIN TRX_DKH_GROUP(nolock) R &#xd;			ON Q.GROUP_CODE = R.GROUP_CODE WHERE Q.GROUP_CODE = A.GROUP_CODE AND Q.TU_DATE = CONVERT(DATE, GETDATE())) as janjiTagih,&#xd;			J.PARAM_DESCRIP billStsName,&#xd;			(select count(0) as total from trx_dkh_dtl(nolock) where dkh_no = A.DKH_NO and group_code = A.GROUP_CODE) jumlahDebitur,&#xd;			(select count(0) as total from trx_dkh_dtl(nolock) where dkh_no = A.DKH_NO and group_code = A.GROUP_CODE and paid_sts = '999') jumlahDebiturHapus,&#xd;			'0' as flagGroup&#xd;		FROM TRX_DKH_GROUP A (nolock)&#xd;		LEFT JOIN MST_GROUP_HDR B (nolock)&#xd;		ON A.COMPANY_CODE = B.COMPANY_CODE AND A.GROUP_CODE = B.GROUP_CODE	&#xd;		LEFT JOIN MST_VILLAGE C (nolock)&#xd;		ON B.COMPANY_CODE = C.COMPANY_CODE AND B.GROUP_VILLAGE_CODE = C.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT D (nolock)&#xd;		ON C.COMPANY_CODE = D.COMPANY_CODE AND C.SUBDISTRICT_CODE = D.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY E (nolock)&#xd;		ON C.COMPANY_CODE = E.COMPANY_CODE AND C.CITY_CODE = E.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE F (nolock)&#xd;		ON C.COMPANY_CODE = F.COMPANY_CODE AND C.PROVINCE_CODE = F.PROVINCE_CODE&#xd;		LEFT JOIN TRX_DKH_HDR G (nolock)&#xd;		ON A.COMPANY_CODE = G.COMPANY_CODE AND A.DKH_NO = G.DKH_NO&#xd;		LEFT JOIN MST_EMPLOYEE H (nolock)&#xd;		ON G.COMPANY_CODE = H.COMPANY_CODE AND G.COLL_CODE = H.NIK&#xd;		LEFT JOIN MST_GLOBAL_PARAM I (nolock)&#xd;		ON G.COMPANY_CODE = I.COMPANY_CODE AND G.DKH_STS = I.PARAM_CODE AND I.CONDITION = 'DKH_STS' AND I.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_GLOBAL_PARAM J (nolock)&#xd;		ON A.COMPANY_CODE = J.COMPANY_CODE AND A.BILL_STS = J.PARAM_CODE AND J.CONDITION = 'BILL_STS' AND J.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_GLOBAL_PARAM K (nolock)&#xd;		ON A.COMPANY_CODE = K.COMPANY_CODE AND A.COLL_TIME = K.PARAM_CODE AND K.CONDITION = 'VISIT_TIME' AND K.FLAG_ACTIVE = '1'&#xd;	) t WHERE jumlahDebitur != jumlahDebiturHapus&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="groupRt" name="groupRt" xsdType="string"/>
         <element column="groupRw" name="groupRw" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="collTime" name="collTime" xsdType="string"/>
         <element column="visitCode" name="visitCode" xsdType="string"/>
         <element column="visitTime" name="visitTime" xsdType="string"/>
         <element column="jbDate" name="jbDate" xsdType="string"/>
         <element column="jbTime" name="jbTime" xsdType="string"/>
         <element column="tuDate" name="tuDate" xsdType="string"/>
         <element column="tuTime" name="tuTime" xsdType="string"/>
         <element column="reasonUnvisit" name="reasonUnvisit" xsdType="string"/>
         <element column="receiptNo" name="receiptNo" xsdType="string"/>
         <element column="qtyCustomerPaid" name="qtyCustomerPaid" xsdType="string"/>
         <element column="totCollFee" name="totCollFee" xsdType="string"/>
         <element column="totPenaltyValue" name="totPenaltyValue" xsdType="string"/>
         <element column="totInstallBill" name="totInstallBill" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="totPaidCollFee" name="totPaidCollFee" xsdType="string"/>
         <element column="totPaidPenalty" name="totPaidPenalty" xsdType="string"/>
         <element column="totPaidInstallBill" name="totPaidInstallBill" xsdType="string"/>
         <element column="totUtjPlusValue" name="totUtjPlusValue" xsdType="string"/>
         <element column="totPaidCash" name="totPaidCash" xsdType="string"/>
         <element column="totUtjUsageValue" name="totUtjUsageValue" xsdType="string"/>
         <element column="billSts" name="billSts" xsdType="string"/>
         <element column="flagSend" name="flagSend" xsdType="string"/>
         <element column="flagSendDate" name="flagSendDate" xsdType="string"/>
         <element column="dkhSts" name="dkhSts" xsdType="string"/>
         <element column="dkhStsName" name="dkhStsName" xsdType="string"/>
         <element column="janjiTagih" name="janjiTagih" xsdType="string"/>
         <element column="billStsName" name="billStsName" xsdType="string"/>
         <element column="collTimeDescrip" name="collTimeDescrip" xsdType="string"/>
         <element column="flagRevitalization" name="flagRevitalization" xsdType="string"/>
         <element column="flagGroup" name="flagGroup" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnTrxDkhDtl" useConfig="collectiondso1">
      <sql>SELECT 1 as subdistrictName, 1 villageName, 1 address, 1 aggrNo, 1 customerFullname, 1 instFrom, 1 instTo, 1 totUndueInstall, 1 dayOverdue, 1 collFee, 1 penaltyValue, 1 installBill, 1 totBill, 1 spTypeName</sql>
      <result element="Entries" rowName="">
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="totUndueInstall" name="totUndueInstall" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="installBill" name="installBill" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxDkhDtl" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_CODE branchCodeAggr,&#xd;		A.DKH_NO dkhNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.DKH_TIME dkhTime,&#xd;		A.GROUP_CODE groupCode,&#xd;		L.GROUP_NAME groupName,&#xd;		A.CUSTOMER_CODE customerCode,&#xd;		A.PROMISEE_STS promiseeSts,&#xd;		A.DUE_DATE dueDate,&#xd;		A.INST_FROM instFrom,&#xd;		A.INST_TO instTo,&#xd;		A.DAY_OVERDUE dayOverdue,&#xd;		A.TOT_UNDUE_INSTALL totUndueInstall,&#xd;		A.INSTALLMENT installment,&#xd;		A.COLL_FEE collFee,&#xd;		A.PENALTY_VALUE penaltyValue,&#xd;		A.INSTALL_BILL installBill,&#xd;		A.TOT_BILL totBill,&#xd;		A.VISIT_CODE visitCode,&#xd;		A.VISIT_TIME visitTime,&#xd;		A.PAID_STS paidSts,&#xd;		CONCAT(A.RECEIPT_NO, ' ') receiptNo,&#xd;		A.JB_DATE jbDate,&#xd;		A.JB_TIME jbTime,&#xd;		A.TU_DATE tuDate,&#xd;		A.TU_TIME tuTime,&#xd;		A.MEET_CODE meetCode,&#xd;		A.MEET_NAME meetName,&#xd;		A.ADDR_STS addrSts,&#xd;		A.UNIT_STS unitSts,&#xd;		A.PAYMENT_DATE paymentDate,&#xd;		A.PRESENCE_STS presenceSts,&#xd;		A.PREPAYMENT_STS prepaymentSts,&#xd;		A.PAID_COLL_FEE paidCollFee,&#xd;		A.PAID_PENALTY paidPenalty,&#xd;		A.PAID_INSTALL paidInstall,&#xd;		A.PAID_CASH paidCash,&#xd;		A.DISCOUNT discount,&#xd;		A.ATT_CODE attCode,&#xd;		A.UTJ_BALANCE utjBalance,&#xd;		A.UTJ_PLUS_VALUE utjPlusValue,&#xd;		A.UTJ_USAGE_VALUE utjUsageValue,&#xd;		A.UTJ_USAGE_REASON utjUsageReason,&#xd;		A.UTJ_APPV_STS utjAppvSts,&#xd;		A.UTJ_APPV_DATE utjAppvDate,&#xd;		A.UTJ_POSTED utjPosted,&#xd;		A.UTJ_POSTED_DATE utjPostedDate,&#xd;		A.SP_NO spNo,&#xd;		A.SP_TYPE spType,&#xd;		A.SP_RECEIPT_TYPE spReceiptType,&#xd;		A.SP_RECEIPT_NAME spReceiptName,&#xd;		A.SP_NOTES spNotes,&#xd;		A.STTU_NO sttuNo,&#xd;		A.COLL_NOTES collNotes,&#xd;		A.FLAG_SEND flagSend,&#xd;		A.FLAG_SEND_DATE flagSendDate,&#xd;		A.LONGTITUDE longtitude,&#xd;		A.LATITUDE latitude,&#xd;		A.CASHIER_CODE cashierCode,&#xd;		A.BILL_STS billSts,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		M.COLL_ADDRESS_TYPE collAddressType,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_ADDRESS&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.HP_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.HP_NO&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.HP_NO&#xd;			END AS RESULT&#xd;		) as hpNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_AREA1&#xd;			END AS RESULT&#xd;		) as phoneArea1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_NO1&#xd;			END AS RESULT&#xd;		) as phoneNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;			END AS RESULT&#xd;		) as phoneArea2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;			END AS RESULT&#xd;		) as phoneNo2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RT&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RW&#xd;			END AS RESULT&#xd;		) as rw,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END&#xd;		) as subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END&#xd;		) as cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END&#xd;		) as provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END&#xd;		) as zipCode,&#xd;		H.COLL_CODE collCode,&#xd;		I.FULLNAME collName,&#xd;		--K.PARAM_DESCRIP spTypeName,&#xd;		(SELECT K.PARAM_DESCRIP FROM MST_GLOBAL_PARAM K (nolock) WHERE A.SP_TYPE = K.PARAM_CODE AND K.CONDITION = 'SP_TYPE' AND K.FLAG_ACTIVE = '1' ) spTypeName,&#xd;		N.NOPOL nopol,&#xd;		A.CUSTOMER_PAYMENT_DATE customerPaymentDate,&#xd;		O.BRANCH_NAME branchName,&#xd;		B.TENOR	tenor,&#xd;		(&#xd;			SELECT &#xd;				SUM( isnull((COLL_FEE), 0) - isnull((COLL_FEE_PAID), 0) )&#xd;				total&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) as collFeeSchedule,&#xd;		A.VISIT_TIME_VALUE visitTimeValue,&#xd;		A.TU_TIME_VALUE tuTimeValue,&#xd;		ISNULL(A.VOUCHER_NO, '') voucherNo,&#xd;		A.RATING_CODE ratingCode,&#xd;		A.TEAM_NO teamNo,&#xd;		P.PARAM_DESCRIP billStsName,&#xd;		GH.GROUP_CODE positionGroupCode,&#xd;		CASE&#xd;			WHEN ISNULL(GH.GROUP_CODE, '') != '' THEN (SELECT P1.PARAM_DESCRIP FROM MST_GLOBAL_PARAM P1 (nolock) WHERE A.COMPANY_CODE = P1.COMPANY_CODE AND P1.PARAM_CODE = 'P1' AND P1.CONDITION = 'POSITION_GROUP_CODE')&#xd;			WHEN ISNULL(GH.GROUP_CODE, '') = '' THEN (SELECT P2.PARAM_DESCRIP FROM MST_GLOBAL_PARAM P2 (nolock) WHERE A.COMPANY_CODE = P2.COMPANY_CODE AND P2.PARAM_CODE = 'P2' AND P2.CONDITION = 'POSITION_GROUP_CODE')&#xd;		END positionGroupName,&#xd;		H.DKH_DATE dkhDate,&#xd;		ATT.ATT_NAME attDesc,&#xd;		DGR.COLL_TIME waktuDebitur&#xd;	FROM TRX_DKH_DTL A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_GROUP_HDR GH (nolock)&#xd;	ON A.GROUP_CODE = GH.GROUP_CODE AND B.APPL_NO = GH.GROUP_LEADER&#xd;	--LEFT JOIN MST_GLOBAL_PARAM P1 (nolock)&#xd;	--ON A.COMPANY_CODE = P1.COMPANY_CODE AND P1.PARAM_CODE = 'P1' AND P1.CONDITION = 'POSITION_GROUP_CODE'&#xd;	--LEFT JOIN MST_GLOBAL_PARAM P2 (nolock)&#xd;	--ON A.COMPANY_CODE = P2.COMPANY_CODE AND P2.PARAM_CODE = 'P2' AND P2.CONDITION = 'POSITION_GROUP_CODE'&#xd;	LEFT JOIN MST_CUSTOMER C (nolock)&#xd;	ON B.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;	LEFT JOIN TRX_DKH_HDR H (nolock)&#xd;	ON A.DKH_NO = H.DKH_NO&#xd;	LEFT JOIN TRX_DKH_GROUP DGR (nolock)&#xd;	ON A.COMPANY_CODE = DGR.COMPANY_CODE AND A.DKH_NO = DGR.DKH_NO AND A.GROUP_CODE = DGR.GROUP_CODE&#xd;	LEFT JOIN MST_EMPLOYEE I (nolock)&#xd;	ON H.COLL_CODE = I.NIK&#xd;	--LEFT JOIN MST_GLOBAL_PARAM (nolock) K&#xd;	--ON A.SP_TYPE = K.PARAM_CODE AND K.CONDITION = 'SP_TYPE' AND K.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GROUP_HDR L (nolock)&#xd;	ON A.GROUP_CODE = L.GROUP_CODE&#xd;	LEFT JOIN TRX_APPL M (nolock)&#xd;	ON B.APPL_NO = M.APPL_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET N (nolock)&#xd;	ON B.AGGR_NO = N.AGGR_NO&#xd;	LEFT JOIN MST_BRANCH O (nolock)&#xd;	ON A.BRANCH_CODE = O.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM P (nolock)&#xd;	ON A.COMPANY_CODE = P.COMPANY_CODE AND A.BILL_STS = P.PARAM_CODE AND P.CONDITION = 'BILL_STS' AND P.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_COLL_ATTENDANCE ATT (nolock)&#xd;	ON A.COMPANY_CODE = ATT.COMPANY_CODE AND A.ATT_CODE = ATT.ATT_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON B.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON B.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON B.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;	WHERE A.PAID_STS != '999'&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxDkhDtl" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchCodeAggr, dkhNo, aggrNo, dkhTime, groupCode, groupName, customerCode, promiseeSts, dueDate, instFrom, instTo, dayOverdue, totUndueInstall, installment, collFee, penaltyValue,&#xd;installBill, totBill, visitCode, visitTime, paidSts, receiptNo, jbDate, jbTime, tuDate, tuTime, meetCode, meetName, addrSts, unitSts, paymentDate, presenceSts, prepaymentSts, paidCollFee, paidPenalty,&#xd;paidInstall, paidCash, discount, attCode, utjBalance, utjPlusValue, utjUsageValue, utjUsageReason, utjAppvSts, utjAppvDate, utjPosted, utjPostedDate, spNo, spType, spReceiptType, spReceiptName,&#xd;spNotes, sttuNo, collNotes, flagSend, flagSendDate, longtitude, latitude, cashierCode, billSts, customerFullname, rt, rw, hpNo1, phoneArea1, phoneNo1, phoneArea2,&#xd;phoneNo2, villageName, zipCode, subdistrictName, cityName, provinceName, collCode, collName, spTypeName, nopol, customerPaymentDate, address, branchName, tenor, collFeeSchedule, visitTimeValue, tuTimeValue, voucherNo, ratingCode, teamNo, billStsName, positionGroupName, dkhDate, attDesc, waktuDebitur FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_CODE branchCodeAggr,&#xd;		A.DKH_NO dkhNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.DKH_TIME dkhTime,&#xd;		A.GROUP_CODE groupCode,&#xd;		L.GROUP_NAME groupName,&#xd;		A.CUSTOMER_CODE customerCode,&#xd;		A.PROMISEE_STS promiseeSts,&#xd;		A.DUE_DATE dueDate,&#xd;		A.INST_FROM instFrom,&#xd;		A.INST_TO instTo,&#xd;		A.DAY_OVERDUE dayOverdue,&#xd;		A.TOT_UNDUE_INSTALL totUndueInstall,&#xd;		A.INSTALLMENT installment,&#xd;		A.COLL_FEE collFee,&#xd;		A.PENALTY_VALUE penaltyValue,&#xd;		A.INSTALL_BILL installBill,&#xd;		A.TOT_BILL totBill,&#xd;		A.VISIT_CODE visitCode,&#xd;		A.VISIT_TIME visitTime,&#xd;		A.PAID_STS paidSts,&#xd;		CONCAT(A.RECEIPT_NO, ' ') receiptNo,&#xd;		A.JB_DATE jbDate,&#xd;		A.JB_TIME jbTime,&#xd;		A.TU_DATE tuDate,&#xd;		A.TU_TIME tuTime,&#xd;		A.MEET_CODE meetCode,&#xd;		A.MEET_NAME meetName,&#xd;		A.ADDR_STS addrSts,&#xd;		A.UNIT_STS unitSts,&#xd;		A.PAYMENT_DATE paymentDate,&#xd;		A.PRESENCE_STS presenceSts,&#xd;		A.PREPAYMENT_STS prepaymentSts,&#xd;		A.PAID_COLL_FEE paidCollFee,&#xd;		A.PAID_PENALTY paidPenalty,&#xd;		A.PAID_INSTALL paidInstall,&#xd;		A.PAID_CASH paidCash,&#xd;		A.DISCOUNT discount,&#xd;		A.ATT_CODE attCode,&#xd;		A.UTJ_BALANCE utjBalance,&#xd;		A.UTJ_PLUS_VALUE utjPlusValue,&#xd;		A.UTJ_USAGE_VALUE utjUsageValue,&#xd;		A.UTJ_USAGE_REASON utjUsageReason,&#xd;		A.UTJ_APPV_STS utjAppvSts,&#xd;		A.UTJ_APPV_DATE utjAppvDate,&#xd;		A.UTJ_POSTED utjPosted,&#xd;		A.UTJ_POSTED_DATE utjPostedDate,&#xd;		A.SP_NO spNo,&#xd;		A.SP_TYPE spType,&#xd;		A.SP_RECEIPT_TYPE spReceiptType,&#xd;		A.SP_RECEIPT_NAME spReceiptName,&#xd;		A.SP_NOTES spNotes,&#xd;		A.STTU_NO sttuNo,&#xd;		A.COLL_NOTES collNotes,&#xd;		A.FLAG_SEND flagSend,&#xd;		A.FLAG_SEND_DATE flagSendDate,&#xd;		A.LONGTITUDE longtitude,&#xd;		A.LATITUDE latitude,&#xd;		A.CASHIER_CODE cashierCode,&#xd;		A.BILL_STS billSts,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		M.COLL_ADDRESS_TYPE collAddressType,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_ADDRESS&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.HP_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.HP_NO&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.HP_NO&#xd;			END AS RESULT&#xd;		) as hpNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_AREA1&#xd;			END AS RESULT&#xd;		) as phoneArea1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_NO1&#xd;			END AS RESULT&#xd;		) as phoneNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;			END AS RESULT&#xd;		) as phoneArea2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;			END AS RESULT&#xd;		) as phoneNo2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RT&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RW&#xd;			END AS RESULT&#xd;		) as rw,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END&#xd;		) as subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END&#xd;		) as cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END&#xd;		) as provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END&#xd;		) as zipCode,&#xd;		H.COLL_CODE collCode,&#xd;		I.FULLNAME collName,&#xd;		--K.PARAM_DESCRIP spTypeName,&#xd;		(SELECT K.PARAM_DESCRIP FROM MST_GLOBAL_PARAM K (nolock) WHERE A.SP_TYPE = K.PARAM_CODE AND K.CONDITION = 'SP_TYPE' AND K.FLAG_ACTIVE = '1' ) spTypeName,&#xd;		N.NOPOL nopol,&#xd;		A.CUSTOMER_PAYMENT_DATE customerPaymentDate,&#xd;		O.BRANCH_NAME branchName,&#xd;		B.TENOR	tenor,&#xd;		(&#xd;			SELECT &#xd;				SUM( isnull((COLL_FEE), 0) - isnull((COLL_FEE_PAID), 0) )&#xd;				total&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) as collFeeSchedule,&#xd;		A.VISIT_TIME_VALUE visitTimeValue,&#xd;		A.TU_TIME_VALUE tuTimeValue,&#xd;		ISNULL(A.VOUCHER_NO, '') voucherNo,&#xd;		A.RATING_CODE ratingCode,&#xd;		A.TEAM_NO teamNo,&#xd;		P.PARAM_DESCRIP billStsName,&#xd;		GH.GROUP_CODE positionGroupCode,&#xd;		CASE&#xd;			WHEN ISNULL(GH.GROUP_CODE, '') != '' THEN (SELECT P1.PARAM_DESCRIP FROM MST_GLOBAL_PARAM P1 (nolock) WHERE A.COMPANY_CODE = P1.COMPANY_CODE AND P1.PARAM_CODE = 'P1' AND P1.CONDITION = 'POSITION_GROUP_CODE')&#xd;			WHEN ISNULL(GH.GROUP_CODE, '') = '' THEN (SELECT P2.PARAM_DESCRIP FROM MST_GLOBAL_PARAM P2 (nolock) WHERE A.COMPANY_CODE = P2.COMPANY_CODE AND P2.PARAM_CODE = 'P2' AND P2.CONDITION = 'POSITION_GROUP_CODE')&#xd;		END positionGroupName,&#xd;		H.DKH_DATE dkhDate,&#xd;		ATT.ATT_NAME attDesc,&#xd;		DGR.COLL_TIME waktuDebitur&#xd;	FROM TRX_DKH_DTL A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_GROUP_HDR GH (nolock)&#xd;	ON A.GROUP_CODE = GH.GROUP_CODE AND B.APPL_NO = GH.GROUP_LEADER&#xd;	--LEFT JOIN MST_GLOBAL_PARAM P1 (nolock)&#xd;	--ON A.COMPANY_CODE = P1.COMPANY_CODE AND P1.PARAM_CODE = 'P1' AND P1.CONDITION = 'POSITION_GROUP_CODE'&#xd;	--LEFT JOIN MST_GLOBAL_PARAM P2 (nolock)&#xd;	--ON A.COMPANY_CODE = P2.COMPANY_CODE AND P2.PARAM_CODE = 'P2' AND P2.CONDITION = 'POSITION_GROUP_CODE'&#xd;	LEFT JOIN MST_CUSTOMER C (nolock)&#xd;	ON B.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;	LEFT JOIN TRX_DKH_HDR H (nolock)&#xd;	ON A.DKH_NO = H.DKH_NO&#xd;	LEFT JOIN TRX_DKH_GROUP DGR (nolock)&#xd;	ON A.COMPANY_CODE = DGR.COMPANY_CODE AND A.DKH_NO = DGR.DKH_NO AND A.GROUP_CODE = DGR.GROUP_CODE&#xd;	LEFT JOIN MST_EMPLOYEE I (nolock)&#xd;	ON H.COLL_CODE = I.NIK&#xd;	--LEFT JOIN MST_GLOBAL_PARAM (nolock) K&#xd;	--ON A.SP_TYPE = K.PARAM_CODE AND K.CONDITION = 'SP_TYPE' AND K.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GROUP_HDR L (nolock)&#xd;	ON A.GROUP_CODE = L.GROUP_CODE&#xd;	LEFT JOIN TRX_APPL M (nolock)&#xd;	ON B.APPL_NO = M.APPL_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET N (nolock)&#xd;	ON B.AGGR_NO = N.AGGR_NO&#xd;	LEFT JOIN MST_BRANCH O (nolock)&#xd;	ON A.BRANCH_CODE = O.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM P (nolock)&#xd;	ON A.COMPANY_CODE = P.COMPANY_CODE AND A.BILL_STS = P.PARAM_CODE AND P.CONDITION = 'BILL_STS' AND P.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_COLL_ATTENDANCE ATT (nolock)&#xd;	ON A.COMPANY_CODE = ATT.COMPANY_CODE AND A.ATT_CODE = ATT.ATT_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON B.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON B.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON B.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;	WHERE A.PAID_STS != '999'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="dkhTime" name="dkhTime" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="promiseeSts" name="promiseeSts" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="totUndueInstall" name="totUndueInstall" xsdType="string"/>
         <element column="installment" name="installment" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="installBill" name="installBill" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="visitCode" name="visitCode" xsdType="string"/>
         <element column="visitTime" name="visitTime" xsdType="string"/>
         <element column="paidSts" name="paidSts" xsdType="string"/>
         <element column="receiptNo" name="receiptNo" xsdType="string"/>
         <element column="jbDate" name="jbDate" xsdType="string"/>
         <element column="jbTime" name="jbTime" xsdType="string"/>
         <element column="tuDate" name="tuDate" xsdType="string"/>
         <element column="tuTime" name="tuTime" xsdType="string"/>
         <element column="meetCode" name="meetCode" xsdType="string"/>
         <element column="meetName" name="meetName" xsdType="string"/>
         <element column="addrSts" name="addrSts" xsdType="string"/>
         <element column="unitSts" name="unitSts" xsdType="string"/>
         <element column="paymentDate" name="paymentDate" xsdType="string"/>
         <element column="presenceSts" name="presenceSts" xsdType="string"/>
         <element column="prepaymentSts" name="prepaymentSts" xsdType="string"/>
         <element column="paidCollFee" name="paidCollFee" xsdType="string"/>
         <element column="paidPenalty" name="paidPenalty" xsdType="string"/>
         <element column="paidInstall" name="paidInstall" xsdType="string"/>
         <element column="paidCash" name="paidCash" xsdType="string"/>
         <element column="discount" name="discount" xsdType="string"/>
         <element column="attCode" name="attCode" xsdType="string"/>
         <element column="utjBalance" name="utjBalance" xsdType="string"/>
         <element column="utjPlusValue" name="utjPlusValue" xsdType="string"/>
         <element column="utjUsageValue" name="utjUsageValue" xsdType="string"/>
         <element column="utjUsageReason" name="utjUsageReason" xsdType="string"/>
         <element column="utjAppvSts" name="utjAppvSts" xsdType="string"/>
         <element column="utjAppvDate" name="utjAppvDate" xsdType="string"/>
         <element column="utjPosted" name="utjPosted" xsdType="string"/>
         <element column="utjPostedDate" name="utjPostedDate" xsdType="string"/>
         <element column="spNo" name="spNo" xsdType="string"/>
         <element column="spType" name="spType" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
         <element column="spReceiptName" name="spReceiptName" xsdType="string"/>
         <element column="spNotes" name="spNotes" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="collNotes" name="collNotes" xsdType="string"/>
         <element column="flagSend" name="flagSend" xsdType="string"/>
         <element column="flagSendDate" name="flagSendDate" xsdType="string"/>
         <element column="longtitude" name="longtitude" xsdType="string"/>
         <element column="latitude" name="latitude" xsdType="string"/>
         <element column="cashierCode" name="cashierCode" xsdType="string"/>
         <element column="billSts" name="billSts" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="hpNo1" name="hpNo1" xsdType="string"/>
         <element column="phoneArea1" name="phoneArea1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="phoneArea2" name="phoneArea2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="customerPaymentDate" name="customerPaymentDate" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="collFeeSchedule" name="collFeeSchedule" xsdType="string"/>
         <element column="visitTimeValue" name="visitTimeValue" xsdType="string"/>
         <element column="tuTimeValue" name="tuTimeValue" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="ratingCode" name="ratingCode" xsdType="string"/>
         <element column="teamNo" name="teamNo" xsdType="string"/>
         <element column="billStsName" name="billStsName" xsdType="string"/>
         <element column="positionGroupName" name="positionGroupName" xsdType="string"/>
         <element column="branchCodeAggr" name="branchCodeAggr" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="attDesc" name="attDesc" xsdType="string"/>
         <element column="waktuDebitur" name="waktuDebitur" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="trxDkhPindah" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE TRX_DKH_DTL SET &#xd;	FLAG_MOVE = '1'&#xd;WHERE GROUP_CODE IN (:groupCode)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="groupCode" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="updateStatusHapusByGroupCode" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @DKHNO		VARCHAR(50) = :dkhNo&#xd;DECLARE @GROUPCODE  VARCHAR(50) = :groupCode&#xd;&#xd;UPDATE TRX_DKH_GROUP SET&#xd;	QTY_CUSTOMER_PAID = '0'&#xd;WHERE&#xd;	GROUP_CODE IN (@GROUPCODE)&#xd;	AND DKH_NO = @DKHNO AND COMPANY_CODE='EDV'&#xd;&#xd;UPDATE TRX_DKH_DTL SET &#xd;	PAID_STS = '999'&#xd;WHERE&#xd;	GROUP_CODE IN (@GROUPCODE)&#xd;	AND DKH_NO = @DKHNO AND COMPANY_CODE='EDV'</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="groupCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
   </query>
   <query id="getColumnLovDkhPindah" useConfig="collectiondso1">
      <sql>SELECT 1 as collCode, 1 collName, 1 dkhNo, 1 qtyCustomer, 1 positionName, 1 qtyGroup</sql>
      <result element="Entries" rowName="">
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="qtyCustomer" name="qtyCustomer" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="qtyGroup" name="qtyGroup" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovDkhNo" useConfig="collectiondso1">
      <sql>DECLARE @COLL_CODE VARCHAR(50) = :collCode&#xd;&#xd;SELECT COUNT(0) as total FROM (&#xd;	SELECT DISTINCT companyCode, branchCode, productCode, collCode, collName, dkhNo, qtyCustomer, positionName, qtyGroup, collHeadCode, bucketType FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			B.FULLNAME collName,&#xd;			A.COLL_HEAD_CODE collHeadCode,&#xd;			C.DKH_NO dkhNo,&#xd;			C.QTY_CUSTOMER qtyCustomer,&#xd;			C.QTY_GROUP qtyGroup,&#xd;			B.POSITION_CODE positionCode,&#xd;			D.POSITION_NAME positionName,&#xd;			A.BUCKET_TYPE bucketType,&#xd;			C.DKH_DATE dkhDate&#xd;		FROM MST_COLLECTOR A (NOLOCK)&#xd;		LEFT JOIN MST_EMPLOYEE B (NOLOCK)&#xd;		ON A.COLL_CODE = B.NIK&#xd;		JOIN TRX_DKH_HDR C (NOLOCK)&#xd;		ON A.COLL_CODE = C.COLL_CODE AND C.DKH_STS NOT IN ('CLOSE', 'CANC')&#xd;		LEFT JOIN MST_POSITION D (NOLOCK)&#xd;		ON B.POSITION_CODE = D.POSITION_CODE&#xd;		WHERE ( A.FLAG_ACTIVE = '1' AND C.DKH_STS IN ('OPEN', 'PROC') AND A.BUCKET_TYPE = 'FCOL') AND B.STATUS = '1'&#xd;	) a where dkhDate = :dkhDate and collCode not in (@COLL_CODE)&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT companyCode, branchCode, productCode, collCode, collName, dkhNo, qtyCustomer, positionName, qtyGroup, collHeadCode, bucketType FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			B.FULLNAME collName,&#xd;			A.COLL_HEAD_CODE collHeadCode,&#xd;			'' as dkhNo,&#xd;			0 as qtyCustomer,&#xd;			0 as qtyGroup,&#xd;			B.POSITION_CODE positionCode,&#xd;			D.POSITION_NAME positionName,&#xd;			A.BUCKET_TYPE bucketType,&#xd;			C.DKH_DATE dkhDate&#xd;		FROM MST_COLLECTOR A (NOLOCK)&#xd;		LEFT JOIN MST_EMPLOYEE B (NOLOCK)&#xd;		ON A.COLL_CODE = B.NIK&#xd;		LEFT JOIN TRX_DKH_HDR C (NOLOCK)&#xd;		ON A.COLL_CODE = C.COLL_CODE&#xd;		LEFT JOIN MST_POSITION D (NOLOCK)&#xd;		ON B.POSITION_CODE = D.POSITION_CODE&#xd;		WHERE A.FLAG_ACTIVE = '1' AND A.BUCKET_TYPE = 'FCOL' AND C.DKH_STS NOT IN ('OPEN', 'PROC') AND B.STATUS = '1'&#xd;		AND A.COLL_CODE NOT IN (SELECT COLL_CODE FROM TRX_DKH_HDR WHERE DKH_STS IN ('OPEN','PROC'))&#xd;	) a where collCode not in (@COLL_CODE)&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT companyCode, branchCode, productCode, collCode, collName, dkhNo, qtyCustomer, positionName, qtyGroup, collHeadCode, bucketType FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			B.FULLNAME collName,&#xd;			A.COLL_HEAD_CODE collHeadCode,&#xd;			ISNULL(C.DKH_NO, '') dkhNo,&#xd;			ISNULL(C.QTY_CUSTOMER, 0) qtyCustomer,&#xd;			ISNULL(C.QTY_GROUP, 0) qtyGroup,&#xd;			B.POSITION_CODE positionCode,&#xd;			D.POSITION_NAME positionName,&#xd;			A.BUCKET_TYPE bucketType,&#xd;			C.DKH_DATE dkhDate&#xd;		FROM MST_COLLECTOR A (NOLOCK)&#xd;		LEFT JOIN MST_EMPLOYEE B (NOLOCK)&#xd;		ON A.COLL_CODE = B.NIK&#xd;		LEFT JOIN TRX_DKH_HDR C (NOLOCK)&#xd;		ON A.COLL_CODE = C.COLL_CODE&#xd;		LEFT JOIN MST_POSITION D (NOLOCK)&#xd;		ON B.POSITION_CODE = D.POSITION_CODE&#xd;		WHERE A.FLAG_ACTIVE = '1' AND A.BUCKET_TYPE = 'FCOL' AND C.DKH_NO IS NULL AND B.STATUS = '1'&#xd;	) a where collCode not in (@COLL_CODE)&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="dkhDate" sqlType="STRING"/>
   </query>
   <query id="getDataLovDkhPindah" useConfig="collectiondso1">
      <sql>DECLARE @COLL_CODE VARCHAR(50) = :collCode&#xd;&#xd;SELECT companyCode, branchCode, productCode, collCode, collName, dkhNo, qtyCustomer, positionName, qtyGroup, collHeadCode, bucketType FROM (&#xd;	SELECT DISTINCT companyCode, branchCode, productCode, collCode, collName, dkhNo, qtyCustomer, positionName, qtyGroup, collHeadCode, bucketType FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			B.FULLNAME collName,&#xd;			A.COLL_HEAD_CODE collHeadCode,&#xd;			C.DKH_NO dkhNo,&#xd;			C.QTY_CUSTOMER qtyCustomer,&#xd;			C.QTY_GROUP qtyGroup,&#xd;			B.POSITION_CODE positionCode,&#xd;			D.POSITION_NAME positionName,&#xd;			A.BUCKET_TYPE bucketType,&#xd;			C.DKH_DATE dkhDate&#xd;		FROM MST_COLLECTOR A (nolock)&#xd;		LEFT JOIN MST_EMPLOYEE B (nolock)&#xd;		ON A.COLL_CODE = B.NIK&#xd;		JOIN TRX_DKH_HDR C (nolock)&#xd;		ON A.COLL_CODE = C.COLL_CODE AND C.DKH_STS NOT IN ('CLOSE', 'CANC')&#xd;		LEFT JOIN MST_POSITION D (nolock)&#xd;		ON B.POSITION_CODE = D.POSITION_CODE&#xd;		WHERE ( A.FLAG_ACTIVE = '1' AND C.DKH_STS IN ('OPEN', 'PROC') AND A.BUCKET_TYPE = 'FCOL') AND B.STATUS = '1'&#xd;	) a where dkhDate = :dkhDate and collCode not in (@COLL_CODE)&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT companyCode, branchCode, productCode, collCode, collName, dkhNo, qtyCustomer, positionName, qtyGroup, collHeadCode, bucketType FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			B.FULLNAME collName,&#xd;			A.COLL_HEAD_CODE collHeadCode,&#xd;			'' as dkhNo,&#xd;			0 as qtyCustomer,&#xd;			0 as qtyGroup,&#xd;			B.POSITION_CODE positionCode,&#xd;			D.POSITION_NAME positionName,&#xd;			A.BUCKET_TYPE bucketType,&#xd;			C.DKH_DATE dkhDate&#xd;		FROM MST_COLLECTOR A (nolock)&#xd;		LEFT JOIN MST_EMPLOYEE B (nolock)&#xd;		ON A.COLL_CODE = B.NIK&#xd;		LEFT JOIN TRX_DKH_HDR C (nolock)&#xd;		ON A.COLL_CODE = C.COLL_CODE&#xd;		LEFT JOIN MST_POSITION D (nolock)&#xd;		ON B.POSITION_CODE = D.POSITION_CODE&#xd;		WHERE A.FLAG_ACTIVE = '1' AND A.BUCKET_TYPE = 'FCOL' AND C.DKH_STS NOT IN ('OPEN', 'PROC') AND B.STATUS = '1'&#xd;		AND A.COLL_CODE NOT IN (SELECT COLL_CODE FROM TRX_DKH_HDR WHERE DKH_STS IN ('OPEN','PROC'))&#xd;	) a where collCode not in (@COLL_CODE)&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT companyCode, branchCode, productCode, collCode, collName, dkhNo, qtyCustomer, positionName, qtyGroup, collHeadCode, bucketType FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			B.FULLNAME collName,&#xd;			A.COLL_HEAD_CODE collHeadCode,&#xd;			ISNULL(C.DKH_NO, '') dkhNo,&#xd;			ISNULL(C.QTY_CUSTOMER, 0) qtyCustomer,&#xd;			ISNULL(C.QTY_GROUP, 0) qtyGroup,&#xd;			B.POSITION_CODE positionCode,&#xd;			D.POSITION_NAME positionName,&#xd;			A.BUCKET_TYPE bucketType,&#xd;			C.DKH_DATE dkhDate&#xd;		FROM MST_COLLECTOR A (nolock)&#xd;		LEFT JOIN MST_EMPLOYEE B (nolock)&#xd;		ON A.COLL_CODE = B.NIK&#xd;		LEFT JOIN TRX_DKH_HDR C (nolock)&#xd;		ON A.COLL_CODE = C.COLL_CODE&#xd;		LEFT JOIN MST_POSITION D (nolock)&#xd;		ON B.POSITION_CODE = D.POSITION_CODE&#xd;		WHERE A.FLAG_ACTIVE = '1' AND A.BUCKET_TYPE = 'FCOL' AND C.DKH_NO IS NULL AND B.STATUS = '1'&#xd;	) a where collCode not in (@COLL_CODE)&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="qtyCustomer" name="qtyCustomer" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="qtyGroup" name="qtyGroup" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="dkhDate" sqlType="STRING"/>
   </query>
   <query id="getColumnLovRiwayatPembayaran" useConfig="collectiondso1">
      <sql>SELECT instNo, dueDate, paymentDate, tagihanAngsuran, pinaltyValue, bayarAngsuran, pinaltyPaid, actualCollCode, actualCollCodeName, collCode, collCodeName FROM (&#xd;SELECT 1 instNo, 1 dueDate,1  paymentDate,1 tagihanAngsuran,1 pinaltyValue,1 bayarAngsuran,1 pinaltyPaid,1 actualCollCode,1 actualCollCodeName,1 collCode,1 collCodeName&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="paymentDate" name="paymentDate" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="pinaltyValue" name="pinaltyValue" xsdType="string"/>
         <element column="bayarAngsuran" name="bayarAngsuran" xsdType="string"/>
         <element column="pinaltyPaid" name="pinaltyPaid" xsdType="string"/>
         <element column="actualCollCode" name="actualCollCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="instNo" name="instNo" xsdType="string"/>
         <element column="actualCollCodeName" name="actualCollCodeName" xsdType="string"/>
         <element column="collCodeName" name="collCodeName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovRiwayatPembayaran" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.INST_NO instNo,&#xd;		A.DUE_DATE dueDate,&#xd;		A.PAYMENT_DATE paymentDate,&#xd;		(A.PRINCIPAL_VALUE + A.INT_VALUE) as tagihanAngsuran,&#xd;		A.PINALTY_VALUE pinaltyValue,&#xd;		(A.PRINCIPAL_PAID + A.INT_PAID) as bayarAngsuran,&#xd;		A.PINALTY_PAID pinaltyPaid,&#xd;		A.ACTUAL_COLL_CODE actualCollCode,&#xd;		C.FULLNAME actualCollCodeName,&#xd;		B.COLL_CODE collCode,&#xd;		D.FULLNAME collCodeName&#xd;	FROM TRX_AGGR_SCHEDULE A (NOLOCK)&#xd;	LEFT JOIN TRX_AGGR B (NOLOCK)&#xd;	ON A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN MST_EMPLOYEE C (NOLOCK)&#xd;	ON A.ACTUAL_COLL_CODE = C.NIK&#xd;	LEFT JOIN MST_EMPLOYEE D (NOLOCK)&#xd;	ON B.COLL_CODE = D.NIK&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovRiwayatPembayaran" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, aggrNo, instNo, dueDate, paymentDate, tagihanAngsuran, pinaltyValue, bayarAngsuran, pinaltyPaid, actualCollCode, actualCollCodeName, collCode, collCodeName FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.INST_NO instNo,&#xd;		A.DUE_DATE dueDate,&#xd;		A.PAYMENT_DATE paymentDate,&#xd;		(A.PRINCIPAL_VALUE + A.INT_VALUE) as tagihanAngsuran,&#xd;		A.PINALTY_VALUE pinaltyValue,&#xd;		(A.PRINCIPAL_PAID + A.INT_PAID) as bayarAngsuran,&#xd;		A.PINALTY_PAID pinaltyPaid,&#xd;		A.ACTUAL_COLL_CODE actualCollCode,&#xd;		C.FULLNAME actualCollCodeName,&#xd;		B.COLL_CODE collCode,&#xd;		D.FULLNAME collCodeName&#xd;	FROM TRX_AGGR_SCHEDULE A (NOLOCK)&#xd;	LEFT JOIN TRX_AGGR B (NOLOCK)&#xd;	ON A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN MST_EMPLOYEE C (NOLOCK)&#xd;	ON A.ACTUAL_COLL_CODE = C.NIK&#xd;	LEFT JOIN MST_EMPLOYEE D (NOLOCK)&#xd;	ON B.COLL_CODE = D.NIK&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="instNo" name="instNo" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="paymentDate" name="paymentDate" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="pinaltyValue" name="pinaltyValue" xsdType="string"/>
         <element column="bayarAngsuran" name="bayarAngsuran" xsdType="string"/>
         <element column="pinaltyPaid" name="pinaltyPaid" xsdType="string"/>
         <element column="actualCollCode" name="actualCollCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="actualCollCodeName" name="actualCollCodeName" xsdType="string"/>
         <element column="collCodeName" name="collCodeName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnRiwayatPenanganan" useConfig="collectiondso1">
      <sql>SELECT 1 as instFrom, 1 instTo, 1 dueDate, 1 dkhDate, 1 installment, 1 penaltyValue, 1 collFee, 1 dayOverdue, 1 meetName, 1 meetCodeName, 1 collNotes</sql>
      <result element="Entries" rowName="">
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="installment" name="installment" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="meetName" name="meetName" xsdType="string"/>
         <element column="meetCodeName" name="meetCodeName" xsdType="string"/>
         <element column="collNotes" name="collNotes" xsdType="string"/>
      </result>
   </query>
   <query id="getCountRiwayatPenanganan" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT companyCode, branchCode, aggrNo, instFrom, instTo, dueDate,dkhDate, installment, penaltyValue, collFee, dayOverdue, meetName, meetCode, meetCodeName, collNotes FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.INST_FROM instFrom,&#xd;			A.INST_TO instTo,&#xd;			A.DUE_DATE dueDate,&#xd;			C.DKH_DATE dkhDate,&#xd;			A.INSTALLMENT installment,&#xd;			A.PENALTY_VALUE penaltyValue,&#xd;			A.COLL_FEE collFee,&#xd;			A.DAY_OVERDUE dayOverdue,&#xd;			A.MEET_NAME meetName,&#xd;			A.MEET_CODE meetCode,&#xd;			B.PARAM_DESCRIP meetCodeName,&#xd;			A.COLL_NOTES collNotes&#xd;		FROM TRX_DKH_DTL A&#xd;		LEFT JOIN MST_GLOBAL_PARAM B&#xd;		ON A.MEET_CODE = B.PARAM_CODE AND B.CONDITION = 'MEET_CODE' AND FLAG_ACTIVE = '1'&#xd;		LEFT JOIN TRX_DKH_HDR C&#xd;		ON A.DKH_NO = C.DKH_NO&#xd;		WHERE A.PAID_STS != '999' AND A.FLAG_SEND = '2' AND C.DKH_STS IN ('PROC', 'CLOS')&#xd;	) t  WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataRiwayatPenanganan" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, aggrNo, instFrom, instTo, dueDate,dkhDate, installment, penaltyValue, collFee, dayOverdue, meetName, meetCode, meetCodeName, collNotes FROM (&#xd;	SELECT companyCode, branchCode, aggrNo, instFrom, instTo, dueDate,dkhDate, installment, penaltyValue, collFee, dayOverdue, meetName, meetCode, meetCodeName, collNotes FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.INST_FROM instFrom,&#xd;			A.INST_TO instTo,&#xd;			A.DUE_DATE dueDate,&#xd;			C.DKH_DATE dkhDate,&#xd;			A.INSTALLMENT installment,&#xd;			A.PENALTY_VALUE penaltyValue,&#xd;			A.COLL_FEE collFee,&#xd;			A.DAY_OVERDUE dayOverdue,&#xd;			A.MEET_NAME meetName,&#xd;			A.MEET_CODE meetCode,&#xd;			B.PARAM_DESCRIP meetCodeName,&#xd;			A.COLL_NOTES collNotes&#xd;		FROM TRX_DKH_DTL A&#xd;		LEFT JOIN MST_GLOBAL_PARAM B&#xd;		ON A.MEET_CODE = B.PARAM_CODE AND B.CONDITION = 'MEET_CODE' AND FLAG_ACTIVE = '1'&#xd;		LEFT JOIN TRX_DKH_HDR C&#xd;		ON A.DKH_NO = C.DKH_NO&#xd;		WHERE A.PAID_STS != '999' AND A.FLAG_SEND = '2' AND C.DKH_STS IN ('PROC', 'CLOS')&#xd;	) t &#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="installment" name="installment" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="meetName" name="meetName" xsdType="string"/>
         <element column="meetCode" name="meetCode" xsdType="string"/>
         <element column="meetCodeName" name="meetCodeName" xsdType="string"/>
         <element column="collNotes" name="collNotes" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovUtjAwal" useConfig="collectiondso1">
      <sql>SELECT 1 as seqNo, 1 reffDate, 1 reffNo, 1 utjTransCodeName, 1 beginningValue, 1 plusValue, 1 bookValue, 1 usageValue, 1 balanceValue, 1 aggrNoRecipient, 1 customerFullname</sql>
      <result element="Entries" rowName="">
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="utjTransCodeName" name="utjTransCodeName" xsdType="string"/>
         <element column="balanceValue" name="balanceValue" xsdType="string"/>
         <element column="aggrNoRecipient" name="aggrNoRecipient" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="reffDate" name="reffDate" xsdType="string"/>
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="usageValue" name="usageValue" xsdType="string"/>
         <element column="beginningValue" name="beginningValue" xsdType="string"/>
         <element column="plusValue" name="plusValue" xsdType="string"/>
         <element column="bookValue" name="bookValue" xsdType="string"/>
         <element column="reffNo" name="reffNo" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovUtjAwal" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.REFF_DATE reffDate,&#xd;		A.REFF_NO reffNo,&#xd;		A.SEQ_NO seqNo,&#xd;		(SELECT B.PARAM_DESCRIP FROM MST_GLOBAL_PARAM B (nolock) where B.PARAM_CODE=A.UTJ_TRANS_CODE and B.CONDITION = 'UTJ_TRANS_CODE' AND B.FLAG_ACTIVE = '1') utjTransCodeName,&#xd;		A.BEGINNING_VALUE beginningValue,&#xd;		A.PLUS_VALUE plusValue,&#xd;		A.BOOK_VALUE bookValue,&#xd;		A.USAGE_VALUE usageValue,&#xd;		A.BALANCE_VALUE balanceValue,&#xd;		A.AGGR_NO_RECIPIENT aggrNoRecipient,&#xd;		(SELECT C.CUSTOMER_FULLNAME FROM TRX_AGGR C (NOLOCK) where C.AGGR_NO=A.AGGR_NO_RECIPIENT) customerFullname&#xd;	FROM TRX_UTJ A (nolock)&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovUthAwal" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, aggrNo, reffNo, seqNo, utjTransCodeName, usageValue, balanceValue, aggrNoRecipient, customerFullname, reffDate, beginningValue, plusValue, bookValue FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.REFF_DATE reffDate,&#xd;		A.REFF_NO reffNo,&#xd;		A.SEQ_NO seqNo,&#xd;		(SELECT B.PARAM_DESCRIP FROM MST_GLOBAL_PARAM B (nolock) where B.PARAM_CODE=A.UTJ_TRANS_CODE and B.CONDITION = 'UTJ_TRANS_CODE' AND B.FLAG_ACTIVE = '1') utjTransCodeName,&#xd;		A.BEGINNING_VALUE beginningValue,&#xd;		A.PLUS_VALUE plusValue,&#xd;		A.BOOK_VALUE bookValue,&#xd;		A.USAGE_VALUE usageValue,&#xd;		A.BALANCE_VALUE balanceValue,&#xd;		A.AGGR_NO_RECIPIENT aggrNoRecipient,&#xd;		(SELECT C.CUSTOMER_FULLNAME FROM TRX_AGGR C (NOLOCK) where C.AGGR_NO=A.AGGR_NO_RECIPIENT) customerFullname&#xd;	FROM TRX_UTJ A (nolock)&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="utjTransCodeName" name="utjTransCodeName" xsdType="string"/>
         <element column="balanceValue" name="balanceValue" xsdType="string"/>
         <element column="aggrNoRecipient" name="aggrNoRecipient" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="reffDate" name="reffDate" xsdType="string"/>
         <element column="usageValue" name="usageValue" xsdType="string"/>
         <element column="beginningValue" name="beginningValue" xsdType="string"/>
         <element column="plusValue" name="plusValue" xsdType="string"/>
         <element column="bookValue" name="bookValue" xsdType="string"/>
         <element column="reffNo" name="reffNo" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovKelompok" useConfig="collectiondso1">
      <sql>SELECT 1 as groupCode, 1 groupName, 1 collDayName, 1 groupAddress, 1 flagRevitalization, 1 villageName, 1 subdistrictName, 1 cityName, 1 provinceName, 1 totalDebitur, 1 createdDate, 1 groupLeader, 1 collTime</sql>
      <result element="Entries" rowName="">
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="flagRevitalization" name="flagRevitalization" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="groupLeader" name="groupLeader" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="collTime" name="collTime" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovKelompok" useConfig="collectiondso1">
      <sql>DECLARE @COLL_DAY VARCHAR(MAX) = :collDay&#xd;&#xd;SELECT COUNT(0) total FROM (&#xd;	SELECT distinct companyCode, branchCode, collCode, groupCode, groupName, collDayName, groupAddress, flagRevitalization, villageName, subdistrictName, cityName, provinceName, totalDebitur, createdDate, groupLeader, collTime, collTimeDescrip FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.GROUP_NAME groupName,&#xd;			case when A.FLAG_REVITALIZATION = '0' THEN A.COLL_DAY &#xd;			else cdtl.day_code&#xd;			end as collDay,&#xd;			CASE WHEN A.FLAG_REVITALIZATION = '0' THEN&#xd;			(&#xd;				case&#xd;					when A.COLL_DAY = '1' then 'Minggu'&#xd;					when A.COLL_DAY = '2' then 'Senin'&#xd;					when A.COLL_DAY = '3' then 'Selasa'&#xd;					when A.COLL_DAY = '4' then 'Rabu'&#xd;					when A.COLL_DAY = '5' then 'Kamis'&#xd;					when A.COLL_DAY = '6' then 'Jumat'&#xd;					when A.COLL_DAY = '7' then 'Sabtu'&#xd;				end&#xd;			) else STUFF((SELECT ', ' + &#xd;					case&#xd;						when cdtl.day_code = '1' then 'Minggu'&#xd;						when cdtl.day_code = '2' then 'Senin'&#xd;						when cdtl.day_code = '3' then 'Selasa'&#xd;						when cdtl.day_code = '4' then 'Rabu'&#xd;						when cdtl.day_code = '5' then 'Kamis'&#xd;						when cdtl.day_code = '6' then 'Jumat'&#xd;						when cdtl.day_code = '7' then 'Sabtu'&#xd;					end&#xd;					FROM mst_coll_day_hdr cd (nolock)&#xd;					left join mst_coll_day_dtl cdtl (nolock)&#xd;					on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;					WHERE A.COLL_DAY_CODE = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.PRODUCT_CODE and A.FLAG_REVITALIZATION='1'&#xd;					FOR XML PATH('')&#xd;			), 1, 1, '') end as collDayName,&#xd;			A.GROUP_ADDRESS groupAddress,&#xd;			A.FLAG_REVITALIZATION flagRevitalization,&#xd;			B.VILLAGE_NAME villageName,&#xd;			C.SUBDISTRICT_NAME subdistrictName,&#xd;			D.CITY_NAME cityName,&#xd;			E.PROVINCE_NAME provinceName,&#xd;			(select count(0) from (select distinct group_code,aggr_no from TRX_COLLECTOR_SCHEDULE_WITH_AGGR_NO (nolock)&#xd;			where company_code=A.COMPANY_CODE and group_code =A.GROUP_CODE) as sq)  as totalDebitur,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.GROUP_LEADER groupLeader,&#xd;			A.COLL_TIME collTime,&#xd;			F.PARAM_DESCRIP collTimeDescrip&#xd;		FROM MST_GROUP_HDR A (nolock)&#xd;		LEFT JOIN MST_VILLAGE B (nolock)&#xd;		ON A.GROUP_VILLAGE_CODE = B.VILLAGE_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT C (nolock)&#xd;		ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE AND B.COMPANY_CODE=C.COMPANY_CODE&#xd;		LEFT JOIN MST_CITY D (nolock)&#xd;		ON B.CITY_CODE = D.CITY_CODE AND B.COMPANY_CODE=D.COMPANY_CODE&#xd;		LEFT JOIN MST_PROVINCE E (nolock)&#xd;		ON B.PROVINCE_CODE = E.PROVINCE_CODE AND B.COMPANY_CODE=E.COMPANY_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;		ON A.COMPANY_CODE = F.COMPANY_CODE AND A.COLL_TIME = F.PARAM_CODE AND F.CONDITION = 'VISIT_TIME' AND F.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_BRANCH BR (nolock) ON A.BRANCH_CODE = BR.BRANCH_CODE AND A.COMPANY_CODE = BR.COMPANY_CODE&#xd;		left join mst_coll_day_hdr cd (nolock)&#xd;		on A.coll_day_code = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.product_code and a.flag_revitalization='1'&#xd;		left join mst_coll_day_dtl cdtl (nolock)&#xd;		on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;		left join (select company_code,group_code,dkh_sts,rn&#xd;					from (select dtl.company_code, dtl.group_code, hdr.dkh_sts, row_number() over(partition by dtl.company_code,&#xd;							dtl.group_code&#xd;							order by hdr.created_date desc) rn&#xd;						from trx_dkh_dtl dtl (nolock)&#xd;						join trx_dkh_hdr hdr (nolock)&#xd;						on dtl.company_code = hdr.company_code&#xd;						and dtl.dkh_no = hdr.dkh_no&#xd;						and hdr.dkh_sts in ('OPEN','PROC')&#xd;					) x&#xd;			where rn = 1) gr&#xd;			on A.company_code = gr.company_code and A.group_code = gr.group_code&#xd;		WHERE A.GROUP_STS = '1' and gr.dkh_sts is null&#xd;	) A WHERE collDay = @COLL_DAY&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="collDay" sqlType="STRING"/>
   </query>
   <query id="getDataLovKelompok" useConfig="collectiondso1">
      <sql>DECLARE @COLL_DAY VARCHAR(MAX) = :collDay&#xd;&#xd;SELECT companyCode, branchCode, collCode, groupCode, groupName, collDayName, groupAddress, flagRevitalization, villageName, subdistrictName, cityName, provinceName, totalDebitur, createdDate, groupLeader, collTime, collTimeDescrip FROM (&#xd;	SELECT distinct companyCode, branchCode, collCode, groupCode, groupName, collDayName, groupAddress, flagRevitalization, villageName, subdistrictName, cityName, provinceName, totalDebitur, createdDate, groupLeader, collTime, collTimeDescrip FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.GROUP_NAME groupName,&#xd;			case when A.FLAG_REVITALIZATION = '0' THEN A.COLL_DAY &#xd;			else cdtl.day_code&#xd;			end as collDay,&#xd;			CASE WHEN A.FLAG_REVITALIZATION = '0' THEN&#xd;			(&#xd;				case&#xd;					when A.COLL_DAY = '1' then 'Minggu'&#xd;					when A.COLL_DAY = '2' then 'Senin'&#xd;					when A.COLL_DAY = '3' then 'Selasa'&#xd;					when A.COLL_DAY = '4' then 'Rabu'&#xd;					when A.COLL_DAY = '5' then 'Kamis'&#xd;					when A.COLL_DAY = '6' then 'Jumat'&#xd;					when A.COLL_DAY = '7' then 'Sabtu'&#xd;				end&#xd;			) else STUFF((SELECT ', ' + &#xd;					case&#xd;						when cdtl.day_code = '1' then 'Minggu'&#xd;						when cdtl.day_code = '2' then 'Senin'&#xd;						when cdtl.day_code = '3' then 'Selasa'&#xd;						when cdtl.day_code = '4' then 'Rabu'&#xd;						when cdtl.day_code = '5' then 'Kamis'&#xd;						when cdtl.day_code = '6' then 'Jumat'&#xd;						when cdtl.day_code = '7' then 'Sabtu'&#xd;					end&#xd;					FROM mst_coll_day_hdr cd (nolock)&#xd;					left join mst_coll_day_dtl cdtl (nolock)&#xd;					on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;					WHERE A.COLL_DAY_CODE = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.PRODUCT_CODE and A.FLAG_REVITALIZATION='1'&#xd;					FOR XML PATH('')&#xd;			), 1, 1, '') end as collDayName,&#xd;			A.GROUP_ADDRESS groupAddress,&#xd;			A.FLAG_REVITALIZATION flagRevitalization,&#xd;			B.VILLAGE_NAME villageName,&#xd;			C.SUBDISTRICT_NAME subdistrictName,&#xd;			D.CITY_NAME cityName,&#xd;			E.PROVINCE_NAME provinceName,&#xd;			(select count(0) from (select distinct group_code,aggr_no from TRX_COLLECTOR_SCHEDULE_WITH_AGGR_NO (nolock)&#xd;			where company_code=A.COMPANY_CODE and group_code =A.GROUP_CODE) as sq)  as totalDebitur,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.GROUP_LEADER groupLeader,&#xd;			A.COLL_TIME collTime,&#xd;			F.PARAM_DESCRIP collTimeDescrip&#xd;		FROM MST_GROUP_HDR A (nolock)&#xd;		LEFT JOIN MST_VILLAGE B (nolock)&#xd;		ON A.GROUP_VILLAGE_CODE = B.VILLAGE_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT C (nolock)&#xd;		ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE AND B.COMPANY_CODE=C.COMPANY_CODE&#xd;		LEFT JOIN MST_CITY D (nolock)&#xd;		ON B.CITY_CODE = D.CITY_CODE AND B.COMPANY_CODE=D.COMPANY_CODE&#xd;		LEFT JOIN MST_PROVINCE E (nolock)&#xd;		ON B.PROVINCE_CODE = E.PROVINCE_CODE AND B.COMPANY_CODE=E.COMPANY_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;		ON A.COMPANY_CODE = F.COMPANY_CODE AND A.COLL_TIME = F.PARAM_CODE AND F.CONDITION = 'VISIT_TIME' AND F.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_BRANCH BR (nolock) ON A.BRANCH_CODE = BR.BRANCH_CODE AND A.COMPANY_CODE = BR.COMPANY_CODE&#xd;		left join mst_coll_day_hdr cd (nolock)&#xd;		on A.coll_day_code = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.product_code and a.flag_revitalization='1'&#xd;		left join mst_coll_day_dtl cdtl (nolock)&#xd;		on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;		left join (select company_code,group_code,dkh_sts,rn&#xd;					from (select dtl.company_code, dtl.group_code, hdr.dkh_sts, row_number() over(partition by dtl.company_code,&#xd;							dtl.group_code&#xd;							order by hdr.created_date desc) rn&#xd;						from trx_dkh_dtl dtl (nolock)&#xd;						join trx_dkh_hdr hdr (nolock)&#xd;						on dtl.company_code = hdr.company_code&#xd;						and dtl.dkh_no = hdr.dkh_no&#xd;						and hdr.dkh_sts in ('OPEN','PROC')&#xd;					) x&#xd;			where rn = 1) gr&#xd;			on A.company_code = gr.company_code and A.group_code = gr.group_code&#xd;		WHERE A.GROUP_STS = '1' and gr.dkh_sts is null&#xd;	) A WHERE collDay = @COLL_DAY&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="flagRevitalization" name="flagRevitalization" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="groupLeader" name="groupLeader" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="collTime" name="collTime" xsdType="string"/>
         <element column="collTimeDescrip" name="collTimeDescrip" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="collDay" sqlType="STRING"/>
   </query>
   <query id="lovPeringkat" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[GET_LOV_PERINGKAT]&#xd;	(&#xd;		:companyCode,	&#xd;		:aggrNo,&#xd;		:ratingCode,&#xd;		:ratingName,&#xd;		:absenceValue,&#xd;		:utjRecipient&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="ratingCode" name="ratingCode" xsdType="string"/>
         <element column="ratingName" name="ratingName" xsdType="string"/>
         <element column="absenceValue" name="absenceValue" xsdType="string"/>
         <element column="utjRecipient" name="utjRecipient" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param defaultValue="1" name="ratingCode" optional="false" sqlType="STRING" type="OUT"/>
      <param defaultValue="1" name="ratingName" optional="false" sqlType="STRING" type="OUT"/>
      <param defaultValue="1" name="absenceValue" optional="false" sqlType="STRING" type="OUT"/>
      <param defaultValue="1" name="utjRecipient" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="updatePaidStsByAggrNo" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(10) = :branchCode&#xd;DECLARE @DKH_NO VARCHAR(50) = :dkhNo&#xd;&#xd;UPDATE TRX_DKH_DTL SET&#xd;	PAID_STS = '999'&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	AGGR_NO IN (:aggrNo)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="hapusDebiturByGroupAggr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @GROUP_CODE varchar(50) = :groupCode&#xd;&#xd;UPDATE TRX_DKH_DTL SET&#xd;	PAID_STS = '999'&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	GROUP_CODE = @GROUP_CODE AND&#xd;	AGGR_NO IN (:aggrNo)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="updateFlagMove" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;&#xd;UPDATE TRX_DKH_DTL SET&#xd;	FLAG_MOVE = '1',&#xd;	UPDATED_BY = :updatedBy,&#xd;	UPDATED_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO IN (:dkhNo) AND&#xd;	AGGR_NO IN (:aggrNo)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="insertTrxCollMoveBucket" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_COLL_MOVE_BUCKET&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TRX_NO,&#xd;        TRX_DATE,&#xd;        AGGR_NO,&#xd;		PRODUCT_CODE,&#xd;		BUCKET_TYPE,&#xd;        BUCKET_CODE_FROM,&#xd;		BUCKET_TYPE_TO,&#xd;        BUCKET_CODE_TO,&#xd;        COLL_CODE_FROM,&#xd;        PIC_POSITION_FROM,&#xd;        TRX_STS,&#xd;		EFFECTIVE_DATE,&#xd;        APPRV_STS,&#xd;        APPRV_DATE,&#xd;        CANCEL_DATE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :trxNo,&#xd;        GETDATE(),&#xd;        :aggrNo,&#xd;		:productCode,&#xd;		:bucketType,&#xd;        :bucketCodeFrom,&#xd;		:bucketTypeTo,&#xd;        :bucketCodeTo,&#xd;        :collCodeFrom,&#xd;        :picPositionFrom,&#xd;        :trxSts,&#xd;        CONVERT(DATE,dateadd(DD, +1,getdate())),&#xd;        :apprvSts,&#xd;        :apprvDate,&#xd;        :cancelDate,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="bucketCodeFrom" sqlType="STRING"/>
      <param name="bucketCodeTo" sqlType="STRING"/>
      <param name="collCodeFrom" sqlType="STRING"/>
      <param name="picPositionFrom" sqlType="STRING"/>
      <param name="trxSts" sqlType="STRING"/>
      <param name="apprvSts" sqlType="STRING"/>
      <param name="apprvDate" sqlType="STRING"/>
      <param name="cancelDate" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="bucketTypeTo" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxCollMoveBucket" useConfig="collectiondso1">
      <sql>SELECT 1 as trxNo, 1 trxDate, 1 aggrNo, 1 bucketCodeFrom, 1 bucketCodeTo, 1 collCodeFrom, 1 picName, 1 picPositionName, 1 apprvStsName, 1 customerFullname</sql>
      <result element="Entries" rowName="">
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="bucketCodeFrom" name="bucketCodeFrom" xsdType="string"/>
         <element column="bucketCodeTo" name="bucketCodeTo" xsdType="string"/>
         <element column="picPositionName" name="picPositionName" xsdType="string"/>
         <element column="apprvStsName" name="apprvStsName" xsdType="string"/>
         <element column="collCodeFrom" name="collCodeFrom" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="picName" name="picName" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxCollMoveBucket" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TRX_NO trxNo,&#xd;		A.TRX_DATE trxDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.BUCKET_CODE_FROM bucketCodeFrom, &#xd;		G.OD_DAY_TO bucketFromOdDayTo,&#xd;		A.BUCKET_CODE_TO bucketCodeTo,&#xd;		A.COLL_CODE_FROM collCodeFrom,&#xd;		B.FULLNAME collName,&#xd;		EM.FULLNAME picName,&#xd;		A.PIC_POSITION_FROM picPositionFrom,&#xd;		C.POSITION_NAME picPositionName,&#xd;		A.TRX_STS trxSts,&#xd;		A.APPRV_STS apprvSts,&#xd;		D.PARAM_DESCRIP apprvStsName,&#xd;		A.APPRV_DATE apprvDate,&#xd;		A.CANCEL_DATE cancelDate,&#xd;		F.PARAM_DESCRIP productName,&#xd;		CONVERT(DATE, A.CREATED_DATE) createdDate,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		A.BUCKET_TYPE_TO bucketTypeTo,&#xd;		A.EFFECTIVE_DATE effectiveDate,&#xd;		(&#xd;			CASE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_CODE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_CODE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'K' AND E.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_CODE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'K' AND E.CUSTOMER_TYPE = 'C' THEN cov.VILLAGE_CODE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_CODE&#xd;			END&#xd;		) villageCode,&#xd;		E.CUSTOMER_FULLNAME customerFullname&#xd;	FROM TRX_COLL_MOVE_BUCKET A&#xd;	LEFT JOIN MST_EMPLOYEE B&#xd;	ON A.COLL_CODE_FROM = B.NIK&#xd;	LEFT JOIN MST_POSITION C&#xd;	ON A.PIC_POSITION_FROM = C.POSITION_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;	ON A.APPRV_STS = D.PARAM_CODE AND D.CONDITION = 'STATUS_APPROVAL' AND D.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_AGGR E&#xd;	ON A.AGGR_NO = E.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM F&#xd;	ON A.PRODUCT_CODE = F.PARAM_CODE AND F.CONDITION = 'PRODUCT_CODE' AND F.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BUCKET G&#xd;	ON A.BUCKET_CODE_FROM = G.BUCKET_CODE AND G.BUCKET_TYPE = 'FCOL' AND G.FLAG_ACTIVE = '1' AND G.PRODUCT_CODE = E.PRODUCT_CODE&#xd;	LEFT JOIN MST_CUSTOMER H&#xd;	ON E.CUSTOMER_CODE = H.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV&#xd;	ON H.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV&#xd;	ON H.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE I&#xd;	ON E.CUSTOMER_CODE = I.CUSTOMER_CODE AND I.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV&#xd;	ON I.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE J&#xd;	ON E.CUSTOMER_CODE = J.CUSTOMER_CODE AND J.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV&#xd;	ON J.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_EMPLOYEE EM&#xd;	ON A.CREATED_BY = EM.NIK&#xd;	left join mst_customer_co co&#xd;	on a.company_code = co.company_code and E.customer_code = co.customer_code&#xd;	left join mst_village cov&#xd;	on co.office_village_code = cov.village_code&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxCollMoveBucket" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, trxNo, trxDate, aggrNo, bucketCodeFrom, bucketFromOdDayTo, bucketCodeTo, collCodeFrom, collName, picName, picPositionFrom, picPositionName, trxSts, apprvSts, apprvStsName, apprvDate, cancelDate, productName, createdDate, productCode, bucketType, bucketTypeTo, effectiveDate, villageCode, customerFullname FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TRX_NO trxNo,&#xd;		A.TRX_DATE trxDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.BUCKET_CODE_FROM bucketCodeFrom, &#xd;		G.OD_DAY_TO bucketFromOdDayTo,&#xd;		A.BUCKET_CODE_TO bucketCodeTo,&#xd;		A.COLL_CODE_FROM collCodeFrom,&#xd;		B.FULLNAME collName,&#xd;		EM.FULLNAME picName,&#xd;		A.PIC_POSITION_FROM picPositionFrom,&#xd;		C.POSITION_NAME picPositionName,&#xd;		A.TRX_STS trxSts,&#xd;		A.APPRV_STS apprvSts,&#xd;		D.PARAM_DESCRIP apprvStsName,&#xd;		A.APPRV_DATE apprvDate,&#xd;		A.CANCEL_DATE cancelDate,&#xd;		F.PARAM_DESCRIP productName,&#xd;		CONVERT(DATE, A.CREATED_DATE) createdDate,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		A.BUCKET_TYPE_TO bucketTypeTo,&#xd;		A.EFFECTIVE_DATE effectiveDate,&#xd;		(&#xd;			CASE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_CODE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_CODE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'K' AND E.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_CODE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'K' AND E.CUSTOMER_TYPE = 'C' THEN cov.VILLAGE_CODE&#xd;				WHEN E.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_CODE&#xd;			END&#xd;		) villageCode,&#xd;		E.CUSTOMER_FULLNAME customerFullname&#xd;	FROM TRX_COLL_MOVE_BUCKET A&#xd;	LEFT JOIN MST_EMPLOYEE B&#xd;	ON A.COLL_CODE_FROM = B.NIK&#xd;	LEFT JOIN MST_POSITION C&#xd;	ON A.PIC_POSITION_FROM = C.POSITION_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;	ON A.APPRV_STS = D.PARAM_CODE AND D.CONDITION = 'STATUS_APPROVAL' AND D.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_AGGR E&#xd;	ON A.AGGR_NO = E.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM F&#xd;	ON A.PRODUCT_CODE = F.PARAM_CODE AND F.CONDITION = 'PRODUCT_CODE' AND F.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BUCKET G&#xd;	ON A.BUCKET_CODE_FROM = G.BUCKET_CODE AND G.BUCKET_TYPE = 'FCOL' AND G.FLAG_ACTIVE = '1' AND G.PRODUCT_CODE = E.PRODUCT_CODE&#xd;	LEFT JOIN MST_CUSTOMER H&#xd;	ON E.CUSTOMER_CODE = H.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV&#xd;	ON H.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV&#xd;	ON H.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE I&#xd;	ON E.CUSTOMER_CODE = I.CUSTOMER_CODE AND I.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV&#xd;	ON I.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE J&#xd;	ON E.CUSTOMER_CODE = J.CUSTOMER_CODE AND J.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV&#xd;	ON J.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_EMPLOYEE EM&#xd;	ON A.CREATED_BY = EM.NIK&#xd;	left join mst_customer_co co&#xd;	on a.company_code = co.company_code and E.customer_code = co.customer_code&#xd;	left join mst_village cov&#xd;	on co.office_village_code = cov.village_code&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="bucketCodeFrom" name="bucketCodeFrom" xsdType="string"/>
         <element column="bucketCodeTo" name="bucketCodeTo" xsdType="string"/>
         <element column="collCodeFrom" name="collCodeFrom" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="picPositionFrom" name="picPositionFrom" xsdType="string"/>
         <element column="picPositionName" name="picPositionName" xsdType="string"/>
         <element column="trxSts" name="trxSts" xsdType="string"/>
         <element column="apprvSts" name="apprvSts" xsdType="string"/>
         <element column="apprvStsName" name="apprvStsName" xsdType="string"/>
         <element column="apprvDate" name="apprvDate" xsdType="string"/>
         <element column="cancelDate" name="cancelDate" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="bucketTypeTo" name="bucketTypeTo" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="bucketFromOdDayTo" name="bucketFromOdDayTo" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="picName" name="picName" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateTrxCollMoveBucket" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @TRX_NO varchar(50) = :trxNo&#xd;&#xd;UPDATE TRX_COLL_MOVE_BUCKET SET&#xd;        AGGR_NO = :aggrNo,&#xd;		PRODUCT_CODE = :productCode,&#xd;		BUCKET_TYPE = :bucketType,&#xd;        BUCKET_CODE_FROM = :bucketCodeFrom,&#xd;		BUCKET_TYPE_TO = :bucketTypeTo,&#xd;        BUCKET_CODE_TO = :bucketCodeTo,&#xd;        COLL_CODE_FROM = :collCodeFrom,&#xd;        PIC_POSITION_FROM = :picPositionFrom,&#xd;		TRX_DATE = :trxDate,&#xd;        TRX_STS = :trxSts,&#xd;		EFFECTIVE_DATE = CONVERT(DATE,dateadd(DD, +1,getdate())),&#xd;        APPRV_STS = :apprvSts,&#xd;        APPRV_DATE = :apprvDate,&#xd;        CANCEL_DATE = :cancelDate,&#xd;        UPDATED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        TRX_NO = @TRX_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="bucketCodeFrom" sqlType="STRING"/>
      <param name="bucketCodeTo" sqlType="STRING"/>
      <param name="collCodeFrom" sqlType="STRING"/>
      <param name="picPositionFrom" sqlType="STRING"/>
      <param name="trxSts" sqlType="STRING"/>
      <param name="apprvSts" sqlType="STRING"/>
      <param name="apprvDate" sqlType="STRING"/>
      <param name="cancelDate" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="trxDate" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="bucketTypeTo" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNomorKontrak" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 address, 1 villageName, 1 dayOverdue</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNomorKontrak" useConfig="collectiondso1">
      <sql>DECLARE @DKH_DATE  VARCHAR(50) = :dkhDate&#xd;&#xd;SELECT COUNT(0) total FROM (&#xd;	SELECT companyCode, branchCode, productCode, collCode, aggrNo, aggrNoFil, customerFullname, customerCode, applNo, woDate, tuType, groupCode, arSts, isnull(subSts, '') subSts, spNo, spType, spTypeName, sttuNo, collAddressType,&#xd;	address, hpNo1, phoneArea1, phoneNo1, phoneArea2, phoneNo2, rt, rw, villageName, subdistrictName, cityName, provinceName, zipCode, isnull(dayOverdue, 0) dayOverdue, instFrom, instTo, tagihanAngsuran,&#xd;	tagihanDenda, (biaya + mstCollfee) biayaTagih, (tagihanAngsuran + tagihanDenda + biaya + mstCollfee) totalTagihan, sisaUtj, angsuranBelumJatuhTempo, dueDate, angsuran, bucketCode, bucketName, collName, collDueDate, tenor, teamNo, dsoCode, mstCollfee as collFeeRate FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.AGGR_NO aggrNoFil,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			A.CUSTOMER_CODE customerCode,&#xd;			A.APPL_NO applNo,&#xd;			A.WO_DATE woDate,&#xd;			J.TU_TYPE tuType,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.AR_STS arSts,&#xd;			A.SUB_STS subSts,&#xd;			G.SP_NO spNo,&#xd;			G.SP_TYPE spType,&#xd;			H.PARAM_DESCRIP spTypeName,&#xd;			I.STTU_NO sttuNo,&#xd;			B.COLL_ADDRESS_TYPE collAddressType,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_ADDRESS&#xd;				END&#xd;			) as address,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.HP_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.HP_NO&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.HP_NO&#xd;				END&#xd;			) as hpNo1,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.PHONE_AREA1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.PHONE_AREA1&#xd;				END&#xd;			) as phoneArea1,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.PHONE_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.PHONE_NO1&#xd;				END&#xd;			) as phoneNo1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;				END AS RESULT&#xd;			) as phoneArea2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;				END AS RESULT&#xd;			) as phoneNo2,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_RT&#xd;				END&#xd;			) as rt,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_RW&#xd;				END&#xd;			) as rw,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;				END&#xd;			) as villageName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;				END&#xd;			) as subdistrictName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;				END&#xd;			) as cityName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;				END&#xd;			) as provinceName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;				END&#xd;			) as zipCode,	&#xd;			(	&#xd;				SELECT TOP 1 dueDate FROM (&#xd;					SELECT DUE_DATE dueDate, MIN(COLL_DUE_DATE) collDueDate FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' GROUP BY DUE_DATE&#xd;				) a&#xd;			) as dueDate,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID'&#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			(&#xd;				SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE &#xd;				) a&#xd;			) as instFrom,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;						) IS NULL THEN (&#xd;										SELECT &#xd;											MIN(INST_NO) instTo&#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;									)&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;				END RESULT&#xd;			) as instTo,&#xd;			(&#xd;&#xd;				SELECT &#xd;					isnull(SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)), 0)&#xd;				&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND&#xd;					INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;						SELECT &#xd;							MIN(INST_NO) instNo&#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;					) a) &#xd;					AND&#xd;					INST_NO &lt;= (SELECT &#xd;								CASE &#xd;									WHEN &#xd;										(&#xd;										SELECT &#xd;											convert(varchar(10),MAX(INST_NO)) &#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;										) IS NULL THEN (&#xd;														SELECT &#xd;															MIN(INST_NO) instTo&#xd;														FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' &#xd;													)&#xd;									ELSE&#xd;										(SELECT &#xd;											MAX(INST_NO) instNo &#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;								END RESULT)&#xd;					AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;			) as tagihanAngsuran,&#xd;			(&#xd;			&#xd;				SELECT &#xd;					SUM( isnull((PINALTY_VALUE), 0)- isnull((PINALTY_PAID), 0) ) total&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE				&#xd;			) as tagihanDenda,&#xd;			(&#xd;				SELECT &#xd;					SUM( isnull((COLL_FEE), 0) - isnull((COLL_FEE_PAID), 0) )&#xd;					total&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;			) as biaya,&#xd;						(&#xd;				select collFee from (&#xd;					select top 1&#xd;						coll_fee collFee, &#xd;						EFFECTIVE_DATE effectiveDate&#xd;					from mst_coll_fee(nolock)&#xd;					where company_code = A.COMPANY_CODE AND product_code = A.PRODUCT_CODE AND coll_kind_fee = 'ADMCOL' AND EFFECTIVE_DATE &lt;= GETDATE() AND (category_code is null or category_code = '') &#xd;					ORDER BY EFFECTIVE_DATE DESC&#xd;				) a&#xd;			) as mstCollfee,&#xd;			isnull((K.BEGIN_BAL - USAGE_VALUE - BOOK_VALUE + PLUS_VALUE),0) as sisaUtj,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;						) IS NULL THEN (&#xd;											SELECT &#xd;												isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;											FROM TRX_AGGR_SCHEDULE(nolock) &#xd;											WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND INST_NO &gt; (SELECT MIN(INST_NO) FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID')&#xd;										) &#xd;					ELSE&#xd;						(&#xd;							SELECT &#xd;								isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;							FROM TRX_AGGR_SCHEDULE(nolock) &#xd;							WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND INST_NO &gt; (SELECT MAX(INST_NO) instNo FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND DUE_DATE &lt;= GETDATE())&#xd;						) &#xd;				END RESULT &#xd;			) angsuranBelumJatuhTempo,&#xd;			A.INST_VALUE angsuran,&#xd;			A.BUCKET_CODE bucketCode,&#xd;			L.DESCRIPTION bucketName,&#xd;			M.FULLNAME collName,&#xd;			(&#xd;				select top 1 coll_due_date from trx_aggr_schedule(nolock) where aggr_no = A.AGGR_NO and payment_sts = 'UNPAID'&#xd;			) as collDueDate,&#xd;			A.TENOR tenor,&#xd;			O.TEAM_NO teamNo,&#xd;			P.DSO_CODE dsoCode&#xd;		FROM TRX_AGGR A (nolock)&#xd;		JOIN TRX_APPL B (nolock)&#xd;		ON A.APPL_NO = B.APPL_NO AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;		LEFT JOIN (SELECT *&#xd;			FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY COMPANY_CODE,&#xd;					AGGR_NO&#xd;					ORDER BY AGGR_NO, CREATED_DATE DESC) RN&#xd;			FROM TRX_SP(nolock)&#xd;			WHERE EXPIRED_DATE &gt;= '2021-05-03' AND SP_STS = 'PROC' AND COMPANY_CODE='EDV'&#xd;			) X&#xd;			WHERE RN = 1) G&#xd;		ON A.[COMPANY_CODE]			= G.[COMPANY_CODE] &#xd;		AND A.[AGGR_NO]				= G.[AGGR_NO] &#xd;		LEFT JOIN MST_GLOBAL_PARAM H (nolock)&#xd;		ON G.SP_TYPE = H.PARAM_CODE AND H.CONDITION = 'SP_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN TRX_STTU I (nolock)&#xd;		ON A.AGGR_NO = I.AGGR_NO AND I.EXPIRED_DATE &gt; @DKH_DATE AND I.STTU_STS = 'PROC' AND I.COMPANY_CODE='EDV'&#xd;		LEFT JOIN TRX_TAGIH_ULANG J (nolock)&#xd;		ON A.AGGR_NO = J.AGGR_NO AND J.TU_TYPE = '002' AND J.COMPANY_CODE='EDV'&#xd;		LEFT JOIN MST_UTJ K (nolock)&#xd;		ON A.AGGR_NO = K.AGGR_NO AND A.COMPANY_CODE=K.COMPANY_CODE&#xd;		LEFT JOIN MST_BUCKET L (nolock)&#xd;		ON A.BUCKET_CODE = L.BUCKET_CODE AND A.PRODUCT_CODE = L.PRODUCT_CODE AND A.BUCKET_TYPE = L.BUCKET_TYPE AND A.COMPANY_CODE=L.COMPANY_CODE&#xd;		LEFT JOIN MST_EMPLOYEE M (nolock)&#xd;		ON A.COLL_CODE = M.NIK&#xd;		LEFT JOIN MST_GROUP_HDR N (nolock)&#xd;		ON A.GROUP_CODE = N.GROUP_CODE AND A.COMPANY_CODE = N.COMPANY_CODE AND A.BRANCH_CODE = N.BRANCH_CODE&#xd;		LEFT JOIN MST_GROUP_DTL O (nolock)&#xd;		ON N.GROUP_CODE = O.GROUP_CODE AND N.COMPANY_CODE = O.COMPANY_CODE AND N.BRANCH_CODE = O.BRANCH_CODE AND B.APPL_NO = O.APPL_NO&#xd;		LEFT JOIN getViewBranch() P&#xd;		ON A.COMPANY_CODE = P.COMPANY_CODE AND A.BRANCH_CODE = P.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;		ON A.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV (nolock)&#xd;		ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;		ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY IC (nolock)&#xd;		ON IV.CITY_CODE = IC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE IP (nolock)&#xd;		ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV (nolock)&#xd;		ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;		ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY DC (nolock)&#xd;		ON DV.CITY_CODE = DC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE DP (nolock)&#xd;		ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;		ON A.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE KV (nolock)&#xd;		ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;		ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY KC (nolock)&#xd;		ON KV.CITY_CODE = KC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE KP (nolock)&#xd;		ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE EG (nolock)&#xd;		ON A.CUSTOMER_CODE = EG.CUSTOMER_CODE AND EG.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV (nolock)&#xd;		ON EG.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;		ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY BC (nolock)&#xd;		ON BV.CITY_CODE = BC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE BP (nolock)&#xd;		ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;		ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE COV (nolock)&#xd;		ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;		ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY COVC (nolock)&#xd;		ON COV.CITY_CODE = COVC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE COP (nolock)&#xd;		ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;		WHERE (A.WO_DATE IS NULL OR A.WO_DATE = '1900-01-01')&#xd;	) a &#xd;) a WHERE :search :filter and instFrom is not null</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="dkhDate" sqlType="STRING"/>
   </query>
   <query id="getDataLovNomorKonrak" useConfig="collectiondso1">
      <sql>DECLARE @DKH_DATE  VARCHAR(50) = :dkhDate&#xd;&#xd;SELECT companyCode, branchCode, productCode, collCode, aggrNo, aggrNoFil, customerFullname, customerCode, applNo, woDate, tuType, groupCode, arSts, subSts, spNo, spType, spTypeName, sttuNo, collAddressType,&#xd;address, hpNo1, phoneArea1, phoneNo1, phoneArea2, phoneNo2, rt, rw, villageName, subdistrictName, cityName, provinceName, zipCode, isnull(dayOverdue, 0) dayOverdue, instFrom, instTo, tagihanAngsuran,&#xd;tagihanDenda, biayaTagih, totalTagihan, sisaUtj, angsuranBelumJatuhTempo, dueDate, angsuran, bucketCode, bucketName, collName, collDueDate, tenor, teamNo, dsoCode, collFeeRate FROM (&#xd;	SELECT companyCode, branchCode, productCode, collCode, aggrNo, aggrNoFil, customerFullname, customerCode, applNo, woDate, tuType, groupCode, arSts, isnull(subSts, '') subSts, spNo, spType, spTypeName, sttuNo, collAddressType,&#xd;	address, hpNo1, phoneArea1, phoneNo1, phoneArea2, phoneNo2, rt, rw, villageName, subdistrictName, cityName, provinceName, zipCode, isnull(dayOverdue, 0) dayOverdue, instFrom, instTo, tagihanAngsuran,&#xd;	tagihanDenda, (biaya + mstCollfee) biayaTagih, (tagihanAngsuran + tagihanDenda + biaya + mstCollfee) totalTagihan, sisaUtj, angsuranBelumJatuhTempo, dueDate, angsuran, bucketCode, bucketName, collName, collDueDate, tenor, teamNo, dsoCode, mstCollfee as collFeeRate FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.AGGR_NO aggrNoFil,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			A.CUSTOMER_CODE customerCode,&#xd;			A.APPL_NO applNo,&#xd;			A.WO_DATE woDate,&#xd;			J.TU_TYPE tuType,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.AR_STS arSts,&#xd;			A.SUB_STS subSts,&#xd;			G.SP_NO spNo,&#xd;			G.SP_TYPE spType,&#xd;			H.PARAM_DESCRIP spTypeName,&#xd;			I.STTU_NO sttuNo,&#xd;			B.COLL_ADDRESS_TYPE collAddressType,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_ADDRESS&#xd;				END&#xd;			) as address,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.HP_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.HP_NO&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.HP_NO&#xd;				END&#xd;			) as hpNo1,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.PHONE_AREA1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.PHONE_AREA1&#xd;				END&#xd;			) as phoneArea1,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.PHONE_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.PHONE_NO1&#xd;				END&#xd;			) as phoneNo1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;				END AS RESULT&#xd;			) as phoneArea2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' OR A.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;				END AS RESULT&#xd;			) as phoneNo2,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_RT&#xd;				END&#xd;			) as rt,&#xd;			(&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_RW&#xd;				END&#xd;			) as rw,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;				END&#xd;			) as villageName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;				END&#xd;			) as subdistrictName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;				END&#xd;			) as cityName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;				END&#xd;			) as provinceName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;				END&#xd;			) as zipCode,	&#xd;			(	&#xd;				SELECT TOP 1 dueDate FROM (&#xd;					SELECT DUE_DATE dueDate, MIN(COLL_DUE_DATE) collDueDate FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' GROUP BY DUE_DATE&#xd;				) a&#xd;			) as dueDate,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID'&#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			(&#xd;				SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE &#xd;				) a&#xd;			) as instFrom,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;						) IS NULL THEN (&#xd;										SELECT &#xd;											MIN(INST_NO) instTo&#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;									)&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;				END RESULT&#xd;			) as instTo,&#xd;			(&#xd;&#xd;				SELECT &#xd;					isnull(SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)), 0)&#xd;				&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND&#xd;					INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;						SELECT &#xd;							MIN(INST_NO) instNo&#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;					) a) &#xd;					AND&#xd;					INST_NO &lt;= (SELECT &#xd;								CASE &#xd;									WHEN &#xd;										(&#xd;										SELECT &#xd;											convert(varchar(10),MAX(INST_NO)) &#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;										) IS NULL THEN (&#xd;														SELECT &#xd;															MIN(INST_NO) instTo&#xd;														FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' &#xd;													)&#xd;									ELSE&#xd;										(SELECT &#xd;											MAX(INST_NO) instNo &#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;								END RESULT)&#xd;					AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;			) as tagihanAngsuran,&#xd;			(&#xd;			&#xd;				SELECT &#xd;					SUM( isnull((PINALTY_VALUE), 0)- isnull((PINALTY_PAID), 0) ) total&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE				&#xd;			) as tagihanDenda,&#xd;			(&#xd;				SELECT &#xd;					SUM( isnull((COLL_FEE), 0) - isnull((COLL_FEE_PAID), 0) )&#xd;					total&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;			) as biaya,&#xd;						(&#xd;				select collFee from (&#xd;					select top 1&#xd;						coll_fee collFee, &#xd;						EFFECTIVE_DATE effectiveDate&#xd;					from mst_coll_fee(nolock)&#xd;					where company_code = A.COMPANY_CODE AND product_code = A.PRODUCT_CODE AND coll_kind_fee = 'ADMCOL' AND EFFECTIVE_DATE &lt;= GETDATE() AND (category_code is null or category_code = '') &#xd;					ORDER BY EFFECTIVE_DATE DESC&#xd;				) a&#xd;			) as mstCollfee,&#xd;			isnull((K.BEGIN_BAL - USAGE_VALUE - BOOK_VALUE + PLUS_VALUE),0) as sisaUtj,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;						) IS NULL THEN (&#xd;											SELECT &#xd;												isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;											FROM TRX_AGGR_SCHEDULE(nolock) &#xd;											WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND INST_NO &gt; (SELECT MIN(INST_NO) FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID')&#xd;										) &#xd;					ELSE&#xd;						(&#xd;							SELECT &#xd;								isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;							FROM TRX_AGGR_SCHEDULE(nolock) &#xd;							WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND INST_NO &gt; (SELECT MAX(INST_NO) instNo FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND DUE_DATE &lt;= GETDATE())&#xd;						) &#xd;				END RESULT &#xd;			) angsuranBelumJatuhTempo,&#xd;			A.INST_VALUE angsuran,&#xd;			A.BUCKET_CODE bucketCode,&#xd;			L.DESCRIPTION bucketName,&#xd;			M.FULLNAME collName,&#xd;			(&#xd;				select top 1 coll_due_date from trx_aggr_schedule(nolock) where aggr_no = A.AGGR_NO and payment_sts = 'UNPAID'&#xd;			) as collDueDate,&#xd;			A.TENOR tenor,&#xd;			O.TEAM_NO teamNo,&#xd;			P.DSO_CODE dsoCode&#xd;		FROM TRX_AGGR A (nolock)&#xd;		JOIN TRX_APPL B (nolock)&#xd;		ON A.APPL_NO = B.APPL_NO AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;		LEFT JOIN (SELECT *&#xd;			FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY COMPANY_CODE,&#xd;					AGGR_NO&#xd;					ORDER BY AGGR_NO, CREATED_DATE DESC) RN&#xd;			FROM TRX_SP(nolock)&#xd;			WHERE EXPIRED_DATE &gt;= '2021-05-03' AND SP_STS = 'PROC' AND COMPANY_CODE='EDV'&#xd;			) X&#xd;			WHERE RN = 1) G&#xd;		ON A.[COMPANY_CODE]			= G.[COMPANY_CODE] &#xd;		AND A.[AGGR_NO]				= G.[AGGR_NO] &#xd;		LEFT JOIN MST_GLOBAL_PARAM H (nolock)&#xd;		ON G.SP_TYPE = H.PARAM_CODE AND H.CONDITION = 'SP_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN TRX_STTU I (nolock)&#xd;		ON A.AGGR_NO = I.AGGR_NO AND I.EXPIRED_DATE &gt; @DKH_DATE AND I.STTU_STS = 'PROC' AND I.COMPANY_CODE='EDV'&#xd;		LEFT JOIN TRX_TAGIH_ULANG J (nolock)&#xd;		ON A.AGGR_NO = J.AGGR_NO AND J.TU_TYPE = '002' AND J.COMPANY_CODE='EDV'&#xd;		LEFT JOIN MST_UTJ K (nolock)&#xd;		ON A.AGGR_NO = K.AGGR_NO AND A.COMPANY_CODE=K.COMPANY_CODE&#xd;		LEFT JOIN MST_BUCKET L (nolock)&#xd;		ON A.BUCKET_CODE = L.BUCKET_CODE AND A.PRODUCT_CODE = L.PRODUCT_CODE AND A.BUCKET_TYPE = L.BUCKET_TYPE AND A.COMPANY_CODE=L.COMPANY_CODE&#xd;		LEFT JOIN MST_EMPLOYEE M (nolock)&#xd;		ON A.COLL_CODE = M.NIK&#xd;		LEFT JOIN MST_GROUP_HDR N (nolock)&#xd;		ON A.GROUP_CODE = N.GROUP_CODE AND A.COMPANY_CODE = N.COMPANY_CODE AND A.BRANCH_CODE = N.BRANCH_CODE&#xd;		LEFT JOIN MST_GROUP_DTL O (nolock)&#xd;		ON N.GROUP_CODE = O.GROUP_CODE AND N.COMPANY_CODE = O.COMPANY_CODE AND N.BRANCH_CODE = O.BRANCH_CODE AND B.APPL_NO = O.APPL_NO&#xd;		LEFT JOIN getViewBranch() P&#xd;		ON A.COMPANY_CODE = P.COMPANY_CODE AND A.BRANCH_CODE = P.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;		ON A.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV (nolock)&#xd;		ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;		ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY IC (nolock)&#xd;		ON IV.CITY_CODE = IC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE IP (nolock)&#xd;		ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV (nolock)&#xd;		ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;		ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY DC (nolock)&#xd;		ON DV.CITY_CODE = DC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE DP (nolock)&#xd;		ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;		ON A.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE KV (nolock)&#xd;		ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;		ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY KC (nolock)&#xd;		ON KV.CITY_CODE = KC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE KP (nolock)&#xd;		ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE EG (nolock)&#xd;		ON A.CUSTOMER_CODE = EG.CUSTOMER_CODE AND EG.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV (nolock)&#xd;		ON EG.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;		ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY BC (nolock)&#xd;		ON BV.CITY_CODE = BC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE BP (nolock)&#xd;		ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;		ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE COV (nolock)&#xd;		ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;		ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY COVC (nolock)&#xd;		ON COV.CITY_CODE = COVC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE COP (nolock)&#xd;		ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;		WHERE (A.WO_DATE IS NULL OR A.WO_DATE = '1900-01-01')&#xd;	) a &#xd;) a WHERE :search :filter and instFrom is not null ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="applNo" name="applNo" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="collAddressType" name="collAddressType" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="hpNo1" name="hpNo1" xsdType="string"/>
         <element column="phoneArea1" name="phoneArea1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="phoneArea2" name="phoneArea2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="tuType" name="tuType" xsdType="string"/>
         <element column="spNo" name="spNo" xsdType="string"/>
         <element column="spType" name="spType" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="tagihanDenda" name="tagihanDenda" xsdType="string"/>
         <element column="biayaTagih" name="biayaTagih" xsdType="string"/>
         <element column="totalTagihan" name="totalTagihan" xsdType="string"/>
         <element column="sisaUtj" name="sisaUtj" xsdType="string"/>
         <element column="angsuranBelumJatuhTempo" name="angsuranBelumJatuhTempo" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="angsuran" name="angsuran" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="collDueDate" name="collDueDate" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="teamNo" name="teamNo" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="aggrNoFil" name="aggrNoFil" xsdType="string"/>
         <element column="collFeeRate" name="collFeeRate" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="dkhDate" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxSttu" useConfig="collectiondso1">
      <sql>SELECT 1 as sttuNo, 1 sttuDate, 1 printedDate, 1 agentTypeName, 1 pic1Code, 1 pic1Name, 1 extCollName1, 1 subdistrictName, 1 villageName, 1 aggrNo, 1 customerName, 1 tunggakanAngsuran, 1 sttuStsName, 1 expiredDate</sql>
      <result element="Entries" rowName="">
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="printedDate" name="printedDate" xsdType="string"/>
         <element column="agentTypeName" name="agentTypeName" xsdType="string"/>
         <element column="pic1Code" name="pic1Code" xsdType="string"/>
         <element column="pic1Name" name="pic1Name" xsdType="string"/>
         <element column="extCollName1" name="extCollName1" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerName" name="customerName" xsdType="string"/>
         <element column="tunggakanAngsuran" name="tunggakanAngsuran" xsdType="string"/>
         <element column="sttuStsName" name="sttuStsName" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxSttu" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;        A.COMPANY_CODE companyCode,&#xd;        A.BRANCH_CODE branchCode,&#xd;        A.STTU_NO sttuNo,&#xd;        A.STTU_DATE sttuDate,&#xd;        A.EXPIRED_DATE expiredDate,&#xd;        A.AGGR_NO aggrNo,&#xd;		F.CUSTOMER_FULLNAME customerName,&#xd;        A.STTU_STS sttuSts,&#xd;		I.PARAM_DESCRIP sttuStsName,&#xd;        A.STTU_STS_DATE sttuStsDate,&#xd;        A.CUSTOMER_CODE customerCode,&#xd;        A.VILLAGE_CODE villageCode,&#xd;		B.VILLAGE_NAME villageName,&#xd;		B.ZIPCODE zipCode,&#xd;		C.SUBDISTRICT_NAME subdistrictName,&#xd;		D.CITY_NAME cityName,&#xd;		E.PROVINCE_NAME provinceName,&#xd;		G.COLL_ADDRESS_TYPE collAddressType,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_ADDRESS FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_ADDRESS FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT HP_NO1 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT HP_NO FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT HP_NO1 FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT HP_NO FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as hpNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT PHONE_AREA1 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT PHONE_AREA1 FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT PHONE_AREA1 FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT PHONE_AREA1 FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as phoneArea1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT PHONE_NO1 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT PHONE_NO1 FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT PHONE_NO1 FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT PHONE_NO1 FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as phoneNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT PHONE_AREA2 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;			END AS RESULT&#xd;		) as phoneArea2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT PHONE_NO2 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;			END AS RESULT&#xd;		) as phoneNo2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_RT FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_RT FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT OFFICE_RT FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT OFFICE_RT FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_RT FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_RW FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_RW FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT OFFICE_RW FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT OFFICE_RW FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_RW FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as rw,&#xd;        A.PRINTED_DATE printedDate,&#xd;        A.REPRINT_COUNT printCount,&#xd;        A.AGENT_TYPE agentType,&#xd;		H.PARAM_DESCRIP agentTypeName,&#xd;        A.PIC1_CODE pic1Code,&#xd;		J.FULLNAME pic1Name,&#xd;		J.USERNAME collectorUsername,&#xd;        A.PIC1_POSITION pic1Position,&#xd;		K.POSITION_NAME position1Name,&#xd;        A.PIC2_CODE pic2Code,&#xd;		L.FULLNAME pic2name,&#xd;        A.PIC2_POSITION pic2Position,&#xd;		M.POSITION_NAME position2Name,&#xd;        A.PIC_HEAD picHead,&#xd;		T.FULLNAME picHeadName,&#xd;        A.PIC_HEAD_POSITION picHeadPosition,&#xd;		U.POSITION_NAME positionHeadName,&#xd;        A.TU_REASON tuReason,&#xd;		V.PARAM_DESCRIP tuReasonName,&#xd;		N.BRAND_CODE brandCode,&#xd;		O.BRAND_NAME brandName,&#xd;		N.TYPE_CODE typeCode,&#xd;		P.TYPE_NAME typeName,&#xd;		N.MODEL_CODE modelCode,&#xd;		Q.MODEL_NAME modelName,&#xd;		P.KIND_CODE kindCode,&#xd;		R.KIND_NAME kindName,&#xd;		S.COLOR_NAME colorName,&#xd;		N.YEAR_MFG yearMfg,&#xd;		N.CHASSIS_NO chassisNo,&#xd;		N.MACHINE_NO machineNo,&#xd;		N.NOPOL nopol,&#xd;		N.BPKB_NAME stnkName,&#xd;		(&#xd;			SELECT TOP 1 instNo FROM (&#xd;				SELECT &#xd;					CASE &#xd;						WHEN MIN(INST_NO) IS NULL THEN '0'&#xd;						ELSE MIN(INST_NO)&#xd;					END instNo&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;			) a&#xd;		) as instFrom,&#xd;		(&#xd;			SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;						) IS NULL THEN '0'&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;				END RESULT&#xd;		) as instTo,&#xd;		(&#xd;			SELECT &#xd;				isnull(SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)), 0)&#xd;				&#xd;			FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND&#xd;				INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;				) a) &#xd;				AND&#xd;				INST_NO &lt;= (SELECT &#xd;							CASE &#xd;								WHEN &#xd;									(&#xd;								SELECT &#xd;									convert(varchar(10),MAX(INST_NO)) &#xd;								FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;								) IS NULL THEN '0'&#xd;								ELSE&#xd;									(SELECT &#xd;										MAX(INST_NO) instNo &#xd;									FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;							END RESULT)&#xd;				AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;		) as tunggakanAngsuran,&#xd;		W.EXT_COLL_NAME extCollName1,&#xd;		F.AR_STS arSts,&#xd;		Y.NOTES arStsName,&#xd;		O.CATEGORY_CODE categoryCode,&#xd;		Z.PARAM_DESCRIP categoryName,&#xd;		A.APPV_DATE appvDate,&#xd;		A.CHRONOLOGICAL chronological,&#xd;		A.CREATED_DATE createdDate,&#xd;					(&#xd;			SELECT &#xd;				SUM(PRINCIPAL_VALUE-PRINCIPAL_PAID) balPrincipalValue&#xd;			FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as balPrincipalValue,&#xd;		(&#xd;			SELECT &#xd;				SUM(INT_VALUE-INT_PAID) balPrincipalValue&#xd;			FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) as balIntValue,&#xd;		IIF(A.PIC_PRODUCT_CODE='',F.PRODUCT_CODE,A.PIC_PRODUCT_CODE) picProductCode,&#xd;		A.PIC_BUCKET_TYPE picBucketType,&#xd;		A.PIC1_BUCKET_CODE pic1BucketCode,&#xd;		A.PIC2_BUCKET_CODE pic2BucketCode,&#xd;		A.EXT_COLL_CODE extCollCode,&#xd;		A.DAY_OVERDUE daysOverdue,&#xd;		DSO.DSO_CODE dsoCode,&#xd;        F.BRANCH_CODE branchCodeAggr&#xd;    FROM TRX_STTU A (NOLOCK)&#xd;	LEFT JOIN MST_VILLAGE B (NOLOCK)&#xd;	ON A.VILLAGE_CODE = B.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT C (NOLOCK)&#xd;	ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE &#xd;	LEFT JOIN MST_CITY D (NOLOCK)&#xd;	ON B.CITY_CODE = D.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE E (NOLOCK)&#xd;	ON B.PROVINCE_CODE = E.PROVINCE_CODE&#xd;	LEFT JOIN TRX_AGGR F (NOLOCK)&#xd;	ON A.AGGR_NO = F.AGGR_NO AND A.COMPANY_CODE=F.COMPANY_CODE&#xd;	LEFT JOIN TRX_APPL G (NOLOCK)&#xd;	ON F.APPL_NO = G.APPL_NO AND F.COMPANY_CODE=G.COMPANY_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM H (NOLOCK)&#xd;	ON A.AGENT_TYPE = H.PARAM_CODE AND H.CONDITION = 'AGENT_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM I (NOLOCK)&#xd;	ON A.STTU_STS = I.PARAM_CODE AND I.CONDITION = 'STTU_STS' AND I.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE J (NOLOCK)&#xd;	ON A.PIC1_CODE = J.NIK&#xd;	LEFT JOIN MST_POSITION K (NOLOCK)&#xd;	ON A.PIC1_POSITION = K.POSITION_CODE&#xd;	LEFT JOIN MST_EMPLOYEE L (NOLOCK)&#xd;	ON A.PIC2_CODE = L.NIK&#xd;	LEFT JOIN MST_POSITION M (NOLOCK)&#xd;	ON A.PIC2_POSITION = M.POSITION_CODE&#xd;	LEFT JOIN TRX_AGGR_ASSET N (NOLOCK)&#xd;	ON A.AGGR_NO = N.AGGR_NO&#xd;	LEFT JOIN MST_BRAND O (NOLOCK)&#xd;	ON N.BRAND_CODE = O.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE P (NOLOCK)&#xd;	ON N.TYPE_CODE = P.TYPE_CODE&#xd;	LEFT JOIN MST_MODEL Q (NOLOCK)&#xd;	ON N.MODEL_CODE = Q.MODEL_CODE&#xd;	LEFT JOIN MST_KIND R (NOLOCK)&#xd;	ON P.KIND_CODE = R.KIND_CODE&#xd;	LEFT JOIN MST_COLOR S (NOLOCK)&#xd;	ON N.COLOR_CODE = S.COLOR_CODE&#xd;	LEFT JOIN MST_EMPLOYEE T (NOLOCK)&#xd;	ON A.PIC_HEAD = T.NIK&#xd;	LEFT JOIN MST_POSITION U (NOLOCK)&#xd;	ON A.PIC_HEAD_POSITION = U.POSITION_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM V (NOLOCK)&#xd;	ON A.TU_REASON = V.PARAM_CODE AND V.CONDITION = 'TU_REASON' AND V.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EXT_COLL W (NOLOCK)&#xd;	ON A.EXT_COLL_CODE = W.EXT_COLL_CODE&#xd;	LEFT JOIN MST_AR_STS Y (NOLOCK)&#xd;	ON F.AR_STS = Y.AR_STS AND ISNULL(Y.SUB_STS, '') = ISNULL(F.SUB_STS, '')&#xd;	LEFT JOIN MST_GLOBAL_PARAM Z (NOLOCK)&#xd;	ON O.CATEGORY_CODE = Z.PARAM_CODE AND Z.CONDITION = 'CATEGORY_CODE' AND Z.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRANCH DSO (NOLOCK)&#xd;	ON A.COMPANY_CODE = DSO.COMPANY_CODE AND A.BRANCH_CODE = DSO.BRANCH_CODE&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxSttu" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, sttuNo, sttuDate, expiredDate, aggrNo, customerName, sttuSts, sttuStsName, sttuStsDate, customerCode, villageCode, villageName, zipCode, subdistrictName, cityName, provinceName,&#xd;	collAddressType, address, hpNo1, phoneArea1, phoneNo1, phoneArea2, phoneNo2, rt, rw, printedDate, printCount, agentType, agentTypeName, pic1Code, pic1Name, pic1Position, position1Name, pic2Code, pic2name,&#xd;	pic2Position, position2Name, picHead, picHeadName, picHeadPosition, positionHeadName, tuReason, tuReasonName, brandCode, brandName, typeCode, typeName, modelCode, modelName, kindCode, kindName,&#xd;	colorName, yearMfg, chassisNo, machineNo, nopol, stnkName, instFrom, instTo, tunggakanAngsuran, extCollName1, arSts, arStsName, categoryCode, categoryName, appvDate, chronological, createdDate, balPrincipalValue, balIntValue, collectorUsername, picProductCode, picBucketType, pic1BucketCode, pic2BucketCode, extCollCode, daysOverdue, dsoCode, branchCodeAggr FROM (&#xd;	SELECT &#xd;        A.COMPANY_CODE companyCode,&#xd;        A.BRANCH_CODE branchCode,&#xd;        A.STTU_NO sttuNo,&#xd;        A.STTU_DATE sttuDate,&#xd;        A.EXPIRED_DATE expiredDate,&#xd;        A.AGGR_NO aggrNo,&#xd;		F.CUSTOMER_FULLNAME customerName,&#xd;        A.STTU_STS sttuSts,&#xd;		I.PARAM_DESCRIP sttuStsName,&#xd;        A.STTU_STS_DATE sttuStsDate,&#xd;        A.CUSTOMER_CODE customerCode,&#xd;        A.VILLAGE_CODE villageCode,&#xd;		B.VILLAGE_NAME villageName,&#xd;		B.ZIPCODE zipCode,&#xd;		C.SUBDISTRICT_NAME subdistrictName,&#xd;		D.CITY_NAME cityName,&#xd;		E.PROVINCE_NAME provinceName,&#xd;		G.COLL_ADDRESS_TYPE collAddressType,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_ADDRESS FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_ADDRESS FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT HP_NO1 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT HP_NO FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT HP_NO1 FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT HP_NO FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as hpNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT PHONE_AREA1 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT PHONE_AREA1 FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT PHONE_AREA1 FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT PHONE_AREA1 FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as phoneArea1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT PHONE_NO1 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT PHONE_NO1 FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT PHONE_NO1 FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT PHONE_NO1 FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as phoneNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT PHONE_AREA2 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;			END AS RESULT&#xd;		) as phoneArea2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' OR F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT PHONE_NO2 FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;			END AS RESULT&#xd;		) as phoneNo2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_RT FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_RT FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT OFFICE_RT FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT OFFICE_RT FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_RT FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN F.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_RW FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_RW FROM MST_CUSTOMER X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'P' THEN (SELECT OFFICE_RW FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'K' AND F.CUSTOMER_TYPE = 'C' THEN (SELECT OFFICE_RW FROM MST_CUSTOMER_CO X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN F.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_RW FROM MST_CUSTOMER_EMPLOYEE X (NOLOCK) WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as rw,&#xd;        A.PRINTED_DATE printedDate,&#xd;        A.REPRINT_COUNT printCount,&#xd;        A.AGENT_TYPE agentType,&#xd;		H.PARAM_DESCRIP agentTypeName,&#xd;        A.PIC1_CODE pic1Code,&#xd;		J.FULLNAME pic1Name,&#xd;		J.USERNAME collectorUsername,&#xd;        A.PIC1_POSITION pic1Position,&#xd;		K.POSITION_NAME position1Name,&#xd;        A.PIC2_CODE pic2Code,&#xd;		L.FULLNAME pic2name,&#xd;        A.PIC2_POSITION pic2Position,&#xd;		M.POSITION_NAME position2Name,&#xd;        A.PIC_HEAD picHead,&#xd;		T.FULLNAME picHeadName,&#xd;        A.PIC_HEAD_POSITION picHeadPosition,&#xd;		U.POSITION_NAME positionHeadName,&#xd;        A.TU_REASON tuReason,&#xd;		V.PARAM_DESCRIP tuReasonName,&#xd;		N.BRAND_CODE brandCode,&#xd;		O.BRAND_NAME brandName,&#xd;		N.TYPE_CODE typeCode,&#xd;		P.TYPE_NAME typeName,&#xd;		N.MODEL_CODE modelCode,&#xd;		Q.MODEL_NAME modelName,&#xd;		P.KIND_CODE kindCode,&#xd;		R.KIND_NAME kindName,&#xd;		S.COLOR_NAME colorName,&#xd;		N.YEAR_MFG yearMfg,&#xd;		N.CHASSIS_NO chassisNo,&#xd;		N.MACHINE_NO machineNo,&#xd;		N.NOPOL nopol,&#xd;		N.BPKB_NAME stnkName,&#xd;		(&#xd;			SELECT TOP 1 instNo FROM (&#xd;				SELECT &#xd;					CASE &#xd;						WHEN MIN(INST_NO) IS NULL THEN '0'&#xd;						ELSE MIN(INST_NO)&#xd;					END instNo&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;			) a&#xd;		) as instFrom,&#xd;		(&#xd;			SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;						) IS NULL THEN '0'&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;				END RESULT&#xd;		) as instTo,&#xd;		(&#xd;			SELECT &#xd;				isnull(SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)), 0)&#xd;				&#xd;			FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND&#xd;				INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;				) a) &#xd;				AND&#xd;				INST_NO &lt;= (SELECT &#xd;							CASE &#xd;								WHEN &#xd;									(&#xd;								SELECT &#xd;									convert(varchar(10),MAX(INST_NO)) &#xd;								FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;								) IS NULL THEN '0'&#xd;								ELSE&#xd;									(SELECT &#xd;										MAX(INST_NO) instNo &#xd;									FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;							END RESULT)&#xd;				AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;		) as tunggakanAngsuran,&#xd;		W.EXT_COLL_NAME extCollName1,&#xd;		F.AR_STS arSts,&#xd;		Y.NOTES arStsName,&#xd;		O.CATEGORY_CODE categoryCode,&#xd;		Z.PARAM_DESCRIP categoryName,&#xd;		A.APPV_DATE appvDate,&#xd;		A.CHRONOLOGICAL chronological,&#xd;		A.CREATED_DATE createdDate,&#xd;					(&#xd;			SELECT &#xd;				SUM(PRINCIPAL_VALUE-PRINCIPAL_PAID) balPrincipalValue&#xd;			FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as balPrincipalValue,&#xd;		(&#xd;			SELECT &#xd;				SUM(INT_VALUE-INT_PAID) balPrincipalValue&#xd;			FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) as balIntValue,&#xd;		IIF(A.PIC_PRODUCT_CODE='',F.PRODUCT_CODE,A.PIC_PRODUCT_CODE) picProductCode,&#xd;		A.PIC_BUCKET_TYPE picBucketType,&#xd;		A.PIC1_BUCKET_CODE pic1BucketCode,&#xd;		A.PIC2_BUCKET_CODE pic2BucketCode,&#xd;		A.EXT_COLL_CODE extCollCode,&#xd;		A.DAY_OVERDUE daysOverdue,&#xd;		DSO.DSO_CODE dsoCode,&#xd;        F.BRANCH_CODE branchCodeAggr&#xd;    FROM TRX_STTU A (NOLOCK)&#xd;	LEFT JOIN MST_VILLAGE B (NOLOCK)&#xd;	ON A.VILLAGE_CODE = B.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT C (NOLOCK)&#xd;	ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE &#xd;	LEFT JOIN MST_CITY D (NOLOCK)&#xd;	ON B.CITY_CODE = D.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE E (NOLOCK)&#xd;	ON B.PROVINCE_CODE = E.PROVINCE_CODE&#xd;	LEFT JOIN TRX_AGGR F (NOLOCK)&#xd;	ON A.AGGR_NO = F.AGGR_NO AND A.COMPANY_CODE=F.COMPANY_CODE&#xd;	LEFT JOIN TRX_APPL G (NOLOCK)&#xd;	ON F.APPL_NO = G.APPL_NO AND F.COMPANY_CODE=G.COMPANY_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM H (NOLOCK)&#xd;	ON A.AGENT_TYPE = H.PARAM_CODE AND H.CONDITION = 'AGENT_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM I (NOLOCK)&#xd;	ON A.STTU_STS = I.PARAM_CODE AND I.CONDITION = 'STTU_STS' AND I.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE J (NOLOCK)&#xd;	ON A.PIC1_CODE = J.NIK&#xd;	LEFT JOIN MST_POSITION K (NOLOCK)&#xd;	ON A.PIC1_POSITION = K.POSITION_CODE&#xd;	LEFT JOIN MST_EMPLOYEE L (NOLOCK)&#xd;	ON A.PIC2_CODE = L.NIK&#xd;	LEFT JOIN MST_POSITION M (NOLOCK)&#xd;	ON A.PIC2_POSITION = M.POSITION_CODE&#xd;	LEFT JOIN TRX_AGGR_ASSET N (NOLOCK)&#xd;	ON A.AGGR_NO = N.AGGR_NO&#xd;	LEFT JOIN MST_BRAND O (NOLOCK)&#xd;	ON N.BRAND_CODE = O.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE P (NOLOCK)&#xd;	ON N.TYPE_CODE = P.TYPE_CODE&#xd;	LEFT JOIN MST_MODEL Q (NOLOCK)&#xd;	ON N.MODEL_CODE = Q.MODEL_CODE&#xd;	LEFT JOIN MST_KIND R (NOLOCK)&#xd;	ON P.KIND_CODE = R.KIND_CODE&#xd;	LEFT JOIN MST_COLOR S (NOLOCK)&#xd;	ON N.COLOR_CODE = S.COLOR_CODE&#xd;	LEFT JOIN MST_EMPLOYEE T (NOLOCK)&#xd;	ON A.PIC_HEAD = T.NIK&#xd;	LEFT JOIN MST_POSITION U (NOLOCK)&#xd;	ON A.PIC_HEAD_POSITION = U.POSITION_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM V (NOLOCK)&#xd;	ON A.TU_REASON = V.PARAM_CODE AND V.CONDITION = 'TU_REASON' AND V.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EXT_COLL W (NOLOCK)&#xd;	ON A.EXT_COLL_CODE = W.EXT_COLL_CODE&#xd;	LEFT JOIN MST_AR_STS Y (NOLOCK)&#xd;	ON F.AR_STS = Y.AR_STS AND ISNULL(Y.SUB_STS, '') = ISNULL(F.SUB_STS, '')&#xd;	LEFT JOIN MST_GLOBAL_PARAM Z (NOLOCK)&#xd;	ON O.CATEGORY_CODE = Z.PARAM_CODE AND Z.CONDITION = 'CATEGORY_CODE' AND Z.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRANCH DSO (NOLOCK)&#xd;	ON A.COMPANY_CODE = DSO.COMPANY_CODE AND A.BRANCH_CODE = DSO.BRANCH_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerName" name="customerName" xsdType="string"/>
         <element column="sttuSts" name="sttuSts" xsdType="string"/>
         <element column="sttuStsName" name="sttuStsName" xsdType="string"/>
         <element column="sttuStsDate" name="sttuStsDate" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="hpNo1" name="hpNo1" xsdType="string"/>
         <element column="phoneArea1" name="phoneArea1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="phoneArea2" name="phoneArea2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="printedDate" name="printedDate" xsdType="string"/>
         <element column="printCount" name="printCount" xsdType="string"/>
         <element column="agentType" name="agentType" xsdType="string"/>
         <element column="agentTypeName" name="agentTypeName" xsdType="string"/>
         <element column="pic1Code" name="pic1Code" xsdType="string"/>
         <element column="pic1Name" name="pic1Name" xsdType="string"/>
         <element column="pic1Position" name="pic1Position" xsdType="string"/>
         <element column="position1Name" name="position1Name" xsdType="string"/>
         <element column="pic2Code" name="pic2Code" xsdType="string"/>
         <element column="pic2name" name="pic2name" xsdType="string"/>
         <element column="position2Name" name="position2Name" xsdType="string"/>
         <element column="picHead" name="picHead" xsdType="string"/>
         <element column="picHeadName" name="picHeadName" xsdType="string"/>
         <element column="picHeadPosition" name="picHeadPosition" xsdType="string"/>
         <element column="positionHeadName" name="positionHeadName" xsdType="string"/>
         <element column="tuReason" name="tuReason" xsdType="string"/>
         <element column="tuReasonName" name="tuReasonName" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="tunggakanAngsuran" name="tunggakanAngsuran" xsdType="string"/>
         <element column="extCollName1" name="extCollName1" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="appvDate" name="appvDate" xsdType="string"/>
         <element column="chronological" name="chronological" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="balPrincipalValue" name="balPrincipalValue" xsdType="string"/>
         <element column="balIntValue" name="balIntValue" xsdType="string"/>
         <element column="collectorUsername" name="collectorUsername" xsdType="string"/>
         <element column="picProductCode" name="picProductCode" xsdType="string"/>
         <element column="picBucketType" name="picBucketType" xsdType="string"/>
         <element column="pic1BucketCode" name="pic1BucketCode" xsdType="string"/>
         <element column="pic2BucketCode" name="pic2BucketCode" xsdType="string"/>
         <element column="extCollCode" name="extCollCode" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="daysOverdue" name="daysOverdue" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="branchCodeAggr" name="branchCodeAggr" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxSttu" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_STTU&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        STTU_NO,&#xd;        STTU_DATE,&#xd;        EXPIRED_DATE,&#xd;        AGGR_NO,&#xd;        STTU_STS,&#xd;        STTU_STS_DATE,&#xd;        CUSTOMER_CODE,&#xd;        VILLAGE_CODE,&#xd;        PRINTED_DATE,&#xd;        REPRINT_COUNT,&#xd;        AGENT_TYPE,&#xd;		PIC_PRODUCT_CODE,&#xd;		PIC_BUCKET_TYPE,&#xd;        PIC1_CODE,&#xd;		PIC1_BUCKET_CODE,&#xd;        PIC1_POSITION,&#xd;        PIC2_CODE,&#xd;		PIC2_BUCKET_CODE,&#xd;        PIC2_POSITION,&#xd;        PIC_HEAD,&#xd;        PIC_HEAD_POSITION,&#xd;		EXT_COLL_CODE,&#xd;        TU_REASON,&#xd;		CHRONOLOGICAL,&#xd;		DAY_OVERDUE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES &#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :sttuNo,&#xd;         GETDATE(),&#xd;        :expiredDate,&#xd;        :aggrNo,&#xd;        :sttuSts,&#xd;        :sttuStsDate,&#xd;        :customerCode,&#xd;        :villageCode,&#xd;        :printedDate,&#xd;        :printCount,&#xd;        :agentType,&#xd;		:picProductCode,&#xd;		:picBucketType,&#xd;        :pic1Code,&#xd;		:pic1BucketCode,&#xd;        :pic1Position,&#xd;        :pic2Code,&#xd;		:pic2BucketCode,&#xd;        :pic2Position,&#xd;        :picHead,&#xd;        :picHeadPosition,&#xd;		:extCollCode,&#xd;        :tuReason,&#xd;		:chronological,&#xd;		:dayOverdue,&#xd;         GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="expiredDate" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="sttuSts" sqlType="STRING"/>
      <param name="sttuStsDate" sqlType="STRING"/>
      <param name="customerCode" sqlType="STRING"/>
      <param name="villageCode" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
      <param name="printCount" sqlType="STRING"/>
      <param name="agentType" sqlType="STRING"/>
      <param name="pic1Code" sqlType="STRING"/>
      <param name="pic1Position" sqlType="STRING"/>
      <param name="pic2Code" sqlType="STRING"/>
      <param name="pic2Position" sqlType="STRING"/>
      <param name="picHead" sqlType="STRING"/>
      <param name="picHeadPosition" sqlType="STRING"/>
      <param name="tuReason" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="chronological" sqlType="STRING"/>
      <param name="picProductCode" sqlType="STRING"/>
      <param name="picBucketType" sqlType="STRING"/>
      <param name="pic1BucketCode" sqlType="STRING"/>
      <param name="pic2BucketCode" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
      <param name="dayOverdue" sqlType="STRING"/>
   </query>
   <query id="updateTrxSttu" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @BRANCH_CODE varchar(10) = :branchCode&#xd;DECLARE @STTU_NO varchar(50) = :sttuNo&#xd;&#xd;UPDATE TRX_STTU SET&#xd;        STTU_DATE = :sttuDate,&#xd;        EXPIRED_DATE = :expiredDate,&#xd;        AGGR_NO = :aggrNo,&#xd;        STTU_STS = :sttuSts,&#xd;        STTU_STS_DATE = :sttuStsDate,&#xd;        CUSTOMER_CODE = :customerCode,&#xd;        VILLAGE_CODE = :villageCode,&#xd;        PRINTED_DATE = :printedDate,&#xd;        REPRINT_COUNT = :printCount,&#xd;        AGENT_TYPE = :agentType,&#xd;		PIC_PRODUCT_CODE = :picProductCode,&#xd;		PIC_BUCKET_TYPE = :picBucketType,&#xd;        PIC1_CODE = :pic1Code,&#xd;		PIC1_BUCKET_CODE = :pic1BucketCode,&#xd;        PIC1_POSITION = :pic1Position,&#xd;        PIC2_CODE = :pic2Code,&#xd;		PIC2_BUCKET_CODE = :pic2BucketCode,&#xd;        PIC2_POSITION = :pic2Position,&#xd;        PIC_HEAD = :picHead,&#xd;        PIC_HEAD_POSITION = :picHeadPosition,&#xd;		EXT_COLL_CODE = :extCollCode,&#xd;        TU_REASON = :tuReason,&#xd;		CHRONOLOGICAL = :chronological,&#xd;        UPDATED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        STTU_NO = @STTU_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sttuDate" sqlType="STRING"/>
      <param name="expiredDate" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="sttuSts" sqlType="STRING"/>
      <param name="sttuStsDate" sqlType="STRING"/>
      <param name="customerCode" sqlType="STRING"/>
      <param name="villageCode" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
      <param name="printCount" sqlType="STRING"/>
      <param name="agentType" sqlType="STRING"/>
      <param name="pic1Code" sqlType="STRING"/>
      <param name="pic1Position" sqlType="STRING"/>
      <param name="pic2Code" sqlType="STRING"/>
      <param name="pic2Position" sqlType="STRING"/>
      <param name="picHead" sqlType="STRING"/>
      <param name="picHeadPosition" sqlType="STRING"/>
      <param name="tuReason" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="chronological" sqlType="STRING"/>
      <param name="picProductCode" sqlType="STRING"/>
      <param name="picBucketType" sqlType="STRING"/>
      <param name="pic1BucketCode" sqlType="STRING"/>
      <param name="pic2BucketCode" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxSttuCost" useConfig="collectiondso1">
      <sql>SELECT 1 as reqCostNo, 1 reqCostDate, 1 sttuNo, 1 sttuDate, 1 aggrNo, 1 totReqValue, 1 totRealValue, 1 reqCostStsName, 1 expiredDate</sql>
      <result element="Entries" rowName="">
         <element column="reqCostNo" name="reqCostNo" xsdType="string"/>
         <element column="reqCostDate" name="reqCostDate" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="totReqValue" name="totReqValue" xsdType="string"/>
         <element column="totRealValue" name="totRealValue" xsdType="string"/>
         <element column="reqCostStsName" name="reqCostStsName" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxSttuCost" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT DISTINCT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.REQ_COST_NO reqCostNo,&#xd;			A.REQ_COST_DATE reqCostDate,&#xd;			A.STTU_NO sttuNo,&#xd;			B.STTU_DATE sttuDate,&#xd;			B.EXPIRED_DATE expiredDate,&#xd;			A.TYPE_COST typeCost,&#xd;			--C.PARAM_DESCRIP typeCostName,&#xd;(SELECT C.PARAM_DESCRIP FROM MST_GLOBAL_PARAM C (NOLOCK) WHERE A.TYPE_COST = C.PARAM_CODE AND C.CONDITION = 'TYPE_COST' AND C.FLAG_ACTIVE = '1') typeCostName,&#xd;			A.AGGR_NO aggrNo,&#xd;			F.CUSTOMER_FULLNAME customerFullname,&#xd;			A.TOT_REQ_VALUE totReqValue,&#xd;			A.TOT_REAL_VALUE totRealValue,&#xd;			A.PIC_CODE picCode,&#xd;			D.FULLNAME picFullname,&#xd;			A.PIC_POSITION picPosition,&#xd;			E.POSITION_NAME positionName,&#xd;			A.SUCCESS_FLAG successFlag,&#xd;			A.REQ_COST_STS reqCostSts,&#xd;			--UPPER(G.PARAM_DESCRIP) reqCostStsName,&#xd;(SELECT UPPER(G.PARAM_DESCRIP) FROM MST_GLOBAL_PARAM G (NOLOCK) WHERE A.REQ_COST_STS = G.PARAM_CODE AND G.CONDITION = 'REQ_COST_STS' AND G.FLAG_ACTIVE = '1') reqCostStsName,&#xd;			A.REQ_COST_STS_DATE reqCostStsDate,&#xd;			A.APPV_DATE appvDate,&#xd;			A.DISB_DATE disbDate,&#xd;			A.REAL_DATE realDate,&#xd;			A.CLOSE_DATE closeDate,&#xd;			A.CREATED_DATE createdDate,&#xd;			B.STTU_STS sttuSts,&#xd;			H.DSO_CODE dsoCode,&#xd;			A.CREATED_BY requestNik,&#xd;			I.FULLNAME requestName,&#xd;			I.POSITION_CODE requestPosition,&#xd;			B.PIC_PRODUCT_CODE productCode,&#xd;			case&#xd;				when DEP.TU_DEPOSIT_NO IS NULL then 'Tidak'&#xd;				else 'Ya'&#xd;			end flagBerhasilTarik,&#xd;			A.CHRONOLOGICAL chronological&#xd;	FROM TRX_STTU_COST_HDR A (NOLOCK)&#xd;	LEFT JOIN TRX_STTU B (NOLOCK)&#xd;	ON A.STTU_NO = B.STTU_NO&#xd;	--LEFT JOIN MST_GLOBAL_PARAM C (NOLOCK)&#xd;	--ON A.TYPE_COST = C.PARAM_CODE AND C.CONDITION = 'TYPE_COST' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE D (NOLOCK)&#xd;	ON A.PIC_CODE = D.NIK&#xd;	LEFT JOIN MST_POSITION E (NOLOCK)&#xd;	ON A.PIC_POSITION = E.POSITION_CODE&#xd;	LEFT JOIN TRX_AGGR F (NOLOCK)&#xd;	ON A.AGGR_NO = F.AGGR_NO&#xd;	--LEFT JOIN MST_GLOBAL_PARAM G (NOLOCK)&#xd;	--ON A.REQ_COST_STS = G.PARAM_CODE AND G.CONDITION = 'REQ_COST_STS' AND G.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRANCH H (NOLOCK)&#xd;	ON A.COMPANY_CODE = H.COMPANY_CODE AND A.BRANCH_CODE = H.BRANCH_CODE&#xd;	LEFT JOIN MST_EMPLOYEE I (NOLOCK)&#xd;	ON A.CREATED_BY = I.NIK&#xd;	LEFT JOIN TRX_TU_DEPOSIT DEP (NOLOCK)&#xd;	ON A.STTU_NO = DEP.STTU_NO AND B.AGGR_NO = DEP.AGGR_NO&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxSttuCost" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, reqCostNo, reqCostDate, sttuNo, sttuDate, expiredDate, typeCost, typeCostName, aggrNo, customerFullname, totReqValue, totRealValue, picCode, picFullname, picPosition,&#xd;positionName, successFlag, reqCostSts, reqCostStsName, reqCostStsDate, appvDate, disbDate, realDate, closeDate, createdDate, sttuSts, dsoCode, requestNik, requestName, requestPosition, productCode, flagBerhasilTarik, chronological FROM (&#xd;	SELECT DISTINCT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.REQ_COST_NO reqCostNo,&#xd;			A.REQ_COST_DATE reqCostDate,&#xd;			A.STTU_NO sttuNo,&#xd;			B.STTU_DATE sttuDate,&#xd;			B.EXPIRED_DATE expiredDate,&#xd;			A.TYPE_COST typeCost,&#xd;			--C.PARAM_DESCRIP typeCostName,&#xd;(SELECT C.PARAM_DESCRIP FROM MST_GLOBAL_PARAM C (NOLOCK) WHERE A.TYPE_COST = C.PARAM_CODE AND C.CONDITION = 'TYPE_COST' AND C.FLAG_ACTIVE = '1') typeCostName,&#xd;			A.AGGR_NO aggrNo,&#xd;			F.CUSTOMER_FULLNAME customerFullname,&#xd;			A.TOT_REQ_VALUE totReqValue,&#xd;			A.TOT_REAL_VALUE totRealValue,&#xd;			A.PIC_CODE picCode,&#xd;			D.FULLNAME picFullname,&#xd;			A.PIC_POSITION picPosition,&#xd;			E.POSITION_NAME positionName,&#xd;			A.SUCCESS_FLAG successFlag,&#xd;			A.REQ_COST_STS reqCostSts,&#xd;			--UPPER(G.PARAM_DESCRIP) reqCostStsName,&#xd;(SELECT UPPER(G.PARAM_DESCRIP) FROM MST_GLOBAL_PARAM G (NOLOCK) WHERE A.REQ_COST_STS = G.PARAM_CODE AND G.CONDITION = 'REQ_COST_STS' AND G.FLAG_ACTIVE = '1') reqCostStsName,&#xd;			A.REQ_COST_STS_DATE reqCostStsDate,&#xd;			A.APPV_DATE appvDate,&#xd;			A.DISB_DATE disbDate,&#xd;			A.REAL_DATE realDate,&#xd;			A.CLOSE_DATE closeDate,&#xd;			A.CREATED_DATE createdDate,&#xd;			B.STTU_STS sttuSts,&#xd;			H.DSO_CODE dsoCode,&#xd;			A.CREATED_BY requestNik,&#xd;			I.FULLNAME requestName,&#xd;			I.POSITION_CODE requestPosition,&#xd;			B.PIC_PRODUCT_CODE productCode,&#xd;			case&#xd;				when DEP.TU_DEPOSIT_NO IS NULL then 'Tidak'&#xd;				else 'Ya'&#xd;			end flagBerhasilTarik,&#xd;			A.CHRONOLOGICAL chronological&#xd;	FROM TRX_STTU_COST_HDR A (NOLOCK)&#xd;	LEFT JOIN TRX_STTU B (NOLOCK)&#xd;	ON A.STTU_NO = B.STTU_NO&#xd;	--LEFT JOIN MST_GLOBAL_PARAM C (NOLOCK)&#xd;	--ON A.TYPE_COST = C.PARAM_CODE AND C.CONDITION = 'TYPE_COST' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE D (NOLOCK)&#xd;	ON A.PIC_CODE = D.NIK&#xd;	LEFT JOIN MST_POSITION E (NOLOCK)&#xd;	ON A.PIC_POSITION = E.POSITION_CODE&#xd;	LEFT JOIN TRX_AGGR F (NOLOCK)&#xd;	ON A.AGGR_NO = F.AGGR_NO&#xd;	--LEFT JOIN MST_GLOBAL_PARAM G (NOLOCK)&#xd;	--ON A.REQ_COST_STS = G.PARAM_CODE AND G.CONDITION = 'REQ_COST_STS' AND G.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRANCH H (NOLOCK)&#xd;	ON A.COMPANY_CODE = H.COMPANY_CODE AND A.BRANCH_CODE = H.BRANCH_CODE&#xd;	LEFT JOIN MST_EMPLOYEE I (NOLOCK)&#xd;	ON A.CREATED_BY = I.NIK&#xd;	LEFT JOIN TRX_TU_DEPOSIT DEP (NOLOCK)&#xd;	ON A.STTU_NO = DEP.STTU_NO AND B.AGGR_NO = DEP.AGGR_NO&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="reqCostNo" name="reqCostNo" xsdType="string"/>
         <element column="reqCostDate" name="reqCostDate" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="typeCost" name="typeCost" xsdType="string"/>
         <element column="typeCostName" name="typeCostName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="totReqValue" name="totReqValue" xsdType="string"/>
         <element column="totRealValue" name="totRealValue" xsdType="string"/>
         <element column="picCode" name="picCode" xsdType="string"/>
         <element column="picFullname" name="picFullname" xsdType="string"/>
         <element column="picPosition" name="picPosition" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="successFlag" name="successFlag" xsdType="string"/>
         <element column="reqCostSts" name="reqCostSts" xsdType="string"/>
         <element column="reqCostStsName" name="reqCostStsName" xsdType="string"/>
         <element column="reqCostStsDate" name="reqCostStsDate" xsdType="string"/>
         <element column="appvDate" name="appvDate" xsdType="string"/>
         <element column="disbDate" name="disbDate" xsdType="string"/>
         <element column="realDate" name="realDate" xsdType="string"/>
         <element column="closeDate" name="closeDate" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="sttuSts" name="sttuSts" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="requestNik" name="requestNik" xsdType="string"/>
         <element column="requestName" name="requestName" xsdType="string"/>
         <element column="requestPosition" name="requestPosition" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="flagBerhasilTarik" name="flagBerhasilTarik" xsdType="string"/>
         <element column="chronological" name="chronological" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnDetailTrxSttuCost" useConfig="collectiondso1">
      <sql>SELECT TOP 1 costNote, reqValue, realValue FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.REQ_COST_NO reqCostNo,&#xd;		A.SEQ_NO seqNo,&#xd;		A.COST_NOTE costNote,&#xd;		A.REQ_VALUE reqValue,&#xd;		A.REAL_VALUE realValue&#xd;	FROM TRX_STTU_COST_DTL A&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="costNote" name="costNote" xsdType="string"/>
         <element column="reqValue" name="reqValue" xsdType="string"/>
         <element column="realValue" name="realValue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountDetailTrxSttuCost" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.REQ_COST_NO reqCostNo,&#xd;		A.SEQ_NO seqNo,&#xd;		A.COST_NOTE costNote,&#xd;		A.REQ_VALUE reqValue,&#xd;		A.REAL_VALUE realValue&#xd;	FROM TRX_STTU_COST_DTL A&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataDetailTrxSttuCost" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, reqCostNo, seqNo, costNote, reqValue, realValue FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.REQ_COST_NO reqCostNo,&#xd;		A.SEQ_NO seqNo,&#xd;		A.COST_NOTE costNote,&#xd;		A.REQ_VALUE reqValue,&#xd;		A.REAL_VALUE realValue&#xd;	FROM TRX_STTU_COST_DTL A&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="reqCostNo" name="reqCostNo" xsdType="string"/>
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="costNote" name="costNote" xsdType="string"/>
         <element column="reqValue" name="reqValue" xsdType="string"/>
         <element column="realValue" name="realValue" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxSttuCostHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_STTU_COST_HDR&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        REQ_COST_NO,&#xd;        REQ_COST_DATE,&#xd;        STTU_NO,&#xd;        TYPE_COST,&#xd;        AGGR_NO,&#xd;        TOT_REQ_VALUE,&#xd;        TOT_REAL_VALUE,&#xd;        PIC_CODE,&#xd;        PIC_POSITION,&#xd;        SUCCESS_FLAG,&#xd;        REQ_COST_STS,&#xd;        REQ_COST_STS_DATE,&#xd;        DISB_DATE,&#xd;        REAL_DATE,&#xd;        CLOSE_DATE,&#xd;CHRONOLOGICAL,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :reqCostNo,&#xd;        GETDATE(),&#xd;        :sttuNo,&#xd;        :typeCost,&#xd;        :aggrNo,&#xd;        :totReqValue,&#xd;        :totRealValue,&#xd;        :picCode,&#xd;        :picPosition,&#xd;        :successFlag,&#xd;        'OPEN',&#xd;        GETDATE(),&#xd;        :disbDate,&#xd;        :realDate,&#xd;        :closeDate,&#xd;:chronological,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="typeCost" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="totReqValue" sqlType="STRING"/>
      <param name="totRealValue" sqlType="STRING"/>
      <param name="picCode" sqlType="STRING"/>
      <param name="picPosition" sqlType="STRING"/>
      <param name="successFlag" sqlType="STRING"/>
      <param name="disbDate" sqlType="STRING"/>
      <param name="realDate" sqlType="STRING"/>
      <param name="closeDate" optional="false" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="chronological" sqlType="STRING"/>
   </query>
   <query id="insertTrxSttuCostDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_STTU_COST_DTL&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        REQ_COST_NO,&#xd;        SEQ_NO,&#xd;        COST_NOTE,&#xd;        REQ_VALUE,&#xd;        REAL_VALUE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :reqCostNo,&#xd;        :seqNo,&#xd;        :costNote,&#xd;        :reqValue,&#xd;        :realValue,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
      <param name="seqNo" sqlType="STRING"/>
      <param name="costNote" sqlType="STRING"/>
      <param name="reqValue" sqlType="STRING"/>
      <param name="realValue" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="updateTrxSttuCostHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @branch_code VARCHAR(10) = :branchCode&#xd;DECLARE @REQ_COST_NO Varchar(50) = :reqCostNo&#xd;&#xd;UPDATE TRX_STTU_COST_HDR SET&#xd;        STTU_NO = :sttuNo,&#xd;        TYPE_COST = :typeCost,&#xd;        AGGR_NO = :aggrNo,&#xd;        TOT_REQ_VALUE = :totReqValue,&#xd;        TOT_REAL_VALUE = :totRealValue,&#xd;        PIC_CODE = :picCode,&#xd;        PIC_POSITION = :picPosition,&#xd;        SUCCESS_FLAG = :successFlag,&#xd;        REQ_COST_STS = :reqCostSts,&#xd;        REQ_COST_STS_DATE = :reqCostStsDate,&#xd;        DISB_DATE = :disbDate,&#xd;        REAL_DATE = :realDate,&#xd;        CLOSE_DATE = :closeDate,&#xd;		CHRONOLOGICAL = :chronological,&#xd;        UPDATED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        REQ_COST_NO = @REQ_COST_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="typeCost" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="totReqValue" sqlType="STRING"/>
      <param name="totRealValue" sqlType="STRING"/>
      <param name="picCode" sqlType="STRING"/>
      <param name="picPosition" sqlType="STRING"/>
      <param name="successFlag" sqlType="STRING"/>
      <param name="reqCostSts" sqlType="STRING"/>
      <param name="reqCostStsDate" sqlType="STRING"/>
      <param name="disbDate" sqlType="STRING"/>
      <param name="realDate" sqlType="STRING"/>
      <param name="closeDate" optional="false" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
      <param name="chronological" sqlType="STRING"/>
   </query>
   <query id="updateTrxSttuCostDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(10) = :branchCode&#xd;DECLARE @REQ_COST_NO Varchar(50) = :reqCostNo&#xd;DECLARE @SEQ_NO numeric(3,0) = :seqNo&#xd;&#xd;UPDATE TRX_STTU_COST_DTL SET&#xd;        COST_NOTE = :costNote,&#xd;        REQ_VALUE = :reqValue,&#xd;        REAL_VALUE = :realValue,&#xd;        UPDATED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        REQ_COST_NO = @REQ_COST_NO AND&#xd;        SEQ_NO = @SEQ_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="costNote" sqlType="STRING"/>
      <param name="reqValue" sqlType="STRING"/>
      <param name="realValue" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
      <param name="seqNo" sqlType="STRING"/>
   </query>
   <query id="deleteTrxSttuCostDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(10) = :branchCode&#xd;DECLARE @REQ_COST_NO varchar(50) = :reqCostNo&#xd;DECLARE @SEQ_NO numeric(3,0) = :seqNo&#xd;&#xd;DELETE FROM TRX_STTU_COST_DTL&#xd;WHERE &#xd;COMPANY_CODE = @COMPANY_CODE AND&#xd;BRANCH_CODE = @BRANCH_CODE AND&#xd;REQ_COST_NO = @REQ_COST_NO AND&#xd;SEQ_NO = @SEQ_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
      <param name="seqNo" sqlType="STRING"/>
   </query>
   <query id="getColumnPaymentSequence" useConfig="collectiondso1">
      <sql>SELECT TOP 1 companyCode, product, paymentHierarchyCode, paymentHierarchyType, flagActive, paymentSequence, trxCode FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.PRODUCT product,&#xd;		A.PAYMENT_HIERARCHY_CODE paymentHierarchyCode,&#xd;		A.PAYMENT_HIERARCHY_TYPE paymentHierarchyType,&#xd;		A.FLAG_ACTIVE flagActive,&#xd;		B.PAYMENT_SEQUENCE paymentSequence,&#xd;		B.TRX_CODE trxCode&#xd;	FROM MST_PAYMENT_HIERARCHY_HDR A&#xd;	LEFT JOIN MST_PAYMENT_HIERARCHY_DTL B&#xd;	ON A.PAYMENT_HIERARCHY_CODE = B.PAYMENT_HIERARCHY_CODE&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="product" name="product" xsdType="string"/>
         <element column="paymentHierarchyCode" name="paymentHierarchyCode" xsdType="string"/>
         <element column="paymentHierarchyType" name="paymentHierarchyType" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="paymentSequence" name="paymentSequence" xsdType="string"/>
         <element column="trxCode" name="trxCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountPaymentSequence" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.PRODUCT product,&#xd;		A.PAYMENT_HIERARCHY_CODE paymentHierarchyCode,&#xd;		A.PAYMENT_HIERARCHY_TYPE paymentHierarchyType,&#xd;		A.FLAG_ACTIVE flagActive,&#xd;		B.PAYMENT_SEQUENCE paymentSequence,&#xd;		B.TRX_CODE trxCode&#xd;	FROM MST_PAYMENT_HIERARCHY_HDR A&#xd;	LEFT JOIN MST_PAYMENT_HIERARCHY_DTL B&#xd;	ON A.PAYMENT_HIERARCHY_CODE = B.PAYMENT_HIERARCHY_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataPaymentSequence" useConfig="collectiondso1">
      <sql>SELECT companyCode, product, paymentHierarchyCode, paymentHierarchyType, flagActive, paymentSequence, trxCode FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.PRODUCT product,&#xd;		A.PAYMENT_HIERARCHY_CODE paymentHierarchyCode,&#xd;		A.PAYMENT_HIERARCHY_TYPE paymentHierarchyType,&#xd;		A.FLAG_ACTIVE flagActive,&#xd;		B.PAYMENT_SEQUENCE paymentSequence,&#xd;		B.TRX_CODE trxCode&#xd;	FROM MST_PAYMENT_HIERARCHY_HDR A&#xd;	LEFT JOIN MST_PAYMENT_HIERARCHY_DTL B&#xd;	ON A.PAYMENT_HIERARCHY_CODE = B.PAYMENT_HIERARCHY_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="product" name="product" xsdType="string"/>
         <element column="paymentHierarchyCode" name="paymentHierarchyCode" xsdType="string"/>
         <element column="paymentHierarchyType" name="paymentHierarchyType" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="paymentSequence" name="paymentSequence" xsdType="string"/>
         <element column="trxCode" name="trxCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovBayarUtj" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovBayarUtj" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		B.GROUP_CODE groupCode,&#xd;		(A.BEGIN_BAL - A.USAGE_VALUE - A.BOOK_VALUE + A.PLUS_VALUE) sisaUtj,&#xd;		B.DKH_NO dkhNo,&#xd;		A.BOOK_VALUE bookValue&#xd;	FROM MST_UTJ(nolock) A&#xd;	LEFT JOIN TRX_DKH_DTL(nolock) B&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR(nolock) C&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovBayarUtj" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, aggrNo, customerFullname, groupCode, sisaUtj, dkhNo, bookValue FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		B.GROUP_CODE groupCode,&#xd;		(A.BEGIN_BAL - A.USAGE_VALUE - A.BOOK_VALUE + A.PLUS_VALUE) sisaUtj,&#xd;		B.DKH_NO dkhNo,&#xd;		A.BOOK_VALUE bookValue&#xd;	FROM MST_UTJ(nolock) A&#xd;	LEFT JOIN TRX_DKH_DTL(nolock) B&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR(nolock) C&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="sisaUtj" name="sisaUtj" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="bookValue" name="bookValue" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateMstUtj" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;UPDATE MST_UTJ SET&#xd;        PLUS_VALUE = :plusValue,&#xd;	BOOK_VALUE = :bookValue,&#xd;	UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = :updateBy&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	AGGR_NO = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="bookValue" sqlType="STRING"/>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="plusValue" sqlType="STRING"/>
   </query>
   <query id="insertTrxUtj" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE  VARCHAR(50) = :companyCode&#xd;DECLARE @BRANCH_CODE  VARCHAR(50) = :branchCode&#xd;DECLARE @AGGR_NO  VARCHAR(50) = :aggrNo&#xd;DECLARE @PLUS_VALUE VARCHAR(50) = :plusValue&#xd;DECLARE @BOOK_VALUE VARCHAR(50) = :bookValue&#xd;&#xd;INSERT INTO TRX_UTJ&#xd;(&#xd;	COMPANY_CODE,&#xd;	BRANCH_CODE,&#xd;	AGGR_NO,&#xd;	SEQ_NO,&#xd;	REFF_DATE,&#xd;	REFF_NO,&#xd;	UTJ_TRANS_CODE,&#xd;	BEGINNING_VALUE,&#xd;	PLUS_VALUE,&#xd;	BOOK_VALUE,&#xd;	USAGE_VALUE,&#xd;	BALANCE_VALUE,&#xd;	AGGR_NO_RECIPIENT,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	@COMPANY_CODE,&#xd;	@BRANCH_CODE,&#xd;	@AGGR_NO,&#xd;	(SELECT ISNULL(MAX(SEQ_NO), 0) + 1 FROM TRX_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO = @AGGR_NO),&#xd;	GETDATE(),&#xd;	:reffNo,&#xd;	:utjTransCode,&#xd;	'0',&#xd;	@PLUS_VALUE,&#xd;	@BOOK_VALUE,&#xd;	'0',&#xd;	(&#xd;		SELECT ISNULL(MAX(balanceValue), 0) + @PLUS_VALUE - @BOOK_VALUE  FROM (&#xd;			SELECT TOP 1&#xd;			BALANCE_VALUE balanceValue &#xd;			FROM TRX_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO = @AGGR_NO  ORDER BY SEQ_NO DESC&#xd;		) a&#xd;	),&#xd;	:aggrNoRecipient,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="reffNo" sqlType="STRING"/>
      <param name="utjTransCode" sqlType="STRING"/>
      <param name="plusValue" sqlType="STRING"/>
      <param name="bookValue" sqlType="STRING"/>
      <param name="aggrNoRecipient" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="insertTrxDkhDtlFile" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @DKH_NO  VARCHAR(50) = :dkhNo&#xd;DECLARE @AGGR_NO  VARCHAR(50) = :aggrNo&#xd;DECLARE @BRANCHCODE VARCHAR(50) =:branchCode&#xd;&#xd;INSERT INTO TRX_DKH_DTL_FILE&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        DKH_NO,&#xd;        AGGR_NO,&#xd;        SEQ_NO,&#xd;        FILE_LOCATION,&#xd;        FILE_NAME,&#xd;        DELETED_STS,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        @COMPANY_CODE,&#xd;        @BRANCHCODE,&#xd;        @DKH_NO,&#xd;        @AGGR_NO,&#xd;        (SELECT ISNULL(MAX(SEQ_NO), 0) + 1 FROM TRX_DKH_DTL_FILE(nolock) WHERE DKH_NO = @DKH_NO AND AGGR_NO = @AGGR_NO AND COMPANY_CODE=@COMPANY_CODE AND BRANCH_CODE=@BRANCHCODE),&#xd;        :fileLocation,&#xd;        :fileName,&#xd;        0,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="fileLocation" sqlType="STRING"/>
      <param name="fileName" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="deleteTrxDkhDtlFile" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;DELETE FROM TRX_DKH_DTL_FILE&#xd;WHERE &#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	AGGR_NO = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="getListUploadFile" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;SELECT seqNo, fileLocation, fileName, flagFile FROM (&#xd;	SELECT &#xd;			SEQ_NO seqNo,&#xd;			FILE_LOCATION fileLocation,&#xd;			FILE_NAME fileName,&#xd;			'0' as flagFile&#xd;	FROM TRX_DKH_DTL_FILE(nolock)&#xd;	WHERE &#xd;			COMPANY_CODE = @COMPANY_CODE AND&#xd;			BRANCH_CODE = @BRANCH_CODE AND&#xd;			DKH_NO = @DKH_NO AND&#xd;			AGGR_NO = @AGGR_NO&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="fileLocation" name="fileLocation" xsdType="string"/>
         <element column="fileName" name="fileName" xsdType="string"/>
         <element column="flagFile" name="flagFile" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxTuDeposit" useConfig="collectiondso1">
      <sql>SELECT 1 as sttuNo, 1 sttuDate, 1 createdDate, 1 tuDepositNo, 1 tuDepositDate, 1 aggrNo, 1 customerFullname, 1 categoryName, 1 brandName, 1 typeName, 1 colorName,1  nopol, 1 pic1Name, 1 pic2Name, 1 solvingTypeName, 1 appvStsNameSolving</sql>
      <result element="Entries" rowName="">
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="tuDepositDate" name="tuDepositDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="pic1Name" name="pic1Name" xsdType="string"/>
         <element column="pic2Name" name="pic2Name" xsdType="string"/>
         <element column="solvingTypeName" name="solvingTypeName" xsdType="string"/>
         <element column="appvStsNameSolving" name="appvStsNameSolving" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxTuDeposit" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			BR.BRANCH_NAME branchName,&#xd;			A.TU_DEPOSIT_NO tuDepositNo,&#xd;			A.TU_DEPOSIT_DATE tuDepositDate,&#xd;			A.EXECUTION_DATE executionDate,&#xd;			A.STTU_NO sttuNo,&#xd;			B.STTU_DATE sttuDate,&#xd;			B.STTU_STS sttuSts,&#xd;			D.PARAM_DESCRIP sttuStsName,&#xd;			B.PIC1_CODE pic1Code,&#xd;			B.PIC2_CODE pic2Code,&#xd;			B.AGENT_TYPE agentType,&#xd;			F.PARAM_DESCRIP agentTypeName,&#xd;			PIC1.FULLNAME pic1Name,&#xd;			PIC2.FULLNAME pic2Name,&#xd;			A.RECEIPT_FROM receiptFrom,&#xd;			A.AGGR_NO aggrNo,&#xd;			C.CUSTOMER_FULLNAME customerFullname,&#xd;			C.AR_STS arSts,&#xd;			E.TRX_NAME arStsName,&#xd;			I.CATEGORY_CODE categoryCode,&#xd;			M.PARAM_DESCRIP categoryName,&#xd;			H.BRAND_CODE brandCode,&#xd;			I.BRAND_NAME brandName,&#xd;			H.TYPE_CODE typeCode,&#xd;			J.TYPE_NAME typeName,&#xd;			H.MODEL_CODE modelCode,&#xd;			K.MODEL_NAME modelName,&#xd;			J.KIND_CODE kindCode,&#xd;			L.KIND_NAME kindName,&#xd;			H.COLOR_CODE colorCode,&#xd;			N.COLOR_NAME colorName,&#xd;			H.NOPOL nopol,&#xd;			H.CHASSIS_NO chassisNo,&#xd;			H.MACHINE_NO machineNo,&#xd;			H.BPKB_NAME stnkName,&#xd;			A.BAL_PRINCIPAL_VALUE balPrincipalValue,&#xd;			A.BAL_INT_VALUE balIntValue,&#xd;			A.INST_NO instNo,&#xd;			A.BAL_TENOR balTenor,&#xd;			A.EXPIRED_DATE expiredDate,&#xd;			A.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;			A.KM km,&#xd;			A.REQ_COST_NO reqCostNo,&#xd;			A.TU_COST tuCost,&#xd;			(&#xd;				select collFee from (&#xd;					select top 1&#xd;						coll_fee collFee, &#xd;						EFFECTIVE_DATE effectiveDate&#xd;					from mst_coll_fee (NOLOCK)&#xd;					where company_code = A.COMPANY_CODE AND product_code = C.PRODUCT_CODE AND CATEGORY_CODE = C.CATEGORY_CODE AND coll_kind_fee = 'ADMREP' AND EFFECTIVE_DATE &lt;= GETDATE()&#xd;					ORDER BY EFFECTIVE_DATE DESC&#xd;				) a&#xd;			) as dendaTarikUnit,&#xd;			A.PENALTY_TU_VALUE penaltyTuValue,&#xd;			A.NOTES_PIC_RECEIVE1 notesPicReceive1,&#xd;			A.NOTES_PIC_RECEIVE2 notesPicReceive2,&#xd;			A.LOC_CODE locCode,&#xd;			A.LOC_RECEIPT_CODE locReceiptCode,&#xd;			A.PRINTED_BY printedBy,&#xd;			A.PRINTED_DATE printedDate,&#xd;			A.APPV_STS appvSts,&#xd;			A.APPV_DATE appvDate,&#xd;			A.SOLVING_TYPE solvingType,&#xd;			G.PARAM_DESCRIP solvingTypeName,&#xd;			A.SOLVING_DATE solvingDate,&#xd;			A.SOLVING_NOTES solvingNotes,&#xd;			A.EXT_COUNT extCount,&#xd;			A.VEHC_OUT_DATE vehcOutDate,&#xd;			A.VEHC_OUT_BY vehcOutBy,&#xd;			A.OTR_VALUE otrValue,&#xd;			A.TAKSASI_VALUE taksasiValue,&#xd;			A.TOT_MINUS_VALUE totMinusValue,&#xd;			A.TOT_ADD_VALUE totAddValue,&#xd;			A.DEPOSIT_STS depositSts,&#xd;			A.VOUCHER_NO voucherNo,&#xd;			A.VOUCHER_DATE voucherDate,&#xd;			A.UNIT_CONDITION unitCondition,&#xd;			A.CREATED_DATE createdDate,&#xd;			O.APPV_STS appvStsSolving,&#xd;			P.PARAM_DESCRIP appvStsNameSolving,&#xd;			H.YEAR_MFG yearMfg,&#xd;			C.CUSTOMER_CODE customerCode,&#xd;			C.COLL_ADDRESS_TYPE collAddressType,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.PHONE_AREA1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'P' THEN CEO.PHONE_AREA1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN CEB.PHONE_AREA1&#xd;				END AS RESULT&#xd;			) as phoneArea1,&#xd;&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.PHONE_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'P' THEN CEO.PHONE_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN CEB.PHONE_NO1&#xd;				END AS RESULT&#xd;			) as phoneNo1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.PHONE_AREA2&#xd;				END AS RESULT&#xd;			) as phoneArea2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.PHONE_NO2&#xd;				END AS RESULT&#xd;			) as phoneNo2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.HP_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'P' THEN CEO.HP_NO&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN CEB.HP_NO&#xd;				END AS RESULT&#xd;			) as hpNo1,&#xd;			A.COLL_FEE collFee,&#xd;			A.PENALTY_VALUE penaltyValue,&#xd;			R.BRANCH_NAME locCodeName,&#xd;			S.BRANCH_NAME locReceiptCodeName,&#xd;			(&#xd;				SELECT&#xd;					isnull(sum(coll_fee-coll_fee_paid), 0) getCollfee&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) where company_code = A.COMPANY_CODE and aggr_no = C.AGGR_NO&#xd;			) as getCollfee,&#xd;			(&#xd;				SELECT&#xd;					isnull(sum(pinalty_value-pinalty_paid), 0) penalty&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) where company_code = A.COMPANY_CODE and aggr_no = C.AGGR_NO&#xd;			) as penalty,&#xd;			(&#xd;				SELECT&#xd;					VALUES_PARAM&#xd;				FROM MST_GLOBAL_PARAM (NOLOCK) WHERE CONDITION = 'TU_CONFIRM_DATE' AND CHAR_VALUES = C.PRODUCT_CODE AND FLAG_ACTIVE = '1'&#xd;			) as confirmDay,&#xd;			(&#xd;				SELECT&#xd;					VALUES_PARAM&#xd;				FROM MST_GLOBAL_PARAM (NOLOCK) WHERE CONDITION = 'TU_INVENTORY' AND CHAR_VALUES = C.PRODUCT_CODE AND FLAG_ACTIVE = '1'&#xd;			) as titipanDay,&#xd;			PT.VALUES_PARAM simulasiPrice,&#xd;			B.EXPIRED_DATE expiredDateSttu,&#xd;			(&#xd;				SELECT &#xd;					SUM(PRINCIPAL_VALUE-PRINCIPAL_PAID) balPrincipalValue&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;			) as getBalPrincipalValue,&#xd;			(&#xd;				SELECT &#xd;					SUM(INT_VALUE-INT_PAID) balIntValue&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE &#xd;			) as getBalIntValue,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;						) IS NULL THEN (&#xd;										SELECT &#xd;											MIN(INST_NO) instTo&#xd;										FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE &#xd;									)&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;				END RESULT&#xd;			) as instTo,&#xd;			ISNULL(ST.instNo, 0) sisaTenor,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.BUCKET_TYPE bucketType,&#xd;			A.BUCKET_CODE bucketCode,&#xd;			A.EXT_COLL_CODE extCollCode,&#xd;			T.EXT_COLL_NAME extCollName,&#xd;            A.DAYS_OVERDUE daysOverdue,&#xd;			A.LOC_NOTES locNotes,&#xd;			C.BRANCH_CODE branchAggr,&#xd;			BA.BRANCH_NAME branchNameAggr,&#xd;			A.KM_DEPOSIT kmDeposit,&#xd;			GP.PARAM_DESCRIP depositStsName,&#xd;			INV.TU_DEPOSIT_NO tuDepositInventory,&#xd;			INV.INVENTORY_STS inventorySts,&#xd;			C.WO_DATE woDate&#xd;	FROM TRX_TU_DEPOSIT A (NOLOCK)&#xd;	LEFT JOIN TRX_STTU B (NOLOCK)&#xd;	ON A.STTU_NO = B.STTU_NO&#xd;	LEFT JOIN TRX_AGGR C (NOLOCK)&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM D (NOLOCK)&#xd;	ON B.STTU_STS = D.PARAM_CODE AND D.CONDITION = 'STTU_STS' AND D.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_AR_STS E (NOLOCK)&#xd;	ON C.AR_STS = E.AR_STS  AND ISNULL(E.SUB_STS, '') = ISNULL (C.SUB_STS, '')&#xd;	LEFT JOIN MST_GLOBAL_PARAM F (NOLOCK)&#xd;	ON B.AGENT_TYPE = F.PARAM_CODE AND F.CONDITION = 'AGENT_TYPE' AND F.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM G (NOLOCK)&#xd;	ON A.SOLVING_TYPE = G.PARAM_CODE AND G.CONDITION = 'SOLVING_TYPE' AND G.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_AGGR_ASSET H (NOLOCK)&#xd;	ON A.AGGR_NO = H.AGGR_NO&#xd;	LEFT JOIN MST_BRAND I (NOLOCK)&#xd;	ON H.BRAND_CODE = I.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE J (NOLOCK)&#xd;	ON H.TYPE_CODE = J.TYPE_CODE&#xd;	LEFT JOIN MST_MODEL K (NOLOCK)&#xd;	ON H.MODEL_CODE = K.MODEL_CODE&#xd;	LEFT JOIN MST_KIND L (NOLOCK)&#xd;	ON J.KIND_CODE = L.KIND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM M (NOLOCK)&#xd;	ON I.CATEGORY_CODE = M.PARAM_CODE AND M.CONDITION = 'CATEGORY_CODE' AND M.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_COLOR N (NOLOCK)&#xd;	ON H.COLOR_CODE = N.COLOR_CODE&#xd;	LEFT JOIN TRX_TU_SOLVING O (NOLOCK)&#xd;	ON A.TU_DEPOSIT_NO = O.TU_DEPOSIT_NO AND A.SOLVING_TYPE = O.TU_SOLVING_TYPE AND A.SOLVING_DATE = O.TU_SOLVING_DATE&#xd;	LEFT JOIN MST_GLOBAL_PARAM P (NOLOCK)&#xd;	ON O.APPV_STS = P.PARAM_CODE AND P.CONDITION = 'STATUS_APPROVAL' AND P.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_APPL Q (NOLOCK)&#xd;	ON C.APPL_NO = Q.APPL_NO&#xd;	LEFT JOIN MST_BRANCH R (NOLOCK)&#xd;	ON A.LOC_CODE = R.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH S (NOLOCK)&#xd;	ON A.LOC_RECEIPT_CODE = S.BRANCH_CODE&#xd;	LEFT JOIN MST_EXT_COLL T (NOLOCK)&#xd;	ON B.EXT_COLL_CODE = T.EXT_COLL_CODE&#xd;	LEFT JOIN MST_EMPLOYEE PIC1 (NOLOCK)&#xd;	ON B.PIC1_CODE = PIC1.NIK&#xd;	LEFT JOIN MST_EMPLOYEE PIC2 (NOLOCK)&#xd;	ON B.PIC2_CODE = PIC2.NIK&#xd;	LEFT JOIN MST_GLOBAL_PARAM GP (NOLOCK)&#xd;	ON A.COMPANY_CODE = GP.COMPANY_CODE AND A.DEPOSIT_STS = GP.PARAM_CODE AND GP.CONDITION = 'DEPOSIT_STS' AND GP.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_CUSTOMER CUS (NOLOCK)&#xd;	ON C.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE CEO (NOLOCK)&#xd;	ON C.CUSTOMER_CODE = CEO.CUSTOMER_CODE AND CEO.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB (NOLOCK)&#xd;	ON C.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (NOLOCK)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND C.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM PT (NOLOCK)&#xd;	ON PT.CONDITION = 'PENALTY_TYPE' AND PT.CHAR_VALUES = C.PRODUCT_CODE AND PT.PARAM_CODE = 'FLAT02' AND PT.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN&#xd;	(&#xd;		SELECT&#xd;			COMPANY_CODE companyCode,&#xd;			COUNT(INST_NO) as instNo,&#xd;			AGGR_NO aggrNo&#xd;		FROM TRX_AGGR_SCHEDULE (NOLOCK)&#xd;		WHERE PAYMENT_STS = 'UNPAID'&#xd;		GROUP BY COMPANY_CODE, AGGR_NO&#xd;	) ST ON A.COMPANY_CODE = ST.companyCode AND C.AGGR_NO = ST.aggrNo&#xd;	LEFT JOIN TRX_INVENTORY_TU INV (NOLOCK)&#xd;	ON A.COMPANY_CODE = INV.COMPANY_CODE AND A.TU_DEPOSIT_NO = INV.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH BR (NOLOCK)&#xd;	ON A.COMPANY_CODE = BR.COMPANY_CODE AND A.BRANCH_CODE = BR.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BA (NOLOCK)&#xd;	ON A.COMPANY_CODE = BA.COMPANY_CODE AND C.BRANCH_CODE = BA.BRANCH_CODE&#xd;	WHERE C.AR_STS != 'LN'&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxTuDeposit" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName, tuDepositNo, tuDepositDate, executionDate, sttuNo, sttuDate, sttuSts, sttuStsName, pic1Code, pic2Code, agentType, agentTypeName, pic1Name, pic2Name, receiptFrom, &#xd;aggrNo, customerFullname, arSts, arStsName, categoryCode, categoryName, brandCode, brandName, typeCode, typeName, modelCode, modelName, kindCode, kindName, colorCode, colorName, nopol, chassisNo, machineNo, stnkName, balPrincipalValue, balIntValue,&#xd;instNo, balTenor, expiredDate, stnkExpiredDate, km, reqCostNo, tuCost, penaltyTuValue, notesPicReceive1, notesPicReceive2, locCode, locReceiptCode, printedBy, printedDate, appvSts, appvDate, solvingType,&#xd;solvingTypeName, solvingDate, solvingNotes, extCount, vehcOutDate, vehcOutBy, otrValue, taksasiValue, totMinusValue, totAddValue, depositSts, voucherNo, voucherDate, unitCondition, createdDate, appvStsSolving, appvStsNameSolving, yearMfg,&#xd;phoneArea1, phoneNo1, phoneArea2, phoneNo2, hpNo1, collFee, penaltyValue, dendaTarikUnit, locCodeName, locReceiptCodeName, getCollfee, (penalty + ((confirmDay + titipanDay) * simulasiPrice)) as getPenaltyValue, expiredDateSttu, getBalPrincipalValue, getBalIntValue, instTo, sisaTenor, productCode, bucketType, bucketCode, extCollCode, daysOverdue, locNotes, branchAggr, extCollName, kmDeposit, depositStsName, tuDepositInventory, inventorySts, woDate, branchNameAggr FROM (&#xd;	SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			BR.BRANCH_NAME branchName,&#xd;			A.TU_DEPOSIT_NO tuDepositNo,&#xd;			A.TU_DEPOSIT_DATE tuDepositDate,&#xd;			A.EXECUTION_DATE executionDate,&#xd;			A.STTU_NO sttuNo,&#xd;			B.STTU_DATE sttuDate,&#xd;			B.STTU_STS sttuSts,&#xd;			D.PARAM_DESCRIP sttuStsName,&#xd;			B.PIC1_CODE pic1Code,&#xd;			B.PIC2_CODE pic2Code,&#xd;			B.AGENT_TYPE agentType,&#xd;			F.PARAM_DESCRIP agentTypeName,&#xd;			PIC1.FULLNAME pic1Name,&#xd;			PIC2.FULLNAME pic2Name,&#xd;			A.RECEIPT_FROM receiptFrom,&#xd;			A.AGGR_NO aggrNo,&#xd;			C.CUSTOMER_FULLNAME customerFullname,&#xd;			C.AR_STS arSts,&#xd;			E.TRX_NAME arStsName,&#xd;			I.CATEGORY_CODE categoryCode,&#xd;			M.PARAM_DESCRIP categoryName,&#xd;			H.BRAND_CODE brandCode,&#xd;			I.BRAND_NAME brandName,&#xd;			H.TYPE_CODE typeCode,&#xd;			J.TYPE_NAME typeName,&#xd;			H.MODEL_CODE modelCode,&#xd;			K.MODEL_NAME modelName,&#xd;			J.KIND_CODE kindCode,&#xd;			L.KIND_NAME kindName,&#xd;			H.COLOR_CODE colorCode,&#xd;			N.COLOR_NAME colorName,&#xd;			H.NOPOL nopol,&#xd;			H.CHASSIS_NO chassisNo,&#xd;			H.MACHINE_NO machineNo,&#xd;			H.BPKB_NAME stnkName,&#xd;			A.BAL_PRINCIPAL_VALUE balPrincipalValue,&#xd;			A.BAL_INT_VALUE balIntValue,&#xd;			A.INST_NO instNo,&#xd;			A.BAL_TENOR balTenor,&#xd;			A.EXPIRED_DATE expiredDate,&#xd;			A.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;			A.KM km,&#xd;			A.REQ_COST_NO reqCostNo,&#xd;			A.TU_COST tuCost,&#xd;			(&#xd;				select collFee from (&#xd;					select top 1&#xd;						coll_fee collFee, &#xd;						EFFECTIVE_DATE effectiveDate&#xd;					from mst_coll_fee (NOLOCK)&#xd;					where company_code = A.COMPANY_CODE AND product_code = C.PRODUCT_CODE AND CATEGORY_CODE = C.CATEGORY_CODE AND coll_kind_fee = 'ADMREP' AND EFFECTIVE_DATE &lt;= GETDATE()&#xd;					ORDER BY EFFECTIVE_DATE DESC&#xd;				) a&#xd;			) as dendaTarikUnit,&#xd;			A.PENALTY_TU_VALUE penaltyTuValue,&#xd;			A.NOTES_PIC_RECEIVE1 notesPicReceive1,&#xd;			A.NOTES_PIC_RECEIVE2 notesPicReceive2,&#xd;			A.LOC_CODE locCode,&#xd;			A.LOC_RECEIPT_CODE locReceiptCode,&#xd;			A.PRINTED_BY printedBy,&#xd;			A.PRINTED_DATE printedDate,&#xd;			A.APPV_STS appvSts,&#xd;			A.APPV_DATE appvDate,&#xd;			A.SOLVING_TYPE solvingType,&#xd;			G.PARAM_DESCRIP solvingTypeName,&#xd;			A.SOLVING_DATE solvingDate,&#xd;			A.SOLVING_NOTES solvingNotes,&#xd;			A.EXT_COUNT extCount,&#xd;			A.VEHC_OUT_DATE vehcOutDate,&#xd;			A.VEHC_OUT_BY vehcOutBy,&#xd;			A.OTR_VALUE otrValue,&#xd;			A.TAKSASI_VALUE taksasiValue,&#xd;			A.TOT_MINUS_VALUE totMinusValue,&#xd;			A.TOT_ADD_VALUE totAddValue,&#xd;			A.DEPOSIT_STS depositSts,&#xd;			A.VOUCHER_NO voucherNo,&#xd;			A.VOUCHER_DATE voucherDate,&#xd;			A.UNIT_CONDITION unitCondition,&#xd;			A.CREATED_DATE createdDate,&#xd;			O.APPV_STS appvStsSolving,&#xd;			P.PARAM_DESCRIP appvStsNameSolving,&#xd;			H.YEAR_MFG yearMfg,&#xd;			C.CUSTOMER_CODE customerCode,&#xd;			C.COLL_ADDRESS_TYPE collAddressType,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.PHONE_AREA1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'P' THEN CEO.PHONE_AREA1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN CEB.PHONE_AREA1&#xd;				END AS RESULT&#xd;			) as phoneArea1,&#xd;&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.PHONE_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'P' THEN CEO.PHONE_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN CEB.PHONE_NO1&#xd;				END AS RESULT&#xd;			) as phoneNo1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.PHONE_AREA2&#xd;				END AS RESULT&#xd;			) as phoneArea2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.PHONE_NO2&#xd;				END AS RESULT&#xd;			) as phoneNo2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' OR C.COLL_ADDRESS_TYPE = 'D' THEN CUS.HP_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'P' THEN CEO.HP_NO&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' AND C.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN CEB.HP_NO&#xd;				END AS RESULT&#xd;			) as hpNo1,&#xd;			A.COLL_FEE collFee,&#xd;			A.PENALTY_VALUE penaltyValue,&#xd;			R.BRANCH_NAME locCodeName,&#xd;			S.BRANCH_NAME locReceiptCodeName,&#xd;			(&#xd;				SELECT&#xd;					isnull(sum(coll_fee-coll_fee_paid), 0) getCollfee&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) where company_code = A.COMPANY_CODE and aggr_no = C.AGGR_NO&#xd;			) as getCollfee,&#xd;			(&#xd;				SELECT&#xd;					isnull(sum(pinalty_value-pinalty_paid), 0) penalty&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) where company_code = A.COMPANY_CODE and aggr_no = C.AGGR_NO&#xd;			) as penalty,&#xd;			(&#xd;				SELECT&#xd;					VALUES_PARAM&#xd;				FROM MST_GLOBAL_PARAM (NOLOCK) WHERE CONDITION = 'TU_CONFIRM_DATE' AND CHAR_VALUES = C.PRODUCT_CODE AND FLAG_ACTIVE = '1'&#xd;			) as confirmDay,&#xd;			(&#xd;				SELECT&#xd;					VALUES_PARAM&#xd;				FROM MST_GLOBAL_PARAM (NOLOCK) WHERE CONDITION = 'TU_INVENTORY' AND CHAR_VALUES = C.PRODUCT_CODE AND FLAG_ACTIVE = '1'&#xd;			) as titipanDay,&#xd;			PT.VALUES_PARAM simulasiPrice,&#xd;			B.EXPIRED_DATE expiredDateSttu,&#xd;			(&#xd;				SELECT &#xd;					SUM(PRINCIPAL_VALUE-PRINCIPAL_PAID) balPrincipalValue&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE&#xd;			) as getBalPrincipalValue,&#xd;			(&#xd;				SELECT &#xd;					SUM(INT_VALUE-INT_PAID) balIntValue&#xd;				FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE &#xd;			) as getBalIntValue,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;						) IS NULL THEN (&#xd;										SELECT &#xd;											MIN(INST_NO) instTo&#xd;										FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE &#xd;									)&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;				END RESULT&#xd;			) as instTo,&#xd;			ISNULL(ST.instNo, 0) sisaTenor,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.BUCKET_TYPE bucketType,&#xd;			A.BUCKET_CODE bucketCode,&#xd;			A.EXT_COLL_CODE extCollCode,&#xd;			T.EXT_COLL_NAME extCollName,&#xd;            A.DAYS_OVERDUE daysOverdue,&#xd;			A.LOC_NOTES locNotes,&#xd;			C.BRANCH_CODE branchAggr,&#xd;			BA.BRANCH_NAME branchNameAggr,&#xd;			A.KM_DEPOSIT kmDeposit,&#xd;			GP.PARAM_DESCRIP depositStsName,&#xd;			INV.TU_DEPOSIT_NO tuDepositInventory,&#xd;			INV.INVENTORY_STS inventorySts,&#xd;			C.WO_DATE woDate&#xd;	FROM TRX_TU_DEPOSIT A (NOLOCK)&#xd;	LEFT JOIN TRX_STTU B (NOLOCK)&#xd;	ON A.STTU_NO = B.STTU_NO&#xd;	LEFT JOIN TRX_AGGR C (NOLOCK)&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM D (NOLOCK)&#xd;	ON B.STTU_STS = D.PARAM_CODE AND D.CONDITION = 'STTU_STS' AND D.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_AR_STS E (NOLOCK)&#xd;	ON C.AR_STS = E.AR_STS  AND ISNULL(E.SUB_STS, '') = ISNULL (C.SUB_STS, '')&#xd;	LEFT JOIN MST_GLOBAL_PARAM F (NOLOCK)&#xd;	ON B.AGENT_TYPE = F.PARAM_CODE AND F.CONDITION = 'AGENT_TYPE' AND F.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM G (NOLOCK)&#xd;	ON A.SOLVING_TYPE = G.PARAM_CODE AND G.CONDITION = 'SOLVING_TYPE' AND G.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_AGGR_ASSET H (NOLOCK)&#xd;	ON A.AGGR_NO = H.AGGR_NO&#xd;	LEFT JOIN MST_BRAND I (NOLOCK)&#xd;	ON H.BRAND_CODE = I.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE J (NOLOCK)&#xd;	ON H.TYPE_CODE = J.TYPE_CODE&#xd;	LEFT JOIN MST_MODEL K (NOLOCK)&#xd;	ON H.MODEL_CODE = K.MODEL_CODE&#xd;	LEFT JOIN MST_KIND L (NOLOCK)&#xd;	ON J.KIND_CODE = L.KIND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM M (NOLOCK)&#xd;	ON I.CATEGORY_CODE = M.PARAM_CODE AND M.CONDITION = 'CATEGORY_CODE' AND M.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_COLOR N (NOLOCK)&#xd;	ON H.COLOR_CODE = N.COLOR_CODE&#xd;	LEFT JOIN TRX_TU_SOLVING O (NOLOCK)&#xd;	ON A.TU_DEPOSIT_NO = O.TU_DEPOSIT_NO AND A.SOLVING_TYPE = O.TU_SOLVING_TYPE AND A.SOLVING_DATE = O.TU_SOLVING_DATE&#xd;	LEFT JOIN MST_GLOBAL_PARAM P (NOLOCK)&#xd;	ON O.APPV_STS = P.PARAM_CODE AND P.CONDITION = 'STATUS_APPROVAL' AND P.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_APPL Q (NOLOCK)&#xd;	ON C.APPL_NO = Q.APPL_NO&#xd;	LEFT JOIN MST_BRANCH R (NOLOCK)&#xd;	ON A.LOC_CODE = R.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH S (NOLOCK)&#xd;	ON A.LOC_RECEIPT_CODE = S.BRANCH_CODE&#xd;	LEFT JOIN MST_EXT_COLL T (NOLOCK)&#xd;	ON B.EXT_COLL_CODE = T.EXT_COLL_CODE&#xd;	LEFT JOIN MST_EMPLOYEE PIC1 (NOLOCK)&#xd;	ON B.PIC1_CODE = PIC1.NIK&#xd;	LEFT JOIN MST_EMPLOYEE PIC2 (NOLOCK)&#xd;	ON B.PIC2_CODE = PIC2.NIK&#xd;	LEFT JOIN MST_GLOBAL_PARAM GP (NOLOCK)&#xd;	ON A.COMPANY_CODE = GP.COMPANY_CODE AND A.DEPOSIT_STS = GP.PARAM_CODE AND GP.CONDITION = 'DEPOSIT_STS' AND GP.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_CUSTOMER CUS (NOLOCK)&#xd;	ON C.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE CEO (NOLOCK)&#xd;	ON C.CUSTOMER_CODE = CEO.CUSTOMER_CODE AND CEO.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB (NOLOCK)&#xd;	ON C.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (NOLOCK)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND C.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM PT (NOLOCK)&#xd;	ON PT.CONDITION = 'PENALTY_TYPE' AND PT.CHAR_VALUES = C.PRODUCT_CODE AND PT.PARAM_CODE = 'FLAT02' AND PT.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN&#xd;	(&#xd;		SELECT&#xd;			COMPANY_CODE companyCode,&#xd;			COUNT(INST_NO) as instNo,&#xd;			AGGR_NO aggrNo&#xd;		FROM TRX_AGGR_SCHEDULE (NOLOCK)&#xd;		WHERE PAYMENT_STS = 'UNPAID'&#xd;		GROUP BY COMPANY_CODE, AGGR_NO&#xd;	) ST ON A.COMPANY_CODE = ST.companyCode AND C.AGGR_NO = ST.aggrNo&#xd;	LEFT JOIN TRX_INVENTORY_TU INV (NOLOCK)&#xd;	ON A.COMPANY_CODE = INV.COMPANY_CODE AND A.TU_DEPOSIT_NO = INV.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH BR (NOLOCK)&#xd;	ON A.COMPANY_CODE = BR.COMPANY_CODE AND A.BRANCH_CODE = BR.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BA (NOLOCK)&#xd;	ON A.COMPANY_CODE = BA.COMPANY_CODE AND C.BRANCH_CODE = BA.BRANCH_CODE&#xd;	WHERE C.AR_STS != 'LN'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="tuDepositDate" name="tuDepositDate" xsdType="string"/>
         <element column="executionDate" name="executionDate" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="sttuSts" name="sttuSts" xsdType="string"/>
         <element column="sttuStsName" name="sttuStsName" xsdType="string"/>
         <element column="pic1Code" name="pic1Code" xsdType="string"/>
         <element column="pic2Code" name="pic2Code" xsdType="string"/>
         <element column="agentType" name="agentType" xsdType="string"/>
         <element column="pic1Name" name="pic1Name" xsdType="string"/>
         <element column="pic2Name" name="pic2Name" xsdType="string"/>
         <element column="receiptFrom" name="receiptFrom" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="colorCode" name="colorCode" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="balPrincipalValue" name="balPrincipalValue" xsdType="string"/>
         <element column="balIntValue" name="balIntValue" xsdType="string"/>
         <element column="instNo" name="instNo" xsdType="string"/>
         <element column="balTenor" name="balTenor" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="reqCostNo" name="reqCostNo" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="notesPicReceive1" name="notesPicReceive1" xsdType="string"/>
         <element column="notesPicReceive2" name="notesPicReceive2" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locReceiptCode" name="locReceiptCode" xsdType="string"/>
         <element column="printedBy" name="printedBy" xsdType="string"/>
         <element column="printedDate" name="printedDate" xsdType="string"/>
         <element column="appvSts" name="appvSts" xsdType="string"/>
         <element column="appvDate" name="appvDate" xsdType="string"/>
         <element column="solvingType" name="solvingType" xsdType="string"/>
         <element column="solvingTypeName" name="solvingTypeName" xsdType="string"/>
         <element column="solvingDate" name="solvingDate" xsdType="string"/>
         <element column="solvingNotes" name="solvingNotes" xsdType="string"/>
         <element column="extCount" name="extCount" xsdType="string"/>
         <element column="vehcOutDate" name="vehcOutDate" xsdType="string"/>
         <element column="vehcOutBy" name="vehcOutBy" xsdType="string"/>
         <element column="otrValue" name="otrValue" xsdType="string"/>
         <element column="taksasiValue" name="taksasiValue" xsdType="string"/>
         <element column="totMinusValue" name="totMinusValue" xsdType="string"/>
         <element column="totAddValue" name="totAddValue" xsdType="string"/>
         <element column="depositSts" name="depositSts" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="voucherDate" name="voucherDate" xsdType="string"/>
         <element column="unitCondition" name="unitCondition" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="appvStsSolving" name="appvStsSolving" xsdType="string"/>
         <element column="appvStsNameSolving" name="appvStsNameSolving" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="phoneArea1" name="phoneArea1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="phoneArea2" name="phoneArea2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="hpNo1" name="hpNo1" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="agentTypeName" name="agentTypeName" xsdType="string"/>
         <element column="dendaTarikUnit" name="dendaTarikUnit" xsdType="string"/>
         <element column="locCodeName" name="locCodeName" xsdType="string"/>
         <element column="locReceiptCodeName" name="locReceiptCodeName" xsdType="string"/>
         <element column="getCollfee" name="getCollfee" xsdType="string"/>
         <element column="getPenaltyValue" name="getPenaltyValue" xsdType="string"/>
         <element column="expiredDateSttu" name="expiredDateSttu" xsdType="string"/>
         <element column="getBalPrincipalValue" name="getBalPrincipalValue" xsdType="string"/>
         <element column="getBalIntValue" name="getBalIntValue" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="sisaTenor" name="sisaTenor" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="extCollCode" name="extCollCode" xsdType="string"/>
         <element column="daysOverdue" name="daysOverdue" xsdType="string"/>
         <element column="locNotes" name="locNotes" xsdType="string"/>
         <element column="branchAggr" name="branchAggr" xsdType="string"/>
         <element column="extCollName" name="extCollName" xsdType="string"/>
         <element column="kmDeposit" name="kmDeposit" xsdType="string"/>
         <element column="depositStsName" name="depositStsName" xsdType="string"/>
         <element column="tuDepositInventory" name="tuDepositInventory" xsdType="string"/>
         <element column="inventorySts" name="inventorySts" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="branchNameAggr" name="branchNameAggr" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxTuDeposit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @AGGR_NO VARCHAR(50) = :aggrNo&#xd;DECLARE @STTUNO VARCHAR(50) = :sttuNo&#xd;DECLARE @CEK int&#xd;&#xd;SET @CEK = (SELECT COUNT(0) FROM TRX_TU_DEPOSIT where COMPANY_CODE=@COMPANY_CODE AND STTU_NO=@STTUNO)&#xd;&#xd;IF @CEK = 0&#xd;BEGIN&#xd;&#xd;INSERT INTO TRX_TU_DEPOSIT&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TU_DEPOSIT_NO,&#xd;        TU_DEPOSIT_DATE,&#xd;        EXECUTION_DATE,&#xd;        STTU_NO,&#xd;		PRODUCT_CODE,&#xd;		BUCKET_CODE,&#xd;		BUCKET_TYPE,&#xd;        RECEIPT_FROM,&#xd;		EXT_COLL_CODE,&#xd;        AGGR_NO,&#xd;        BAL_PRINCIPAL_VALUE,&#xd;        BAL_INT_VALUE,&#xd;		COLL_FEE,&#xd;		PENALTY_VALUE,&#xd;        INST_NO,&#xd;        BAL_TENOR,&#xd;		DAYS_OVERDUE,&#xd;        EXPIRED_DATE,&#xd;        STNK_EXPIRED_DATE,&#xd;        KM,&#xd;		KM_DEPOSIT,&#xd;        REQ_COST_NO,&#xd;        TU_COST,&#xd;        PENALTY_TU_VALUE,&#xd;        NOTES_PIC_RECEIVE1,&#xd;        NOTES_PIC_RECEIVE2,&#xd;        LOC_CODE,&#xd;        LOC_RECEIPT_CODE,&#xd;		LOC_NOTES,&#xd;        PRINTED_BY,&#xd;        PRINTED_DATE,&#xd;        APPV_STS,&#xd;        APPV_DATE,&#xd;        SOLVING_TYPE,&#xd;        SOLVING_DATE,&#xd;        SOLVING_NOTES,&#xd;        EXT_COUNT,&#xd;        VEHC_OUT_DATE,&#xd;        VEHC_OUT_BY,&#xd;        OTR_VALUE,&#xd;        TAKSASI_VALUE,&#xd;        TOT_MINUS_VALUE,&#xd;        TOT_ADD_VALUE,&#xd;        DEPOSIT_STS,&#xd;        VOUCHER_NO,&#xd;        VOUCHER_DATE,&#xd;        UNIT_CONDITION,&#xd;        CREATED_DATE,&#xd;        CREATED_BY,&#xd;		INST_NO_TO&#xd;)&#xd;VALUES&#xd;(&#xd;        @COMPANY_CODE,&#xd;        :branchCode,&#xd;        :tuDepositNo,&#xd;        :tuDepositDate,&#xd;        :executionDate,&#xd;        @STTUNO,&#xd;		:productCode,&#xd;		:bucketCode,&#xd;		:bucketType,&#xd;        :receiptFrom,&#xd;		:extCollCode,&#xd;        @AGGR_NO,&#xd;        :balPrincipalValue,&#xd;        :balIntValue,&#xd;		:collFee,&#xd;		:penaltyValue,&#xd;        (&#xd;			SELECT TOP 1 instNo FROM (&#xd;				SELECT &#xd;					CASE &#xd;						WHEN MIN(INST_NO) IS NULL THEN '0'&#xd;						ELSE MIN(INST_NO)&#xd;					END instNo&#xd;				FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = @AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = @COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;			) a&#xd;		),&#xd;        :balTenor,&#xd;		:daysOverdue,&#xd;        :expiredDate,&#xd;        :stnkExpiredDate,&#xd;        :km,&#xd;		'0',&#xd;        :reqCostNo,&#xd;        :tuCost,&#xd;        :penaltyTuValue,&#xd;        :notesPicReceive1,&#xd;        :notesPicReceive2,&#xd;        :locCode,&#xd;        :locReceiptCode,&#xd;		:locNotes,&#xd;        :printedBy,&#xd;        :printedDate,&#xd;        :appvSts,&#xd;        :appvDate,&#xd;        :solvingType,&#xd;        :solvingDate,&#xd;        :solvingNotes,&#xd;        :extCount,&#xd;        :vehcOutDate,&#xd;        :vehcOutBy,&#xd;        :otrValue,&#xd;        :taksasiValue,&#xd;        :totMinusValue,&#xd;        :totAddValue,&#xd;        :depositSts,&#xd;        :voucherNo,&#xd;        :voucherDate,&#xd;        :unitCondition,&#xd;        GETDATE(),&#xd;        :createdBy,&#xd;		(&#xd;			SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = @AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = @COMPANY_CODE&#xd;						) IS NULL THEN '0'&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = @AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = @COMPANY_CODE)&#xd;				END RESULT&#xd;		)&#xd;)&#xd;END&#xd;ELSE&#xd;BEGIN&#xd;UPDATE TRX_STTU SET UPDATED_DATE=GETDATE() where COMPANY_CODE=@COMPANY_CODE AND STTU_NO=@STTUNO&#xd;END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuDepositDate" sqlType="STRING"/>
      <param name="executionDate" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="receiptFrom" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="balPrincipalValue" sqlType="STRING"/>
      <param name="balIntValue" sqlType="STRING"/>
      <param name="balTenor" sqlType="STRING"/>
      <param name="expiredDate" sqlType="STRING"/>
      <param name="stnkExpiredDate" sqlType="STRING"/>
      <param name="km" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
      <param name="tuCost" sqlType="STRING"/>
      <param name="penaltyTuValue" sqlType="STRING"/>
      <param name="notesPicReceive1" sqlType="STRING"/>
      <param name="notesPicReceive2" sqlType="STRING"/>
      <param name="locCode" sqlType="STRING"/>
      <param name="locReceiptCode" sqlType="STRING"/>
      <param name="printedBy" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="appvDate" sqlType="STRING"/>
      <param name="solvingType" sqlType="STRING"/>
      <param name="solvingDate" sqlType="STRING"/>
      <param name="solvingNotes" sqlType="STRING"/>
      <param name="extCount" sqlType="STRING"/>
      <param name="vehcOutDate" sqlType="STRING"/>
      <param name="vehcOutBy" sqlType="STRING"/>
      <param name="otrValue" sqlType="STRING"/>
      <param name="taksasiValue" sqlType="STRING"/>
      <param name="totMinusValue" sqlType="STRING"/>
      <param name="totAddValue" sqlType="STRING"/>
      <param name="depositSts" sqlType="STRING"/>
      <param name="voucherNo" sqlType="STRING"/>
      <param name="voucherDate" sqlType="STRING"/>
      <param name="unitCondition" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="collFee" sqlType="STRING"/>
      <param name="penaltyValue" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
      <param name="daysOverdue" sqlType="STRING"/>
      <param name="locNotes" sqlType="STRING"/>
   </query>
   <query id="insertTrxTuSparepart" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_TU_SPAREPART&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TU_DEPOSIT_NO,&#xd;        SPAREPART_CODE,&#xd;        NOTES,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :tuDepositNo,&#xd;        :sparepartCode,&#xd;        :notes,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="sparepartCode" sqlType="STRING"/>
      <param name="notes" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="updateTrxTuDeposit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @BRANCH_CODE varchar(10) = :branchCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;&#xd;UPDATE TRX_TU_DEPOSIT SET&#xd;        TU_DEPOSIT_DATE = :tuDepositDate,&#xd;        EXECUTION_DATE = :executionDate,&#xd;        STTU_NO = :sttuNo,&#xd;        RECEIPT_FROM = :receiptFrom,&#xd;        AGGR_NO = :aggrNo,&#xd;        BAL_PRINCIPAL_VALUE = :balPrincipalValue,&#xd;        BAL_INT_VALUE = :balIntValue,&#xd;		COLL_FEE = :collFee,&#xd;		PENALTY_VALUE = :penaltyValue,&#xd;        INST_NO = :instNo,&#xd;        BAL_TENOR = :balTenor,&#xd;        EXPIRED_DATE = :expiredDate,&#xd;        STNK_EXPIRED_DATE = :stnkExpiredDate,&#xd;        KM = :km,&#xd;		KM_DEPOSIT = :kmDeposit,&#xd;        REQ_COST_NO = :reqCostNo,&#xd;        TU_COST = :tuCost,&#xd;        PENALTY_TU_VALUE = :penaltyTuValue,&#xd;        NOTES_PIC_RECEIVE1 = :notesPicReceive1,&#xd;        NOTES_PIC_RECEIVE2 = :notesPicReceive2,&#xd;        LOC_CODE = :locCode,&#xd;        LOC_RECEIPT_CODE = :locReceiptCode,&#xd;		LOC_NOTES = :locNotes,&#xd;        PRINTED_BY = :printedBy,&#xd;        PRINTED_DATE = :printedDate,&#xd;        APPV_STS = :appvSts,&#xd;        APPV_DATE = :appvDate,&#xd;        SOLVING_TYPE = :solvingType,&#xd;        SOLVING_DATE = :solvingDate,&#xd;        SOLVING_NOTES = :solvingNotes,&#xd;        EXT_COUNT = :extCount,&#xd;        VEHC_OUT_DATE = :vehcOutDate,&#xd;        VEHC_OUT_BY = :vehcOutBy,&#xd;        OTR_VALUE = :otrValue,&#xd;        TAKSASI_VALUE = :taksasiValue,&#xd;        TOT_MINUS_VALUE = :totMinusValue,&#xd;        TOT_ADD_VALUE = :totAddValue,&#xd;        DEPOSIT_STS = :depositSts,&#xd;        VOUCHER_NO = :voucherNo,&#xd;        VOUCHER_DATE = :voucherDate,&#xd;        UNIT_CONDITION = :unitCondition,&#xd;        UPDATED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND &#xd;        TU_DEPOSIT_NO = @TU_DEPOSIT_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuDepositDate" sqlType="STRING"/>
      <param name="executionDate" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="receiptFrom" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="balPrincipalValue" sqlType="STRING"/>
      <param name="balIntValue" sqlType="STRING"/>
      <param name="instNo" sqlType="STRING"/>
      <param name="balTenor" sqlType="STRING"/>
      <param name="expiredDate" sqlType="STRING"/>
      <param name="stnkExpiredDate" sqlType="STRING"/>
      <param name="km" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
      <param name="tuCost" sqlType="STRING"/>
      <param name="penaltyTuValue" sqlType="STRING"/>
      <param name="notesPicReceive1" sqlType="STRING"/>
      <param name="notesPicReceive2" sqlType="STRING"/>
      <param name="locCode" sqlType="STRING"/>
      <param name="locReceiptCode" sqlType="STRING"/>
      <param name="printedBy" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="appvDate" sqlType="STRING"/>
      <param name="solvingType" sqlType="STRING"/>
      <param name="solvingDate" sqlType="STRING"/>
      <param name="solvingNotes" sqlType="STRING"/>
      <param name="extCount" sqlType="STRING"/>
      <param name="vehcOutDate" sqlType="STRING"/>
      <param name="vehcOutBy" sqlType="STRING"/>
      <param name="otrValue" sqlType="STRING"/>
      <param name="taksasiValue" sqlType="STRING"/>
      <param name="totMinusValue" sqlType="STRING"/>
      <param name="totAddValue" sqlType="STRING"/>
      <param name="depositSts" sqlType="STRING"/>
      <param name="voucherNo" sqlType="STRING"/>
      <param name="voucherDate" sqlType="STRING"/>
      <param name="unitCondition" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="collFee" sqlType="STRING"/>
      <param name="penaltyValue" sqlType="STRING"/>
      <param name="locNotes" sqlType="STRING"/>
      <param name="kmDeposit" sqlType="STRING"/>
   </query>
   <query id="deleteTrxTuSparepart" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @BRANCH_CODE varchar(10) = :branchCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;&#xd;DELETE FROM TRX_TU_SPAREPART&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        TU_DEPOSIT_NO = @TU_DEPOSIT_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxTuSparepart" useConfig="collectiondso1">
      <sql>SELECT TOP 1 companyCode, branchCode, tuDepositNo, sparepartCode, sparepartName, sparepartType, sparepartTypeName, notes FROM (&#xd;	SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.TU_DEPOSIT_NO tuDepositNo,&#xd;			A.SPAREPART_CODE sparepartCode,&#xd;			B.SPAREPART_NAME sparepartName,&#xd;			B.SPAREPART_TYPE sparepartType,&#xd;			C.PARAM_DESCRIP sparepartTypeName,&#xd;			A.NOTES notes&#xd;	FROM TRX_TU_SPAREPART A&#xd;	LEFT JOIN MST_SPAREPART B&#xd;	ON A.SPAREPART_CODE = B.SPAREPART_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON B.SPAREPART_TYPE = C.PARAM_CODE AND C.CONDITION = 'SPAREPART_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="sparepartCode" name="sparepartCode" xsdType="string"/>
         <element column="sparepartName" name="sparepartName" xsdType="string"/>
         <element column="sparepartType" name="sparepartType" xsdType="string"/>
         <element column="sparepartTypeName" name="sparepartTypeName" xsdType="string"/>
         <element column="notes" name="notes" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxTuSparepart" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.TU_DEPOSIT_NO tuDepositNo,&#xd;			A.SPAREPART_CODE sparepartCode,&#xd;			B.SPAREPART_NAME sparepartName,&#xd;			B.SPAREPART_TYPE sparepartType,&#xd;			C.PARAM_DESCRIP sparepartTypeName,&#xd;			A.NOTES notes&#xd;	FROM TRX_TU_SPAREPART A&#xd;	LEFT JOIN MST_SPAREPART B&#xd;	ON A.SPAREPART_CODE = B.SPAREPART_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON B.SPAREPART_TYPE = C.PARAM_CODE AND C.CONDITION = 'SPAREPART_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxTuSparepart" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, tuDepositNo, sparepartCode, sparepartName, sparepartType, sparepartTypeName, notes FROM (&#xd;	SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.TU_DEPOSIT_NO tuDepositNo,&#xd;			A.SPAREPART_CODE sparepartCode,&#xd;			B.SPAREPART_NAME sparepartName,&#xd;			B.SPAREPART_TYPE sparepartType,&#xd;			C.PARAM_DESCRIP sparepartTypeName,&#xd;			A.NOTES notes&#xd;	FROM TRX_TU_SPAREPART A&#xd;	LEFT JOIN MST_SPAREPART B&#xd;	ON A.SPAREPART_CODE = B.SPAREPART_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON B.SPAREPART_TYPE = C.PARAM_CODE AND C.CONDITION = 'SPAREPART_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="sparepartCode" name="sparepartCode" xsdType="string"/>
         <element column="sparepartName" name="sparepartName" xsdType="string"/>
         <element column="sparepartType" name="sparepartType" xsdType="string"/>
         <element column="sparepartTypeName" name="sparepartTypeName" xsdType="string"/>
         <element column="notes" name="notes" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxTuFile" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE  VARCHAR(50) = :companyCode&#xd;DECLARE @BRANCH_CODE  VARCHAR(50) = :branchCode&#xd;DECLARE @TU_DEPOSIT_NO  VARCHAR(50) = :tuDepositNo&#xd;&#xd;INSERT INTO TRX_TU_FILE&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TU_DEPOSIT_NO,&#xd;        SEQ_NO,&#xd;        FILE_LOCATION,&#xd;        FILE_NAME,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        @COMPANY_CODE,&#xd;        @BRANCH_CODE,&#xd;        @TU_DEPOSIT_NO,&#xd;        (SELECT ISNULL(MAX(SEQ_NO), 0) + 1 FROM TRX_TU_FILE WHERE COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE AND TU_DEPOSIT_NO = @TU_DEPOSIT_NO),&#xd;        :fileLocation,&#xd;        :fileName,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="fileLocation" sqlType="STRING"/>
      <param name="fileName" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="deleteTrxTuFile" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @BRANCH_CODE varchar(10) = :branchCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;&#xd;DELETE FROM TRX_TU_FILE&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        TU_DEPOSIT_NO = @TU_DEPOSIT_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxTuFile" useConfig="collectiondso1">
      <sql>SELECT TOP 1 companyCode, branchCode, tuDepositNo, seqNo, fileLocation, fileName FROM (&#xd;	SELECT&#xd;		COMPANY_CODE companyCode,&#xd;		BRANCH_CODE branchCode,&#xd;		TU_DEPOSIT_NO tuDepositNo,&#xd;		SEQ_NO seqNo,&#xd;		FILE_LOCATION fileLocation,&#xd;		FILE_NAME fileName&#xd;	FROM TRX_TU_FILE&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="fileLocation" name="fileLocation" xsdType="string"/>
         <element column="fileName" name="fileName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxTuFile" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;		COMPANY_CODE companyCode,&#xd;		BRANCH_CODE branchCode,&#xd;		TU_DEPOSIT_NO tuDepositNo,&#xd;		SEQ_NO seqNo,&#xd;		FILE_LOCATION fileLocation,&#xd;		FILE_NAME fileName&#xd;	FROM TRX_TU_FILE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxTuFile" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, tuDepositNo, seqNo, fileLocation, fileName FROM (&#xd;	SELECT&#xd;		COMPANY_CODE companyCode,&#xd;		BRANCH_CODE branchCode,&#xd;		TU_DEPOSIT_NO tuDepositNo,&#xd;		SEQ_NO seqNo,&#xd;		FILE_LOCATION fileLocation,&#xd;		FILE_NAME fileName&#xd;	FROM TRX_TU_FILE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="fileLocation" name="fileLocation" xsdType="string"/>
         <element column="fileName" name="fileName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxTuSolving" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_TU_SOLVING&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TU_DEPOSIT_NO,&#xd;        TU_SOLVING_DATE,&#xd;        TU_SOLVING_TYPE,&#xd;        NOTES,&#xd;        INVENTORY_DATE_OLD,&#xd;        INVENTORY_DATE_NEW,&#xd;        APPV_STS,&#xd;        APPV_DATE,&#xd;        TOT_PAYMENT,&#xd;        PAY_INSTALL_BILL,&#xd;        PAY_COLL_FEE,&#xd;        PAY_PENALTY,&#xd;        PAY_PENALTY_TU,&#xd;        PAY_COST_TU,&#xd;        DISCOUNT_VALUE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :tuDepositNo,&#xd;        :tuSolvingDate,&#xd;        :tuSolvingType,&#xd;        :notes,&#xd;        :inventoryDateOld,&#xd;        :inventoryDateNew,&#xd;        :appvSts,&#xd;        :appvDate,&#xd;        :totPayment,&#xd;        :payInstallBill,&#xd;        :payCollFee,&#xd;        :payPenalty,&#xd;        :payPenaltyTu,&#xd;        :payCostTu,&#xd;        :discountValue,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
      <param name="tuSolvingType" sqlType="STRING"/>
      <param name="notes" sqlType="STRING"/>
      <param name="inventoryDateOld" sqlType="STRING"/>
      <param name="inventoryDateNew" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="appvDate" sqlType="STRING"/>
      <param name="totPayment" sqlType="STRING"/>
      <param name="payInstallBill" sqlType="STRING"/>
      <param name="payCollFee" sqlType="STRING"/>
      <param name="payPenalty" sqlType="STRING"/>
      <param name="payPenaltyTu" sqlType="STRING"/>
      <param name="payCostTu" sqlType="STRING"/>
      <param name="discountValue" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="insertTrxTuSolvingDoc" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_TU_SOLVING_DOC&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TU_DEPOSIT_NO,&#xd;        TU_SOLVING_DATE,&#xd;        DOCUMENT_CODE,&#xd;        FLAG_CHOOSE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :tuDepositNo,&#xd;        :tuSolvingDate,&#xd;        :documentCode,&#xd;        :flagChoose,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
      <param name="documentCode" sqlType="STRING"/>
      <param name="flagChoose" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="deleteTrxTuSolvingDoc" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @BRANCH_CODE varchar(10) = :branchCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;&#xd;DELETE FROM TRX_TU_SOLVING_DOC&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        TU_DEPOSIT_NO = @TU_DEPOSIT_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxTuSolving" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode, 1 branchCode, 1 tuDepositNo, 1 tuDepositDate, 1 aggrNo, 1 customerFullname, 1 arSts, 1 arStsName, 1 tuSolvingDate, 1 tuSolvingType, 1 tuSolvingTypeName, 1 notes, 1 inventoryDateOld, 1 inventoryDateNew, 1 appvSts, 1 appvStsName, 1 appvDate,&#xd;1 dueDate, 1 instFrom, 1 instTo, 1 dayOverdue, 1 nilaiAngsuran, 1 tagihanAngsuran, 1 biayaTagih, 1 tagihanDenda, 1 penaltyTuValue, 1 tuCost, 1 totalTagihan, 1 totPayment, 1 payInstallBill, 1 payCollFee, 1 payPenalty, 1 payPenaltyTu, 1 payCostTu, 1 discountValue, 1 instToPelunasan, 1 tagihanAngsuranPelunasan</sql>
      <result element="Entries" rowName="">
         <element column="totalTagihan" name="totalTagihan" xsdType="string"/>
         <element column="totPayment" name="totPayment" xsdType="string"/>
         <element column="payInstallBill" name="payInstallBill" xsdType="string"/>
         <element column="payCollFee" name="payCollFee" xsdType="string"/>
         <element column="payPenalty" name="payPenalty" xsdType="string"/>
         <element column="payPenaltyTu" name="payPenaltyTu" xsdType="string"/>
         <element column="payCostTu" name="payCostTu" xsdType="string"/>
         <element column="discountValue" name="discountValue" xsdType="string"/>
         <element column="instToPelunasan" name="instToPelunasan" xsdType="string"/>
         <element column="tagihanAngsuranPelunasan" name="tagihanAngsuranPelunasan" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxTuSolving" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		BR.BRANCH_NAME branchName,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.TU_DEPOSIT_DATE tuDepositDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		B.AR_STS arSts,&#xd;		C.TRX_NAME arStsName,&#xd;		D.TU_SOLVING_DATE tuSolvingDate,&#xd;		D.TU_SOLVING_TYPE tuSolvingType,&#xd;		E.PARAM_DESCRIP tuSolvingTypeName,&#xd;		D.NOTES notes,&#xd;		D.INVENTORY_DATE_OLD inventoryDateOld,&#xd;		D.INVENTORY_DATE_NEW inventoryDateNew,&#xd;		D.APPV_STS appvSts,&#xd;		F.PARAM_DESCRIP appvStsName,&#xd;		D.APPV_DATE appvDate,&#xd;		(SELECT MIN(DUE_DATE) FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE) as dueDate,&#xd;		(&#xd;			SELECT &#xd;				ISNULL(MIN(INST_NO), '0') instNo&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;		) as instFrom,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN &#xd;					(&#xd;					SELECT &#xd;						convert(varchar(10),MAX(INST_NO)) &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;					) IS NULL THEN '0'&#xd;				ELSE&#xd;					(SELECT &#xd;						MAX(INST_NO) instNo &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;			END RESULT&#xd;		) as instTo,&#xd;		(&#xd;			SELECT TOP 1 ISNULL(dayOverdue, '0') dayOverdue FROM (&#xd;				SELECT &#xd;					MIN(INST_NO) instNo,&#xd;					DAY_OVERDUE dayOverdue&#xd;				FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;				GROUP BY INST_NO, DAY_OVERDUE&#xd;			) a&#xd;		) as dayOverdue,&#xd;		B.INST_VALUE nilaiAngsuran,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN &#xd;					(&#xd;					SELECT &#xd;						convert(varchar(10),MAX(INST_NO)) &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;					) IS NULL THEN &#xd;								'0'&#xd;				ELSE&#xd;					(SELECT total FROM (&#xd;						SELECT &#xd;							MAX(INST_NO) instNo,&#xd;							SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)) total&#xd;						FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;					) a)&#xd;			END RESULT&#xd;		) as tagihanAngsuran,&#xd;		(&#xd;			SELECT &#xd;				isnull(SUM(COLL_FEE-COLL_FEE_PAID), 0)&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) as biayaTagih,&#xd;		(&#xd;			&#xd;			SELECT &#xd;				isnull(SUM(PINALTY_VALUE-PINALTY_PAID), 0) &#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;									&#xd;		) as tagihanDenda,&#xd;&#xd;		A.PENALTY_TU_VALUE penaltyTuValue,&#xd;		A.TU_COST tuCost,		&#xd;		D.TOT_PAYMENT totPayment,&#xd;		D.PAY_INSTALL_BILL payInstallBill,&#xd;		D.PAY_COLL_FEE payCollFee,&#xd;		D.PAY_PENALTY payPenalty,&#xd;		D.PAY_PENALTY_TU payPenaltyTu,&#xd;		D.PAY_COST_TU payCostTu,&#xd;		D.DISCOUNT_VALUE discountValue,&#xd;		B.TENOR instToPelunasan,&#xd;		(&#xd;			SELECT &#xd;				SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)) total&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) tagihanAngsuranPelunasan,&#xd;		A.DEPOSIT_STS depositSts,&#xd;		A.EXPIRED_DATE expiredDate,&#xd;		H.BRANCH_NAME bpkbLocation,&#xd;		B.TENOR tenor,&#xd;		(&#xd;			SELECT&#xd;				isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;			FROM TRX_AGGR_SCHEDULE where AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &gt; GETDATE()&#xd;		) angsuranBelumJatuhTempo,&#xd;		B.WO_DATE woDate&#xd;	FROM TRX_TU_DEPOSIT A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_AR_STS C (nolock)&#xd;	ON B.AR_STS = C.AR_STS AND ISNULL(C.SUB_STS, '') = ISNULL(B.SUB_STS, '')&#xd;	LEFT JOIN TRX_TU_SOLVING D (nolock)&#xd;	ON A.TU_DEPOSIT_NO = D.TU_DEPOSIT_NO AND A.SOLVING_TYPE = D.TU_SOLVING_TYPE AND A.SOLVING_DATE = D.TU_SOLVING_DATE AND D.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E (nolock)&#xd;	ON D.TU_SOLVING_TYPE = E.PARAM_CODE AND E.CONDITION = 'SOLVING_TYPE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;	ON D.APPV_STS = F.PARAM_CODE AND F.CONDITION = 'STATUS_APPROVAL' AND F.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BPKB G (nolock)&#xd;	ON A.AGGR_NO = G.AGGR_NO AND A.COMPANY_CODE = G.COMPANY_CODE&#xd;	LEFT JOIN MST_BRANCH H (nolock)&#xd;	ON G.BPKB_LOCATION_NAME = H.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BR (nolock)&#xd;	ON A.COMPANY_CODE = BR.COMPANY_CODE AND A.BRANCH_CODE = BR.BRANCH_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxTuSolving" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName, tuDepositNo, tuDepositDate, aggrNo, customerFullname, arSts, arStsName, tuSolvingDate, tuSolvingType, tuSolvingTypeName, notes, inventoryDateOld, inventoryDateNew, appvSts, appvStsName, appvDate,&#xd;dueDate, instFrom, instTo, ISNULL(dayOverdue, '0') dayOverdue, nilaiAngsuran, tagihanAngsuran, biayaTagih, tagihanDenda, penaltyTuValue, tuCost, (tagihanAngsuran + biayaTagih + tagihanDenda + tuCost + penaltyTuValue) as totalTagihan, totPayment, payInstallBill, payCollFee, payPenalty, payPenaltyTu, payCostTu, discountValue, instToPelunasan, tagihanAngsuranPelunasan, depositSts, expiredDate, bpkbLocation, tenor, angsuranBelumJatuhTempo, woDate FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		BR.BRANCH_NAME branchName,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.TU_DEPOSIT_DATE tuDepositDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		B.AR_STS arSts,&#xd;		C.TRX_NAME arStsName,&#xd;		D.TU_SOLVING_DATE tuSolvingDate,&#xd;		D.TU_SOLVING_TYPE tuSolvingType,&#xd;		E.PARAM_DESCRIP tuSolvingTypeName,&#xd;		D.NOTES notes,&#xd;		D.INVENTORY_DATE_OLD inventoryDateOld,&#xd;		D.INVENTORY_DATE_NEW inventoryDateNew,&#xd;		D.APPV_STS appvSts,&#xd;		F.PARAM_DESCRIP appvStsName,&#xd;		D.APPV_DATE appvDate,&#xd;		(SELECT MIN(DUE_DATE) FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE) as dueDate,&#xd;		(&#xd;			SELECT &#xd;				ISNULL(MIN(INST_NO), '0') instNo&#xd;			FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;		) as instFrom,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN &#xd;					(&#xd;					SELECT &#xd;						convert(varchar(10),MAX(INST_NO)) &#xd;					FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;					) IS NULL THEN '0'&#xd;				ELSE&#xd;					(SELECT &#xd;						MAX(INST_NO) instNo &#xd;					FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;			END RESULT&#xd;		) as instTo,&#xd;		(&#xd;			SELECT TOP 1 ISNULL(dayOverdue, '0') dayOverdue FROM (&#xd;				SELECT &#xd;					MIN(INST_NO) instNo,&#xd;					DAY_OVERDUE dayOverdue&#xd;				FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;				GROUP BY INST_NO, DAY_OVERDUE&#xd;			) a&#xd;		) as dayOverdue,&#xd;		B.INST_VALUE nilaiAngsuran,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN &#xd;					(&#xd;					SELECT &#xd;						convert(varchar(10),MAX(INST_NO)) &#xd;					FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;					) IS NULL THEN &#xd;								'0'&#xd;				ELSE&#xd;					(SELECT total FROM (&#xd;						SELECT &#xd;							MAX(INST_NO) instNo,&#xd;							SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)) total&#xd;						FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;					) a)&#xd;			END RESULT&#xd;		) as tagihanAngsuran,&#xd;		(&#xd;			SELECT &#xd;				isnull(SUM(COLL_FEE-COLL_FEE_PAID), 0)&#xd;			FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) as biayaTagih,&#xd;		(&#xd;			&#xd;			SELECT &#xd;				isnull(SUM(PINALTY_VALUE-PINALTY_PAID), 0) &#xd;			FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;									&#xd;		) as tagihanDenda,&#xd;&#xd;		A.PENALTY_TU_VALUE penaltyTuValue,&#xd;		A.TU_COST tuCost,		&#xd;		D.TOT_PAYMENT totPayment,&#xd;		D.PAY_INSTALL_BILL payInstallBill,&#xd;		D.PAY_COLL_FEE payCollFee,&#xd;		D.PAY_PENALTY payPenalty,&#xd;		D.PAY_PENALTY_TU payPenaltyTu,&#xd;		D.PAY_COST_TU payCostTu,&#xd;		D.DISCOUNT_VALUE discountValue,&#xd;		B.TENOR instToPelunasan,&#xd;		(&#xd;			SELECT &#xd;				SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)) total&#xd;			FROM TRX_AGGR_SCHEDULE (nolock)WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) tagihanAngsuranPelunasan,&#xd;		A.DEPOSIT_STS depositSts,&#xd;		A.EXPIRED_DATE expiredDate,&#xd;		H.BRANCH_NAME bpkbLocation,&#xd;		B.TENOR tenor,&#xd;		(&#xd;			SELECT&#xd;				isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;			FROM TRX_AGGR_SCHEDULE (nolock)where AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &gt; GETDATE()&#xd;		) angsuranBelumJatuhTempo,&#xd;		B.WO_DATE woDate&#xd;	FROM TRX_TU_DEPOSIT A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_AR_STS C (nolock)&#xd;	ON B.AR_STS = C.AR_STS AND ISNULL(C.SUB_STS, '') = ISNULL(B.SUB_STS, '')&#xd;	LEFT JOIN TRX_TU_SOLVING D (nolock)&#xd;	ON A.TU_DEPOSIT_NO = D.TU_DEPOSIT_NO AND A.SOLVING_TYPE = D.TU_SOLVING_TYPE AND A.SOLVING_DATE = D.TU_SOLVING_DATE AND D.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E (nolock)&#xd;	ON D.TU_SOLVING_TYPE = E.PARAM_CODE AND E.CONDITION = 'SOLVING_TYPE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;	ON D.APPV_STS = F.PARAM_CODE AND F.CONDITION = 'STATUS_APPROVAL' AND F.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BPKB G (nolock)&#xd;	ON A.AGGR_NO = G.AGGR_NO AND A.COMPANY_CODE = G.COMPANY_CODE&#xd;	LEFT JOIN MST_BRANCH H (nolock)&#xd;	ON G.BPKB_LOCATION_NAME = H.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BR (nolock)&#xd;	ON A.COMPANY_CODE = BR.COMPANY_CODE AND A.BRANCH_CODE = BR.BRANCH_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="tuSolvingDate" name="tuSolvingDate" xsdType="string"/>
         <element column="tuSolvingType" name="tuSolvingType" xsdType="string"/>
         <element column="tuSolvingTypeName" name="tuSolvingTypeName" xsdType="string"/>
         <element column="notes" name="notes" xsdType="string"/>
         <element column="inventoryDateOld" name="inventoryDateOld" xsdType="string"/>
         <element column="inventoryDateNew" name="inventoryDateNew" xsdType="string"/>
         <element column="appvSts" name="appvSts" xsdType="string"/>
         <element column="appvStsName" name="appvStsName" xsdType="string"/>
         <element column="appvDate" name="appvDate" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="nilaiAngsuran" name="nilaiAngsuran" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="biayaTagih" name="biayaTagih" xsdType="string"/>
         <element column="tagihanDenda" name="tagihanDenda" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="totalTagihan" name="totalTagihan" xsdType="string"/>
         <element column="totPayment" name="totPayment" xsdType="string"/>
         <element column="payInstallBill" name="payInstallBill" xsdType="string"/>
         <element column="payCollFee" name="payCollFee" xsdType="string"/>
         <element column="payPenalty" name="payPenalty" xsdType="string"/>
         <element column="payPenaltyTu" name="payPenaltyTu" xsdType="string"/>
         <element column="payCostTu" name="payCostTu" xsdType="string"/>
         <element column="discountValue" name="discountValue" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="tuDepositDate" name="tuDepositDate" xsdType="string"/>
         <element column="instToPelunasan" name="instToPelunasan" xsdType="string"/>
         <element column="tagihanAngsuranPelunasan" name="tagihanAngsuranPelunasan" xsdType="string"/>
         <element column="depositSts" name="depositSts" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="bpkbLocation" name="bpkbLocation" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="angsuranBelumJatuhTempo" name="angsuranBelumJatuhTempo" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateBucketTrxAggr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;UPDATE TRX_AGGR SET&#xd;	BUCKET_CODE = :bucketCode,&#xd;	UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = :updateBy&#xd;WHERE &#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	AGGR_NO = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="updateBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="findBranchCodePindahBaket" useConfig="collectiondso1">
      <sql>SELECT branchCode, branchName FROM (&#xd;	SELECT &#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName&#xd;	FROM TRX_COLL_MOVE_BUCKET A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	WHERE TRX_NO = :trxNo&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
      </result>
      <param name="trxNo" sqlType="STRING"/>
   </query>
   <query id="findFormitleMstWorkFlow" useConfig="collectiondso1">
      <sql>SELECT formTitle FROM (&#xd;	SELECT &#xd;		FORM_TITLE formTitle&#xd;	FROM MST_WORKFLOW (nolock)&#xd;	WHERE PROCESS_NAME = :processName&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="formTitle" name="formTitle" xsdType="string"/>
      </result>
      <param name="processName" sqlType="STRING"/>
   </query>
   <query id="riwayatTransaksiTaskToDo" useConfig="collectiondso1">
      <sql>SELECT trxSeq, subject, nik, positionCode, positionName, branchCode, branchName, decisionSts, reasonLog, fullName, dicisionDate FROM (&#xd;	SELECT&#xd;		A.TRX_SEQ trxSeq,&#xd;		A.SUBJECT subject,&#xd;		A.NIK nik,&#xd;		A.POSITION_CODE positionCode,&#xd;		B.POSITION_NAME positionName,&#xd;		A.BRANCH_CODE branchCode,&#xd;		C.BRANCH_NAME branchName,&#xd;		A.DECISION_STS decisionSts,&#xd;                A.DECISION_DATE dicisionDate,&#xd;		A.REASON_LOG reasonLog,&#xd;		D.FULLNAME fullName&#xd;	FROM TRX_APPROVAL A&#xd;	LEFT JOIN MST_POSITION B&#xd;	ON A.POSITION_CODE = B.POSITION_CODE&#xd;	LEFT JOIN MST_BRANCH C&#xd;	ON A.BRANCH_CODE = C.BRANCH_CODE&#xd;	LEFT JOIN MST_EMPLOYEE D&#xd;	ON A.NIK = D.NIK&#xd;	WHERE A.TRX_CODE = :trxCode AND A.COMPANY_CODE = :companyCode&#xd;) a ORDER BY trxSeq ASC</sql>
      <result element="Entries" rowName="contents">
         <element column="trxSeq" name="trxSeq" xsdType="string"/>
         <element column="subject" name="subject" xsdType="string"/>
         <element column="nik" name="nik" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="decisionSts" name="decisionSts" xsdType="string"/>
         <element column="reasonLog" name="reasonLog" xsdType="string"/>
         <element column="fullName" name="fullName" xsdType="string"/>
         <element column="dicisionDate" name="dicisionDate" xsdType="string"/>
      </result>
      <param name="trxCode" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
   </query>
   <query id="printDateTrxSp" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @UPDATED_BY  VARCHAR(50) = :updatedBy&#xd;DECLARE @SP_NO  VARCHAR(50) = :spNo&#xd;DECLARE @PRINTED_DATE VARCHAR(30) = :printedDate&#xd;&#xd;IF(@PRINTED_DATE = '1900-01-01' OR @PRINTED_DATE = 'NULL')&#xd;BEGIN&#xd;	UPDATE TRX_SP SET&#xd;		PRINTED_DATE = GETDATE(),&#xd;		PRINTED_BY = @UPDATED_BY,&#xd;		UPDATED_BY = @UPDATED_BY,&#xd;		UPDATED_DATE = GETDATE()&#xd;	WHERE&#xd;		SP_NO = @SP_NO&#xd;END&#xd;ELSE&#xd;BEGIN&#xd;	UPDATE TRX_SP SET&#xd;		REPRINTED_COUNT = (SELECT ISNULL(MAX(REPRINTED_COUNT), 0) + 1 FROM TRX_SP WHERE SP_NO = @SP_NO),&#xd;		UPDATED_BY = @UPDATED_BY,&#xd;		UPDATED_DATE = GETDATE()&#xd;	WHERE&#xd;		SP_NO = @SP_NO&#xd;END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="spNo" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxTuMutasi" useConfig="collectiondso1">
      <sql>SELECT 1 as trxNo, 1 trxDate, 1 branchCode, 1 branchTo, 1 receivedDate, 1 picName, 1 picPositionName, 1 notes</sql>
      <result element="Entries" rowName="">
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchTo" name="branchTo" xsdType="string"/>
         <element column="receivedDate" name="receivedDate" xsdType="string"/>
         <element column="picName" name="picName" xsdType="string"/>
         <element column="picPositionName" name="picPositionName" xsdType="string"/>
         <element column="notes" name="notes" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxTuMutasi" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.TRX_NO trxNo,&#xd;		A.TRX_STS trxSts,&#xd;		--C.PARAM_DESCRIP trxStsName,&#xd;(select C.PARAM_DESCRIP from mst_global_param C (NOLOCK) where A.TRX_STS = C.PARAM_CODE AND C.CONDITION = 'MUTASI_STS' AND C.FLAG_ACTIVE = '1') trxStsName,&#xd;		A.TRX_DATE trxDate,&#xd;		A.BRANCH_FROM branchFrom,&#xd;		BF.BRANCH_NAME branchFromName,&#xd;		A.BRANCH_TO branchTo,&#xd;		BT.BRANCH_NAME branchToName,&#xd;		A.NOTES notes,&#xd;		A.PIC_CODE picCode,&#xd;		D.FULLNAME picName,&#xd;		A.PIC_POSITION picPosition,&#xd;		E.POSITION_NAME picPositionName,&#xd;		A.RECEIVED_DATE receivedDate,&#xd;		A.RECEIVED_BY receivedBy,&#xd;		F.FULLNAME receivedByName,&#xd;		A.RECEIVED_POSITION receivedPosition,&#xd;		G.POSITION_NAME receivedPositionName&#xd;	FROM TRX_TU_MUTASI_HDR A (NOLOCK)&#xd;	LEFT JOIN MST_BRANCH B (NOLOCK)&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BT (NOLOCK)&#xd;	ON A.BRANCH_TO = BT.BRANCH_CODE&#xd;	--LEFT JOIN MST_GLOBAL_PARAM C &#xd;	--ON A.TRX_STS = C.PARAM_CODE AND C.CONDITION = 'MUTASI_STS' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE D (NOLOCK)&#xd;	ON A.PIC_CODE = D.NIK&#xd;	LEFT JOIN MST_POSITION E (NOLOCK)&#xd;	ON A.PIC_POSITION = E.POSITION_CODE&#xd;	LEFT JOIN MST_EMPLOYEE F (NOLOCK)&#xd;	ON A.RECEIVED_BY = F.NIK&#xd;	LEFT JOIN MST_POSITION G (NOLOCK)&#xd;	ON A.RECEIVED_POSITION = G.POSITION_CODE&#xd;	LEFT JOIN MST_BRANCH BF (NOLOCK)&#xd;	ON A.BRANCH_FROM = BF.BRANCH_CODE&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxTuMutasi" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName, trxNo, trxSts, trxStsName, trxDate, branchFrom, branchFromName, branchTo, branchToName, notes, picCode, picName, picPosition, picPositionName, receivedDate, receivedBy, receivedByName,&#xd;receivedPosition, receivedPositionName FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.TRX_NO trxNo,&#xd;		A.TRX_STS trxSts,&#xd;		--C.PARAM_DESCRIP trxStsName,&#xd;(select C.PARAM_DESCRIP from mst_global_param C (NOLOCK) where A.TRX_STS = C.PARAM_CODE AND C.CONDITION = 'MUTASI_STS' AND C.FLAG_ACTIVE = '1') trxStsName,&#xd;		A.TRX_DATE trxDate,&#xd;		A.BRANCH_FROM branchFrom,&#xd;		BF.BRANCH_NAME branchFromName,&#xd;		A.BRANCH_TO branchTo,&#xd;		BT.BRANCH_NAME branchToName,&#xd;		A.NOTES notes,&#xd;		A.PIC_CODE picCode,&#xd;		D.FULLNAME picName,&#xd;		A.PIC_POSITION picPosition,&#xd;		E.POSITION_NAME picPositionName,&#xd;		A.RECEIVED_DATE receivedDate,&#xd;		A.RECEIVED_BY receivedBy,&#xd;		F.FULLNAME receivedByName,&#xd;		A.RECEIVED_POSITION receivedPosition,&#xd;		G.POSITION_NAME receivedPositionName&#xd;	FROM TRX_TU_MUTASI_HDR A (NOLOCK)&#xd;	LEFT JOIN MST_BRANCH B (NOLOCK)&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BT (NOLOCK)&#xd;	ON A.BRANCH_TO = BT.BRANCH_CODE&#xd;	--LEFT JOIN MST_GLOBAL_PARAM C &#xd;	--ON A.TRX_STS = C.PARAM_CODE AND C.CONDITION = 'MUTASI_STS' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE D (NOLOCK)&#xd;	ON A.PIC_CODE = D.NIK&#xd;	LEFT JOIN MST_POSITION E (NOLOCK)&#xd;	ON A.PIC_POSITION = E.POSITION_CODE&#xd;	LEFT JOIN MST_EMPLOYEE F (NOLOCK)&#xd;	ON A.RECEIVED_BY = F.NIK&#xd;	LEFT JOIN MST_POSITION G (NOLOCK)&#xd;	ON A.RECEIVED_POSITION = G.POSITION_CODE&#xd;	LEFT JOIN MST_BRANCH BF (NOLOCK)&#xd;	ON A.BRANCH_FROM = BF.BRANCH_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="branchTo" name="branchTo" xsdType="string"/>
         <element column="branchToName" name="branchToName" xsdType="string"/>
         <element column="notes" name="notes" xsdType="string"/>
         <element column="picCode" name="picCode" xsdType="string"/>
         <element column="picName" name="picName" xsdType="string"/>
         <element column="picPosition" name="picPosition" xsdType="string"/>
         <element column="picPositionName" name="picPositionName" xsdType="string"/>
         <element column="receivedDate" name="receivedDate" xsdType="string"/>
         <element column="receivedBy" name="receivedBy" xsdType="string"/>
         <element column="receivedByName" name="receivedByName" xsdType="string"/>
         <element column="receivedPosition" name="receivedPosition" xsdType="string"/>
         <element column="receivedPositionName" name="receivedPositionName" xsdType="string"/>
         <element column="trxSts" name="trxSts" xsdType="string"/>
         <element column="trxStsName" name="trxStsName" xsdType="string"/>
         <element column="branchFrom" name="branchFrom" xsdType="string"/>
         <element column="branchFromName" name="branchFromName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxTuMutasiHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_TU_MUTASI_HDR&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TRX_NO,&#xd;        TRX_STS,&#xd;        TRX_DATE,&#xd;		BRANCH_FROM,&#xd;        BRANCH_TO,&#xd;        NOTES,&#xd;        PIC_CODE,&#xd;        PIC_POSITION,&#xd;        RECEIVED_DATE,&#xd;        RECEIVED_BY,&#xd;        RECEIVED_POSITION,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :trxNo,&#xd;        :trxSts,&#xd;        :trxDate,&#xd;		:branchFrom,&#xd;        :branchTo,&#xd;        :notes,&#xd;        :picCode,&#xd;        :picPosition,&#xd;        :receivedDate,&#xd;        :receivedBy,&#xd;        :receivedPosition,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="trxDate" sqlType="STRING"/>
      <param name="branchTo" sqlType="STRING"/>
      <param name="notes" sqlType="STRING"/>
      <param name="picCode" sqlType="STRING"/>
      <param name="picPosition" sqlType="STRING"/>
      <param name="receivedDate" sqlType="STRING"/>
      <param name="receivedBy" sqlType="STRING"/>
      <param name="receivedPosition" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="trxSts" sqlType="STRING"/>
      <param name="branchFrom" sqlType="STRING"/>
   </query>
   <query id="insertTrxTuMutasiDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_TU_MUTASI_DTL&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TRX_NO,&#xd;        AGGR_NO,&#xd;        TU_DEPOSIT_NO,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :trxNo,&#xd;        :aggrNo,&#xd;        :tuDepositNo,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="deleteTrxTuMutasiDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @BRANCH_CODE varchar(10) = :branchCode&#xd;DECLARE @TRX_NO varchar(50) = :trxNo&#xd;&#xd;DELETE FROM TRX_TU_MUTASI_DTL&#xd;WHERE &#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        TRX_NO = @TRX_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
   </query>
   <query id="updateTrxTuMutasiHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @BRANCH_CODE varchar(10) = :branchCode&#xd;DECLARE @TRX_NO varchar(50) = :trxNo&#xd;&#xd;UPDATE TRX_TU_MUTASI_HDR SET&#xd;        TRX_STS = :trxSts,&#xd;        TRX_DATE = :trxDate,&#xd;        BRANCH_TO = :branchTo,&#xd;		BRANCH_FROM = :branchCodeFrom,&#xd;        NOTES = :notes,&#xd;        PIC_CODE = :picCode,&#xd;        PIC_POSITION = :picPosition,&#xd;        RECEIVED_DATE = :receivedDate,&#xd;        RECEIVED_BY = :receivedBy,&#xd;        RECEIVED_POSITION = :receivedPosition,&#xd;        UPDATED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        TRX_NO = @TRX_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="trxDate" sqlType="STRING"/>
      <param name="branchTo" sqlType="STRING"/>
      <param name="notes" sqlType="STRING"/>
      <param name="picCode" sqlType="STRING"/>
      <param name="picPosition" sqlType="STRING"/>
      <param name="receivedDate" sqlType="STRING"/>
      <param name="receivedBy" sqlType="STRING"/>
      <param name="receivedPosition" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="trxSts" sqlType="STRING"/>
      <param name="branchCodeFrom" optional="false" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNopol" useConfig="collectiondso1">
      <sql>SELECT 1 companyCode, 1 branchCode, 1 tuDepositNo, 1 aggrNo, 1 customerFullname, 1 nopol, 1 brandCode, 1 brandName, 1 categoryCode,1 categoryName, 1 typeCode, 1 typeName,&#xd;1 kindCode, 1 kindName, 1 modelCode, 1 modelName,1 colorName, 1 yearMfg, 1 chassisNo, 1 machineNo, 1 stnkName, 1 km, 1 stnkExpiredDate, 1 locReceiptCode,  1 locReceiptCodeName,  &#xd;1 locCode, 1 locCodeName, 1 sisaAngsuranPokok, 1 nilaiBiayaPenyelesaian, 1 perkiraanHargaJual,  1 bpkbNo, 1 arStsName, 1 subStsName, 1 penaltyTuValue, 1 tuCost, 1 priceValue</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="locReceiptCode" name="locReceiptCode" xsdType="string"/>
         <element column="locReceiptCodeName" name="locReceiptCodeName" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locCodeName" name="locCodeName" xsdType="string"/>
         <element column="sisaAngsuranPokok" name="sisaAngsuranPokok" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="bpkbNo" name="bpkbNo" xsdType="string"/>
         <element column="perkiraanHargaJual" name="perkiraanHargaJual" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="priceValue" name="priceValue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNopol" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		J.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.TU_DEPOSIT_DATE tuDepositDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.NOPOL nopol,&#xd;		C.BRAND_CODE brandCode,&#xd;		D.BRAND_NAME brandName,&#xd;		D.CATEGORY_CODE categoryCode,&#xd;		E.PARAM_DESCRIP categoryName,&#xd;		C.TYPE_CODE typeCode,&#xd;		F.TYPE_NAME typeName,&#xd;		F.KIND_CODE kindCode,&#xd;		G.KIND_NAME kindName,&#xd;		C.MODEL_CODE modelCode,&#xd;		H.MODEL_NAME modelName,&#xd;		I.COLOR_NAME colorName,&#xd;		C.YEAR_MFG yearMfg,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo,&#xd;		C.BPKB_NAME stnkName,&#xd;		A.KM km,&#xd;		A.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;		A.LOC_RECEIPT_CODE locReceiptCode,&#xd;		LRC.BRANCH_NAME locReceiptCodeName,&#xd;		A.LOC_CODE locCode,&#xd;		LC.BRANCH_NAME locCodeName,&#xd;		(A.BAL_PRINCIPAL_VALUE) as sisaAngsuranPokok,&#xd;		(A.TU_COST + A.PENALTY_TU_VALUE) as nilaiBiayaPenyelesaian,&#xd;		(A.BAL_PRINCIPAL_VALUE) + (A.TU_COST + A.PENALTY_TU_VALUE) as perkiraanHargaJual,&#xd;		C.BPKB_NO bpkbNo,&#xd;		K.TRX_NAME arStsName,&#xd;		K.NOTES subStsName,&#xd;		A.PENALTY_TU_VALUE penaltyTuValue,&#xd;		A.TU_COST tuCost,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PRICE_VALUE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as priceValue,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.PRICE_AREA_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketPriceAreaCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.MODEL_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketModelCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.NEW_USED&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketNewUsed,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.YEAR_MFG&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketYearMfg,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.EFFECTIVE_DATE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketEffectiveDate,&#xd;		A.DEPOSIT_STS depositSts,&#xd;		ISNULL(J.INVENTORY_STS, '') inventorySts,&#xd;		L.DSO_CODE dsoCode,&#xd;		M.BPKB_LOCATION bpkbLocation,&#xd;		N.PARAM_DESCRIP bpkbSts,&#xd;		(	CASE&#xd;				WHEN O.AGGR_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_TU_DEPOSIT A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN TRX_AGGR_ASSET C (nolock)&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND D (nolock)&#xd;	ON C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E (nolock)&#xd;	ON D.CATEGORY_CODE = E.PARAM_CODE AND E.CONDITION = 'CATEGORY_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE F (nolock)&#xd;	ON C.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND G (nolock)&#xd;	ON F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_MODEL H (nolock)&#xd;	ON C.MODEL_CODE = H.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR I (nolock)&#xd;	ON C.COLOR_CODE = I.COLOR_CODE&#xd;	LEFT JOIN TRX_INVENTORY_TU J (nolock)&#xd;	ON A.TU_DEPOSIT_NO = J.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH LRC (nolock)&#xd;	ON A.LOC_RECEIPT_CODE = LRC.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH LC (nolock)&#xd;	ON A.LOC_CODE = LC.BRANCH_CODE&#xd;	LEFT JOIN MST_AR_STS K (nolock)&#xd;	ON B.AR_STS = K.AR_STS AND ISNULL(B.SUB_STS, '') = ISNULL(K.SUB_STS, '')&#xd;	LEFT JOIN MST_BRANCH L (nolock)&#xd;	ON A.COMPANY_CODE = L.COMPANY_CODE AND A.BRANCH_CODE = L.BRANCH_CODE&#xd;	LEFT JOIN MST_BPKB M (nolock)&#xd;	ON B.COMPANY_CODE = M.COMPANY_CODE AND B.AGGR_NO = M.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM N (nolock)&#xd;	ON M.COMPANY_CODE = N.COMPANY_CODE AND M.BPKB_STS = N.PARAM_CODE AND N.CONDITION = 'BPKB_STS' AND N.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_DTL O (nolock)&#xd;	ON B.COMPANY_CODE = O.COMPANY_CODE AND B.AGGR_NO = O.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE SC (nolock)&#xd;	ON B.COMPANY_CODE = SC.COMPANY_CODE AND B.AGGR_NO = SC.AGGR_NO&#xd;	WHERE B.AR_STS != 'LN' AND ISNULL(SC.AGGR_NO, '') != ''&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNopol" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, tuDepositNo, tuDepositDate, aggrNo, customerFullname, nopol, brandCode, brandName, categoryCode, categoryName, typeCode, typeName,&#xd;kindCode, kindName, modelCode, modelName, colorName, yearMfg, chassisNo, machineNo, stnkName, km, stnkExpiredDate, locReceiptCode, locReceiptCodeName,  &#xd;locCode, locCodeName, sisaAngsuranPokok, nilaiBiayaPenyelesaian, perkiraanHargaJual, bpkbNo, arStsName, subStsName, penaltyTuValue, tuCost, priceValue, marketPriceAreaCode, marketModelCode, marketNewUsed, marketYearMfg, marketEffectiveDate, depositSts, inventorySts, dsoCode, bpkbSts, bpkbLocation, stsOutUnit FROM (&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		J.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.TU_DEPOSIT_DATE tuDepositDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.NOPOL nopol,&#xd;		C.BRAND_CODE brandCode,&#xd;		D.BRAND_NAME brandName,&#xd;		D.CATEGORY_CODE categoryCode,&#xd;		E.PARAM_DESCRIP categoryName,&#xd;		C.TYPE_CODE typeCode,&#xd;		F.TYPE_NAME typeName,&#xd;		F.KIND_CODE kindCode,&#xd;		G.KIND_NAME kindName,&#xd;		C.MODEL_CODE modelCode,&#xd;		H.MODEL_NAME modelName,&#xd;		I.COLOR_NAME colorName,&#xd;		C.YEAR_MFG yearMfg,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo,&#xd;		C.BPKB_NAME stnkName,&#xd;		A.KM km,&#xd;		A.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;		A.LOC_RECEIPT_CODE locReceiptCode,&#xd;		LRC.BRANCH_NAME locReceiptCodeName,&#xd;		A.LOC_CODE locCode,&#xd;		LC.BRANCH_NAME locCodeName,&#xd;		(A.BAL_PRINCIPAL_VALUE) as sisaAngsuranPokok,&#xd;		(A.TU_COST + A.PENALTY_TU_VALUE) as nilaiBiayaPenyelesaian,&#xd;		(A.BAL_PRINCIPAL_VALUE) + (A.TU_COST + A.PENALTY_TU_VALUE) as perkiraanHargaJual,&#xd;		C.BPKB_NO bpkbNo,&#xd;		K.TRX_NAME arStsName,&#xd;		K.NOTES subStsName,&#xd;		A.PENALTY_TU_VALUE penaltyTuValue,&#xd;		A.TU_COST tuCost,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PRICE_VALUE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as priceValue,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.PRICE_AREA_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketPriceAreaCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.MODEL_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketModelCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.NEW_USED&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketNewUsed,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.YEAR_MFG&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketYearMfg,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.EFFECTIVE_DATE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketEffectiveDate,&#xd;		A.DEPOSIT_STS depositSts,&#xd;		ISNULL(J.INVENTORY_STS, '') inventorySts,&#xd;		L.DSO_CODE dsoCode,&#xd;		M.BPKB_LOCATION bpkbLocation,&#xd;		N.PARAM_DESCRIP bpkbSts,&#xd;		(	CASE&#xd;				WHEN O.AGGR_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_TU_DEPOSIT A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN TRX_AGGR_ASSET C (nolock)&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND D (nolock)&#xd;	ON C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E (nolock)&#xd;	ON D.CATEGORY_CODE = E.PARAM_CODE AND E.CONDITION = 'CATEGORY_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE F (nolock)&#xd;	ON C.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND G (nolock)&#xd;	ON F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_MODEL H (nolock)&#xd;	ON C.MODEL_CODE = H.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR I (nolock)&#xd;	ON C.COLOR_CODE = I.COLOR_CODE&#xd;	LEFT JOIN TRX_INVENTORY_TU J (nolock)&#xd;	ON A.TU_DEPOSIT_NO = J.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH LRC (nolock)&#xd;	ON A.LOC_RECEIPT_CODE = LRC.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH LC (nolock)&#xd;	ON A.LOC_CODE = LC.BRANCH_CODE&#xd;	LEFT JOIN MST_AR_STS K (nolock)&#xd;	ON B.AR_STS = K.AR_STS AND ISNULL(B.SUB_STS, '') = ISNULL(K.SUB_STS, '')&#xd;	LEFT JOIN MST_BRANCH L (nolock)&#xd;	ON A.COMPANY_CODE = L.COMPANY_CODE AND A.BRANCH_CODE = L.BRANCH_CODE&#xd;	LEFT JOIN MST_BPKB M (nolock)&#xd;	ON B.COMPANY_CODE = M.COMPANY_CODE AND B.AGGR_NO = M.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM N (nolock)&#xd;	ON M.COMPANY_CODE = N.COMPANY_CODE AND M.BPKB_STS = N.PARAM_CODE AND N.CONDITION = 'BPKB_STS' AND N.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_DTL O (nolock)&#xd;	ON B.COMPANY_CODE = O.COMPANY_CODE AND B.AGGR_NO = O.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE SC (nolock)&#xd;	ON B.COMPANY_CODE = SC.COMPANY_CODE AND B.AGGR_NO = SC.AGGR_NO&#xd;	WHERE B.AR_STS != 'LN' AND ISNULL(SC.AGGR_NO, '') != ''&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="locReceiptCode" name="locReceiptCode" xsdType="string"/>
         <element column="locReceiptCodeName" name="locReceiptCodeName" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locCodeName" name="locCodeName" xsdType="string"/>
         <element column="sisaAngsuranPokok" name="sisaAngsuranPokok" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="bpkbNo" name="bpkbNo" xsdType="string"/>
         <element column="perkiraanHargaJual" name="perkiraanHargaJual" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="priceValue" name="priceValue" xsdType="string"/>
         <element column="marketPriceAreaCode" name="marketPriceAreaCode" xsdType="string"/>
         <element column="marketModelCode" name="marketModelCode" xsdType="string"/>
         <element column="marketNewUsed" name="marketNewUsed" xsdType="string"/>
         <element column="marketYearMfg" name="marketYearMfg" xsdType="string"/>
         <element column="marketEffectiveDate" name="marketEffectiveDate" xsdType="string"/>
         <element column="depositSts" name="depositSts" xsdType="string"/>
         <element column="inventorySts" name="inventorySts" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="bpkbSts" name="bpkbSts" xsdType="string"/>
         <element column="bpkbLocation" name="bpkbLocation" xsdType="string"/>
         <element column="stsOutUnit" name="stsOutUnit" xsdType="string"/>
         <element column="tuDepositDate" name="tuDepositDate" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnTrxTuMutasiDtl" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode, 1 trxNo, 1 branchCode, 1 aggrNo, 1 customerFullname, 1 nopol, 1 brandCode, 1 brandName, 1 categoryCode, 1 categoryName, 1 typeCode, 1 typeName,&#xd;1 kindCode, 1 kindName, 1 modelCode, 1 modelName, 1 colorName, 1 yearMfg, 1 chassisNo, 1 machineNo, 1 stnkName, 1 tuDepositNo</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxTuMutasiDtl" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TRX_NO trxNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.NOPOL nopol,&#xd;		C.BRAND_CODE brandCode,&#xd;		D.BRAND_NAME brandName,&#xd;		D.CATEGORY_CODE categoryCode,&#xd;		E.PARAM_DESCRIP categoryName,&#xd;		C.TYPE_CODE typeCode,&#xd;		F.TYPE_NAME typeName,&#xd;		F.KIND_CODE kindCode,&#xd;		G.KIND_NAME kindName,&#xd;		C.MODEL_CODE modelCode,&#xd;		H.MODEL_NAME modelName,&#xd;		I.COLOR_NAME colorName,&#xd;		C.YEAR_MFG yearMfg,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo,&#xd;		C.BPKB_NO stnkName,&#xd;		A.TU_DEPOSIT_NO tuDepositNo&#xd;	FROM TRX_TU_MUTASI_DTL A&#xd;	LEFT JOIN TRX_AGGR B&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET C&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND D&#xd;	ON C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E&#xd;	ON D.CATEGORY_CODE = E.PARAM_CODE AND E.CONDITION = 'CATEGORY_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE F&#xd;	ON C.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND G&#xd;	ON F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_MODEL H&#xd;	ON C.MODEL_CODE = H.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR I&#xd;	ON C.COLOR_CODE = I.COLOR_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxTuMutasiDtl" useConfig="collectiondso1">
      <sql>SELECT companyCode, trxNo, branchCode, aggrNo, customerFullname, nopol, brandCode, brandName, categoryCode, categoryName, typeCode, typeName,&#xd;kindCode, kindName, modelCode, modelName, colorName, yearMfg, chassisNo, machineNo, stnkName, tuDepositNo FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TRX_NO trxNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.NOPOL nopol,&#xd;		C.BRAND_CODE brandCode,&#xd;		D.BRAND_NAME brandName,&#xd;		D.CATEGORY_CODE categoryCode,&#xd;		E.PARAM_DESCRIP categoryName,&#xd;		C.TYPE_CODE typeCode,&#xd;		F.TYPE_NAME typeName,&#xd;		F.KIND_CODE kindCode,&#xd;		G.KIND_NAME kindName,&#xd;		C.MODEL_CODE modelCode,&#xd;		H.MODEL_NAME modelName,&#xd;		I.COLOR_NAME colorName,&#xd;		C.YEAR_MFG yearMfg,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo,&#xd;		C.BPKB_NO stnkName,&#xd;		A.TU_DEPOSIT_NO tuDepositNo&#xd;	FROM TRX_TU_MUTASI_DTL A&#xd;	LEFT JOIN TRX_AGGR B&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET C&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND D&#xd;	ON C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E&#xd;	ON D.CATEGORY_CODE = E.PARAM_CODE AND E.CONDITION = 'CATEGORY_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE F&#xd;	ON C.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND G&#xd;	ON F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_MODEL H&#xd;	ON C.MODEL_CODE = H.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR I&#xd;	ON C.COLOR_CODE = I.COLOR_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovNoTransaksi" useConfig="collectiondso1">
      <sql>SELECT TOP 1 trxNo, trxDate, branchName, notes, picName, jumlahUnit FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.TRX_NO trxNo,&#xd;		A.TRX_TYPE trxType,&#xd;		C.PARAM_DESCRIP trxTypeName,&#xd;		A.TRX_DATE trxDate,&#xd;		A.BRANCH_TO branchTo,&#xd;		BT.BRANCH_NAME branchToName,&#xd;		A.NOTES notes,&#xd;		A.PIC_CODE picCode,&#xd;		D.FULLNAME picName,&#xd;		A.PIC_POSITION picPosition,&#xd;		E.POSITION_NAME picPositionName,&#xd;		A.RECEIVED_DATE receivedDate,&#xd;		A.RECEIVED_BY receivedBy,&#xd;		F.FULLNAME receivedByName,&#xd;		A.RECEIVED_POSITION receivedPosition,&#xd;		G.POSITION_NAME receivedPositionName,&#xd;		A.APPV_STS appvSts,&#xd;		H.PARAM_DESCRIP appStsName,&#xd;		A.APPV_DATE appvDate,&#xd;		(&#xd;			SELECT COUNT(*) as total FROM TRX_TU_MUTASI_DTL WHERE COMPANY_CODE = A.COMPANY_CODE AND BRANCH_CODE = A.BRANCH_CODE AND TRX_NO = A.TRX_NO&#xd;		) as jumlahUnit&#xd;	FROM TRX_TU_MUTASI_HDR A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BT&#xd;	ON A.BRANCH_TO = BT.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.TRX_TYPE = C.PARAM_CODE AND C.CONDITION = 'MUTASI_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE D&#xd;	ON A.PIC_CODE = D.NIK&#xd;	LEFT JOIN MST_POSITION E&#xd;	ON A.PIC_POSITION = E.POSITION_CODE&#xd;	LEFT JOIN MST_EMPLOYEE F&#xd;	ON A.RECEIVED_BY = F.NIK&#xd;	LEFT JOIN MST_POSITION G&#xd;	ON A.RECEIVED_POSITION = G.POSITION_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM H&#xd;	ON A.APPV_STS = H.PARAM_CODE AND H.CONDITION = 'STATUS_APPROVAL' AND H.FLAG_ACTIVE = '1'&#xd;	WHERE A.TRX_TYPE = '1' AND A.APPV_STS = 'OPEN'&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="notes" name="notes" xsdType="string"/>
         <element column="picName" name="picName" xsdType="string"/>
         <element column="jumlahUnit" name="jumlahUnit" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNoTransaksi" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.TRX_NO trxNo,&#xd;		A.TRX_TYPE trxType,&#xd;		C.PARAM_DESCRIP trxTypeName,&#xd;		A.TRX_DATE trxDate,&#xd;		A.BRANCH_TO branchTo,&#xd;		BT.BRANCH_NAME branchToName,&#xd;		A.NOTES notes,&#xd;		A.PIC_CODE picCode,&#xd;		D.FULLNAME picName,&#xd;		A.PIC_POSITION picPosition,&#xd;		E.POSITION_NAME picPositionName,&#xd;		A.RECEIVED_DATE receivedDate,&#xd;		A.RECEIVED_BY receivedBy,&#xd;		F.FULLNAME receivedByName,&#xd;		A.RECEIVED_POSITION receivedPosition,&#xd;		G.POSITION_NAME receivedPositionName,&#xd;		A.APPV_STS appvSts,&#xd;		H.PARAM_DESCRIP appStsName,&#xd;		A.APPV_DATE appvDate,&#xd;		(&#xd;			SELECT COUNT(*) as total FROM TRX_TU_MUTASI_DTL WHERE COMPANY_CODE = A.COMPANY_CODE AND BRANCH_CODE = A.BRANCH_CODE AND TRX_NO = A.TRX_NO&#xd;		) as jumlahUnit&#xd;	FROM TRX_TU_MUTASI_HDR A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BT&#xd;	ON A.BRANCH_TO = BT.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.TRX_TYPE = C.PARAM_CODE AND C.CONDITION = 'MUTASI_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE D&#xd;	ON A.PIC_CODE = D.NIK&#xd;	LEFT JOIN MST_POSITION E&#xd;	ON A.PIC_POSITION = E.POSITION_CODE&#xd;	LEFT JOIN MST_EMPLOYEE F&#xd;	ON A.RECEIVED_BY = F.NIK&#xd;	LEFT JOIN MST_POSITION G&#xd;	ON A.RECEIVED_POSITION = G.POSITION_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM H&#xd;	ON A.APPV_STS = H.PARAM_CODE AND H.CONDITION = 'STATUS_APPROVAL' AND H.FLAG_ACTIVE = '1'&#xd;	WHERE A.TRX_TYPE = '1' AND A.APPV_STS = 'OPEN'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNoTransaksi" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName, trxNo, trxType, trxTypeName, trxDate, branchTo, branchToName, notes, picCode, picName, picPosition, picPositionName, receivedDate, receivedBy, receivedByName,&#xd;receivedPosition, receivedPositionName, appvSts, appStsName, appvDate, jumlahUnit FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.TRX_NO trxNo,&#xd;		A.TRX_TYPE trxType,&#xd;		C.PARAM_DESCRIP trxTypeName,&#xd;		A.TRX_DATE trxDate,&#xd;		A.BRANCH_TO branchTo,&#xd;		BT.BRANCH_NAME branchToName,&#xd;		A.NOTES notes,&#xd;		A.PIC_CODE picCode,&#xd;		D.FULLNAME picName,&#xd;		A.PIC_POSITION picPosition,&#xd;		E.POSITION_NAME picPositionName,&#xd;		A.RECEIVED_DATE receivedDate,&#xd;		A.RECEIVED_BY receivedBy,&#xd;		F.FULLNAME receivedByName,&#xd;		A.RECEIVED_POSITION receivedPosition,&#xd;		G.POSITION_NAME receivedPositionName,&#xd;		A.APPV_STS appvSts,&#xd;		H.PARAM_DESCRIP appStsName,&#xd;		A.APPV_DATE appvDate,&#xd;		(&#xd;			SELECT COUNT(*) as total FROM TRX_TU_MUTASI_DTL WHERE COMPANY_CODE = A.COMPANY_CODE AND BRANCH_CODE = A.BRANCH_CODE AND TRX_NO = A.TRX_NO&#xd;		) as jumlahUnit&#xd;	FROM TRX_TU_MUTASI_HDR A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH BT&#xd;	ON A.BRANCH_TO = BT.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.TRX_TYPE = C.PARAM_CODE AND C.CONDITION = 'MUTASI_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_EMPLOYEE D&#xd;	ON A.PIC_CODE = D.NIK&#xd;	LEFT JOIN MST_POSITION E&#xd;	ON A.PIC_POSITION = E.POSITION_CODE&#xd;	LEFT JOIN MST_EMPLOYEE F&#xd;	ON A.RECEIVED_BY = F.NIK&#xd;	LEFT JOIN MST_POSITION G&#xd;	ON A.RECEIVED_POSITION = G.POSITION_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM H&#xd;	ON A.APPV_STS = H.PARAM_CODE AND H.CONDITION = 'STATUS_APPROVAL' AND H.FLAG_ACTIVE = '1'&#xd;	WHERE A.TRX_TYPE = '1' AND A.APPV_STS = 'OPEN'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="trxType" name="trxType" xsdType="string"/>
         <element column="trxTypeName" name="trxTypeName" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="branchTo" name="branchTo" xsdType="string"/>
         <element column="branchToName" name="branchToName" xsdType="string"/>
         <element column="notes" name="notes" xsdType="string"/>
         <element column="picCode" name="picCode" xsdType="string"/>
         <element column="picName" name="picName" xsdType="string"/>
         <element column="picPosition" name="picPosition" xsdType="string"/>
         <element column="picPositionName" name="picPositionName" xsdType="string"/>
         <element column="receivedDate" name="receivedDate" xsdType="string"/>
         <element column="receivedBy" name="receivedBy" xsdType="string"/>
         <element column="receivedByName" name="receivedByName" xsdType="string"/>
         <element column="receivedPosition" name="receivedPosition" xsdType="string"/>
         <element column="receivedPositionName" name="receivedPositionName" xsdType="string"/>
         <element column="appvSts" name="appvSts" xsdType="string"/>
         <element column="appStsName" name="appStsName" xsdType="string"/>
         <element column="appvDate" name="appvDate" xsdType="string"/>
         <element column="jumlahUnit" name="jumlahUnit" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getTuSolvingDoc" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;DECLARE @TU_SOLVING_DATE date = :tuSolvingDate&#xd;&#xd;SELECT companyCode, branchCode, tuDepositNo, tuSolvingDate, documentCode, documentName, flagChoose FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.TU_SOLVING_DATE tuSolvingDate,&#xd;		A.DOCUMENT_CODE documentCode,&#xd;		B.DOCUMENT_NAME documentName,&#xd;		A.FLAG_CHOOSE flagChoose&#xd;	FROM TRX_TU_SOLVING_DOC A&#xd;	LEFT JOIN MST_DOCUMENT B&#xd;	ON A.DOCUMENT_CODE = B.DOCUMENT_CODE&#xd;	WHERE A.COMPANY_CODE = @COMPANY_CODE &#xd;	AND A.TU_DEPOSIT_NO = @TU_DEPOSIT_NO &#xd;	AND A.TU_SOLVING_DATE = @TU_SOLVING_DATE&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="tuSolvingDate" name="tuSolvingDate" xsdType="string"/>
         <element column="documentCode" name="documentCode" xsdType="string"/>
         <element column="documentName" name="documentName" xsdType="string"/>
         <element column="flagChoose" name="flagChoose" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxSell" useConfig="collectiondso1">
      <sql>SELECT 1 as sellNo, 1 sellDate, 1 sellTypeName, 1 paymentTypeName, 1 totUnit, 1 totBidder, 1 totHargaJual, 1 totSelling, 1 sellStsName</sql>
      <result element="Entries" rowName="">
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="sellDate" name="sellDate" xsdType="string"/>
         <element column="sellTypeName" name="sellTypeName" xsdType="string"/>
         <element column="paymentTypeName" name="paymentTypeName" xsdType="string"/>
         <element column="totUnit" name="totUnit" xsdType="string"/>
         <element column="totBidder" name="totBidder" xsdType="string"/>
         <element column="totHargaJual" name="totHargaJual" xsdType="string"/>
         <element column="totSelling" name="totSelling" xsdType="string"/>
         <element column="sellStsName" name="sellStsName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxSell" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT&#xd;        A.COMPANY_CODE companyCode,&#xd;        A.BRANCH_CODE branchCode,&#xd;        A.SELL_NO	 sellNo,&#xd;        A.SELL_DATE sellDate,&#xd;        A.SELL_TYPE sellType,&#xd;		--ST.PARAM_DESCRIP sellTypeName,&#xd;(select ST.PARAM_DESCRIP from MST_GLOBAL_PARAM ST (NOLOCK) where A.SELL_TYPE = ST.PARAM_CODE AND ST.CONDITION = 'SELL_TYPE' AND ST.FLAG_ACTIVE = '1') sellTypeName,&#xd;        A.PAYMENT_TYPE paymentType,&#xd;		--SPT.PARAM_DESCRIP paymentTypeName,&#xd;(select SPT.PARAM_DESCRIP from MST_GLOBAL_PARAM SPT (NOLOCK) where A.PAYMENT_TYPE = SPT.PARAM_CODE AND SPT.CONDITION = 'SELL_PAYMENT_TYPE' AND SPT.FLAG_ACTIVE = '1') paymentTypeName,&#xd;        A.EXPIRED_DATE expiredDate,&#xd;        A.TOT_UNIT totUnit,&#xd;        A.TOT_BIDDER totBidder,&#xd;        A.TOT_OSP totOsp,&#xd;        A.TOT_PENALTY_TU totPenaltyTu,&#xd;        A.TOT_COST_TU totCostTu,&#xd;		(A.TOT_OSP+A.TOT_PENALTY_TU+A.TOT_COST_TU) as totHargaJual,&#xd;        A.TOT_SELLING totSelling,&#xd;        A.TOT_SELL_LOSS totSellLoss,&#xd;        A.APPV_DATE appvDate,&#xd;        A.CANCEL_DATE cancelDate,&#xd;        A.VOUCHER_NO voucherNo,&#xd;        A.VOUCHER_DATE voucherDate,&#xd;        A.SELL_STS sellSts,&#xd;		--SS.PARAM_DESCRIP sellStsName,&#xd;(select SS.PARAM_DESCRIP from MST_GLOBAL_PARAM SS (NOLOCK) where A.SELL_STS = SS.PARAM_CODE AND SS.CONDITION = 'SELL_STS' AND SS.FLAG_ACTIVE = '1') sellStsName,&#xd;		A.CREATED_DATE createdDate,&#xd;		(	CASE&#xd;				WHEN OT.REFF_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_SELL_HDR A (NOLOCK)&#xd;	--LEFT JOIN MST_GLOBAL_PARAM ST&#xd;	--ON A.SELL_TYPE = ST.PARAM_CODE AND ST.CONDITION = 'SELL_TYPE' AND ST.FLAG_ACTIVE = '1'&#xd;	--LEFT JOIN MST_GLOBAL_PARAM SPT&#xd;	--ON A.PAYMENT_TYPE = SPT.PARAM_CODE AND SPT.CONDITION = 'SELL_PAYMENT_TYPE' AND SPT.FLAG_ACTIVE = '1'&#xd;	--LEFT JOIN MST_GLOBAL_PARAM SS&#xd;	--ON A.SELL_STS = SS.PARAM_CODE AND SS.CONDITION = 'SELL_STS' AND SS.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_HDR OT (NOLOCK)&#xd;	ON A.COMPANY_CODE = OT.COMPANY_CODE AND A.SELL_NO = OT.REFF_NO&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxSell" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, sellNo, sellDate, sellType, sellTypeName, paymentType, paymentTypeName, expiredDate, totUnit, totBidder, totOsp, totPenaltyTu, totCostTu,  &#xd;totHargaJual, totSelling, totSellLoss, appvDate, cancelDate, voucherNo, voucherDate, sellSts, sellStsName, createdDate, stsOutUnit FROM (&#xd;	SELECT&#xd;        A.COMPANY_CODE companyCode,&#xd;        A.BRANCH_CODE branchCode,&#xd;        A.SELL_NO	 sellNo,&#xd;        A.SELL_DATE sellDate,&#xd;        A.SELL_TYPE sellType,&#xd;		--ST.PARAM_DESCRIP sellTypeName,&#xd;(select ST.PARAM_DESCRIP from MST_GLOBAL_PARAM ST (NOLOCK) where A.SELL_TYPE = ST.PARAM_CODE AND ST.CONDITION = 'SELL_TYPE' AND ST.FLAG_ACTIVE = '1') sellTypeName,&#xd;        A.PAYMENT_TYPE paymentType,&#xd;		--SPT.PARAM_DESCRIP paymentTypeName,&#xd;(select SPT.PARAM_DESCRIP from MST_GLOBAL_PARAM SPT (NOLOCK) where A.PAYMENT_TYPE = SPT.PARAM_CODE AND SPT.CONDITION = 'SELL_PAYMENT_TYPE' AND SPT.FLAG_ACTIVE = '1') paymentTypeName,&#xd;        A.EXPIRED_DATE expiredDate,&#xd;        A.TOT_UNIT totUnit,&#xd;        A.TOT_BIDDER totBidder,&#xd;        A.TOT_OSP totOsp,&#xd;        A.TOT_PENALTY_TU totPenaltyTu,&#xd;        A.TOT_COST_TU totCostTu,&#xd;		(A.TOT_OSP+A.TOT_PENALTY_TU+A.TOT_COST_TU) as totHargaJual,&#xd;        A.TOT_SELLING totSelling,&#xd;        A.TOT_SELL_LOSS totSellLoss,&#xd;        A.APPV_DATE appvDate,&#xd;        A.CANCEL_DATE cancelDate,&#xd;        A.VOUCHER_NO voucherNo,&#xd;        A.VOUCHER_DATE voucherDate,&#xd;        A.SELL_STS sellSts,&#xd;		--SS.PARAM_DESCRIP sellStsName,&#xd;(select SS.PARAM_DESCRIP from MST_GLOBAL_PARAM SS (NOLOCK) where A.SELL_STS = SS.PARAM_CODE AND SS.CONDITION = 'SELL_STS' AND SS.FLAG_ACTIVE = '1') sellStsName,&#xd;		A.CREATED_DATE createdDate,&#xd;		(	CASE&#xd;				WHEN OT.REFF_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_SELL_HDR A (NOLOCK)&#xd;	--LEFT JOIN MST_GLOBAL_PARAM ST&#xd;	--ON A.SELL_TYPE = ST.PARAM_CODE AND ST.CONDITION = 'SELL_TYPE' AND ST.FLAG_ACTIVE = '1'&#xd;	--LEFT JOIN MST_GLOBAL_PARAM SPT&#xd;	--ON A.PAYMENT_TYPE = SPT.PARAM_CODE AND SPT.CONDITION = 'SELL_PAYMENT_TYPE' AND SPT.FLAG_ACTIVE = '1'&#xd;	--LEFT JOIN MST_GLOBAL_PARAM SS&#xd;	--ON A.SELL_STS = SS.PARAM_CODE AND SS.CONDITION = 'SELL_STS' AND SS.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_HDR OT (NOLOCK)&#xd;	ON A.COMPANY_CODE = OT.COMPANY_CODE AND A.SELL_NO = OT.REFF_NO&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="sellDate" name="sellDate" xsdType="string"/>
         <element column="sellType" name="sellType" xsdType="string"/>
         <element column="sellTypeName" name="sellTypeName" xsdType="string"/>
         <element column="paymentType" name="paymentType" xsdType="string"/>
         <element column="paymentTypeName" name="paymentTypeName" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="totUnit" name="totUnit" xsdType="string"/>
         <element column="totBidder" name="totBidder" xsdType="string"/>
         <element column="totOsp" name="totOsp" xsdType="string"/>
         <element column="totPenaltyTu" name="totPenaltyTu" xsdType="string"/>
         <element column="totCostTu" name="totCostTu" xsdType="string"/>
         <element column="totHargaJual" name="totHargaJual" xsdType="string"/>
         <element column="totSelling" name="totSelling" xsdType="string"/>
         <element column="totSellLoss" name="totSellLoss" xsdType="string"/>
         <element column="sellSts" name="sellSts" xsdType="string"/>
         <element column="sellStsName" name="sellStsName" xsdType="string"/>
         <element column="appvDate" name="appvDate" xsdType="string"/>
         <element column="cancelDate" name="cancelDate" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="voucherDate" name="voucherDate" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="stsOutUnit" name="stsOutUnit" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxSellHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_SELL_HDR&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        SELL_NO,&#xd;        SELL_DATE,&#xd;        SELL_TYPE,&#xd;        PAYMENT_TYPE,&#xd;        EXPIRED_DATE,&#xd;        TOT_UNIT,&#xd;        TOT_BIDDER,&#xd;        TOT_OSP,&#xd;        TOT_PENALTY_TU,&#xd;        TOT_COST_TU,&#xd;        TOT_SELLING,&#xd;        TOT_SELL_LOSS,&#xd;        APPV_DATE,&#xd;        CANCEL_DATE,&#xd;        VOUCHER_NO,&#xd;        VOUCHER_DATE,&#xd;        SELL_STS,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :sellNo,&#xd;        GETDATE(),&#xd;        :sellType,&#xd;        :paymentType,&#xd;        :expiredDate,&#xd;        :totUnit,&#xd;        :totBidder,&#xd;        :totOsp,&#xd;        :totPenaltyTu,&#xd;        :totCostTu,&#xd;        :totSelling,&#xd;        :totSellLoss,&#xd;        :appvDate,&#xd;        :cancelDate,&#xd;        :voucherNo,&#xd;        :voucherDate,&#xd;        :sellSts,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="sellType" sqlType="STRING"/>
      <param name="paymentType" sqlType="STRING"/>
      <param name="expiredDate" sqlType="STRING"/>
      <param name="totUnit" sqlType="STRING"/>
      <param name="totBidder" sqlType="STRING"/>
      <param name="totOsp" sqlType="STRING"/>
      <param name="totPenaltyTu" sqlType="STRING"/>
      <param name="totCostTu" sqlType="STRING"/>
      <param name="totSelling" sqlType="STRING"/>
      <param name="totSellLoss" sqlType="STRING"/>
      <param name="appvDate" sqlType="STRING"/>
      <param name="cancelDate" sqlType="STRING"/>
      <param name="voucherNo" sqlType="STRING"/>
      <param name="voucherDate" sqlType="STRING"/>
      <param name="sellSts" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="insertTrxSellUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_SELL_UNIT&#xd;(&#xd;        BRANCH_CODE,&#xd;        COMPANY_CODE,&#xd;        SELL_NO,&#xd;        AGGR_NO,&#xd;        TU_DEPOSIT_NO,&#xd;		MARKET_PRICE_AREA_CODE,&#xd;		MARKET_MODEL_CODE,&#xd;		MARKET_NEW_USED,&#xd;		MARKET_YEAR_MFG,&#xd;		MARKET_EFFECTIVE_DATE,&#xd;        MARKET_PRICE,&#xd;        OSP,&#xd;        PENALTY_TU,&#xd;        COST_TU,&#xd;        SELLING,&#xd;        VEHC_OUT_DATE,&#xd;        SELL_LOSS,&#xd;        VEHC_OUT_BY,&#xd;        FLAG_ACTIVE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :branchCode,&#xd;        :companyCode,&#xd;        :sellNo,&#xd;        :aggrNo,&#xd;        :tuDepositNo,&#xd;		:marketPriceAreaCode,&#xd;		:marketModelCode,&#xd;		:marketNewUsed,&#xd;		:marketYearMfg,&#xd;		:marketEffectiveDate,&#xd;        :marketPrice,&#xd;        :osp,&#xd;        :penaltyTu,&#xd;        :costTu,&#xd;        :selling,&#xd;        :vehcOutDate,&#xd;        :sellLoss,&#xd;        :vehcOutBy,&#xd;        :flagActive,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="branchCode" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="marketPrice" sqlType="STRING"/>
      <param name="osp" sqlType="STRING"/>
      <param name="penaltyTu" sqlType="STRING"/>
      <param name="costTu" sqlType="STRING"/>
      <param name="selling" sqlType="STRING"/>
      <param name="vehcOutDate" sqlType="STRING"/>
      <param name="sellLoss" sqlType="STRING"/>
      <param name="vehcOutBy" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="marketPriceAreaCode" sqlType="STRING"/>
      <param name="marketModelCode" sqlType="STRING"/>
      <param name="marketNewUsed" sqlType="STRING"/>
      <param name="marketYearMfg" sqlType="STRING"/>
      <param name="marketEffectiveDate" sqlType="STRING"/>
   </query>
   <query id="insertTrxSellBidder" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE  VARCHAR(50) = :companyCode&#xd;DECLARE @BRANCH_CODE  VARCHAR(50) = :branchCode&#xd;DECLARE @SELL_NO  VARCHAR(50) = :sellNo&#xd;INSERT INTO TRX_SELL_BIDDER&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        SELL_NO,&#xd;        SEQ_NO,&#xd;        CUSTOMER_FULLNAME,&#xd;        DATE_BIDDER,&#xd;        ID_TYPE,&#xd;        ID_NO,&#xd;        ADDRESS,&#xd;        RT,&#xd;        RW,&#xd;        HP_NO,&#xd;        VILLAGE_CODE,&#xd;        AREA_CODE_PHONE1,&#xd;        PHONE_NO1,&#xd;        AREA_CODE_PHONE2,&#xd;        PHONE_NO2,&#xd;        SELLING,&#xd;        WINNER_STS,&#xd;        FLAG_ACTIVE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        @COMPANY_CODE,&#xd;        @BRANCH_CODE,&#xd;        @SELL_NO,&#xd;        (SELECT ISNULL(MAX(SEQ_NO), 0) + 1 FROM TRX_SELL_BIDDER WHERE COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE AND SELL_NO = @SELL_NO),&#xd;        :customerFullname,&#xd;        :dateBidder,&#xd;        :idType,&#xd;        :idNo,&#xd;        :address,&#xd;        :rt,&#xd;        :rw,&#xd;        :hpNo,&#xd;        :villageCode,&#xd;        :areaCodePhone1,&#xd;        :phoneNo1,&#xd;        :areaCodePhone2,&#xd;        :phoneNo2,&#xd;        :selling,&#xd;        :winnerSts,&#xd;        :flagActive,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="customerFullname" sqlType="STRING"/>
      <param name="dateBidder" sqlType="STRING"/>
      <param name="idType" sqlType="STRING"/>
      <param name="idNo" sqlType="STRING"/>
      <param name="address" sqlType="STRING"/>
      <param name="rt" sqlType="STRING"/>
      <param name="rw" sqlType="STRING"/>
      <param name="hpNo" sqlType="STRING"/>
      <param name="villageCode" sqlType="STRING"/>
      <param name="areaCodePhone1" sqlType="STRING"/>
      <param name="phoneNo1" sqlType="STRING"/>
      <param name="areaCodePhone2" sqlType="STRING"/>
      <param name="phoneNo2" sqlType="STRING"/>
      <param name="selling" sqlType="STRING"/>
      <param name="winnerSts" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="updateTrxSellHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @SELL_NO varchar(50) = :sellNo&#xd;&#xd;UPDATE TRX_SELL_HDR SET&#xd;        SELL_TYPE = :sellType,&#xd;        PAYMENT_TYPE = :paymentType,&#xd;        TOT_UNIT = :totUnit,&#xd;        TOT_BIDDER = :totBidder ,&#xd;        TOT_OSP = :totOsp,&#xd;        TOT_PENALTY_TU = :totPenaltyTu,&#xd;        TOT_COST_TU = :totCostTu,&#xd;        TOT_SELLING = :totSelling,&#xd;        TOT_SELL_LOSS = :totSellLoss,&#xd;        SELL_STS = :sellSts,&#xd;        APPV_DATE = :appvDate,&#xd;        UPDATE_BY = :updateBy,&#xd;        UPDATE_DATE = GETDATE()&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        SELL_NO = @SELL_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sellType" sqlType="STRING"/>
      <param name="paymentType" sqlType="STRING"/>
      <param name="totUnit" sqlType="STRING"/>
      <param name="totBidder" sqlType="STRING"/>
      <param name="totOsp" sqlType="STRING"/>
      <param name="totPenaltyTu" sqlType="STRING"/>
      <param name="totCostTu" sqlType="STRING"/>
      <param name="totSelling" sqlType="STRING"/>
      <param name="totSellLoss" sqlType="STRING"/>
      <param name="sellSts" sqlType="STRING"/>
      <param name="appvDate" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="updateBy" optional="false" sqlType="STRING"/>
   </query>
   <query id="updateTrxSellBidder" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @SELL_NO varchar(50) = :sellNo&#xd;declare @SEQ_NO numeric(3,0) = :seqNo&#xd;&#xd;UPDATE TRX_SELL_BIDDER SET&#xd;        CUSTOMER_FULLNAME = :customerFullname,&#xd;        DATE_BIDDER = :dateBidder,&#xd;        ID_TYPE = :idType,&#xd;        ID_NO = :idNo,&#xd;        ADDRESS = :address,&#xd;        RT = :rt,&#xd;        RW = :rw,&#xd;        VILLAGE_CODE = :villageCode,&#xd;        HP_NO = :hpNo,&#xd;        AREA_CODE_PHONE1 = :areaCodePhone1,&#xd;        PHONE_NO1 = :phoneNo1,&#xd;        AREA_CODE_PHONE2 = :areaCodePhone2,&#xd;        PHONE_NO2 = :phoneNo2,&#xd;        SELLING = :selling,&#xd;        WINNER_STS = :winnerSts,&#xd;        FLAG_ACTIVE = :flagActive,&#xd;        UPDATE_BY = :updateBy,&#xd;        UPDATE_DATE = GETDATE()&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        SELL_NO = @SELL_NO AND&#xd;        SEQ_NO = @SEQ_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="customerFullname" sqlType="STRING"/>
      <param name="dateBidder" sqlType="STRING"/>
      <param name="idType" sqlType="STRING"/>
      <param name="idNo" sqlType="STRING"/>
      <param name="address" sqlType="STRING"/>
      <param name="rt" sqlType="STRING"/>
      <param name="rw" sqlType="STRING"/>
      <param name="villageCode" sqlType="STRING"/>
      <param name="hpNo" sqlType="STRING"/>
      <param name="areaCodePhone1" sqlType="STRING"/>
      <param name="phoneNo1" sqlType="STRING"/>
      <param name="areaCodePhone2" sqlType="STRING"/>
      <param name="phoneNo2" sqlType="STRING"/>
      <param name="selling" sqlType="STRING"/>
      <param name="winnerSts" sqlType="STRING"/>
      <param name="flagActive" sqlType="STRING"/>
      <param name="updateBy" optional="false" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="seqNo" sqlType="STRING"/>
   </query>
   <query id="hapusTrxSellUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @SELL_NO varchar(50) = :sellNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;UPDATE TRX_SELL_UNIT SET&#xd;        FLAG_ACTIVE = '0',&#xd;        UPDATE_BY = :updateBy,&#xd;        UPDATE_DATE = GETDATE()&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        SELL_NO = @SELL_NO AND&#xd;        AGGR_NO = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="updateBy" optional="false" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="hapusTrxSellBidder" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @SELL_NO varchar(50) = :sellNo&#xd;declare @SEQ_NO numeric(3,0) = :seqNo&#xd;&#xd;UPDATE TRX_SELL_BIDDER SET&#xd;        FLAG_ACTIVE = '0',&#xd;        UPDATE_BY = :updateBy,&#xd;        UPDATE_DATE = GETDATE()&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        SELL_NO = @SELL_NO AND&#xd;        SEQ_NO = @SEQ_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="updateBy" optional="false" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="seqNo" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxSellBidder" useConfig="collectiondso1">
      <sql>SELECT TOP 1 companyCode, branchCode, sellNo, seqNo, customerFullname, dateBidder, idType, idTypeName, idNo, address, rt, rw, hpNo, villageCode,&#xd;	villageName, zipCode, subdistrictName, cityName, provinceName, areaCodePhone1, phoneNo1, areaCodePhone2, phoneNo2, selling, winnerSts, flagActive, totalHargaJual, selisih, totalSisaAngsuranPokok, totalBiayaPenyelesaian, flagActiveBidder FROM (&#xd;	SELECT TOP 1 companyCode, branchCode, sellNo, seqNo, customerFullname, dateBidder, idType, idTypeName, idNo, address, rt, rw, hpNo, villageCode,&#xd;	villageName, zipCode, subdistrictName, cityName, provinceName, areaCodePhone1, phoneNo1, areaCodePhone2, phoneNo2, selling, winnerSts, flagActive, totalHargaJual, (selling - totalHargaJual) as selisih, totalSisaAngsuranPokok, totalBiayaPenyelesaian, flagActiveBidder FROM (&#xd;		SELECT&#xd;				A.COMPANY_CODE companyCode,&#xd;				A.BRANCH_CODE branchCode,&#xd;				A.SELL_NO sellNo,&#xd;				A.SEQ_NO seqNo,&#xd;				A.CUSTOMER_FULLNAME customerFullname,&#xd;				A.DATE_BIDDER dateBidder,&#xd;				A.ID_TYPE idType,&#xd;				IT.PARAM_DESCRIP idTypeName,&#xd;				A.ID_NO idNo,&#xd;				A.ADDRESS address,&#xd;				A.RT rt,&#xd;				A.RW rw,&#xd;				A.HP_NO hpNo,&#xd;				A.VILLAGE_CODE villageCode,&#xd;				B.VILLAGE_NAME villageName,&#xd;				B.ZIPCODE  zipCode,&#xd;				C.SUBDISTRICT_NAME subdistrictName,&#xd;				D.CITY_NAME cityName,&#xd;				E.PROVINCE_NAME provinceName,&#xd;				A.AREA_CODE_PHONE1 areaCodePhone1,&#xd;				A.PHONE_NO1 phoneNo1,&#xd;				A.AREA_CODE_PHONE2 areaCodePhone2,&#xd;				A.PHONE_NO2 phoneNo2,&#xd;				A.SELLING selling,&#xd;				A.WINNER_STS winnerSts,&#xd;				A.FLAG_ACTIVE flagActive,&#xd;				(&#xd;					SELECT &#xd;						(SUM(OSP)+SUM(PENALTY_TU)+SUM(COST_TU)) as totalHargaJual&#xd;					FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;				) as totalHargaJual,&#xd;				(&#xd;					SELECT &#xd;						SUM(OSP) as totalSisaAngsuranPokok&#xd;					FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;				) as totalSisaAngsuranPokok,&#xd;				(&#xd;					SELECT &#xd;						(SUM(PENALTY_TU)+SUM(COST_TU)) as totalBiayaPenyelesaian&#xd;					FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;				) as totalBiayaPenyelesaian,&#xd;				A.FLAG_ACTIVE flagActiveBidder&#xd;		FROM TRX_SELL_BIDDER A&#xd;		LEFT JOIN MST_GLOBAL_PARAM IT&#xd;		ON A.ID_TYPE = IT.PARAM_CODE AND IT.CONDITION = 'ID_TYPE' AND IT.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_VILLAGE B&#xd;		ON A.VILLAGE_CODE = B.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT C&#xd;		ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY D&#xd;		ON B.CITY_CODE = D.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE E&#xd;		ON B.PROVINCE_CODE = E.PROVINCE_CODE&#xd;	) a&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="dateBidder" name="dateBidder" xsdType="string"/>
         <element column="idType" name="idType" xsdType="string"/>
         <element column="idTypeName" name="idTypeName" xsdType="string"/>
         <element column="idNo" name="idNo" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="hpNo" name="hpNo" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="areaCodePhone1" name="areaCodePhone1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="areaCodePhone2" name="areaCodePhone2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="selling" name="selling" xsdType="string"/>
         <element column="winnerSts" name="winnerSts" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="totalHargaJual" name="totalHargaJual" xsdType="string"/>
         <element column="selisih" name="selisih" xsdType="string"/>
         <element column="totalSisaAngsuranPokok" name="totalSisaAngsuranPokok" xsdType="string"/>
         <element column="totalBiayaPenyelesaian" name="totalBiayaPenyelesaian" xsdType="string"/>
         <element column="flagActiveBidder" name="flagActiveBidder" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxSellBidder" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.SELL_NO sellNo,&#xd;			A.SEQ_NO seqNo,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			A.DATE_BIDDER dateBidder,&#xd;			A.ID_TYPE idType,&#xd;			IT.PARAM_DESCRIP idTypeName,&#xd;			A.ID_NO idNo,&#xd;			A.ADDRESS address,&#xd;			A.RT rt,&#xd;			A.RW rw,&#xd;			A.HP_NO hpNo,&#xd;			A.VILLAGE_CODE villageCode,&#xd;			B.VILLAGE_NAME villageName,&#xd;			B.ZIPCODE  zipCode,&#xd;			C.SUBDISTRICT_NAME subdistrictName,&#xd;			D.CITY_NAME cityName,&#xd;			E.PROVINCE_NAME provinceName,&#xd;			A.AREA_CODE_PHONE1 areaCodePhone1,&#xd;			A.PHONE_NO1 phoneNo1,&#xd;			A.AREA_CODE_PHONE2 areaCodePhone2,&#xd;			A.PHONE_NO2 phoneNo2,&#xd;			A.SELLING selling,&#xd;			A.WINNER_STS winnerSts,&#xd;			A.FLAG_ACTIVE flagActive,&#xd;			(&#xd;				SELECT &#xd;					(SUM(OSP)+SUM(PENALTY_TU)+SUM(COST_TU)) as totalHargaJual&#xd;				FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;			) as totalHargaJual,&#xd;			(&#xd;				SELECT &#xd;					SUM(OSP) as totalSisaAngsuranPokok&#xd;				FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;			) as totalSisaAngsuranPokok,&#xd;			(&#xd;				SELECT &#xd;					(SUM(PENALTY_TU)+SUM(COST_TU)) as totalBiayaPenyelesaian&#xd;				FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;			) as totalBiayaPenyelesaian,&#xd;			A.FLAG_ACTIVE flagActiveBidder&#xd;	FROM TRX_SELL_BIDDER A&#xd;	LEFT JOIN MST_GLOBAL_PARAM IT&#xd;	ON A.ID_TYPE = IT.PARAM_CODE AND IT.CONDITION = 'ID_TYPE' AND IT.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_VILLAGE B&#xd;	ON A.VILLAGE_CODE = B.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT C&#xd;	ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY D&#xd;	ON B.CITY_CODE = D.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE E&#xd;	ON B.PROVINCE_CODE = E.PROVINCE_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxSellBidder" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, sellNo, seqNo, customerFullname, dateBidder, idType, idTypeName, idNo, address, rt, rw, hpNo, villageCode,&#xd;	villageName, zipCode, subdistrictName, cityName, provinceName, areaCodePhone1, phoneNo1, areaCodePhone2, phoneNo2, selling, winnerSts, flagActive, totalHargaJual, selisih, totalSisaAngsuranPokok, totalBiayaPenyelesaian, flagActiveBidder FROM (&#xd;	SELECT companyCode, branchCode, sellNo, seqNo, customerFullname, dateBidder, idType, idTypeName, idNo, address, rt, rw, hpNo, villageCode,&#xd;	villageName, zipCode, subdistrictName, cityName, provinceName, areaCodePhone1, phoneNo1, areaCodePhone2, phoneNo2, selling, winnerSts, flagActive, totalHargaJual, (selling - totalHargaJual) as selisih, totalSisaAngsuranPokok, totalBiayaPenyelesaian, flagActiveBidder FROM (&#xd;		SELECT&#xd;				A.COMPANY_CODE companyCode,&#xd;				A.BRANCH_CODE branchCode,&#xd;				A.SELL_NO sellNo,&#xd;				A.SEQ_NO seqNo,&#xd;				A.CUSTOMER_FULLNAME customerFullname,&#xd;				A.DATE_BIDDER dateBidder,&#xd;				A.ID_TYPE idType,&#xd;				IT.PARAM_DESCRIP idTypeName,&#xd;				A.ID_NO idNo,&#xd;				A.ADDRESS address,&#xd;				A.RT rt,&#xd;				A.RW rw,&#xd;				A.HP_NO hpNo,&#xd;				A.VILLAGE_CODE villageCode,&#xd;				B.VILLAGE_NAME villageName,&#xd;				B.ZIPCODE  zipCode,&#xd;				C.SUBDISTRICT_NAME subdistrictName,&#xd;				D.CITY_NAME cityName,&#xd;				E.PROVINCE_NAME provinceName,&#xd;				A.AREA_CODE_PHONE1 areaCodePhone1,&#xd;				A.PHONE_NO1 phoneNo1,&#xd;				A.AREA_CODE_PHONE2 areaCodePhone2,&#xd;				A.PHONE_NO2 phoneNo2,&#xd;				A.SELLING selling,&#xd;				A.WINNER_STS winnerSts,&#xd;				A.FLAG_ACTIVE flagActive,&#xd;				(&#xd;					SELECT &#xd;						(SUM(OSP)+SUM(PENALTY_TU)+SUM(COST_TU)) as totalHargaJual&#xd;					FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;				) as totalHargaJual,&#xd;				(&#xd;					SELECT &#xd;						SUM(OSP) as totalSisaAngsuranPokok&#xd;					FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;				) as totalSisaAngsuranPokok,&#xd;				(&#xd;					SELECT &#xd;						(SUM(PENALTY_TU)+SUM(COST_TU)) as totalBiayaPenyelesaian&#xd;					FROM TRX_SELL_UNIT WHERE COMPANY_CODE = A.COMPANY_CODE AND SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1'&#xd;				) as totalBiayaPenyelesaian,&#xd;				A.FLAG_ACTIVE flagActiveBidder&#xd;		FROM TRX_SELL_BIDDER A&#xd;		LEFT JOIN MST_GLOBAL_PARAM IT&#xd;		ON A.ID_TYPE = IT.PARAM_CODE AND IT.CONDITION = 'ID_TYPE' AND IT.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_VILLAGE B&#xd;		ON A.VILLAGE_CODE = B.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT C&#xd;		ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY D&#xd;		ON B.CITY_CODE = D.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE E&#xd;		ON B.PROVINCE_CODE = E.PROVINCE_CODE&#xd;	) a &#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="dateBidder" name="dateBidder" xsdType="string"/>
         <element column="idType" name="idType" xsdType="string"/>
         <element column="idTypeName" name="idTypeName" xsdType="string"/>
         <element column="idNo" name="idNo" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="hpNo" name="hpNo" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="areaCodePhone1" name="areaCodePhone1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="areaCodePhone2" name="areaCodePhone2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="selling" name="selling" xsdType="string"/>
         <element column="winnerSts" name="winnerSts" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="totalHargaJual" name="totalHargaJual" xsdType="string"/>
         <element column="selisih" name="selisih" xsdType="string"/>
         <element column="totalSisaAngsuranPokok" name="totalSisaAngsuranPokok" xsdType="string"/>
         <element column="totalBiayaPenyelesaian" name="totalBiayaPenyelesaian" xsdType="string"/>
         <element column="flagActiveBidder" name="flagActiveBidder" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnTrxSellUnit" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode, 1 branchCode, 1 sellNo, 1 aggrNo, 1 tuDepositNo, 1 marketPrice, 1 osp, 1 penaltyTu, 1 costTu, 1 nilaiBiayaPenyelesaian, 1 perkiraanHargaJual, 1 selling, 1 vehcOutDate, 1 sellLoss, 1 vehcOutBy, 1 locCode, 1 locReceiptCode, 1 customerFullname, 1 nopol, 1 brandCode, 1 brandName, 1 categoryCode, 1 categoryName, 1 typeCode, 1 typeName, 1 kindCode, 1 kindName, 1 modelCode, 1 modelName, 1 colorName,&#xd;1 yearMfg, 1 chassisNo, 1 machineNo, 1 stnkName, 1 bpkbNo, 1 km, 1 stnkExpiredDate, 1 arStsName, 1 subStsName, 1 flagActiveUnit, 1 locCodeName, 1 locReceiptCodeName</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="marketPrice" name="marketPrice" xsdType="string"/>
         <element column="osp" name="osp" xsdType="string"/>
         <element column="penaltyTu" name="penaltyTu" xsdType="string"/>
         <element column="costTu" name="costTu" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="perkiraanHargaJual" name="perkiraanHargaJual" xsdType="string"/>
         <element column="selling" name="selling" xsdType="string"/>
         <element column="vehcOutDate" name="vehcOutDate" xsdType="string"/>
         <element column="sellLoss" name="sellLoss" xsdType="string"/>
         <element column="vehcOutBy" name="vehcOutBy" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locReceiptCode" name="locReceiptCode" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="bpkbNo" name="bpkbNo" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="flagActiveUnit" name="flagActiveUnit" xsdType="string"/>
         <element column="locCodeName" name="locCodeName" xsdType="string"/>
         <element column="locReceiptCodeName" name="locReceiptCodeName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxSellUnit" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.SELL_NO sellNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.MARKET_PRICE marketPrice,&#xd;		A.OSP osp,&#xd;		A.PENALTY_TU penaltyTu,&#xd;		A.COST_TU costTu,&#xd;		( A.PENALTY_TU + A.COST_TU ) as nilaiBiayaPenyelesaian,&#xd;		( A.OSP + A.PENALTY_TU + A.COST_TU ) as perkiraanHargaJual,&#xd;		A.SELLING selling,&#xd;		A.VEHC_OUT_DATE vehcOutDate,&#xd;		A.SELL_LOSS sellLoss,&#xd;		A.VEHC_OUT_BY vehcOutBy,&#xd;		B.LOC_CODE locCode,&#xd;		B.LOC_RECEIPT_CODE locReceiptCode,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		D.NOPOL nopol,&#xd;		D.BRAND_CODE brandCode,&#xd;		E.BRAND_NAME brandName,&#xd;		E.CATEGORY_CODE categoryCode,&#xd;		F.PARAM_DESCRIP categoryName,&#xd;		D.TYPE_CODE typeCode,&#xd;		G.TYPE_NAME typeName,&#xd;		G.KIND_CODE kindCode,&#xd;		H.KIND_NAME kindName,&#xd;		D.MODEL_CODE modelCode,&#xd;		I.MODEL_NAME modelName,&#xd;		J.COLOR_NAME colorName,&#xd;		D.YEAR_MFG yearMfg,&#xd;		D.CHASSIS_NO chassisNo,&#xd;		D.MACHINE_NO machineNo,&#xd;		D.BPKB_NAME stnkName,&#xd;		D.BPKB_NO bpkbNo,&#xd;		B.KM km,&#xd;		B.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;		K.TRX_NAME arStsName,&#xd;		K.NOTES subStsName,&#xd;		A.FLAG_ACTIVE flagActiveUnit,&#xd;		L.BRANCH_NAME locCodeName,&#xd;		L.BRANCH_NAME locReceiptCodeName,&#xd;		A.MARKET_PRICE_AREA_CODE marketPriceAreaCode,&#xd;		A.MARKET_MODEL_CODE marketModelCode,&#xd;		A.MARKET_NEW_USED marketNewUsed,&#xd;		A.MARKET_YEAR_MFG marketYearMfg,&#xd;		A.MARKET_EFFECTIVE_DATE marketEffectiveDate,&#xd;		N.BPKB_LOCATION bpkbLocation,&#xd;		O.PARAM_DESCRIP bpkbSts,&#xd;		(	CASE&#xd;				WHEN P.AGGR_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_SELL_UNIT A (nolock)&#xd;	LEFT JOIN TRX_TU_DEPOSIT B (nolock)&#xd;	ON A.TU_DEPOSIT_NO = B.TU_DEPOSIT_NO&#xd;	LEFT JOIN TRX_AGGR C (nolock)&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET D (nolock)&#xd;	ON A.AGGR_NO = D.AGGR_NO&#xd;	LEFT JOIN MST_BRAND E (nolock)&#xd;	ON D.BRAND_CODE = E.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;	ON E.CATEGORY_CODE = F.PARAM_CODE AND F.CONDITION = 'CATEGORY_CODE' AND F.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE G (nolock)&#xd;	ON D.TYPE_CODE = G.TYPE_CODE&#xd;	LEFT JOIN MST_KIND H (nolock)&#xd;	ON G.KIND_CODE = H.KIND_CODE&#xd;	LEFT JOIN MST_MODEL I (nolock)&#xd;	ON D.MODEL_CODE = I.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR J (nolock)&#xd;	ON D.COLOR_CODE = J.COLOR_CODE&#xd;	LEFT JOIN MST_AR_STS K (nolock)&#xd;	ON C.AR_STS = K.AR_STS AND ISNULL(C.SUB_STS, '') = ISNULL(K.SUB_STS, '')&#xd;	LEFT JOIN MST_BRANCH L (nolock)&#xd;	ON B.LOC_CODE = L.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH M (nolock)&#xd;	ON B.LOC_RECEIPT_CODE = M.BRANCH_CODE&#xd;	LEFT JOIN MST_BPKB N (nolock)&#xd;	ON A.COMPANY_CODE = N.COMPANY_CODE AND A.AGGR_NO = N.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM O (nolock)&#xd;	ON N.COMPANY_CODE = O.COMPANY_CODE AND N.BPKB_STS = O.PARAM_CODE AND O.CONDITION = 'BPKB_STS' AND O.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_DTL P (nolock)&#xd;	ON A.COMPANY_CODE = P.COMPANY_CODE AND A.AGGR_NO = P.AGGR_NO&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxSellUnit" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, sellNo, aggrNo, tuDepositNo, marketPrice, osp, penaltyTu, costTu, nilaiBiayaPenyelesaian, perkiraanHargaJual, selling, vehcOutDate, sellLoss, vehcOutBy,&#xd;locCode, locReceiptCode, customerFullname, nopol, brandCode, brandName, categoryCode, categoryName, typeCode, typeName, kindCode, kindName, modelCode, modelName, colorName,&#xd;yearMfg, chassisNo, machineNo, stnkName, bpkbNo, km, stnkExpiredDate, arStsName, subStsName, flagActiveUnit, locCodeName, locReceiptCodeName, marketPriceAreaCode, marketModelCode, marketNewUsed, marketYearMfg, marketEffectiveDate, bpkbLocation, bpkbSts, stsOutUnit FROM (&#xd;	SELECT&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.SELL_NO sellNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.MARKET_PRICE marketPrice,&#xd;		A.OSP osp,&#xd;		A.PENALTY_TU penaltyTu,&#xd;		A.COST_TU costTu,&#xd;		( A.PENALTY_TU + A.COST_TU ) as nilaiBiayaPenyelesaian,&#xd;		( A.OSP + A.PENALTY_TU + A.COST_TU ) as perkiraanHargaJual,&#xd;		A.SELLING selling,&#xd;		A.VEHC_OUT_DATE vehcOutDate,&#xd;		A.SELL_LOSS sellLoss,&#xd;		A.VEHC_OUT_BY vehcOutBy,&#xd;		B.LOC_CODE locCode,&#xd;		B.LOC_RECEIPT_CODE locReceiptCode,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		D.NOPOL nopol,&#xd;		D.BRAND_CODE brandCode,&#xd;		E.BRAND_NAME brandName,&#xd;		E.CATEGORY_CODE categoryCode,&#xd;		F.PARAM_DESCRIP categoryName,&#xd;		D.TYPE_CODE typeCode,&#xd;		G.TYPE_NAME typeName,&#xd;		G.KIND_CODE kindCode,&#xd;		H.KIND_NAME kindName,&#xd;		D.MODEL_CODE modelCode,&#xd;		I.MODEL_NAME modelName,&#xd;		J.COLOR_NAME colorName,&#xd;		D.YEAR_MFG yearMfg,&#xd;		D.CHASSIS_NO chassisNo,&#xd;		D.MACHINE_NO machineNo,&#xd;		D.BPKB_NAME stnkName,&#xd;		D.BPKB_NO bpkbNo,&#xd;		B.KM km,&#xd;		B.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;		K.TRX_NAME arStsName,&#xd;		K.NOTES subStsName,&#xd;		A.FLAG_ACTIVE flagActiveUnit,&#xd;		L.BRANCH_NAME locCodeName,&#xd;		L.BRANCH_NAME locReceiptCodeName,&#xd;		A.MARKET_PRICE_AREA_CODE marketPriceAreaCode,&#xd;		A.MARKET_MODEL_CODE marketModelCode,&#xd;		A.MARKET_NEW_USED marketNewUsed,&#xd;		A.MARKET_YEAR_MFG marketYearMfg,&#xd;		A.MARKET_EFFECTIVE_DATE marketEffectiveDate,&#xd;		N.BPKB_LOCATION bpkbLocation,&#xd;		O.PARAM_DESCRIP bpkbSts,&#xd;		(	CASE&#xd;				WHEN P.AGGR_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_SELL_UNIT A (nolock)&#xd;	LEFT JOIN TRX_TU_DEPOSIT B (nolock)&#xd;	ON A.TU_DEPOSIT_NO = B.TU_DEPOSIT_NO&#xd;	LEFT JOIN TRX_AGGR C (nolock)&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET D (nolock)&#xd;	ON A.AGGR_NO = D.AGGR_NO&#xd;	LEFT JOIN MST_BRAND E (nolock)&#xd;	ON D.BRAND_CODE = E.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;	ON E.CATEGORY_CODE = F.PARAM_CODE AND F.CONDITION = 'CATEGORY_CODE' AND F.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE G (nolock)&#xd;	ON D.TYPE_CODE = G.TYPE_CODE&#xd;	LEFT JOIN MST_KIND H (nolock)&#xd;	ON G.KIND_CODE = H.KIND_CODE&#xd;	LEFT JOIN MST_MODEL I (nolock)&#xd;	ON D.MODEL_CODE = I.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR J (nolock)&#xd;	ON D.COLOR_CODE = J.COLOR_CODE&#xd;	LEFT JOIN MST_AR_STS K (nolock)&#xd;	ON C.AR_STS = K.AR_STS AND ISNULL(C.SUB_STS, '') = ISNULL(K.SUB_STS, '')&#xd;	LEFT JOIN MST_BRANCH L (nolock)&#xd;	ON B.LOC_CODE = L.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH M (nolock)&#xd;	ON B.LOC_RECEIPT_CODE = M.BRANCH_CODE&#xd;	LEFT JOIN MST_BPKB N (nolock)&#xd;	ON A.COMPANY_CODE = N.COMPANY_CODE AND A.AGGR_NO = N.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM O (nolock)&#xd;	ON N.COMPANY_CODE = O.COMPANY_CODE AND N.BPKB_STS = O.PARAM_CODE AND O.CONDITION = 'BPKB_STS' AND O.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_DTL P (nolock)&#xd;	ON A.COMPANY_CODE = P.COMPANY_CODE AND A.AGGR_NO = P.AGGR_NO&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="marketPrice" name="marketPrice" xsdType="string"/>
         <element column="osp" name="osp" xsdType="string"/>
         <element column="penaltyTu" name="penaltyTu" xsdType="string"/>
         <element column="costTu" name="costTu" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="perkiraanHargaJual" name="perkiraanHargaJual" xsdType="string"/>
         <element column="selling" name="selling" xsdType="string"/>
         <element column="vehcOutDate" name="vehcOutDate" xsdType="string"/>
         <element column="sellLoss" name="sellLoss" xsdType="string"/>
         <element column="vehcOutBy" name="vehcOutBy" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locReceiptCode" name="locReceiptCode" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="bpkbNo" name="bpkbNo" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="flagActiveUnit" name="flagActiveUnit" xsdType="string"/>
         <element column="locCodeName" name="locCodeName" xsdType="string"/>
         <element column="locReceiptCodeName" name="locReceiptCodeName" xsdType="string"/>
         <element column="marketPriceAreaCode" name="marketPriceAreaCode" xsdType="string"/>
         <element column="marketModelCode" name="marketModelCode" xsdType="string"/>
         <element column="marketNewUsed" name="marketNewUsed" xsdType="string"/>
         <element column="marketYearMfg" name="marketYearMfg" xsdType="string"/>
         <element column="marketEffectiveDate" name="marketEffectiveDate" xsdType="string"/>
         <element column="bpkbLocation" name="bpkbLocation" xsdType="string"/>
         <element column="bpkbSts" name="bpkbSts" xsdType="string"/>
         <element column="stsOutUnit" name="stsOutUnit" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnTrxTuOutHdr" useConfig="collectiondso1">
      <sql>SELECT 1 as trxNo, 1 voucherNo, 1 customerName, 1 trxTypeName, 1 printedDate, 1 voucherDate, 1 trxDate, 1 totalUnit</sql>
      <result element="Entries" rowName="">
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="customerName" name="customerName" xsdType="string"/>
         <element column="trxTypeName" name="trxTypeName" xsdType="string"/>
         <element column="printedDate" name="printedDate" xsdType="string"/>
         <element column="voucherDate" name="voucherDate" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="totalUnit" name="totalUnit" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxTuOutHdr" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.TRX_NO trxNo,&#xd;			A.TRX_DATE trxDate,&#xd;			A.CUSTOMER_NAME customerName,&#xd;			A.VOUCHER_NO voucherNo,&#xd;			A.VOUCHER_DATE voucherDate,&#xd;			A.RECEIVER_NAME receiverName,&#xd;			A.TRX_TYPE trxType,&#xd;			--TP.PARAM_DESCRIP trxTypeName,&#xd;(SELECT TP.PARAM_DESCRIP FROM MST_GLOBAL_PARAM TP (NOLOCK) where A.TRX_TYPE = TP.PARAM_CODE AND TP.CONDITION = 'OUT_STS' AND TP.FLAG_ACTIVE = '1') trxTypeName,&#xd;			A.REFF_NO reffNo,&#xd;			A.PRINTED_BY printedBy,&#xd;			A.PRINTED_DATE printedDate,&#xd;			(&#xd;				SELECT &#xd;					COUNT(AGGR_NO) &#xd;				FROM TRX_TU_OUT_DTL (NOLOCK) WHERE COMPANY_CODE = A.COMPANY_CODE AND TRX_NO = A.TRX_NO&#xd;			) as totalUnit,&#xd;			B.DSO_CODE dsoCode&#xd;	FROM TRX_TU_OUT_HDR A (NOLOCK)&#xd;	--LEFT JOIN MST_GLOBAL_PARAM TP&#xd;	--ON A.TRX_TYPE = TP.PARAM_CODE AND TP.CONDITION = 'OUT_STS' AND TP.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRANCH B (NOLOCK)&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxTuOutHdr" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, trxNo, trxDate, customerName, voucherNo, voucherDate, receiverName, trxType, trxTypeName, reffNo, printedBy, printedDate, totalUnit, dsoCode FROM (&#xd;	SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.TRX_NO trxNo,&#xd;			A.TRX_DATE trxDate,&#xd;			A.CUSTOMER_NAME customerName,&#xd;			A.VOUCHER_NO voucherNo,&#xd;			A.VOUCHER_DATE voucherDate,&#xd;			A.RECEIVER_NAME receiverName,&#xd;			A.TRX_TYPE trxType,&#xd;			--TP.PARAM_DESCRIP trxTypeName,&#xd;(SELECT TP.PARAM_DESCRIP FROM MST_GLOBAL_PARAM TP (NOLOCK) where A.TRX_TYPE = TP.PARAM_CODE AND TP.CONDITION = 'OUT_STS' AND TP.FLAG_ACTIVE = '1') trxTypeName,&#xd;			A.REFF_NO reffNo,&#xd;			A.PRINTED_BY printedBy,&#xd;			A.PRINTED_DATE printedDate,&#xd;			(&#xd;				SELECT &#xd;					COUNT(AGGR_NO) &#xd;				FROM TRX_TU_OUT_DTL (NOLOCK) WHERE COMPANY_CODE = A.COMPANY_CODE AND TRX_NO = A.TRX_NO&#xd;			) as totalUnit,&#xd;			B.DSO_CODE dsoCode&#xd;	FROM TRX_TU_OUT_HDR A (NOLOCK)&#xd;	--LEFT JOIN MST_GLOBAL_PARAM TP&#xd;	--ON A.TRX_TYPE = TP.PARAM_CODE AND TP.CONDITION = 'OUT_STS' AND TP.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRANCH B (NOLOCK)&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="customerName" name="customerName" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="voucherDate" name="voucherDate" xsdType="string"/>
         <element column="receiverName" name="receiverName" xsdType="string"/>
         <element column="trxType" name="trxType" xsdType="string"/>
         <element column="trxTypeName" name="trxTypeName" xsdType="string"/>
         <element column="reffNo" name="reffNo" xsdType="string"/>
         <element column="printedBy" name="printedBy" xsdType="string"/>
         <element column="printedDate" name="printedDate" xsdType="string"/>
         <element column="totalUnit" name="totalUnit" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxTuOutHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_TU_OUT_HDR&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        TRX_NO,&#xd;        TRX_DATE,&#xd;        CUSTOMER_NAME,&#xd;        VOUCHER_NO,&#xd;        VOUCHER_DATE,&#xd;        RECEIVER_NAME,&#xd;        TRX_TYPE,&#xd;        REFF_NO,&#xd;        PRINTED_BY,&#xd;        PRINTED_DATE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :trxNo,&#xd;        :trxDate,&#xd;        :customerName,&#xd;        :voucherNo,&#xd;        :voucherDate,&#xd;        :receiverName,&#xd;        :trxType,&#xd;        :reffNo,&#xd;        :printedBy,&#xd;        :printedDate,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="trxDate" sqlType="STRING"/>
      <param name="customerName" sqlType="STRING"/>
      <param name="voucherNo" sqlType="STRING"/>
      <param name="voucherDate" sqlType="STRING"/>
      <param name="receiverName" sqlType="STRING"/>
      <param name="trxType" sqlType="STRING"/>
      <param name="reffNo" sqlType="STRING"/>
      <param name="printedBy" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="insertTrxTuOutDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_TU_OUT_DTL&#xd;(&#xd;        COMPANY_CODE, &#xd;        BRANCH_CODE, &#xd;        TRX_NO, &#xd;        AGGR_NO, &#xd;        ENTER_DATE, &#xd;        CREATED_DATE, &#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :trxNo,&#xd;        :aggrNo,&#xd;        :enterDate,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="enterDate" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="updatePrintPengeluaranUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @TRX_NO varchar(50) = :trxNo&#xd;&#xd;UPDATE TRX_TU_OUT_HDR SET&#xd;        PRINTED_BY = :printedBy,&#xd;        PRINTED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        TRX_NO = @TRX_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="printedBy" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
   </query>
   <query id="getListDetailPengeluaranUnit" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @TRX_NO varchar(50) = :trxNo&#xd;&#xd;SELECT companyCode, branchCode, trxNo, aggrNo, enterDate, executionDate, brandName, typeName, kindName, colorName, nopol, chassisNo, machineNo FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TRX_NO trxNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.ENTER_DATE enterDate,&#xd;		A.ENTER_DATE executionDate,&#xd;		D.BRAND_NAME brandName,&#xd;		E.TYPE_NAME typeName,&#xd;		F.KIND_NAME kindName,&#xd;		G.COLOR_NAME colorName,&#xd;		C.NOPOL nopol,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo&#xd;	FROM TRX_TU_OUT_DTL(nolock) A&#xd;	LEFT JOIN TRX_TU_DEPOSIT(nolock) B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET(nolock) C&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND(nolock) D&#xd;	ON C.COMPANY_CODE = D.COMPANY_CODE AND C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE(nolock) E&#xd;	ON C.COMPANY_CODE = E.COMPANY_CODE AND C.TYPE_CODE = E.TYPE_CODE&#xd;	LEFT JOIN MST_KIND(nolock) F&#xd;	ON E.COMPANY_CODE = F.COMPANY_CODE AND E.KIND_CODE = F.KIND_CODE&#xd;	LEFT JOIN MST_COLOR(nolock) G&#xd;	ON C.COMPANY_CODE = G.COMPANY_CODE AND C.COLOR_CODE = G.COLOR_CODE&#xd;	WHERE A.COMPANY_CODE = @COMPANY_CODE AND A.BRANCH_CODE = @BRANCH_CODE AND A.TRX_NO = @TRX_NO&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="enterDate" name="enterDate" xsdType="string"/>
         <element column="executionDate" name="executionDate" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNoPembayaran" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode, 1 branchCode, 1 voucherNo, 1 customerFullname, 1 status, 1 voucherDate, 1 totalUnit, 1 sellNo, 1 aggrNo</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="status" name="status" xsdType="string"/>
         <element column="voucherDate" name="voucherDate" xsdType="string"/>
         <element column="totalUnit" name="totalUnit" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNoPembayaran" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO reffNo,&#xd;		A.VOUCHER_NO voucherNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.PARAM_DESCRIP status,&#xd;		A.VOUCHER_DATE voucherDate,&#xd;		(&#xd;			SELECT COUNT(*) as total&#xd;			FROM TRX_AGGR_ASSET WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as totalUnit,&#xd;		'' as sellNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		D.DSO_CODE dsoCode&#xd;	FROM TRX_TU_DEPOSIT A&#xd;	LEFT JOIN TRX_AGGR B&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.SOLVING_TYPE = C.PARAM_CODE AND C.CONDITION = 'SOLVING_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRANCH D&#xd;	ON A.COMPANY_CODE = D.COMPANY_CODE AND A.BRANCH_CODE = D.BRANCH_CODE&#xd;	WHERE A.SOLVING_TYPE IN ('4','5','6') AND (A.VOUCHER_NO != '' OR A.VOUCHER_NO != NULL) AND A.VOUCHER_NO NOT IN (SELECT VOUCHER_NO FROM TRX_TU_OUT_HDR)&#xd;	UNION ALL&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.SELL_NO reffNo,&#xd;		A.VOUCHER_NO voucherNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		'Penjualan Tarik Unit' as status,&#xd;		A.VOUCHER_DATE voucherDate,&#xd;		(&#xd;			SELECT COUNT(*) as total &#xd;			FROM TRX_SELL_UNIT WHERE SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1' AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as totalUnit,&#xd;		A.SELL_NO sellNo,&#xd;		'' as aggrNo,&#xd;		C.DSO_CODE dsoCode&#xd;	FROM TRX_SELL_HDR A&#xd;	LEFT JOIN TRX_SELL_BIDDER B&#xd;	ON A.SELL_NO = B.SELL_NO AND A.COMPANY_CODE = B.COMPANY_CODE &#xd;	LEFT JOIN MST_BRANCH C&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND A.BRANCH_CODE = C.BRANCH_CODE&#xd;	WHERE B.WINNER_STS = '1' AND A.SELL_STS = 'CLOS' AND (A.VOUCHER_NO != '' OR A.VOUCHER_NO != NULL) AND A.VOUCHER_NO NOT IN (SELECT VOUCHER_NO FROM TRX_TU_OUT_HDR)&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNoPembayaran" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, reffNo, voucherNo, customerFullname, status, voucherDate, totalUnit, sellNo, aggrNo, dsoCode FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO reffNo,&#xd;		A.VOUCHER_NO voucherNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.PARAM_DESCRIP status,&#xd;		A.VOUCHER_DATE voucherDate,&#xd;		(&#xd;			SELECT COUNT(*) as total&#xd;			FROM TRX_AGGR_ASSET WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as totalUnit,&#xd;		'' as sellNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		D.DSO_CODE dsoCode&#xd;	FROM TRX_TU_DEPOSIT A&#xd;	LEFT JOIN TRX_AGGR B  &#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.SOLVING_TYPE = C.PARAM_CODE AND C.CONDITION = 'SOLVING_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRANCH D&#xd;	ON A.COMPANY_CODE = D.COMPANY_CODE AND A.BRANCH_CODE = D.BRANCH_CODE&#xd;	WHERE A.SOLVING_TYPE IN ('4','5','6') AND (A.VOUCHER_NO != '' OR A.VOUCHER_NO != NULL) AND A.VOUCHER_NO NOT IN (SELECT VOUCHER_NO FROM TRX_TU_OUT_HDR)&#xd;	UNION ALL&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.SELL_NO reffNo,&#xd;		A.VOUCHER_NO voucherNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		'Penjualan Tarik Unit' as status,&#xd;		A.VOUCHER_DATE voucherDate,&#xd;		(&#xd;			SELECT COUNT(*) as total &#xd;			FROM TRX_SELL_UNIT WHERE SELL_NO = A.SELL_NO AND FLAG_ACTIVE = '1' AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as totalUnit,&#xd;		A.SELL_NO sellNo,&#xd;		'' as aggrNo,&#xd;		C.DSO_CODE dsoCode&#xd;	FROM TRX_SELL_HDR A&#xd;	LEFT JOIN TRX_SELL_BIDDER B&#xd;	ON A.SELL_NO = B.SELL_NO AND A.COMPANY_CODE = B.COMPANY_CODE &#xd;	LEFT JOIN MST_BRANCH C&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND A.BRANCH_CODE = C.BRANCH_CODE&#xd;	WHERE B.WINNER_STS = '1' AND A.SELL_STS = 'CLOS' AND (A.VOUCHER_NO != '' OR A.VOUCHER_NO != NULL) AND A.VOUCHER_NO NOT IN (SELECT VOUCHER_NO FROM TRX_TU_OUT_HDR)&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="status" name="status" xsdType="string"/>
         <element column="voucherDate" name="voucherDate" xsdType="string"/>
         <element column="totalUnit" name="totalUnit" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="reffNo" name="reffNo" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="listDetailKontrakNonPenjualan" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;SELECT companyCode, branchCode, aggrNo, customerFullname, arSts, subSts, arStsName, subStsName, brandName, typeName, kindName, colorName, nopol, chassisNo, machineNo, bpkbLocationName, executionDate FROM (	&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		B.AR_STS arSts,&#xd;		B.SUB_STS subSts,&#xd;		C.TRX_NAME arStsName,&#xd;		C.NOTES subStsName,&#xd;		E.BRAND_NAME brandName,&#xd;		F.TYPE_NAME typeName,&#xd;		G.KIND_NAME kindName,&#xd;		H.COLOR_NAME colorName,&#xd;		D.NOPOL nopol,&#xd;		D.CHASSIS_NO chassisNo,&#xd;		D.MACHINE_NO machineNo,&#xd;		I.BPKB_LOCATION_NAME bpkbLocationName,&#xd;		A.EXECUTION_DATE executionDate&#xd;	FROM TRX_TU_DEPOSIT(nolock) A&#xd;	LEFT JOIN TRX_AGGR(nolock) B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_AR_STS(nolock) C&#xd;	ON B.COMPANY_CODE = C.COMPANY_CODE AND B.AR_STS = C.AR_STS AND B.SUB_STS = C.SUB_STS&#xd;	LEFT JOIN TRX_AGGR_ASSET(nolock) D&#xd;	ON A.COMPANY_CODE = D.COMPANY_CODE AND A.AGGR_NO = D.AGGR_NO&#xd;	LEFT JOIN MST_BRAND(nolock) E&#xd;	ON D.COMPANY_CODE = E.COMPANY_CODE AND D.BRAND_CODE = E.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE(nolock) F&#xd;	ON D.COMPANY_CODE = F.COMPANY_CODE AND D.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND(nolock) G&#xd;	ON F.COMPANY_CODE = G.COMPANY_CODE AND F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_COLOR(nolock) H&#xd;	ON D.COMPANY_CODE = H.COMPANY_CODE AND D.COLOR_CODE = H.COLOR_CODE&#xd;	LEFT JOIN MST_BPKB(nolock) I&#xd;	ON A.AGGR_NO = I.AGGR_NO AND A.COMPANY_CODE = I.COMPANY_CODE AND A.BRANCH_CODE = I.BRANCH_CODE&#xd;	WHERE A.COMPANY_CODE = @COMPANY_CODE AND A.BRANCH_CODE = @BRANCH_CODE AND A.AGGR_NO = @AGGR_NO&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="bpkbLocationName" name="bpkbLocationName" xsdType="string"/>
         <element column="executionDate" name="executionDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="listDetailKontrakPenjualan" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @SELL_NO varchar(50) = :sellNo&#xd;declare @VOUCHER_NO varchar(50) = :voucherNo&#xd;&#xd;SELECT companyCode, branchCode, aggrNo, customerFullname, arSts, subSts, arStsName, subStsName, brandName, typeName, kindName, colorName, nopol, chassisNo, machineNo, bpkbLocationName, executionDate FROM ( &#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.SELL_NO sellNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		B.AR_STS arSts,&#xd;		B.SUB_STS subSts,&#xd;		C.TRX_NAME arStsName,&#xd;		C.NOTES subStsName,&#xd;		E.BRAND_NAME brandName,&#xd;		F.TYPE_NAME typeName,&#xd;		G.KIND_NAME kindName,&#xd;		H.COLOR_NAME colorName,&#xd;		D.NOPOL nopol,&#xd;		D.CHASSIS_NO chassisNo,&#xd;		D.MACHINE_NO machineNo,&#xd;		I.BPKB_LOCATION bpkbLocationName,&#xd;		J.EXECUTION_DATE executionDate&#xd;	FROM TRX_SELL_UNIT(nolock) A&#xd;	LEFT JOIN TRX_AGGR(nolock) B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_SELL_HDR(nolock) HDR&#xd;	ON A.COMPANY_CODE = HDR.COMPANY_CODE AND A.SELL_NO = HDR.SELL_NO&#xd;	LEFT JOIN MST_AR_STS(nolock) C&#xd;	ON B.COMPANY_CODE = C.COMPANY_CODE AND B.AR_STS = C.AR_STS AND B.SUB_STS = C.SUB_STS&#xd;	LEFT JOIN TRX_AGGR_ASSET(nolock) D&#xd;	ON A.COMPANY_CODE = D.COMPANY_CODE AND A.AGGR_NO = D.AGGR_NO&#xd;	LEFT JOIN MST_BRAND(nolock) E&#xd;	ON D.COMPANY_CODE = E.COMPANY_CODE AND D.BRAND_CODE = E.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE(nolock) F&#xd;	ON D.COMPANY_CODE = F.COMPANY_CODE AND D.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND(nolock) G&#xd;	ON F.COMPANY_CODE = G.COMPANY_CODE AND F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_COLOR(nolock) H&#xd;	ON D.COMPANY_CODE = H.COMPANY_CODE AND D.COLOR_CODE = H.COLOR_CODE&#xd;	LEFT JOIN MST_BPKB(nolock) I&#xd;	ON A.AGGR_NO = I.AGGR_NO AND A.COMPANY_CODE = I.COMPANY_CODE&#xd;	LEFT JOIN (SELECT *&#xd;		FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;				[AGGR_NO]&#xd;				ORDER BY [CREATED_DATE] DESC) RN&#xd;		FROM [dbo].[TRX_TU_DEPOSIT]&#xd;		) X&#xd;		WHERE RN = 1) J&#xd;	ON A.[COMPANY_CODE]	= J.[COMPANY_CODE] &#xd;	AND A.[AGGR_NO]		= J.[AGGR_NO]&#xd;	WHERE A.FLAG_ACTIVE = '1' AND A.COMPANY_CODE = @COMPANY_CODE AND A.BRANCH_CODE = @BRANCH_CODE AND A.SELL_NO = @SELL_NO AND HDR.VOUCHER_NO = @VOUCHER_NO&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="bpkbLocationName" name="bpkbLocationName" xsdType="string"/>
         <element column="executionDate" name="executionDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="voucherNo" sqlType="STRING"/>
   </query>
   <query id="listMonitoringdebiturparamcode6" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @VALUESFROM numeric(5,0) = :valuesFrom&#xd;declare @VALUESTO numeric(5,0) = :valuesTo&#xd;&#xd;SELECT companyCode, branchCode, aggrNo, customerFullname, dueDate, tenor, dayOverdue, instFrom, instTo, installBill, penaltyValue, collFee, totBill, villageName FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		A.DUE_DATE dueDate,&#xd;		C.TENOR tenor,&#xd;		A.DAY_OVERDUE dayOverdue,&#xd;		A.INST_FROM instFrom,&#xd;		A.INST_TO instTo,&#xd;		A.INSTALL_BILL installBill,&#xd;		A.PENALTY_VALUE penaltyValue,&#xd;		A.COLL_FEE collFee,&#xd;		A.TOT_BILL totBill,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN D.COLL_ADDRESS_TYPE = 'I' THEN (&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.ID_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'D' THEN (&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.DOMICILE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'K' THEN &#xd;													(&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER_EMPLOYEE X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.OFFICE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O'&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'B' THEN &#xd;													(&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER_EMPLOYEE X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.OFFICE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B'&#xd;													)&#xd;			END AS RESULT&#xd;		) as villageName&#xd;	FROM TRX_DKH_DTL(nolock) A&#xd;	LEFT JOIN TRX_DKH_HDR(nolock) B&#xd;	ON A.DKH_NO = B.DKH_NO AND A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE AND B.PRODUCT_CODE = 'PC03' AND FORMAT(B.DKH_DATE, 'MM-yyyy') = FORMAT(GETDATE(), 'MM-yyyy')&#xd;	LEFT JOIN TRX_AGGR(nolock) C&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN TRX_APPL(nolock) D&#xd;	ON C.COMPANY_CODE = D.COMPANY_CODE AND C.APPL_NO = D.APPL_NO&#xd;	WHERE A.COMPANY_CODE = @COMPANY_CODE AND B.BRANCH_CODE = @BRANCH_CODE AND A.DAY_OVERDUE &gt;= @VALUESFROM AND A.DAY_OVERDUE &lt;= @VALUESTO AND FORMAT(A.DUE_DATE, 'MM') = FORMAT(GETDATE(), 'MM') AND FORMAT(A.DUE_DATE, 'yyyy') = FORMAT(GETDATE(), 'yyyy')&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="installBill" name="installBill" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="valuesFrom" optional="false" sqlType="NUMERIC"/>
      <param name="valuesTo" optional="false" sqlType="NUMERIC"/>
   </query>
   <query id="listMonitoringdebiturparamcode7" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @VALUESFROM numeric(5,0) = :valuesFrom&#xd;declare @VALUESTO numeric(5,0) = :valuesTo&#xd;&#xd;SELECT companyCode, branchCode, aggrNo, customerFullname, dueDate, tenor, dayOverdue, instFrom, instTo, installBill, penaltyValue, collFee, totBill, villageName FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		A.DUE_DATE dueDate,&#xd;		C.TENOR tenor,&#xd;		A.DAY_OVERDUE dayOverdue,&#xd;		A.INST_FROM instFrom,&#xd;		A.INST_TO instTo,&#xd;		A.INSTALL_BILL installBill,&#xd;		A.PENALTY_VALUE penaltyValue,&#xd;		A.COLL_FEE collFee,&#xd;		A.TOT_BILL totBill,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN D.COLL_ADDRESS_TYPE = 'I' THEN (&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.ID_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'D' THEN (&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.DOMICILE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'K' THEN &#xd;													(&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER_EMPLOYEE X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.OFFICE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O'&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'B' THEN &#xd;													(&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER_EMPLOYEE X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.OFFICE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B'&#xd;													)&#xd;			END AS RESULT&#xd;		) as villageName&#xd;	FROM TRX_DKH_DTL(nolock) A&#xd;	LEFT JOIN TRX_DKH_HDR(nolock) B&#xd;	ON A.DKH_NO = B.DKH_NO AND A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE AND B.PRODUCT_CODE = 'PC03' AND FORMAT(B.DKH_DATE, 'MM-yyyy') = FORMAT(GETDATE(), 'MM-yyyy')&#xd;	LEFT JOIN TRX_AGGR(nolock) C&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN TRX_APPL(nolock) D&#xd;	ON C.COMPANY_CODE = D.COMPANY_CODE AND C.APPL_NO = D.APPL_NO&#xd;	WHERE A.COMPANY_CODE = @COMPANY_CODE AND B.BRANCH_CODE = @BRANCH_CODE AND A.DAY_OVERDUE &gt;= @VALUESFROM AND A.DAY_OVERDUE &lt;= @VALUESTO AND FORMAT(A.DUE_DATE, 'MM') &gt; FORMAT(GETDATE(), 'MM') AND FORMAT(A.DUE_DATE, 'yyyy') &gt; FORMAT(GETDATE(), 'yyyy')&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="installBill" name="installBill" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="valuesFrom" optional="false" sqlType="NUMERIC"/>
      <param name="valuesTo" optional="false" sqlType="NUMERIC"/>
   </query>
   <query id="listMonitoringdebitur" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @VALUESFROM numeric(5,0) = :valuesFrom&#xd;declare @VALUESTO numeric(5,0) = :valuesTo&#xd;&#xd;SELECT companyCode, branchCode, aggrNo, customerFullname, dueDate, tenor, dayOverdue, instFrom, instTo, installBill, penaltyValue, collFee, totBill, villageName FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		A.DUE_DATE dueDate,&#xd;		C.TENOR tenor,&#xd;		A.DAY_OVERDUE dayOverdue,&#xd;		A.INST_FROM instFrom,&#xd;		A.INST_TO instTo,&#xd;		A.INSTALL_BILL installBill,&#xd;		A.PENALTY_VALUE penaltyValue,&#xd;		A.COLL_FEE collFee,&#xd;		A.TOT_BILL totBill,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN D.COLL_ADDRESS_TYPE = 'I' THEN (&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.ID_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'D' THEN (&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.DOMICILE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'K' THEN &#xd;													(&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER_EMPLOYEE X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.OFFICE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O'&#xd;													)&#xd;				WHEN D.COLL_ADDRESS_TYPE = 'B' THEN &#xd;													(&#xd;														SELECT &#xd;															 Q.VILLAGE_NAME&#xd;														FROM MST_CUSTOMER_EMPLOYEE X &#xd;														LEFT JOIN MST_VILLAGE Q&#xd;														ON X.OFFICE_VILLAGE_CODE = Q.VILLAGE_CODE&#xd;														WHERE X.CUSTOMER_CODE = C.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B'&#xd;													)&#xd;			END AS RESULT&#xd;		) as villageName&#xd;	FROM TRX_DKH_DTL(nolock) A&#xd;	LEFT JOIN TRX_DKH_HDR(nolock) B&#xd;	ON A.DKH_NO = B.DKH_NO AND A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE AND B.PRODUCT_CODE = 'PC03' AND FORMAT(B.DKH_DATE, 'MM-yyyy') = FORMAT(GETDATE(), 'MM-yyyy')&#xd;	LEFT JOIN TRX_AGGR(nolock) C&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN TRX_APPL(nolock) D&#xd;	ON C.COMPANY_CODE = D.COMPANY_CODE AND C.APPL_NO = D.APPL_NO&#xd;	WHERE A.COMPANY_CODE = @COMPANY_CODE AND B.BRANCH_CODE = @BRANCH_CODE AND A.DAY_OVERDUE &gt;= @VALUESFROM AND A.DAY_OVERDUE &lt;= @VALUESTO&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="installBill" name="installBill" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="valuesFrom" optional="false" sqlType="NUMERIC"/>
      <param name="valuesTo" optional="false" sqlType="NUMERIC"/>
   </query>
   <query id="updateAppvStsSttuCost" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @REQ_COST_NO varchar(50) = :reqCostNo&#xd;&#xd;UPDATE TRX_STTU_COST_HDR SET&#xd;	REQ_COST_STS = :appvsts,&#xd;	REQ_COST_STS_DATE = GETDATE(),&#xd;	APPV_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = 'EDV' AND&#xd;	REQ_COST_NO = @REQ_COST_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="appvsts" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
   </query>
   <query id="getColumnMonitorPersediaan" useConfig="collectiondso1">
      <sql>SELECT 1 as branchName, 1 locName, 1 aggrNo, 1 brandName, 1 typeName, 1 modelName, 1 kindName, 1 nopol, 1 tanggalValidasiTerima, 1 nilaiAngsuranPokok, 1 nilaiBiayaPenyelesaian, 1 nilaiSisaAr,&#xd;	1 statusKontrak, 1 subStatusKontrak, 1 statusPersediaan, 1 keterangan, 1 woDate, 1 colorName</sql>
      <result element="Entries" rowName="">
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="locName" name="locName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="tanggalValidasiTerima" name="tanggalValidasiTerima" xsdType="string"/>
         <element column="nilaiAngsuranPokok" name="nilaiAngsuranPokok" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="nilaiSisaAr" name="nilaiSisaAr" xsdType="string"/>
         <element column="subStatusKontrak" name="subStatusKontrak" xsdType="string"/>
         <element column="statusPersediaan" name="statusPersediaan" xsdType="string"/>
         <element column="keterangan" name="keterangan" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMonitorPersediaan" useConfig="collectiondso1">
      <sql>select COUNT(0) total from (&#xd;	select&#xd;		dep.company_code companyCode,&#xd;		dep.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		dep.loc_code locCode,&#xd;		loc.branch_name locName,&#xd;		dep.aggr_no aggrNo,&#xd;		agg.customer_code customerCode,&#xd;		agg.customer_fullname customerFullname,&#xd;		dep.execution_date tanggalSerahTerima,&#xd;		dep.tu_deposit_date tanggalValidasiTerima,&#xd;		dep.expired_date as tanggalPersediaan,&#xd;		dep.deposit_sts depositSts,&#xd;		--ds.param_descrip statusPersediaan,&#xd;(SELECT ds.param_descrip from mst_global_param ds (nolock) where dep.company_code = ds.company_code and dep.deposit_sts = ds.param_code and ds.condition = 'DEPOSIT_STS' and ds.flag_active = '1') statusPersediaan,&#xd;		ar.notes statusKontrak,&#xd;		ar.trx_name subStatusKontrak,&#xd;		(dep.tu_cost + dep.penalty_tu_value) as nilaiBiayaPenyelesaian,&#xd;		dep.bal_principal_value nilaiAngsuranPokok,&#xd;		(dep.bal_principal_value + dep.bal_int_value + dep.tu_cost + dep.penalty_tu_value) as nilaiSisaAr,&#xd;		--ct.param_descrip categoryName,&#xd;(select ct.param_descrip from mst_global_param ct (NOLOCK) where dep.company_code = ct.company_code and brd.category_code = ct.param_code and ct.condition = 'CATEGORY_CODE' and ct.flag_active = '1') categoryName,&#xd;		ass.brand_code brandCode,&#xd;		brd.brand_name brandName,&#xd;		ass.type_code typeCode,&#xd;		tp.type_name typeName,&#xd;		ass.model_code modelCode,&#xd;		md.model_name modelName,&#xd;		tp.kind_code kindCode,&#xd;		kn.kind_name kindName,&#xd;		cl.color_name colorName,&#xd;		ass.year_mfg yearMfg,&#xd;		ass.nopol nopol,&#xd;		ass.chassis_no chassisNo,&#xd;		ass.machine_no machineNo,&#xd;		ass.bpkb_name stnkName,&#xd;		dep.km km,&#xd;		dep.stnk_expired_date stnkExpiredDate,&#xd;		bpk.bpkb_location bpkbLocation,&#xd;		bpk.bpkb_location_name bpkbLocationCode,&#xd;		bpkl.branch_name bpkbLocationName,&#xd;		pt1.fullname petugasTarik1,&#xd;		pt2.fullname petugasTarik2,&#xd;		dep.notes_pic_receive2 keterangan,&#xd;		agg.wo_date woDate&#xd;	from trx_tu_deposit dep (NOLOCK)&#xd;	left join mst_branch br (NOLOCK)&#xd;	on dep.company_code = br.company_code and dep.branch_code = br.branch_code&#xd;	left join mst_branch loc (NOLOCK)&#xd;	on dep.company_code = loc.company_code and dep.loc_code = loc.branch_code&#xd;	left join trx_aggr agg (NOLOCK)&#xd;	on dep.company_code = agg.company_code and dep.aggr_no = agg.aggr_no&#xd;	--left join mst_global_param ds&#xd;	--on dep.company_code = ds.company_code and dep.deposit_sts = ds.param_code and ds.condition = 'DEPOSIT_STS' and ds.flag_active = '1'&#xd;	left join mst_ar_sts ar (NOLOCK)&#xd;	on agg.ar_sts = ar.ar_sts and isnull(agg.sub_sts, '') = isnull(ar.sub_sts, '')&#xd;	left join trx_aggr_asset ass (NOLOCK)&#xd;	on dep.company_code = ass.company_code and agg.aggr_no = ass.aggr_no&#xd;	left join mst_brand brd (NOLOCK)&#xd;	on dep.company_code = brd.company_code and ass.brand_code = brd.brand_code&#xd;	--left join mst_global_param ct&#xd;	--on dep.company_code = ct.company_code and brd.category_code = ct.param_code and ct.condition = 'CATEGORY_CODE' and ct.flag_active = '1'&#xd;	left join mst_type tp (NOLOCK)&#xd;	on dep.company_code = tp.company_code and ass.type_code = tp.type_code&#xd;	left join mst_kind kn (NOLOCK)&#xd;	on dep.company_code = kn.company_code and tp.kind_code = kn.kind_code&#xd;	left join mst_model md (NOLOCK)&#xd;	on dep.company_code = md.company_code and ass.model_code = md.model_code&#xd;	left join mst_color cl (NOLOCK)&#xd;	on dep.company_code = cl.company_code and ass.color_code = cl.color_code&#xd;	left join mst_bpkb bpk (NOLOCK)&#xd;	on dep.aggr_no = bpk.aggr_no&#xd;	left join mst_branch bpkl (NOLOCK)&#xd;	on bpk.bpkb_location_name = bpkl.branch_code&#xd;	left join trx_sttu stt (NOLOCK)&#xd;	on stt.sttu_no = dep.sttu_no&#xd;	left join mst_employee pt1 (NOLOCK)&#xd;	on stt.pic1_code = pt1.nik&#xd;	left join mst_employee pt2 (NOLOCK)&#xd;	on stt.pic2_code = pt2.nik&#xd;	where dep.deposit_sts in ('1','3','4') and agg.ar_sts != 'LN'&#xd;	&#xd;&#xd;	union all&#xd;&#xd;	select&#xd;		inv.company_code companyCode,&#xd;		inv.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		inv.loc_code loceCode,&#xd;		loc.branch_name locName,&#xd;		inv.aggr_no aggrNo,&#xd;		agg.customer_code customerCode,&#xd;		agg.customer_fullname customerFullname,&#xd;		dep.execution_date tanggalSerahTerima,&#xd;		dep.tu_deposit_date tanggalValidasiTerima,&#xd;		inv.enter_date tanggalPersediaan,&#xd;		case&#xd;			when inv.inventory_sts = '1' then '2'&#xd;		end depositSts,&#xd;		--ds.param_descrip statusPersediaan,&#xd;(select ds.param_descrip from mst_global_param ds (nolock) where inv.company_code = ds.company_code and inv.inventory_sts = ds.param_code and ds.condition = 'INVENTORY_STS' and ds.flag_active = '1') statusPersediaan,&#xd;		ar.notes statusKontrak,&#xd;		ar.trx_name subStatusKontrak,&#xd;		(inv.tu_cost + inv.penalty_tu_value) as nilaiBiayaPenyelesaian,&#xd;		inv.bal_principal_value nilaiAngsuranPokok,&#xd;		(inv.bal_principal_value + inv.bal_int_value + inv.tu_cost + inv.penalty_tu_value) as nilaiSisaAr,&#xd;		--ct.param_descrip categoryName,&#xd;(select ct.param_descrip from mst_global_param ct (nolock) where inv.company_code = ct.company_code and brd.category_code = ct.param_code and ct.condition = 'CATEGORY_CODE' and ct.flag_active = '1') categoryName,&#xd;		ass.brand_code brandCode,&#xd;		brd.brand_name brandName,&#xd;		ass.type_code typeCode,&#xd;		tp.type_name typeName,&#xd;		ass.model_code modelCode,&#xd;		md.model_name modelName,&#xd;		tp.kind_code kindCode,&#xd;		kn.kind_name kindName,&#xd;		cl.color_name colorName,&#xd;		ass.year_mfg yearMfg,&#xd;		ass.nopol nopol,&#xd;		ass.chassis_no chassisNo,&#xd;		ass.machine_no machineNo,&#xd;		ass.bpkb_name stnkName,&#xd;		dep.km km,&#xd;		dep.stnk_expired_date stnkExpiredDate,&#xd;		bpk.bpkb_location bpkbLocation,&#xd;		bpk.bpkb_location_name bpkbLocationCode,&#xd;		bpkl.branch_name bpkbLocationName,&#xd;		pt1.fullname petugasTarik1,&#xd;		pt2.fullname petugasTarik2,&#xd;		dep.notes_pic_receive2 keterangan,&#xd;		agg.wo_date woDate&#xd;	from trx_inventory_tu inv (NOLOCK)&#xd;	left join mst_branch br (NOLOCK)&#xd;	on inv.company_code = br.company_code and inv.branch_code = br.branch_code&#xd;	left join mst_branch loc (NOLOCK)&#xd;	on inv.company_code = br.company_code and inv.loc_code = loc.branch_code&#xd;	left join trx_aggr agg (NOLOCK)&#xd;	on inv.company_code = agg.company_code and inv.aggr_no = agg.aggr_no&#xd;	left join trx_tu_deposit dep (NOLOCK)&#xd;	on inv.company_code = dep.company_code and inv.tu_deposit_no = dep.tu_deposit_no and inv.aggr_no = dep.aggr_no&#xd;	--left join mst_global_param ds&#xd;	--on inv.company_code = ds.company_code and inv.inventory_sts = ds.param_code and ds.condition = 'INVENTORY_STS' and ds.flag_active = '1'&#xd;	left join mst_ar_sts ar (NOLOCK)&#xd;	on agg.ar_sts = ar.ar_sts and isnull(agg.sub_sts, '') = isnull(ar.sub_sts, '')&#xd;	left join trx_aggr_asset ass (NOLOCK)&#xd;	on inv.company_code = ass.company_code and agg.aggr_no = ass.aggr_no&#xd;	left join mst_brand brd (NOLOCK)&#xd;	on inv.company_code = brd.company_code and ass.brand_code = brd.brand_code&#xd;	--left join mst_global_param ct&#xd;	--on inv.company_code = ct.company_code and brd.category_code = ct.param_code and ct.condition = 'CATEGORY_CODE' and ct.flag_active = '1'&#xd;	left join mst_type tp (NOLOCK)&#xd;	on inv.company_code = tp.company_code and ass.type_code = tp.type_code&#xd;	left join mst_kind kn (NOLOCK)&#xd;	on inv.company_code = kn.company_code and tp.kind_code = kn.kind_code&#xd;	left join mst_model md (NOLOCK)&#xd;	on inv.company_code = md.company_code and ass.model_code = md.model_code&#xd;	left join mst_color cl (NOLOCK)&#xd;	on inv.company_code = cl.company_code and ass.color_code = cl.color_code&#xd;	left join mst_bpkb bpk (NOLOCK)&#xd;	on inv.aggr_no = bpk.aggr_no&#xd;	left join mst_branch bpkl (NOLOCK)&#xd;	on bpk.bpkb_location_name = bpkl.branch_code&#xd;	left join trx_sttu stt (NOLOCK)&#xd;	on stt.sttu_no = dep.sttu_no&#xd;	left join mst_employee pt1 (NOLOCK)&#xd;	on stt.pic1_code = pt1.nik&#xd;	left join mst_employee pt2 (NOLOCK)&#xd;	on stt.pic2_code = pt2.nik&#xd;	where inv.inventory_sts in ('1') and agg.ar_sts != 'LN'&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMonitorPersediaan" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, branchName, locCode, locName, aggrNo, customerCode, customerFullname, tanggalSerahTerima, tanggalValidasiTerima, tanggalPersediaan, depositSts, statusPersediaan, statusKontrak, subStatusKontrak, nilaiBiayaPenyelesaian, nilaiSisaAr, categoryName, brandCode, brandName, typeCode, typeName, modelCode, modelName, kindCode, kindName, colorName, yearMfg, nopol, chassisNo, machineNo, stnkName, km, stnkExpiredDate, bpkbLocation, bpkbLocationCode, bpkbLocationName, petugasTarik1, petugasTarik2, keterangan, woDate, nilaiAngsuranPokok from (&#xd;	select&#xd;		dep.company_code companyCode,&#xd;		dep.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		dep.loc_code locCode,&#xd;		loc.branch_name locName,&#xd;		dep.aggr_no aggrNo,&#xd;		agg.customer_code customerCode,&#xd;		agg.customer_fullname customerFullname,&#xd;		dep.execution_date tanggalSerahTerima,&#xd;		dep.tu_deposit_date tanggalValidasiTerima,&#xd;		dep.expired_date as tanggalPersediaan,&#xd;		dep.deposit_sts depositSts,&#xd;		--ds.param_descrip statusPersediaan,&#xd;(SELECT ds.param_descrip from mst_global_param ds (nolock) where dep.company_code = ds.company_code and dep.deposit_sts = ds.param_code and ds.condition = 'DEPOSIT_STS' and ds.flag_active = '1') statusPersediaan,&#xd;		ar.notes statusKontrak,&#xd;		ar.trx_name subStatusKontrak,&#xd;		(dep.tu_cost + dep.penalty_tu_value) as nilaiBiayaPenyelesaian,&#xd;		dep.bal_principal_value nilaiAngsuranPokok,&#xd;		(dep.bal_principal_value + dep.bal_int_value + dep.tu_cost + dep.penalty_tu_value) as nilaiSisaAr,&#xd;		--ct.param_descrip categoryName,&#xd;(select ct.param_descrip from mst_global_param ct (NOLOCK) where dep.company_code = ct.company_code and brd.category_code = ct.param_code and ct.condition = 'CATEGORY_CODE' and ct.flag_active = '1') categoryName,&#xd;		ass.brand_code brandCode,&#xd;		brd.brand_name brandName,&#xd;		ass.type_code typeCode,&#xd;		tp.type_name typeName,&#xd;		ass.model_code modelCode,&#xd;		md.model_name modelName,&#xd;		tp.kind_code kindCode,&#xd;		kn.kind_name kindName,&#xd;		cl.color_name colorName,&#xd;		ass.year_mfg yearMfg,&#xd;		ass.nopol nopol,&#xd;		ass.chassis_no chassisNo,&#xd;		ass.machine_no machineNo,&#xd;		ass.bpkb_name stnkName,&#xd;		dep.km km,&#xd;		dep.stnk_expired_date stnkExpiredDate,&#xd;		bpk.bpkb_location bpkbLocation,&#xd;		bpk.bpkb_location_name bpkbLocationCode,&#xd;		bpkl.branch_name bpkbLocationName,&#xd;		pt1.fullname petugasTarik1,&#xd;		pt2.fullname petugasTarik2,&#xd;		dep.notes_pic_receive2 keterangan,&#xd;		agg.wo_date woDate&#xd;	from trx_tu_deposit dep (NOLOCK)&#xd;	left join mst_branch br (NOLOCK)&#xd;	on dep.company_code = br.company_code and dep.branch_code = br.branch_code&#xd;	left join mst_branch loc (NOLOCK)&#xd;	on dep.company_code = loc.company_code and dep.loc_code = loc.branch_code&#xd;	left join trx_aggr agg (NOLOCK)&#xd;	on dep.company_code = agg.company_code and dep.aggr_no = agg.aggr_no&#xd;	--left join mst_global_param ds&#xd;	--on dep.company_code = ds.company_code and dep.deposit_sts = ds.param_code and ds.condition = 'DEPOSIT_STS' and ds.flag_active = '1'&#xd;	left join mst_ar_sts ar (NOLOCK)&#xd;	on agg.ar_sts = ar.ar_sts and isnull(agg.sub_sts, '') = isnull(ar.sub_sts, '')&#xd;	left join trx_aggr_asset ass (NOLOCK)&#xd;	on dep.company_code = ass.company_code and agg.aggr_no = ass.aggr_no&#xd;	left join mst_brand brd (NOLOCK)&#xd;	on dep.company_code = brd.company_code and ass.brand_code = brd.brand_code&#xd;	--left join mst_global_param ct&#xd;	--on dep.company_code = ct.company_code and brd.category_code = ct.param_code and ct.condition = 'CATEGORY_CODE' and ct.flag_active = '1'&#xd;	left join mst_type tp (NOLOCK)&#xd;	on dep.company_code = tp.company_code and ass.type_code = tp.type_code&#xd;	left join mst_kind kn (NOLOCK)&#xd;	on dep.company_code = kn.company_code and tp.kind_code = kn.kind_code&#xd;	left join mst_model md (NOLOCK)&#xd;	on dep.company_code = md.company_code and ass.model_code = md.model_code&#xd;	left join mst_color cl (NOLOCK)&#xd;	on dep.company_code = cl.company_code and ass.color_code = cl.color_code&#xd;	left join mst_bpkb bpk (NOLOCK)&#xd;	on dep.aggr_no = bpk.aggr_no&#xd;	left join mst_branch bpkl (NOLOCK)&#xd;	on bpk.bpkb_location_name = bpkl.branch_code&#xd;	left join trx_sttu stt (NOLOCK)&#xd;	on stt.sttu_no = dep.sttu_no&#xd;	left join mst_employee pt1 (NOLOCK)&#xd;	on stt.pic1_code = pt1.nik&#xd;	left join mst_employee pt2 (NOLOCK)&#xd;	on stt.pic2_code = pt2.nik&#xd;	where dep.deposit_sts in ('1','3','4') and agg.ar_sts != 'LN'&#xd;	&#xd;&#xd;	union all&#xd;&#xd;	select&#xd;		inv.company_code companyCode,&#xd;		inv.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		inv.loc_code loceCode,&#xd;		loc.branch_name locName,&#xd;		inv.aggr_no aggrNo,&#xd;		agg.customer_code customerCode,&#xd;		agg.customer_fullname customerFullname,&#xd;		dep.execution_date tanggalSerahTerima,&#xd;		dep.tu_deposit_date tanggalValidasiTerima,&#xd;		inv.enter_date tanggalPersediaan,&#xd;		case&#xd;			when inv.inventory_sts = '1' then '2'&#xd;		end depositSts,&#xd;		--ds.param_descrip statusPersediaan,&#xd;(select ds.param_descrip from mst_global_param ds (nolock) where inv.company_code = ds.company_code and inv.inventory_sts = ds.param_code and ds.condition = 'INVENTORY_STS' and ds.flag_active = '1') statusPersediaan,&#xd;		ar.notes statusKontrak,&#xd;		ar.trx_name subStatusKontrak,&#xd;		(inv.tu_cost + inv.penalty_tu_value) as nilaiBiayaPenyelesaian,&#xd;		inv.bal_principal_value nilaiAngsuranPokok,&#xd;		(inv.bal_principal_value + inv.bal_int_value + inv.tu_cost + inv.penalty_tu_value) as nilaiSisaAr,&#xd;		--ct.param_descrip categoryName,&#xd;(select ct.param_descrip from mst_global_param ct (nolock) where inv.company_code = ct.company_code and brd.category_code = ct.param_code and ct.condition = 'CATEGORY_CODE' and ct.flag_active = '1') categoryName,&#xd;		ass.brand_code brandCode,&#xd;		brd.brand_name brandName,&#xd;		ass.type_code typeCode,&#xd;		tp.type_name typeName,&#xd;		ass.model_code modelCode,&#xd;		md.model_name modelName,&#xd;		tp.kind_code kindCode,&#xd;		kn.kind_name kindName,&#xd;		cl.color_name colorName,&#xd;		ass.year_mfg yearMfg,&#xd;		ass.nopol nopol,&#xd;		ass.chassis_no chassisNo,&#xd;		ass.machine_no machineNo,&#xd;		ass.bpkb_name stnkName,&#xd;		dep.km km,&#xd;		dep.stnk_expired_date stnkExpiredDate,&#xd;		bpk.bpkb_location bpkbLocation,&#xd;		bpk.bpkb_location_name bpkbLocationCode,&#xd;		bpkl.branch_name bpkbLocationName,&#xd;		pt1.fullname petugasTarik1,&#xd;		pt2.fullname petugasTarik2,&#xd;		dep.notes_pic_receive2 keterangan,&#xd;		agg.wo_date woDate&#xd;	from trx_inventory_tu inv (NOLOCK)&#xd;	left join mst_branch br (NOLOCK)&#xd;	on inv.company_code = br.company_code and inv.branch_code = br.branch_code&#xd;	left join mst_branch loc (NOLOCK)&#xd;	on inv.company_code = br.company_code and inv.loc_code = loc.branch_code&#xd;	left join trx_aggr agg (NOLOCK)&#xd;	on inv.company_code = agg.company_code and inv.aggr_no = agg.aggr_no&#xd;	left join trx_tu_deposit dep (NOLOCK)&#xd;	on inv.company_code = dep.company_code and inv.tu_deposit_no = dep.tu_deposit_no and inv.aggr_no = dep.aggr_no&#xd;	--left join mst_global_param ds&#xd;	--on inv.company_code = ds.company_code and inv.inventory_sts = ds.param_code and ds.condition = 'INVENTORY_STS' and ds.flag_active = '1'&#xd;	left join mst_ar_sts ar (NOLOCK)&#xd;	on agg.ar_sts = ar.ar_sts and isnull(agg.sub_sts, '') = isnull(ar.sub_sts, '')&#xd;	left join trx_aggr_asset ass (NOLOCK)&#xd;	on inv.company_code = ass.company_code and agg.aggr_no = ass.aggr_no&#xd;	left join mst_brand brd (NOLOCK)&#xd;	on inv.company_code = brd.company_code and ass.brand_code = brd.brand_code&#xd;	--left join mst_global_param ct&#xd;	--on inv.company_code = ct.company_code and brd.category_code = ct.param_code and ct.condition = 'CATEGORY_CODE' and ct.flag_active = '1'&#xd;	left join mst_type tp (NOLOCK)&#xd;	on inv.company_code = tp.company_code and ass.type_code = tp.type_code&#xd;	left join mst_kind kn (NOLOCK)&#xd;	on inv.company_code = kn.company_code and tp.kind_code = kn.kind_code&#xd;	left join mst_model md (NOLOCK)&#xd;	on inv.company_code = md.company_code and ass.model_code = md.model_code&#xd;	left join mst_color cl (NOLOCK)&#xd;	on inv.company_code = cl.company_code and ass.color_code = cl.color_code&#xd;	left join mst_bpkb bpk (NOLOCK)&#xd;	on inv.aggr_no = bpk.aggr_no&#xd;	left join mst_branch bpkl (NOLOCK)&#xd;	on bpk.bpkb_location_name = bpkl.branch_code&#xd;	left join trx_sttu stt (NOLOCK)&#xd;	on stt.sttu_no = dep.sttu_no&#xd;	left join mst_employee pt1 (NOLOCK)&#xd;	on stt.pic1_code = pt1.nik&#xd;	left join mst_employee pt2 (NOLOCK)&#xd;	on stt.pic2_code = pt2.nik&#xd;	where inv.inventory_sts in ('1') and agg.ar_sts != 'LN'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locName" name="locName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="tanggalSerahTerima" name="tanggalSerahTerima" xsdType="string"/>
         <element column="tanggalValidasiTerima" name="tanggalValidasiTerima" xsdType="string"/>
         <element column="tanggalPersediaan" name="tanggalPersediaan" xsdType="string"/>
         <element column="statusPersediaan" name="statusPersediaan" xsdType="string"/>
         <element column="statusKontrak" name="statusKontrak" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="nilaiSisaAr" name="nilaiSisaAr" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="bpkbLocationCode" name="bpkbLocationCode" xsdType="string"/>
         <element column="bpkbLocationName" name="bpkbLocationName" xsdType="string"/>
         <element column="petugasTarik1" name="petugasTarik1" xsdType="string"/>
         <element column="petugasTarik2" name="petugasTarik2" xsdType="string"/>
         <element column="keterangan" name="keterangan" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="bpkbLocation" name="bpkbLocation" xsdType="string"/>
         <element column="depositSts" name="depositSts" xsdType="string"/>
         <element column="subStatusKontrak" name="subStatusKontrak" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="nilaiAngsuranPokok" name="nilaiAngsuranPokok" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="findBranchCodeBiayaTarikUnit" useConfig="collectiondso1">
      <sql>declare @REQ_COST_NO varchar(50) = :reqCostNo&#xd;&#xd;SELECT branchCode, branchName, aggrNo, customerFullname FROM (&#xd;	SELECT &#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname&#xd;	FROM TRX_STTU_COST_HDR A (nolock)&#xd;	LEFT JOIN MST_BRANCH B (nolock)&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN TRX_AGGR C (nolock)&#xd;	ON A.AGGR_NO = C.AGGR_NO AND A.COMPANY_CODE = C.COMPANY_CODE&#xd;	WHERE A.COMPANY_CODE = 'EDV' AND A.REQ_COST_NO = @REQ_COST_NO&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
      </result>
      <param name="reqCostNo" sqlType="STRING"/>
   </query>
   <query id="getColumnMonitorUtj" useConfig="collectiondso1">
      <sql>SELECT seqNo, reffDate, reffNo, utjTransName, beginningValue, plusValue, bookValue, usageValue, balanceValue, noKontrakPenerimaUtj, namaDebiturPenerimaUtj FROM (&#xd;SELECT 1 seqNo,1 reffDate,1 reffNo,1 utjTransName,1 beginningValue,1 plusValue,1 bookValue,1 usageValue,1 balanceValue,1 noKontrakPenerimaUtj,1 namaDebiturPenerimaUtj&#xd;) a</sql>
      <result element="Entries" rowName="">
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="reffDate" name="reffDate" xsdType="string"/>
         <element column="reffNo" name="reffNo" xsdType="string"/>
         <element column="utjTransName" name="utjTransName" xsdType="string"/>
         <element column="beginningValue" name="beginningValue" xsdType="string"/>
         <element column="plusValue" name="plusValue" xsdType="string"/>
         <element column="bookValue" name="bookValue" xsdType="string"/>
         <element column="usageValue" name="usageValue" xsdType="string"/>
         <element column="balanceValue" name="balanceValue" xsdType="string"/>
         <element column="noKontrakPenerimaUtj" name="noKontrakPenerimaUtj" xsdType="string"/>
         <element column="namaDebiturPenerimaUtj" name="namaDebiturPenerimaUtj" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMonitorUtj" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;(SELECT PRODUCT_CODE FROM TRX_AGGR (NOLOCK) WHERE AGGR_NO=A.AGGR_NO_RECIPIENT AND COMPANY_CODE=A.COMPANY_CODE) productCode,&#xd;		A.SEQ_NO seqNo,&#xd;		A.REFF_DATE reffDate,&#xd;		A.REFF_NO reffNo,&#xd;		A.UTJ_TRANS_CODE utjTransCode,&#xd;		--B.PARAM_DESCRIP utjTransName,&#xd;(SELECT B.PARAM_DESCRIP FROM MST_GLOBAL_PARAM B (nolock) WHERE A.COMPANY_CODE=B.COMPANY_CODE AND A.UTJ_TRANS_CODE = B.PARAM_CODE AND B.CONDITION = 'UTJ_TRANS_CODE' AND B.FLAG_ACTIVE = '1') utjTransName,&#xd;		A.BEGINNING_VALUE beginningValue,&#xd;		A.PLUS_VALUE plusValue,&#xd;		A.BOOK_VALUE bookValue,&#xd;		A.USAGE_VALUE usageValue,&#xd;		A.BALANCE_VALUE balanceValue,&#xd;		A.AGGR_NO_RECIPIENT noKontrakPenerimaUtj,&#xd;		--C.CUSTOMER_CODE customerCode,&#xd;(SELECT C.CUSTOMER_CODE FROM TRX_AGGR C (NOLOCK) WHERE A.AGGR_NO = C.AGGR_NO AND A.COMPANY_CODE=C.COMPANY_CODE) customerCode,&#xd;(SELECT CUSTOMER_FULLNAME FROM TRX_AGGR (NOLOCK) WHERE AGGR_NO=A.AGGR_NO_RECIPIENT AND COMPANY_CODE=A.COMPANY_CODE) namaDebiturPenerimaUtj,&#xd;(SELECT GROUP_CODE FROM TRX_AGGR (NOLOCK) WHERE AGGR_NO=A.AGGR_NO_RECIPIENT AND COMPANY_CODE=A.COMPANY_CODE) groupCode,&#xd;(SELECT MG.GROUP_NAME FROM TRX_AGGR AG (NOLOCK)&#xd;					JOIN MST_GROUP_HDR MG (NOLOCK) ON MG.GROUP_CODE = AG.GROUP_CODE AND MG.COMPANY_CODE=AG.COMPANY_CODE&#xd;					WHERE AG.AGGR_NO=A.AGGR_NO_RECIPIENT)&#xd;		 groupName,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.CREATED_DATE createdDate&#xd;	FROM TRX_UTJ A (NOLOCK)&#xd;	--LEFT JOIN MST_GLOBAL_PARAM B&#xd;	--ON A.UTJ_TRANS_CODE = B.PARAM_CODE AND B.CONDITION = 'UTJ_TRANS_CODE' AND B.FLAG_ACTIVE = '1'&#xd;	--LEFT JOIN TRX_AGGR C (NOLOCK)&#xd;	--ON A.AGGR_NO = C.AGGR_NO AND A.COMPANY_CODE=C.COMPANY_CODE AND A.BRANCH_CODE=C.BRANCH_CODE&#xd;	--LEFT JOIN MST_GROUP_HDR D&#xd;	--ON C.GROUP_CODE = D.GROUP_CODE&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMonitorUtj" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, productCode, seqNo, reffDate, reffNo, utjTransCode, utjTransName, beginningValue, plusValue, bookValue, usageValue, balanceValue, noKontrakPenerimaUtj, customerCode, namaDebiturPenerimaUtj, groupCode, groupName&#xd;FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;(SELECT PRODUCT_CODE FROM TRX_AGGR (NOLOCK) WHERE AGGR_NO=A.AGGR_NO_RECIPIENT AND COMPANY_CODE=A.COMPANY_CODE) productCode,&#xd;		A.SEQ_NO seqNo,&#xd;		A.REFF_DATE reffDate,&#xd;		A.REFF_NO reffNo,&#xd;		A.UTJ_TRANS_CODE utjTransCode,&#xd;		--B.PARAM_DESCRIP utjTransName,&#xd;(SELECT B.PARAM_DESCRIP FROM MST_GLOBAL_PARAM B (nolock) WHERE A.COMPANY_CODE=B.COMPANY_CODE AND A.UTJ_TRANS_CODE = B.PARAM_CODE AND B.CONDITION = 'UTJ_TRANS_CODE' AND B.FLAG_ACTIVE = '1') utjTransName,&#xd;		A.BEGINNING_VALUE beginningValue,&#xd;		A.PLUS_VALUE plusValue,&#xd;		A.BOOK_VALUE bookValue,&#xd;		A.USAGE_VALUE usageValue,&#xd;		A.BALANCE_VALUE balanceValue,&#xd;		A.AGGR_NO_RECIPIENT noKontrakPenerimaUtj,&#xd;		--C.CUSTOMER_CODE customerCode,&#xd;(SELECT C.CUSTOMER_CODE FROM TRX_AGGR C (NOLOCK) WHERE A.AGGR_NO = C.AGGR_NO AND A.COMPANY_CODE=C.COMPANY_CODE) customerCode,&#xd;(SELECT CUSTOMER_FULLNAME FROM TRX_AGGR (NOLOCK) WHERE AGGR_NO=A.AGGR_NO_RECIPIENT AND COMPANY_CODE=A.COMPANY_CODE) namaDebiturPenerimaUtj,&#xd;(SELECT GROUP_CODE FROM TRX_AGGR (NOLOCK) WHERE AGGR_NO=A.AGGR_NO_RECIPIENT AND COMPANY_CODE=A.COMPANY_CODE) groupCode,&#xd;(SELECT MG.GROUP_NAME FROM TRX_AGGR AG (NOLOCK)&#xd;					JOIN MST_GROUP_HDR MG (NOLOCK) ON MG.GROUP_CODE = AG.GROUP_CODE AND MG.COMPANY_CODE=AG.COMPANY_CODE&#xd;					WHERE AG.AGGR_NO=A.AGGR_NO_RECIPIENT)&#xd;		 groupName,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.CREATED_DATE createdDate&#xd;	FROM TRX_UTJ A (NOLOCK)&#xd;	--LEFT JOIN MST_GLOBAL_PARAM B&#xd;	--ON A.UTJ_TRANS_CODE = B.PARAM_CODE AND B.CONDITION = 'UTJ_TRANS_CODE' AND B.FLAG_ACTIVE = '1'&#xd;	--LEFT JOIN TRX_AGGR C (NOLOCK)&#xd;	--ON A.AGGR_NO = C.AGGR_NO AND A.COMPANY_CODE=C.COMPANY_CODE AND A.BRANCH_CODE=C.BRANCH_CODE&#xd;	--LEFT JOIN MST_GROUP_HDR D&#xd;	--ON C.GROUP_CODE = D.GROUP_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="seqNo" name="seqNo" xsdType="string"/>
         <element column="reffDate" name="reffDate" xsdType="string"/>
         <element column="reffNo" name="reffNo" xsdType="string"/>
         <element column="utjTransCode" name="utjTransCode" xsdType="string"/>
         <element column="utjTransName" name="utjTransName" xsdType="string"/>
         <element column="beginningValue" name="beginningValue" xsdType="string"/>
         <element column="plusValue" name="plusValue" xsdType="string"/>
         <element column="bookValue" name="bookValue" xsdType="string"/>
         <element column="usageValue" name="usageValue" xsdType="string"/>
         <element column="balanceValue" name="balanceValue" xsdType="string"/>
         <element column="noKontrakPenerimaUtj" name="noKontrakPenerimaUtj" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="namaDebiturPenerimaUtj" name="namaDebiturPenerimaUtj" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovNomorKontrakSp" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 address, 1 rt, 1 rw, 1 villageName, 1 subdistrictName, 1 cityName, 1 provinceName, 1 zipCode, 1 dayOverdue</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNomorKontrakSp" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.COLL_CODE collCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		A.CUSTOMER_CODE customerCode,&#xd;		A.APPL_NO applNo,&#xd;		A.WO_DATE woDate,&#xd;		A.TENOR tenor,&#xd;		(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;		) as dayOverdue,&#xd;		(&#xd;				SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;				) a&#xd;		) as instFrom,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN &#xd;					(&#xd;					SELECT &#xd;						convert(varchar(10),MAX(INST_NO)) &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() &#xd;					) IS NULL THEN (&#xd;									SELECT &#xd;										MIN(INST_NO) instTo&#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;								)&#xd;				ELSE&#xd;					(SELECT &#xd;						MAX(INST_NO) instNo &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;			END RESULT&#xd;		) as instTo,&#xd;		(&#xd;&#xd;			SELECT SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID))&#xd;				&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND &#xd;				INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;				) a) &#xd;				AND&#xd;				INST_NO &lt;= (SELECT &#xd;							CASE &#xd;								WHEN &#xd;									(&#xd;									SELECT &#xd;										convert(varchar(10),MAX(INST_NO)) &#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;									) IS NULL THEN (&#xd;													SELECT &#xd;														MIN(INST_NO) instTo&#xd;													FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;												)&#xd;								ELSE&#xd;									(SELECT &#xd;										MAX(INST_NO) instNo &#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;							END RESULT)&#xd;				AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;		) as tagihanAngsuran,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_ADDRESS&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RT&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RW&#xd;			END AS RESULT&#xd;		) as rw,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END&#xd;		) as subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END&#xd;		) as cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END&#xd;		) as provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END&#xd;		) as zipCode,&#xd;		(&#xd;			SELECT TOP 1 dueDate FROM (&#xd;				SELECT &#xd;					MIN(INST_NO) instNo,&#xd;					DUE_DATE dueDate&#xd;				FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;				GROUP BY DUE_DATE&#xd;			) a&#xd;		) as dueDate,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(PINALTY_VALUE, 0) - ISNULL(PINALTY_PAID, 0)) as penaltyFee&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as penaltyFee,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(COLL_FEE, 0) - ISNULL(COLL_FEE_PAID, 0)) as collFee&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as collFee,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(PRINCIPAL_PAID, 0) - ISNULL(INT_PAID, 0)) as installmentPaid&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as installmentPaid,&#xd;		(&#xd;			SELECT &#xd;				ISNULL(BEGIN_BAL,0) - ISNULL(USAGE_VALUE,0) - ISNULL(BOOK_VALUE,0) + ISNULL(PLUS_VALUE,0)&#xd;			FROM MST_UTJ (nolock) WHERE COMPANY_CODE = A.COMPANY_CODE AND AGGR_NO = A.AGGR_NO&#xd;		) as utjBalance,&#xd;		A.AR_STS arSts,&#xd;		isnull(A.SUB_STS, '') subSts,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		D.FULLNAME collName,&#xd;		E.DSO_CODE dsoCode&#xd;	FROM TRX_AGGR A (nolock)&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO &#xd;	LEFT JOIN MST_EMPLOYEE D (nolock)&#xd;	ON A.COLL_CODE = D.NIK&#xd;	LEFT JOIN MST_BRANCH E (nolock)&#xd;	ON A.COMPANY_CODE = E.COMPANY_CODE AND A.BRANCH_CODE = E.BRANCH_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON A.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON A.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON A.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;	WHERE B.PAYMENT_STS = 'UNPAID' AND B.COLL_DUE_DATE &lt;= GETDATE() AND NOT EXISTS (SELECT 1 FROM TRX_SP sp (nolock) WHERE sp.EXPIRED_DATE &gt; GETDATE() AND sp.SP_STS != 'CANC' and sp.AGGR_NO=A.AGGR_NO)&#xd;) a WHERE (ISNULL(woDate, '') = '' OR woDate = '1900-01-01') AND dayOverdue &gt; 1 AND :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNomorKontrakSp" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, branchCode, productCode, collCode, aggrNo, customerFullname, customerCode, applNo, woDate, dayOverdue, instFrom, instTo, tagihanAngsuran, address, rt, rw, villageName, &#xd;subdistrictName, cityName, provinceName, zipCode, tenor, dueDate, arSts, subSts, bucketCode, bucketType, collName, dsoCode, penaltyFee, collFee, installmentPaid, isnull(utjBalance, 0) as utjBalance FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.COLL_CODE collCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		A.CUSTOMER_CODE customerCode,&#xd;		A.APPL_NO applNo,&#xd;		A.WO_DATE woDate,&#xd;		A.TENOR tenor,&#xd;		(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;		) as dayOverdue,&#xd;		(&#xd;				SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;				) a&#xd;		) as instFrom,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN &#xd;					(&#xd;					SELECT &#xd;						convert(varchar(10),MAX(INST_NO)) &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() &#xd;					) IS NULL THEN (&#xd;									SELECT &#xd;										MIN(INST_NO) instTo&#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;								)&#xd;				ELSE&#xd;					(SELECT &#xd;						MAX(INST_NO) instNo &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;			END RESULT&#xd;		) as instTo,&#xd;		(&#xd;&#xd;			SELECT SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID))&#xd;				&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND &#xd;				INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;				) a) &#xd;				AND&#xd;				INST_NO &lt;= (SELECT &#xd;							CASE &#xd;								WHEN &#xd;									(&#xd;									SELECT &#xd;										convert(varchar(10),MAX(INST_NO)) &#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;									) IS NULL THEN (&#xd;													SELECT &#xd;														MIN(INST_NO) instTo&#xd;													FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;												)&#xd;								ELSE&#xd;									(SELECT &#xd;										MAX(INST_NO) instNo &#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;							END RESULT)&#xd;				AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;		) as tagihanAngsuran,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_ADDRESS&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RT&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RW&#xd;			END AS RESULT&#xd;		) as rw,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END&#xd;		) as subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END&#xd;		) as cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END&#xd;		) as provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END&#xd;		) as zipCode,&#xd;		(&#xd;			SELECT TOP 1 dueDate FROM (&#xd;				SELECT &#xd;					MIN(INST_NO) instNo,&#xd;					DUE_DATE dueDate&#xd;				FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;				GROUP BY DUE_DATE&#xd;			) a&#xd;		) as dueDate,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(PINALTY_VALUE, 0) - ISNULL(PINALTY_PAID, 0)) as penaltyFee&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as penaltyFee,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(COLL_FEE, 0) - ISNULL(COLL_FEE_PAID, 0)) as collFee&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as collFee,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(PRINCIPAL_PAID, 0) - ISNULL(INT_PAID, 0)) as installmentPaid&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as installmentPaid,&#xd;		(&#xd;			SELECT &#xd;				ISNULL(BEGIN_BAL,0) - ISNULL(USAGE_VALUE,0) - ISNULL(BOOK_VALUE,0) + ISNULL(PLUS_VALUE,0)&#xd;			FROM MST_UTJ (nolock) WHERE COMPANY_CODE = A.COMPANY_CODE AND AGGR_NO = A.AGGR_NO&#xd;		) as utjBalance,&#xd;		A.AR_STS arSts,&#xd;		isnull(A.SUB_STS, '') subSts,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		D.FULLNAME collName,&#xd;		E.DSO_CODE dsoCode&#xd;	FROM TRX_AGGR A (nolock)&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO &#xd;	LEFT JOIN MST_EMPLOYEE D (nolock)&#xd;	ON A.COLL_CODE = D.NIK&#xd;	LEFT JOIN MST_BRANCH E (nolock)&#xd;	ON A.COMPANY_CODE = E.COMPANY_CODE AND A.BRANCH_CODE = E.BRANCH_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON A.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON A.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON A.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;	WHERE B.PAYMENT_STS = 'UNPAID' AND B.COLL_DUE_DATE &lt;= GETDATE() AND  NOT EXISTS (SELECT 1 FROM TRX_SP sp (nolock) WHERE sp.EXPIRED_DATE &gt; GETDATE() AND sp.SP_STS != 'CANC' and sp.AGGR_NO=A.AGGR_NO)&#xd;) a WHERE (ISNULL(woDate, '') = '' OR woDate = '1900-01-01') AND dayOverdue &gt; 1 AND &#xd;:search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="applNo" name="applNo" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="penaltyFee" name="penaltyFee" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="installmentPaid" name="installmentPaid" xsdType="string"/>
         <element column="utjBalance" name="utjBalance" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovNomorKontrakIndex" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 address, 1 villageName, 1 dayOverdue</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNomorKontrakIndex" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total from (&#xd;SELECT DISTINCT companyCode, aggrNo, customerFullname, address, villageName, isnull(dayOverdue, 0) dayOverdue  FROM (&#xd;	SELECT DISTINCT companyCode, branchCode, dsoCode, productCode, collCode, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;		SELECT&#xd;			SP.COMPANY_CODE companyCode,&#xd;			SP.BRANCH_CODE branchCode,&#xd;			VB.DSO_CODE dsoCode,&#xd;			SP.PRODUCT_CODE productCode,&#xd;			SP.COLL_CODE collCode,&#xd;			SP.AGGR_NO aggrNo,&#xd;			AGG.CUSTOMER_FULLNAME customerFullname,&#xd;			CASE &#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN CUS.ID_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN CUS.DOMICILE_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN CE.OFFICE_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN CEB.OFFICE_ADDRESS&#xd;			END AS address,&#xd;			CASE &#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END AS villageName,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = SP.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = SP.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			AGG.WO_DATE woDate,&#xd;			AGG.AR_STS arSts,&#xd;			AGG.SUB_STS subSts&#xd;		FROM TRX_SP SP (nolock)&#xd;		LEFT JOIN TRX_AGGR AGG (nolock)&#xd;		ON SP.COMPANY_CODE = AGG.COMPANY_CODE AND SP.AGGR_NO = AGG.AGGR_NO&#xd;		LEFT JOIN getViewBranch() VB&#xd;		ON SP.COMPANY_CODE = VB.COMPANY_CODE AND SP.BRANCH_CODE = VB.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CUS (nolock)&#xd;		ON SP.COMPANY_CODE = CUS.COMPANY_CODE AND AGG.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV (nolock)&#xd;		ON SP.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV (nolock)&#xd;		ON SP.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CE (nolock)&#xd;		ON SP.COMPANY_CODE = CE.COMPANY_CODE AND AGG.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE OV (nolock)&#xd;		ON SP.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB (nolock)&#xd;		ON SP.COMPANY_CODE = CEB.COMPANY_CODE AND AGG.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV (nolock)&#xd;		ON SP.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;		WHERE SP.PRODUCT_CODE = 'PC02'&#xd;	) a&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT companyCode, branchCode, dsoCode, productCode, collCode, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			VB.DSO_CODE dsoCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CUS.ID_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CUS.DOMICILE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN CE.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN CEB.OFFICE_ADDRESS&#xd;			END AS address,&#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END AS villageName,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			A.WO_DATE woDate,&#xd;			A.AR_STS arSts,&#xd;			A.SUB_STS subSts&#xd;		FROM TRX_AGGR A (nolock)&#xd;		LEFT JOIN TRX_AGGR_SCHEDULE B (nolock)&#xd;		ON A.COMPANY_CODE = B.COMPANY_CODE AND A.AGGR_NO = B.AGGR_NO&#xd;		LEFT JOIN getViewBranch() VB&#xd;		ON A.COMPANY_CODE = VB.COMPANY_CODE AND A.BRANCH_CODE = VB.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CUS (nolock)&#xd;		ON A.COMPANY_CODE = CUS.COMPANY_CODE AND A.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV (nolock)&#xd;		ON A.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV (nolock)&#xd;		ON A.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CE (nolock)&#xd;		ON A.COMPANY_CODE = CE.COMPANY_CODE AND A.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE OV (nolock)&#xd;		ON A.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB (nolock)&#xd;		ON A.COMPANY_CODE = CEB.COMPANY_CODE AND A.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV (nolock)&#xd;		ON A.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;		WHERE B.PAYMENT_STS = 'UNPAID' AND B.COLL_DUE_DATE &lt;= GETDATE() AND A.PRODUCT_CODE = 'PC02' AND  NOT EXISTS (SELECT 1 FROM TRX_SP (nolock) WHERE EXPIRED_DATE &gt; GETDATE() AND SP_STS != 'CANC' AND AGGR_NO=A.AGGR_NO)&#xd;	) a WHERE arSts in ('AR') and subSts not in ('TP','SU','CM','DL') and (ISNULL(woDate, '') = '' OR woDate = '1900-01-01') AND dayOverdue &gt; 1&#xd;) a WHERE :search :filter&#xd;) b</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNomorKontrakIndex" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, aggrNo, customerFullname, address, villageName, isnull(dayOverdue, 0) dayOverdue  FROM (&#xd;	SELECT DISTINCT companyCode, branchCode, dsoCode, productCode, collCode, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;		SELECT&#xd;			SP.COMPANY_CODE companyCode,&#xd;			SP.BRANCH_CODE branchCode,&#xd;			VB.DSO_CODE dsoCode,&#xd;			SP.PRODUCT_CODE productCode,&#xd;			SP.COLL_CODE collCode,&#xd;			SP.AGGR_NO aggrNo,&#xd;			AGG.CUSTOMER_FULLNAME customerFullname,&#xd;			CASE &#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN CUS.ID_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN CUS.DOMICILE_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN CE.OFFICE_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN CEB.OFFICE_ADDRESS&#xd;			END AS address,&#xd;			CASE &#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END AS villageName,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = SP.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = SP.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			AGG.WO_DATE woDate,&#xd;			AGG.AR_STS arSts,&#xd;			AGG.SUB_STS subSts&#xd;		FROM TRX_SP SP (nolock)&#xd;		LEFT JOIN TRX_AGGR AGG (nolock)&#xd;		ON SP.COMPANY_CODE = AGG.COMPANY_CODE AND SP.AGGR_NO = AGG.AGGR_NO&#xd;		LEFT JOIN getViewBranch() VB&#xd;		ON SP.COMPANY_CODE = VB.COMPANY_CODE AND SP.BRANCH_CODE = VB.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CUS (nolock)&#xd;		ON SP.COMPANY_CODE = CUS.COMPANY_CODE AND AGG.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV (nolock)&#xd;		ON SP.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV (nolock)&#xd;		ON SP.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CE (nolock)&#xd;		ON SP.COMPANY_CODE = CE.COMPANY_CODE AND AGG.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE OV (nolock)&#xd;		ON SP.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB (nolock)&#xd;		ON SP.COMPANY_CODE = CEB.COMPANY_CODE AND AGG.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV (nolock)&#xd;		ON SP.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;		WHERE SP.PRODUCT_CODE = 'PC02'&#xd;	) a&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT companyCode, branchCode, dsoCode, productCode, collCode, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			VB.DSO_CODE dsoCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CUS.ID_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CUS.DOMICILE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN CE.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN CEB.OFFICE_ADDRESS&#xd;			END AS address,&#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END AS villageName,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			A.WO_DATE woDate,&#xd;			A.AR_STS arSts,&#xd;			A.SUB_STS subSts&#xd;		FROM TRX_AGGR A (nolock)&#xd;		LEFT JOIN TRX_AGGR_SCHEDULE B (nolock)&#xd;		ON A.COMPANY_CODE = B.COMPANY_CODE AND A.AGGR_NO = B.AGGR_NO&#xd;		LEFT JOIN getViewBranch() VB&#xd;		ON A.COMPANY_CODE = VB.COMPANY_CODE AND A.BRANCH_CODE = VB.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CUS (nolock)&#xd;		ON A.COMPANY_CODE = CUS.COMPANY_CODE AND A.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV (nolock)&#xd;		ON A.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV (nolock)&#xd;		ON A.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CE (nolock)&#xd;		ON A.COMPANY_CODE = CE.COMPANY_CODE AND A.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE OV (nolock)&#xd;		ON A.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB (nolock)&#xd;		ON A.COMPANY_CODE = CEB.COMPANY_CODE AND A.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV (nolock)&#xd;		ON A.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;		WHERE B.PAYMENT_STS = 'UNPAID' AND B.COLL_DUE_DATE &lt;= GETDATE() AND A.PRODUCT_CODE = 'PC02' AND  NOT EXISTS (SELECT 1 FROM TRX_SP (nolock) WHERE EXPIRED_DATE &gt; GETDATE() AND SP_STS != 'CANC' AND AGGR_NO=A.AGGR_NO)&#xd;	) a WHERE arSts in ('AR') and subSts not in ('TP','SU','CM','DL') and (ISNULL(woDate, '') = '' OR woDate = '1900-01-01') AND dayOverdue &gt; 1&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateTrxTuSolving" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @BRANCH_CODE varchar(10) = :branchCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;DECLARE @TU_SOLVING_DATE date = :tuSolvingDate&#xd;DECLARE @TU_SOLVING_TYPE varchar(10) = :tuSolvingType&#xd;&#xd;UPDATE TRX_TU_SOLVING SET&#xd;        TU_SOLVING_DATE = :tuSolvingDateNew,&#xd;        NOTES = :notes,&#xd;        INVENTORY_DATE_OLD = :inventoryDateOld,&#xd;        INVENTORY_DATE_NEW = :inventoryDateNew,&#xd;        APPV_STS = :appvSts,&#xd;        APPV_DATE = :appvDate,&#xd;        TOT_PAYMENT = :totPayment,&#xd;        PAY_INSTALL_BILL = :payInstallBill,&#xd;        PAY_COLL_FEE = :payCollFee,&#xd;        PAY_PENALTY = :payPenalty,&#xd;        PAY_PENALTY_TU = :payPenaltyTu,&#xd;        PAY_COST_TU = :payCostTu,&#xd;        DISCOUNT_VALUE = :discountValue,&#xd;        UPDATED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE   = @BRANCH_CODE AND&#xd;        TU_DEPOSIT_NO = @TU_DEPOSIT_NO AND&#xd;        TU_SOLVING_DATE = @TU_SOLVING_DATE AND&#xd;		TU_SOLVING_TYPE = @TU_SOLVING_TYPE</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuSolvingDateNew" sqlType="STRING"/>
      <param name="tuSolvingType" sqlType="STRING"/>
      <param name="notes" sqlType="STRING"/>
      <param name="inventoryDateOld" sqlType="STRING"/>
      <param name="inventoryDateNew" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="appvDate" sqlType="STRING"/>
      <param name="totPayment" sqlType="STRING"/>
      <param name="payInstallBill" sqlType="STRING"/>
      <param name="payCollFee" sqlType="STRING"/>
      <param name="payPenalty" sqlType="STRING"/>
      <param name="payPenaltyTu" sqlType="STRING"/>
      <param name="payCostTu" sqlType="STRING"/>
      <param name="discountValue" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
   </query>
   <query id="updateSolvingTypeTuDeposit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @TU_SOLVING_TIPE VARCHAR(10) = :tuSolvingType&#xd;DECLARE @TU_SOLVING_DATE_NEW VARCHAR(30) = :tuSolvingDateNew&#xd;DECLARE @UPDATED_BY VARCHAR(50) = :updatedBy&#xd;DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @TU_DEPOSIT_NO VARCHAR(50) = :tuDepositNo&#xd;&#xd;IF(@TU_SOLVING_TIPE = '1' OR @TU_SOLVING_TIPE = '3' OR @TU_SOLVING_TIPE = '4' OR @TU_SOLVING_TIPE = '5')&#xd;BEGIN&#xd;	UPDATE TRX_TU_DEPOSIT SET&#xd;			SOLVING_TYPE = @TU_SOLVING_TIPE,&#xd;			SOLVING_DATE = @TU_SOLVING_DATE_NEW,&#xd;			DEPOSIT_STS = '3',&#xd;			UPDATED_DATE = GETDATE(),&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE&#xd;			COMPANY_CODE = @COMPANY_CODE AND&#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO&#xd;END&#xd;ELSE&#xd;BEGIN&#xd;	UPDATE TRX_TU_DEPOSIT SET&#xd;			SOLVING_TYPE = @TU_SOLVING_TIPE,&#xd;			SOLVING_DATE = @TU_SOLVING_DATE_NEW,&#xd;			DEPOSIT_STS = '3',&#xd;			UPDATED_DATE = GETDATE(),&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE&#xd;			COMPANY_CODE = @COMPANY_CODE AND&#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO&#xd;END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuSolvingType" sqlType="STRING"/>
      <param name="tuSolvingDateNew" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
   </query>
   <query id="getSolvingTypeTuDeposit" useConfig="collectiondso1">
      <sql>SELECT solvingType FROM (&#xd;        SELECT&#xd;                SOLVING_TYPE solvingType &#xd;        FROM TRX_TU_DEPOSIT&#xd;        WHERE   COMPANY_CODE = :companyCode AND TU_DEPOSIT_NO = :tuDepositNo&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="solvingType" name="solvingType" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="updateAppvStsTuDeposit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE TRX_TU_DEPOSIT SET&#xd;	APPV_STS = :appvSts&#xd;WHERE	&#xd;	TU_DEPOSIT_NO = :tuDepositNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="appvSts" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="updateSellStsSellHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE TRX_SELL_HDR SET&#xd;	SELL_STS = :sellSts&#xd;WHERE	&#xd;	SELL_NO = :sellNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sellSts" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
   </query>
   <query id="updateSellingTrxSellHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @SELL_NO varchar(50) = :sellNo&#xd;&#xd;UPDATE TRX_SELL_HDR SET&#xd;        TOT_SELLING = :totSelling,&#xd;        TOT_SELL_LOSS = :totSellLoss,&#xd;        UPDATE_DATE = GETDATE(),&#xd;        UPDATE_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        SELL_NO = @SELL_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="totSelling" sqlType="STRING"/>
      <param name="totSellLoss" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
   </query>
   <query id="updateSellingTrxSellUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @SELL_NO varchar(50) = :sellNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;UPDATE TRX_SELL_UNIT SET&#xd;        SELLING = :selling,&#xd;        SELL_LOSS = :sellLoss,&#xd;        UPDATE_DATE = GETDATE(),&#xd;        UPDATE_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        SELL_NO = @SELL_NO AND&#xd;        AGGR_NO = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="selling" sqlType="STRING"/>
      <param name="sellLoss" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="updateWinnerStsTrxSellBidder" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @SELL_NO varchar(50) = :sellNo&#xd;declare @SEQ_NO numeric(3,0) = :seqNo&#xd;&#xd;UPDATE TRX_SELL_BIDDER SET&#xd;        WINNER_STS = :winnerSts,&#xd;        UPDATE_DATE = GETDATE(),&#xd;        UPDATE_BY = :updatedBy&#xd;WHERE&#xd;        COMPANY_CODE = @COMPANY_CODE AND&#xd;        BRANCH_CODE = @BRANCH_CODE AND&#xd;        SELL_NO = @SELL_NO AND&#xd;        SEQ_NO = @SEQ_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="winnerSts" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="seqNo" sqlType="STRING"/>
   </query>
   <query id="updateSttuStsTrxSttu" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE TRX_STTU SET&#xd;        STTU_STS = :sttuSts,&#xd;        STTU_STS_DATE = GETDATE(),&#xd;        APPV_DATE = GETDATE()&#xd;WHERE&#xd;        STTU_NO = :sttuNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sttuSts" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
   </query>
   <query id="findBranchCodeSellHdr" useConfig="collectiondso1">
      <sql>SELECT branchCode, branchName, sellType, sellTypeName, paymentType, paymentTypeName FROM (&#xd;	SELECT &#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.SELL_TYPE sellType,&#xd;		C.PARAM_DESCRIP sellTypeName,&#xd;		A.PAYMENT_TYPE paymentType,&#xd;		D.PARAM_DESCRIP paymentTypeName&#xd;	FROM TRX_SELL_HDR A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.SELL_TYPE = C.PARAM_CODE AND C.CONDITION = 'SELL_TYPE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;	ON A.PAYMENT_TYPE = D.PARAM_CODE AND D.CONDITION = 'SELL_PAYMENT_TYPE' AND D.FLAG_ACTIVE = '1'&#xd;	WHERE SELL_NO = :sellNo&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="sellType" name="sellType" xsdType="string"/>
         <element column="sellTypeName" name="sellTypeName" xsdType="string"/>
         <element column="paymentType" name="paymentType" xsdType="string"/>
         <element column="paymentTypeName" name="paymentTypeName" xsdType="string"/>
      </result>
      <param name="sellNo" sqlType="STRING"/>
   </query>
   <query id="prosesBayarPenjualanTarikUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE  VARCHAR(50) = :companyCode&#xd;DECLARE @BRANCH_CODE  VARCHAR(50) = :branchCode&#xd;DECLARE @SELL_NO  VARCHAR(50) = :sellNo&#xd;DECLARE @CREATED_BY  VARCHAR(50) = :createdBy&#xd;&#xd;UPDATE TRX_SELL_HDR SET&#xd;	SELL_STS = 'PAYM',&#xd;	UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = @CREATED_BY&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	SELL_NO = @SELL_NO&#xd;&#xd;INSERT INTO TRX_PAYMENT_HDR&#xd;(&#xd;	COMPANY_CODE,&#xd;	BRANCH_CODE,&#xd;	TRX_NO,&#xd;	PAYMENT_TYPE_CODE,&#xd;	PRODUCT,&#xd;	REF_NO,&#xd;	REF_DATE,&#xd;	TRX_DATE,&#xd;	REVERSE_STS,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	@COMPANY_CODE,&#xd;	@BRANCH_CODE,&#xd;	:trxNo,&#xd;	'bayarjualtarikbrg',&#xd;	'PC03',&#xd;	@SELL_NO,&#xd;	:sellDate,&#xd;	GETDATE(),&#xd;	'0',&#xd;	GETDATE(),&#xd;	@CREATED_BY&#xd;)&#xd;&#xd;UPDATE TRX_INVENTORY_TU SET&#xd;	INVENTORY_STS = '4',&#xd;	UPDATED_BY = @CREATED_BY,&#xd;	UPDATED_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE&#xd;AND TU_DEPOSIT_NO IN (SELECT TU_DEPOSIT_NO FROM TRX_SELL_UNIT WHERE SELL_NO = @SELL_NO AND FLAG_ACTIVE = '1')&#xd;AND AGGR_NO IN (SELECT AGGR_NO FROM TRX_SELL_UNIT WHERE SELL_NO = @SELL_NO AND FLAG_ACTIVE = '1')</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="sellDate" sqlType="STRING"/>
   </query>
   <query id="appvStsSerahTerimaUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @TU_DEPOSIT_NO  VARCHAR(50) = :tuDepositNo&#xd;DECLARE @APPV_STS  VARCHAR(50) = :appvSts&#xd;DECLARE @SOLVING_TYPE VARCHAR(10) = :solvingType&#xd;DECLARE @TU_SOLVING_DATE VARCHAR(50) = :tuSolvingDate&#xd;DECLARE @DATE_INVENTORY_NEW VARCHAR(50) = :dateInventoryNew&#xd;DECLARE @UPDATED_BY VARCHAR(50) = :updatedBy&#xd;&#xd;&#xd;&#xd;IF(@SOLVING_TYPE IN ('1') AND @APPV_STS = 'APPD')&#xd;BEGIN&#xd;	UPDATE TRX_TU_SOLVING SET&#xd;			APPV_STS = @APPV_STS,&#xd;			APPV_DATE = GETDATE(),&#xd;			UPDATED_DATE = GETDATE(),&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE   &#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO AND&#xd;			TU_SOLVING_TYPE = @SOLVING_TYPE AND&#xd;			TU_SOLVING_DATE = @TU_SOLVING_DATE&#xd;&#xd;	UPDATE TRX_TU_DEPOSIT SET&#xd;			UPDATED_DATE = GETDATE(),&#xd;			DEPOSIT_STS = '1',&#xd;			EXT_COUNT = (SELECT EXT_COUNT+1 FROM TRX_TU_DEPOSIT WHERE TU_DEPOSIT_NO = @TU_DEPOSIT_NO),&#xd;			EXPIRED_DATE = @DATE_INVENTORY_NEW,&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE&#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO&#xd;END&#xd;IF(@SOLVING_TYPE IN ('3') AND @APPV_STS = 'APPD')&#xd;BEGIN&#xd;	UPDATE TRX_TU_SOLVING SET&#xd;			APPV_STS = @APPV_STS,&#xd;			APPV_DATE = GETDATE(),&#xd;			UPDATED_DATE = GETDATE(),&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE   &#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO AND&#xd;			TU_SOLVING_TYPE = @SOLVING_TYPE AND&#xd;			TU_SOLVING_DATE = @TU_SOLVING_DATE&#xd;&#xd;	UPDATE TRX_TU_DEPOSIT SET&#xd;			UPDATED_DATE = GETDATE(),&#xd;			EXPIRED_DATE = @DATE_INVENTORY_NEW,&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE&#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO&#xd;END&#xd;IF(@SOLVING_TYPE IN ('4','5','6') AND @APPV_STS = 'APPD')&#xd;BEGIN&#xd;		UPDATE TRX_TU_SOLVING SET&#xd;			APPV_STS = @APPV_STS,&#xd;			APPV_DATE = GETDATE(),&#xd;			UPDATED_DATE = GETDATE(),&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE   &#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO AND&#xd;			TU_SOLVING_TYPE = @SOLVING_TYPE AND&#xd;			TU_SOLVING_DATE = @TU_SOLVING_DATE&#xd;END&#xd;IF(@SOLVING_TYPE IN ('1','3','4','5','6') AND @APPV_STS = 'REJE')&#xd;BEGIN &#xd;	UPDATE TRX_TU_SOLVING SET&#xd;			APPV_STS = @APPV_STS,&#xd;			APPV_DATE = GETDATE(),&#xd;			UPDATED_DATE = GETDATE(),&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE   &#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO AND&#xd;			TU_SOLVING_TYPE = @SOLVING_TYPE AND&#xd;			TU_SOLVING_DATE = @TU_SOLVING_DATE&#xd;END&#xd;IF(@SOLVING_TYPE IN ('1','3','4','5','6') AND @APPV_STS = 'REVS')&#xd;BEGIN&#xd;	UPDATE TRX_TU_SOLVING SET&#xd;			APPV_STS = @APPV_STS,&#xd;			APPV_DATE = GETDATE(),&#xd;			UPDATED_DATE = GETDATE(),&#xd;			UPDATED_BY = @UPDATED_BY&#xd;	WHERE   &#xd;			TU_DEPOSIT_NO = @TU_DEPOSIT_NO AND&#xd;			TU_SOLVING_TYPE = @SOLVING_TYPE AND&#xd;			TU_SOLVING_DATE = @TU_SOLVING_DATE&#xd;END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="dateInventoryNew" sqlType="STRING"/>
      <param name="updatedBy" optional="false" sqlType="STRING"/>
      <param name="solvingType" optional="false" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
   </query>
   <query id="findBranchCodeSttu" useConfig="collectiondso1">
      <sql>SELECT branchCode, branchName, aggrNo, customerFullname FROM (&#xd;	SELECT &#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname&#xd;	FROM TRX_STTU A (nolock)&#xd;	LEFT JOIN MST_BRANCH B (nolock)&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN TRX_AGGR C (nolock)&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	WHERE STTU_NO = :sttuNo&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
      </result>
      <param name="sttuNo" sqlType="STRING"/>
   </query>
   <query id="updateAppvStsTuSolving" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;&#xd;UPDATE A SET&#xd;	A.APPV_STS = :appvSts,&#xd;	 A.UPDATED_DATE = GETDATE()&#xd;FROM TRX_TU_SOLVING A&#xd;JOIN (&#xd;	SELECT *&#xd;			FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;					[TU_DEPOSIT_NO]&#xd;					ORDER BY [TU_SOLVING_DATE] DESC) RN&#xd;			FROM [dbo].[TRX_TU_SOLVING]&#xd;			) X&#xd;			WHERE RN = 1&#xd;) B ON A.COMPANY_CODE = B.COMPANY_CODE AND A.TU_DEPOSIT_NO = B.TU_DEPOSIT_NO&#xd;WHERE A.TU_DEPOSIT_NO = @TU_DEPOSIT_NO AND A.TU_SOLVING_DATE = B.TU_SOLVING_DATE</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="appvSts" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="findBranchCodeTuSolving" useConfig="collectiondso1">
      <sql>SELECT branchCode, branchName, aggrNo, customerFullname FROM (&#xd;	SELECT &#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.AGGR_NO aggrNo,&#xd;		D.CUSTOMER_FULLNAME customerFullname&#xd;	FROM TRX_TU_DEPOSIT A&#xd;	LEFT JOIN TRX_TU_SOLVING C&#xd;	ON A.TU_DEPOSIT_NO = C.TU_DEPOSIT_NO AND A.SOLVING_TYPE = C.TU_SOLVING_TYPE AND A.SOLVING_DATE = C.TU_SOLVING_DATE&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON C.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN TRX_AGGR D&#xd;	ON A.AGGR_NO = D.AGGR_NO&#xd;	WHERE A.TU_DEPOSIT_NO = :tuDepositNo&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
      </result>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="appvStsValidasiPenerimaan" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE TRX_TU_DEPOSIT SET&#xd;        APPV_STS = :appvSts,&#xd;        APPV_DATE = GETDATE()&#xd;WHERE&#xd;        TU_DEPOSIT_NO = :tuDepositNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="appvSts" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="findBranchCodeTuDeposit" useConfig="collectiondso1">
      <sql>SELECT branchCode, branchName, aggrNo, sttuNo, customerFullname, requesterName FROM (&#xd;	SELECT &#xd;		C.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.STTU_NO sttuNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		EMP.FULLNAME requesterName&#xd;	FROM TRX_TU_DEPOSIT A&#xd;	LEFT JOIN TRX_AGGR C&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON C.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_EMPLOYEE EMP&#xd;	ON A.CREATED_BY = EMP.NIK&#xd;	WHERE A.TU_DEPOSIT_NO = :tuDepositNo&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="requesterName" name="requesterName" xsdType="string"/>
      </result>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="insertPaymentHdrPenyelesaian" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>INSERT INTO TRX_PAYMENT_HDR&#xd;(&#xd;	COMPANY_CODE,&#xd;	BRANCH_CODE,&#xd;	TRX_NO,&#xd;	PAYMENT_TYPE_CODE,&#xd;	PRODUCT,&#xd;	REF_NO,&#xd;	REF_DATE,&#xd;	TRX_DATE,&#xd;	REVERSE_STS,&#xd;	CREATED_DATE,&#xd;	CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;	:companyCode,&#xd;	:branchCode,&#xd;	:trxNo,&#xd;	:paymentTypeCode,&#xd;	:productCode,&#xd;	:tuDepositNo,&#xd;	:tuSolvingDate,&#xd;	GETDATE(),&#xd;	'0',&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="paymentTypeCode" sqlType="STRING"/>
   </query>
   <query id="appvStsDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @branch varchar(50)&#xd;DECLARE @DKHNO varchar(50) = :dkhNo&#xd;DECLARE @AGGRNO varchar(50) = :aggrNo&#xd;&#xd;set @branch=(SELECT TOP 1 BRANCH_CODE FROM TRX_DKH_DTL (NOLOCK) WHERE DKH_NO=@DKHNO AND AGGR_NO=@AGGRNO)&#xd;&#xd;UPDATE TRX_DKH_DTL SET&#xd;        UTJ_APPV_STS = :appvSts,&#xd;        UTJ_APPV_DATE = GETDATE()&#xd;WHERE&#xd;        DKH_NO = @DKHNO  AND&#xd;        AGGR_NO = @AGGRNO AND&#xd;		BRANCH_CODE=@branch AND&#xd;		COMPANY_CODE = 'EDV'</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="appvSts" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="updateDkhSts" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE TRX_DKH_HDR SET&#xd;        DKH_STS = :dkhSts,&#xd;        SUBMITTED_DATE = GETDATE(),&#xd;        SUBMITTED_BY = :submittedBy&#xd;WHERE&#xd;        DKH_NO = :dkhNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="dkhSts" sqlType="STRING"/>
      <param name="submittedBy" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
   </query>
   <query id="findBranchCodeDkhUtj" useConfig="collectiondso1">
      <sql>SELECT dkhNo, branchCode, branchName, dkhNo, customerFullname FROM (&#xd;	SELECT TOP 1&#xd;		A.BRANCH_CODE branchCode,&#xd;		--B.BRANCH_NAME branchName,&#xd;		(SELECT B.BRANCH_NAME FROM MST_BRANCH B (NOLOCK) WHERE B.BRANCH_CODE=A.BRANCH_CODE AND B.COMPANY_CODE=A.COMPANY_CODE) branchName,&#xd;		A.DKH_NO dkhNo,&#xd;		--C.CUSTOMER_FULLNAME customerFullname&#xd;		(SELECT C.CUSTOMER_FULLNAME FROM TRX_AGGR C (NOLOCK) WHERE C.COMPANY_CODE=A.COMPANY_CODE AND C.AGGR_NO=A.AGGR_NO) customerFullname  &#xd;	FROM TRX_DKH_DTL A (NOLOCK)&#xd;	--LEFT JOIN MST_BRANCH B (NOLOCK)&#xd;	--ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	--LEFT JOIN TRX_AGGR C (NOLOCK)&#xd;	--ON A.AGGR_NO = C.AGGR_NO&#xd;	WHERE A.AGGR_NO = :aggrNo AND A.UTJ_APPV_STS = 'APPR' AND A.COMPANY_CODE='EDV'&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
      </result>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="checkPaidStsDkh" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;SELECT PAID_STS as paidSts FROM TRX_DKH_DTL(NOLOCK)&#xd;WHERE COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE AND DKH_NO = @DKH_NO AND AGGR_NO = @AGGR_NO</sql>
      <result element="Entries" rowName="contents">
         <element column="paidSts" name="paidSts" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="appvStsSerahTerimaUnitReadyToSell" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @TU_DEPOSIT_NO  VARCHAR(50) = :tuDepositNo&#xd;DECLARE @APPV_STS  VARCHAR(50) = :appvSts&#xd;&#xd;UPDATE TRX_TU_SOLVING SET&#xd;        APPV_STS = @APPV_STS,&#xd;        APPV_DATE = GETDATE()&#xd;WHERE   &#xd;        TU_DEPOSIT_NO = @TU_DEPOSIT_NO&#xd;&#xd;UPDATE TRX_TU_DEPOSIT SET&#xd;        APPV_STS = @APPV_STS,&#xd;        APPV_DATE = GETDATE(),&#xd;        UPDATED_DATE = GETDATE(),&#xd;        UPDATED_BY = :updatedBy&#xd;WHERE&#xd;        TU_DEPOSIT_NO = @TU_DEPOSIT_NO&#xd;&#xd;UPDATE TRX_INVENTORY_TU SET&#xd;        INV_SOLVING_TYPE = :invSolvingType,&#xd;        SOLVING_DATE = :tuSolvingDate&#xd;WHERE&#xd;        TU_DEPOSIT_NO = @TU_DEPOSIT_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="invSolvingType" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
   </query>
   <query id="statusKirimDkhUtj" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;update trx_dkh_dtl set&#xd;	flag_send = :flagSend,&#xd;	flag_send_date = GETDATE()&#xd;where&#xd;	company_code = @COMPANY_CODE AND&#xd;	branch_code = @BRANCH_CODE AND&#xd;	dkh_NO = @DKH_NO AND&#xd;	aggr_no = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="flagSend" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="insertTrxUtjApprove" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE  VARCHAR(50) = :companyCode&#xd;DECLARE @BRANCH_CODE  VARCHAR(50) = :branchCode&#xd;DECLARE @AGGR_NO  VARCHAR(50) = :aggrNo&#xd;DECLARE @AGGR_NO_DONOR VARCHAR(50) = (SELECT AGGR_NO_DONOR FROM TRX_DKH_DTL_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO_RECIPIENT = @AGGR_NO)&#xd;DECLARE @UTJ_PLUS_VALUE  VARCHAR(50) = :utjPlusValue&#xd;DECLARE @FLAG_APPROVE  VARCHAR(50) = :flagApprove&#xd;DECLARE @BOOK_VALUE  VARCHAR(50) = (0 - (SELECT UTJ_USAGE_VALUE FROM TRX_DKH_DTL_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO_RECIPIENT = @AGGR_NO))&#xd;DECLARE @USAGE_VALUE  VARCHAR(50) = (&#xd;										SELECT&#xd;										CASE&#xd;											WHEN @FLAG_APPROVE = '1' THEN (SELECT UTJ_USAGE_VALUE FROM TRX_DKH_DTL_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO_RECIPIENT = @AGGR_NO)&#xd;											ELSE&#xd;												'0'&#xd;										END&#xd;									)&#xd;&#xd;&#xd;INSERT INTO TRX_UTJ&#xd;(&#xd;	company_code,&#xd;	branch_code,&#xd;	aggr_no,&#xd;	seq_no,&#xd;	reff_date,&#xd;	reff_no,&#xd;	utj_trans_code,&#xd;	beginning_value,&#xd;	plus_value,&#xd;	book_value,&#xd;	usage_value,&#xd;	balance_value,&#xd;	aggr_no_recipient,&#xd;	created_date,&#xd;	created_by&#xd;)&#xd;VALUES&#xd;(&#xd;	@COMPANY_CODE,&#xd;	@BRANCH_CODE,&#xd;	@AGGR_NO_DONOR,&#xd;	(SELECT ISNULL(MAX(SEQ_NO), 0) + 1 FROM TRX_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO = @AGGR_NO_DONOR),&#xd;	GETDATE(),&#xd;	:dkhNo,&#xd;	:utjTransCode,&#xd;	'0',&#xd;	@UTJ_PLUS_VALUE,&#xd;	@BOOK_VALUE,&#xd;	@USAGE_VALUE,&#xd;	(SELECT ISNULL(MAX(balanceValue), 0) + @UTJ_PLUS_VALUE + @BOOK_VALUE + @USAGE_VALUE FROM (&#xd;		SELECT TOP 1&#xd;		BALANCE_VALUE balanceValue &#xd;		FROM TRX_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO = @AGGR_NO_DONOR ORDER BY SEQ_NO DESC&#xd;	) a ),&#xd;	@AGGR_NO,&#xd;	GETDATE(),&#xd;	'SYSTEM'&#xd;)&#xd;&#xd;&#xd;UPDATE MST_UTJ SET&#xd;	USAGE_VALUE = (SELECT USAGE_VALUE FROM MST_UTJ WHERE AGGR_NO = (SELECT AGGR_NO_DONOR FROM TRX_DKH_DTL_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO_RECIPIENT = @AGGR_NO)) &#xd;					+ &#xd;				  (SELECT UTJ_USAGE_VALUE FROM TRX_DKH_DTL_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO_RECIPIENT = @AGGR_NO),&#xd;	&#xd;	BOOK_VALUE = (SELECT BOOK_VALUE FROM MST_UTJ WHERE AGGR_NO = (SELECT AGGR_NO_DONOR FROM TRX_DKH_DTL_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO_RECIPIENT = @AGGR_NO)) &#xd;					- &#xd;				 (SELECT UTJ_USAGE_VALUE FROM TRX_DKH_DTL_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO_RECIPIENT = @AGGR_NO),&#xd;	PLUS_VALUE = (SELECT PLUS_VALUE FROM MST_UTJ WHERE AGGR_NO = (SELECT AGGR_NO_DONOR FROM TRX_DKH_DTL_UTJ WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO_RECIPIENT = @AGGR_NO)) &#xd;					+ @UTJ_PLUS_VALUE,&#xd;	UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = 'SYSTEM'&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	AGGR_NO = @AGGR_NO_DONOR</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" optional="false" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="utjPlusValue" sqlType="STRING"/>
      <param name="flagApprove" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="utjTransCode" sqlType="STRING"/>
   </query>
   <query id="updateFlagSendDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @FLAG_SEND VARCHAR(10) = :flagSend&#xd;DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(20) = :branchCode&#xd;DECLARE @DKH_NO VARCHAR(50) = :dkhNo&#xd;&#xd;UPDATE TRX_DKH_DTL SET&#xd;	FLAG_SEND = @FLAG_SEND,&#xd;	FLAG_SEND_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	AGGR_NO IN (:aggrNo)&#xd;&#xd;&#xd;UPDATE TRX_DKH_GROUP SET&#xd;	FLAG_SEND = @FLAG_SEND,&#xd;	FLAG_SEND_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND FLAG_SEND != 2</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="flagSend" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="insertTrxDkhDtlUtj" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @param varchar(100)=:utjUsageValue&#xd;declare @utjUsageValue numeric(20,4)=convert(numeric(20,4),cast(@param AS float))&#xd;INSERT INTO TRX_DKH_DTL_UTJ&#xd;(&#xd;        COMPANY_CODE,&#xd;        BRANCH_CODE,&#xd;        DKH_NO,&#xd;        AGGR_NO_RECIPIENT,&#xd;        AGGR_NO_DONOR,&#xd;        UTJ_TRANS_CODE,&#xd;        UTJ_USAGE_VALUE,&#xd;        CREATED_DATE,&#xd;        CREATED_BY&#xd;)&#xd;VALUES&#xd;(&#xd;        :companyCode,&#xd;        :branchCode,&#xd;        :dkhNo,&#xd;        :aggrNoRecipient,&#xd;        :aggrNoDonor,&#xd;        :utjTransCode,&#xd;        @utjUsageValue,&#xd;        GETDATE(),&#xd;        :createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNoRecipient" sqlType="STRING"/>
      <param name="aggrNoDonor" sqlType="STRING"/>
      <param name="utjTransCode" sqlType="STRING"/>
      <param name="utjUsageValue" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="findOneAggrAsset" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, aggrNo, categoryCode, categoryName, brandCode, brandName, typeCode, typeName, modelCode, modelName, kindCode, kindName, yearMfg, nopol, chassisNo, machineNo, stnkName, colorName from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.aggr_no aggrNo,&#xd;		b.category_code categoryCode,&#xd;		c.param_descrip categoryName,&#xd;		a.brand_code brandCode,&#xd;		b.brand_name brandName,&#xd;		a.type_code typeCode,&#xd;		d.type_name typeName,&#xd;		a.model_code modelCode,&#xd;		e.model_name modelName,&#xd;		d.kind_code kindCode,&#xd;		f.kind_name kindName,&#xd;		a.year_mfg yearMfg,&#xd;		a.nopol nopol,&#xd;		a.chassis_no chassisNo,&#xd;		a.machine_no machineNo,&#xd;		a.bpkb_name stnkName,&#xd;		g.color_name colorName&#xd;	from trx_aggr_asset a&#xd;	left join mst_brand b&#xd;	on a.brand_code = b.brand_code&#xd;	left join mst_global_param c&#xd;	on b.category_code = c.param_code&#xd;	left join mst_type d&#xd;	on a.type_code = d.type_code&#xd;	left join mst_model e&#xd;	on a.model_code = e.model_code&#xd;	left join mst_kind f&#xd;	on d.kind_code = f.kind_code&#xd;	left join mst_color g&#xd;	on a.color_code = g.color_code&#xd;) a where companyCode = :companyCode and branchCode = :branchCode and aggrNo = :aggrNo</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="updateSubStsAggr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;UPDATE TRX_AGGR SET&#xd;	SUB_STS = :subSts,&#xd;	UPDATE_BY = :updatedBy,&#xd;	UPDATE_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	AGGR_NO = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="subSts" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
   </query>
   <query id="updateTuCostTuDeposit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(10) = :branchCode&#xd;DECLARE @STTU_NO Varchar(50) = :sttuNo&#xd;DECLARE @AGGR_NO Varchar(50) = :aggrNo&#xd;&#xd;UPDATE TRX_TU_DEPOSIT SET&#xd;	TU_COST = :totRealValue,&#xd;	REQ_COST_NO = :reqCostNo,&#xd;	UPDATED_DATE = GETDATE(),&#xd;	UPDATED_BY = :updatedBy&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	STTU_NO = @STTU_NO AND&#xd;	AGGR_NO = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="totRealValue" sqlType="STRING"/>
      <param name="reqCostNo" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="insertTrxTagihUlang" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>insert into trx_tagih_ulang&#xd;(&#xd;	company_code,&#xd;	branch_code,&#xd;	aggr_no,&#xd;	dkh_no,&#xd;	group_code,&#xd;	customer_code,&#xd;	tu_type,&#xd;	tu_date,&#xd;	tu_time,&#xd;	created_date,&#xd;	created_by&#xd;)&#xd;values&#xd;(&#xd;	:companyCode,&#xd;	:branchCode,&#xd;	:aggrNo,&#xd;	:dkhNo,&#xd;	:groupCode,&#xd;	:customerCode,&#xd;	:tuType,&#xd;	:tuDate,&#xd;	:tuTime,&#xd;	GETDATE(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" optional="false" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
      <param name="customerCode" sqlType="STRING"/>
      <param name="tuType" sqlType="STRING"/>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNomorKontrakSttu" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 address, 1 villageName, 1 dayOverdue</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNomorKontrakSttu" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT distinct companyCode, branchCode, branchCodeAggr, productCode, collCode, aggrNo, customerFullname, customerCode, applNo, woDate, groupCode, arSts, isnull(subSts, '') subSts, collAddressType,&#xd;	address, hpNo1, phoneArea1, phoneNo1, phoneArea2, phoneNo2, rt, rw, villageName, subdistrictName, cityName, provinceName, zipCode, isnull(dayOverdue, 0) dayOverdue, instFrom, instTo, tagihanAngsuran,&#xd;	tagihanDenda, (biaya + mstCollfee) biayaTagih, (tagihanAngsuran + tagihanDenda + biaya + mstCollfee) totalTagihan, angsuranBelumJatuhTempo, dueDate, angsuran, categoryCode, categoryName, brandCode, brandName, &#xd;	typeCode, typeName, modelCode, modelName, kindCode, kindName, yearMfg, nopol, chassisNo, machineNo, stnkName, colorName, villageCode, dsoCode, arStsName, bucketCode FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCodeAggr,&#xd;			A.BRANCH_CODE_COLL_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			A.CUSTOMER_CODE customerCode,&#xd;			A.APPL_NO applNo,&#xd;			(&#xd;				CASE&#xd;					WHEN A.WO_DATE IS NULL THEN '0'&#xd;					WHEN A.WO_DATE = '1900-01-01' THEN '0'&#xd;					ELSE '1'&#xd;				END&#xd;			) as woDate,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.AR_STS arSts,&#xd;			A.SUB_STS subSts,&#xd;			B.COLL_ADDRESS_TYPE collAddressType,&#xd;			(&#xd;			SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_ADDRESS&#xd;				END AS RESULT&#xd;			) as address,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.HP_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.HP_NO&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'B' THEN EG.HP_NO&#xd;				END AS RESULT&#xd;			) as hpNo1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.PHONE_AREA1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'B' THEN EG.PHONE_AREA1&#xd;				END AS RESULT&#xd;			) as phoneArea1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.PHONE_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'B' THEN EG.PHONE_NO1&#xd;				END AS RESULT&#xd;			) as phoneNo1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;				END AS RESULT&#xd;			) as phoneArea2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;				END AS RESULT&#xd;			) as phoneNo2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.OFFICE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_RT&#xd;				END AS RESULT&#xd;			) as rt,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;				&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.OFFICE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_RW&#xd;				END AS RESULT&#xd;			) as rw,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_CODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_CODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_CODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_CODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_CODE&#xd;				END&#xd;			) as villageCode,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;				END&#xd;			) as villageName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;				END&#xd;			) as subdistrictName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;				END&#xd;			) as cityName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;				END&#xd;			) as provinceName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;				END&#xd;			) as zipCode,&#xd;			(&#xd;				SELECT TOP 1 dueDate FROM (&#xd;				SELECT DUE_DATE dueDate, MIN(COLL_DUE_DATE) collDueDate FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' group by DUE_DATE&#xd;				) a&#xd;			) as dueDate,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID'&#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			(&#xd;				SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						CASE &#xd;							WHEN MIN(INST_NO) IS NULL THEN '0'&#xd;							ELSE MIN(INST_NO)&#xd;						END instNo&#xd;					FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;				) a&#xd;			) as instFrom,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;						) IS NULL THEN '0'&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;				END RESULT&#xd;			) as instTo,&#xd;			(&#xd;&#xd;				SELECT &#xd;					isnull(SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)), 0)&#xd;				&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND&#xd;					INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;						SELECT &#xd;							CASE &#xd;								WHEN MIN(INST_NO) IS NULL THEN '0'&#xd;								ELSE MIN(INST_NO)&#xd;							END instNo&#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;					) a) &#xd;					AND&#xd;					INST_NO &lt;= (SELECT &#xd;								CASE &#xd;									WHEN &#xd;										(&#xd;										SELECT &#xd;											convert(varchar(10),MAX(INST_NO)) &#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;										) IS NULL THEN '0'&#xd;									ELSE&#xd;										(SELECT &#xd;											MAX(INST_NO) instNo &#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;								END RESULT)&#xd;					AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;			) as tagihanAngsuran,&#xd;			(&#xd;			&#xd;				SELECT &#xd;					isnull(SUM(PINALTY_VALUE-PINALTY_PAID),0) total&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE 				&#xd;			) as tagihanDenda,&#xd;			(&#xd;				SELECT &#xd;					isnull(SUM(COLL_FEE-COLL_FEE_PAID), 0) &#xd;					total&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;			) as biaya,&#xd;						(&#xd;				select collFee from (&#xd;					select top 1&#xd;						coll_fee collFee, &#xd;						EFFECTIVE_DATE effectiveDate&#xd;					from mst_coll_fee(nolock)&#xd;					where company_code = A.COMPANY_CODE AND product_code = A.PRODUCT_CODE AND coll_kind_fee = 'ADMCOL' AND EFFECTIVE_DATE &lt;= GETDATE() AND (category_code is null or category_code = '') &#xd;					ORDER BY EFFECTIVE_DATE DESC&#xd;				) a&#xd;			) as mstCollfee,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;						) IS NULL THEN (&#xd;											SELECT &#xd;												isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;											FROM TRX_AGGR_SCHEDULE(nolock) &#xd;											WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND INST_NO &gt; (SELECT MIN(INST_NO) FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID')&#xd;										) &#xd;					ELSE&#xd;						(&#xd;							SELECT &#xd;								isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;							FROM TRX_AGGR_SCHEDULE(nolock) &#xd;							WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND INST_NO &gt; (SELECT MAX(INST_NO) instNo FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;						) &#xd;				END RESULT &#xd;			) angsuranBelumJatuhTempo,&#xd;			A.INST_VALUE angsuran,&#xd;			d.category_code categoryCode,&#xd;			e.param_descrip categoryName,&#xd;			c.brand_code brandCode,&#xd;			d.brand_name brandName,&#xd;			c.type_code typeCode,&#xd;			f.type_name typeName,&#xd;			c.model_code modelCode,&#xd;			g.model_name modelName,&#xd;			f.kind_code kindCode,&#xd;			h.kind_name kindName,&#xd;			c.year_mfg yearMfg,&#xd;			c.nopol nopol,&#xd;			c.chassis_no chassisNo,&#xd;			c.machine_no machineNo,&#xd;			c.bpkb_name stnkName,&#xd;			i.color_name colorName,&#xd;			j.dso_code dsoCode,&#xd;			k.notes arStsName,&#xd;			A.bucket_code bucketCode&#xd;		FROM TRX_AGGR(nolock) A&#xd;		JOIN TRX_APPL(nolock) B&#xd;		ON A.APPL_NO = B.APPL_NO&#xd;		LEFT JOIN trx_aggr_asset(nolock) c&#xd;		on A.aggr_no = c.aggr_no&#xd;		left join mst_brand(nolock) d&#xd;		on c.brand_code = d.brand_code&#xd;		left join mst_global_param(nolock) e&#xd;		on d.category_code = e.param_code&#xd;		left join mst_type(nolock) f&#xd;		on c.type_code = f.type_code&#xd;		left join mst_model(nolock) g&#xd;		on c.model_code = g.model_code&#xd;		left join mst_kind(nolock) h&#xd;		on f.kind_code = h.kind_code&#xd;		left join mst_color(nolock) i&#xd;		on c.color_code = i.color_code&#xd;		left join mst_branch(nolock) j&#xd;		on A.company_code = j.company_code and A.branch_code = j.branch_code &#xd;		left join mst_ar_sts(nolock) k&#xd;		ON a.ar_sts = k.ar_sts and ISNULL(k.sub_sts, '') = ISNULL(a.sub_sts, '')&#xd;		LEFT JOIN MST_COLLECTOR(nolock) L&#xd;		ON A.COMPANY_CODE = L.COMPANY_CODE&#xd;		AND A.COLL_CODE = L.COLL_CODE &#xd;		AND A.PRODUCT_CODE = L.PRODUCT_CODE &#xd;		AND A.BUCKET_TYPE = L.BUCKET_TYPE&#xd;		AND A.BUCKET_CODE = L.BUCKET_CODE&#xd;		LEFT JOIN MST_CUSTOMER(nolock) CS&#xd;		ON A.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE(nolock) IV&#xd;		ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) ISUB&#xd;		ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) IC&#xd;		ON IV.CITY_CODE = IC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) IP&#xd;		ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;		LEFT JOIN MST_VILLAGE(nolock) DV&#xd;		ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) DSUB&#xd;		ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) DC&#xd;		ON DV.CITY_CODE = DC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) DP&#xd;		ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE(nolock) EF&#xd;		ON A.CUSTOMER_CODE = EF.CUSTOMER_CODE AND EF.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE(nolock) KV&#xd;		ON EF.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) KSUB&#xd;		ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) KC&#xd;		ON KV.CITY_CODE = KC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) KP&#xd;		ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE(nolock) EG&#xd;		ON A.CUSTOMER_CODE = EG.CUSTOMER_CODE AND EG.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE(nolock) BV&#xd;		ON EG.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) BSUB&#xd;		ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) BC&#xd;		ON BV.CITY_CODE = BC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) BP&#xd;		ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_CO(nolock) CO&#xd;		ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE(nolock) COV&#xd;		ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) COSUB&#xd;		ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) COVC&#xd;		ON COV.CITY_CODE = COVC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) COP&#xd;		ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;		LEFT JOIN TRX_PREPAYMENT_HDR(nolock) PRE ON A.AGGR_NO = PRE.AGGR_NO AND PRE.APPV_STS IN ('OPEN', 'APPR', 'APPD')&#xd;		LEFT JOIN TRX_RESCHEDULE(nolock)  RES ON A.AGGR_NO = RES.AGGR_NO AND RES.APPV_STS IN ('OPEN', 'APPR', 'APPD')&#xd;		LEFT JOIN TRX_APPL(nolock) APPL ON A.AGGR_NO = APPL.REF_AGGR_NO AND APPL.APPL_STS in ('OPEN', 'REVS')&#xd;		LEFT JOIN TRX_STTU(nolock) STU ON A.AGGR_NO=STU.AGGR_NO AND STU.STTU_STS IN ('OPEN','APPR','PROC') AND EXPIRED_DATE &gt; GETDATE()&#xd;		LEFT JOIN (SELECT X.AGGR_NO FROM TRX_TU_DEPOSIT(nolock) X JOIN TRX_STTU(nolock) Y ON X.STTU_NO = Y.STTU_NO AND X.AGGR_NO = Y.AGGR_NO AND Y.STTU_STS = 'SUCC') Z ON A.AGGR_NO=Z.AGGR_NO&#xd;		WHERE STU.AGGR_NO IS NULL AND Z.AGGR_NO IS NULL AND PRE.AGGR_NO IS NULL AND RES.AGGR_NO IS NULL AND APPL.REF_AGGR_NO IS NULL&#xd;	) a where instFrom != 0&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNomorKontrakSttu" useConfig="collectiondso1">
      <sql>SELECT distinct companyCode, branchCode, branchCodeAggr, productCode, collCode, aggrNo, customerFullname, customerCode, applNo, woDate, groupCode, arSts, isnull(subSts, '') subSts, collAddressType,&#xd;address, hpNo1, phoneArea1, phoneNo1, phoneArea2, phoneNo2, rt, rw, villageName, subdistrictName, cityName, provinceName, zipCode, isnull(dayOverdue, 0) dayOverdue, instFrom, instTo, tagihanAngsuran,&#xd;tagihanDenda, biayaTagih, totalTagihan, angsuranBelumJatuhTempo, dueDate, angsuran, categoryCode, categoryName, brandCode, brandName, typeCode, typeName, modelCode, modelName, kindCode, &#xd;kindName, yearMfg, nopol, chassisNo, machineNo, stnkName, colorName, villageCode, dsoCode, arStsName, bucketCode FROM (&#xd;	SELECT distinct companyCode, branchCode, branchCodeAggr, productCode, collCode, aggrNo, customerFullname, customerCode, applNo, woDate, groupCode, arSts, isnull(subSts, '') subSts, collAddressType,&#xd;	address, hpNo1, phoneArea1, phoneNo1, phoneArea2, phoneNo2, rt, rw, villageName, subdistrictName, cityName, provinceName, zipCode, isnull(dayOverdue, 0) dayOverdue, instFrom, instTo, tagihanAngsuran,&#xd;	tagihanDenda, (biaya + mstCollfee) biayaTagih, (tagihanAngsuran + tagihanDenda + biaya + mstCollfee) totalTagihan, angsuranBelumJatuhTempo, dueDate, angsuran, categoryCode, categoryName, brandCode, brandName, &#xd;	typeCode, typeName, modelCode, modelName, kindCode, kindName, yearMfg, nopol, chassisNo, machineNo, stnkName, colorName, villageCode, dsoCode, arStsName, bucketCode FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCodeAggr,&#xd;			A.BRANCH_CODE_COLL_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			A.CUSTOMER_CODE customerCode,&#xd;			A.APPL_NO applNo,&#xd;			(&#xd;				CASE&#xd;					WHEN A.WO_DATE IS NULL THEN '0'&#xd;					WHEN A.WO_DATE = '1900-01-01' THEN '0'&#xd;					ELSE '1'&#xd;				END&#xd;			) as woDate,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.AR_STS arSts,&#xd;			A.SUB_STS subSts,&#xd;			B.COLL_ADDRESS_TYPE collAddressType,&#xd;			(&#xd;			SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_ADDRESS&#xd;				END AS RESULT&#xd;			) as address,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.HP_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.HP_NO&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.HP_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'B' THEN EG.HP_NO&#xd;				END AS RESULT&#xd;			) as hpNo1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.PHONE_AREA1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'B' THEN EG.PHONE_AREA1&#xd;				END AS RESULT&#xd;			) as phoneArea1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.PHONE_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;					WHEN B.COLL_ADDRESS_TYPE = 'B' THEN EG.PHONE_NO1&#xd;				END AS RESULT&#xd;			) as phoneNo1,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;				END AS RESULT&#xd;			) as phoneArea2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;				END AS RESULT&#xd;			) as phoneNo2,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.OFFICE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_RT&#xd;				END AS RESULT&#xd;			) as rt,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;				&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN EF.OFFICE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN EG.OFFICE_RW&#xd;				END AS RESULT&#xd;			) as rw,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_CODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_CODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_CODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_CODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_CODE&#xd;				END&#xd;			) as villageCode,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;				END&#xd;			) as villageName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;				END&#xd;			) as subdistrictName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;				END&#xd;			) as cityName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;				END&#xd;			) as provinceName,&#xd;			(&#xd;				CASE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;				END&#xd;			) as zipCode,&#xd;			(&#xd;				SELECT TOP 1 dueDate FROM (&#xd;				SELECT DUE_DATE dueDate, MIN(COLL_DUE_DATE) collDueDate FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' group by DUE_DATE&#xd;				) a&#xd;			) as dueDate,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID'&#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			(&#xd;				SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						CASE &#xd;							WHEN MIN(INST_NO) IS NULL THEN '0'&#xd;							ELSE MIN(INST_NO)&#xd;						END instNo&#xd;					FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;				) a&#xd;			) as instFrom,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;						) IS NULL THEN '0'&#xd;					ELSE&#xd;						(SELECT &#xd;							MAX(INST_NO) instNo &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE)&#xd;				END RESULT&#xd;			) as instTo,&#xd;			(&#xd;&#xd;				SELECT &#xd;					isnull(SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID)), 0)&#xd;				&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND&#xd;					INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;						SELECT &#xd;							CASE &#xd;								WHEN MIN(INST_NO) IS NULL THEN '0'&#xd;								ELSE MIN(INST_NO)&#xd;							END instNo&#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = A.COMPANY_CODE AND COLL_DUE_DATE &lt;= GETDATE()&#xd;					) a) &#xd;					AND&#xd;					INST_NO &lt;= (SELECT &#xd;								CASE &#xd;									WHEN &#xd;										(&#xd;										SELECT &#xd;											convert(varchar(10),MAX(INST_NO)) &#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;										) IS NULL THEN '0'&#xd;									ELSE&#xd;										(SELECT &#xd;											MAX(INST_NO) instNo &#xd;										FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;								END RESULT)&#xd;					AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;			) as tagihanAngsuran,&#xd;			(&#xd;			&#xd;				SELECT &#xd;					isnull(SUM(PINALTY_VALUE-PINALTY_PAID),0) total&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE 				&#xd;			) as tagihanDenda,&#xd;			(&#xd;				SELECT &#xd;					isnull(SUM(COLL_FEE-COLL_FEE_PAID), 0) &#xd;					total&#xd;				FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;			) as biaya,&#xd;						(&#xd;				select collFee from (&#xd;					select top 1&#xd;						coll_fee collFee, &#xd;						EFFECTIVE_DATE effectiveDate&#xd;					from mst_coll_fee(nolock)&#xd;					where company_code = A.COMPANY_CODE AND product_code = A.PRODUCT_CODE AND coll_kind_fee = 'ADMCOL' AND EFFECTIVE_DATE &lt;= GETDATE() AND (category_code is null or category_code = '') &#xd;					ORDER BY EFFECTIVE_DATE DESC&#xd;				) a&#xd;			) as mstCollfee,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;						) IS NULL THEN (&#xd;											SELECT &#xd;												isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;											FROM TRX_AGGR_SCHEDULE(nolock) &#xd;											WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND INST_NO &gt; (SELECT MIN(INST_NO) FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID')&#xd;										) &#xd;					ELSE&#xd;						(&#xd;							SELECT &#xd;								isnull(SUM(PRINCIPAL_VALUE+INT_VALUE-PRINCIPAL_PAID-INT_PAID),0) angsuranBelumJatuhTempo&#xd;							FROM TRX_AGGR_SCHEDULE(nolock) &#xd;							WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND INST_NO &gt; (SELECT MAX(INST_NO) instNo FROM TRX_AGGR_SCHEDULE(nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;						) &#xd;				END RESULT &#xd;			) angsuranBelumJatuhTempo,&#xd;			A.INST_VALUE angsuran,&#xd;			d.category_code categoryCode,&#xd;			e.param_descrip categoryName,&#xd;			c.brand_code brandCode,&#xd;			d.brand_name brandName,&#xd;			c.type_code typeCode,&#xd;			f.type_name typeName,&#xd;			c.model_code modelCode,&#xd;			g.model_name modelName,&#xd;			f.kind_code kindCode,&#xd;			h.kind_name kindName,&#xd;			c.year_mfg yearMfg,&#xd;			c.nopol nopol,&#xd;			c.chassis_no chassisNo,&#xd;			c.machine_no machineNo,&#xd;			c.bpkb_name stnkName,&#xd;			i.color_name colorName,&#xd;			j.dso_code dsoCode,&#xd;			k.notes arStsName,&#xd;			A.bucket_code bucketCode&#xd;		FROM TRX_AGGR(nolock) A&#xd;		JOIN TRX_APPL(nolock) B&#xd;		ON A.APPL_NO = B.APPL_NO&#xd;		LEFT JOIN trx_aggr_asset(nolock) c&#xd;		on A.aggr_no = c.aggr_no&#xd;		left join mst_brand(nolock) d&#xd;		on c.brand_code = d.brand_code&#xd;		left join mst_global_param(nolock) e&#xd;		on d.category_code = e.param_code&#xd;		left join mst_type(nolock) f&#xd;		on c.type_code = f.type_code&#xd;		left join mst_model(nolock) g&#xd;		on c.model_code = g.model_code&#xd;		left join mst_kind(nolock) h&#xd;		on f.kind_code = h.kind_code&#xd;		left join mst_color(nolock) i&#xd;		on c.color_code = i.color_code&#xd;		left join mst_branch(nolock) j&#xd;		on A.company_code = j.company_code and A.branch_code = j.branch_code &#xd;		left join mst_ar_sts(nolock) k&#xd;		ON a.ar_sts = k.ar_sts and ISNULL(k.sub_sts, '') = ISNULL(a.sub_sts, '')&#xd;		LEFT JOIN MST_COLLECTOR(nolock) L&#xd;		ON A.COMPANY_CODE = L.COMPANY_CODE&#xd;		AND A.COLL_CODE = L.COLL_CODE &#xd;		AND A.PRODUCT_CODE = L.PRODUCT_CODE &#xd;		AND A.BUCKET_TYPE = L.BUCKET_TYPE&#xd;		AND A.BUCKET_CODE = L.BUCKET_CODE&#xd;		LEFT JOIN MST_CUSTOMER(nolock) CS&#xd;		ON A.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE(nolock) IV&#xd;		ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) ISUB&#xd;		ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) IC&#xd;		ON IV.CITY_CODE = IC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) IP&#xd;		ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;		LEFT JOIN MST_VILLAGE(nolock) DV&#xd;		ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) DSUB&#xd;		ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) DC&#xd;		ON DV.CITY_CODE = DC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) DP&#xd;		ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE(nolock) EF&#xd;		ON A.CUSTOMER_CODE = EF.CUSTOMER_CODE AND EF.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE(nolock) KV&#xd;		ON EF.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) KSUB&#xd;		ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) KC&#xd;		ON KV.CITY_CODE = KC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) KP&#xd;		ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE(nolock) EG&#xd;		ON A.CUSTOMER_CODE = EG.CUSTOMER_CODE AND EG.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE(nolock) BV&#xd;		ON EG.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) BSUB&#xd;		ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) BC&#xd;		ON BV.CITY_CODE = BC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) BP&#xd;		ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_CO(nolock) CO&#xd;		ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE(nolock) COV&#xd;		ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT(nolock) COSUB&#xd;		ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY(nolock) COVC&#xd;		ON COV.CITY_CODE = COVC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE(nolock) COP&#xd;		ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;		LEFT JOIN TRX_PREPAYMENT_HDR(nolock) PRE ON A.AGGR_NO = PRE.AGGR_NO AND PRE.APPV_STS IN ('OPEN', 'APPR', 'APPD')&#xd;		LEFT JOIN TRX_RESCHEDULE(nolock)  RES ON A.AGGR_NO = RES.AGGR_NO AND RES.APPV_STS IN ('OPEN', 'APPR', 'APPD')&#xd;		LEFT JOIN TRX_APPL(nolock) APPL ON A.AGGR_NO = APPL.REF_AGGR_NO AND APPL.APPL_STS in ('OPEN', 'REVS')&#xd;		LEFT JOIN TRX_STTU(nolock) STU ON A.AGGR_NO=STU.AGGR_NO AND STU.STTU_STS IN ('OPEN','APPR','PROC') AND EXPIRED_DATE &gt; GETDATE()&#xd;		LEFT JOIN (SELECT X.AGGR_NO FROM TRX_TU_DEPOSIT(nolock) X JOIN TRX_STTU(nolock) Y ON X.STTU_NO = Y.STTU_NO AND X.AGGR_NO = Y.AGGR_NO AND Y.STTU_STS = 'SUCC') Z ON A.AGGR_NO=Z.AGGR_NO&#xd;		WHERE STU.AGGR_NO IS NULL AND Z.AGGR_NO IS NULL AND PRE.AGGR_NO IS NULL AND RES.AGGR_NO IS NULL AND APPL.REF_AGGR_NO IS NULL&#xd;	) a where instFrom != 0&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="applNo" name="applNo" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="collAddressType" name="collAddressType" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="hpNo1" name="hpNo1" xsdType="string"/>
         <element column="phoneArea1" name="phoneArea1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="phoneArea2" name="phoneArea2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="tagihanDenda" name="tagihanDenda" xsdType="string"/>
         <element column="biayaTagih" name="biayaTagih" xsdType="string"/>
         <element column="totalTagihan" name="totalTagihan" xsdType="string"/>
         <element column="angsuranBelumJatuhTempo" name="angsuranBelumJatuhTempo" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="angsuran" name="angsuran" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="branchCodeAggr" name="branchCodeAggr" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovCollector" useConfig="collectiondso1">
      <sql>SELECT 1 as collCode, 1 fullnameColl, &#xd;1 branchName, 1 joinDate, 1 collPositionCode, 1 collPositionName</sql>
      <result element="Entries" rowName="">
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovCollector" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;SELECT DISTINCT companyCode, branchCode, branchName,&#xd;productCode, productName, collCode, fullnameColl, collPositionCode, collPositionName, joinDate, bucketType, collHeadCode FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode, &#xd;		B.BRANCH_NAME branchName, &#xd;		A.PRODUCT_CODE productCode, &#xd;		--C.PARAM_DESCRIP productName,&#xd;		(SELECT C.PARAM_DESCRIP FROM MST_GLOBAL_PARAM C (nolock) where A.COMPANY_CODE=C.COMPANY_CODE AND A.PRODUCT_CODE=C.PARAM_CODE AND C.CONDITION='PRODUCT_CODE') productName,&#xd;		A.COLL_CODE collCode,&#xd;		D.FULLNAME fullnameColl, &#xd;		D.POSITION_CODE collPositionCode, &#xd;		A.COLL_HEAD_CODE collHeadCode, &#xd;		E.FULLNAME fullnameCollHead,&#xd;		E.POSITION_CODE collHeadPositionCode, &#xd;		A.BUCKET_CODE bucketCode, &#xd;		A.JOIN_DATE joinDate, &#xd;		A.FLAG_ACTIVE flagActive,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.CREATED_BY createdBy,&#xd;		A.UPDATE_DATE updateDate,&#xd;		A.UPDATE_BY updateBy,&#xd;		F.POSITION_NAME collPositionName,&#xd;		G.POSITION_NAME collHeadPositionName,&#xd;		A.BUCKET_TYPE bucketType&#xd;	FROM MST_COLLECTOR A (nolock)&#xd;	JOIN MST_BRANCH B (nolock) ON A.BRANCH_CODE=B.BRANCH_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	--JOIN MST_GLOBAL_PARAM C ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	JOIN MST_EMPLOYEE D (nolock) ON A.COLL_CODE = D.NIK&#xd;	JOIN MST_EMPLOYEE E (nolock) ON A.COLL_HEAD_CODE = E.NIK&#xd;	JOIN MST_POSITION F (nolock) ON D.POSITION_CODE = F.POSITION_CODE&#xd;	JOIN MST_POSITION G (nolock) ON E.POSITION_CODE = G.POSITION_CODE&#xd;	WHERE  NOT EXISTS (SELECT 1 FROM TRX_DKH_HDR (nolock) WHERE DKH_STS IN ('OPEN', 'PROC') AND COLL_CODE=A.COLL_CODE)&#xd;) Z WHERE :search :filter&#xd;) T</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovCollector" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, branchCode, branchName,&#xd;productCode, productName, collCode, fullnameColl, collPositionCode, collPositionName, joinDate, bucketType, collHeadCode FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode, &#xd;		B.BRANCH_NAME branchName, &#xd;		A.PRODUCT_CODE productCode, &#xd;		--C.PARAM_DESCRIP productName,&#xd;		(SELECT C.PARAM_DESCRIP FROM MST_GLOBAL_PARAM C (nolock) where A.COMPANY_CODE=C.COMPANY_CODE AND A.PRODUCT_CODE=C.PARAM_CODE AND C.CONDITION='PRODUCT_CODE') productName,&#xd;		A.COLL_CODE collCode,&#xd;		D.FULLNAME fullnameColl, &#xd;		D.POSITION_CODE collPositionCode, &#xd;		A.COLL_HEAD_CODE collHeadCode, &#xd;		E.FULLNAME fullnameCollHead,&#xd;		E.POSITION_CODE collHeadPositionCode, &#xd;		A.BUCKET_CODE bucketCode, &#xd;		A.JOIN_DATE joinDate, &#xd;		A.FLAG_ACTIVE flagActive,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.CREATED_BY createdBy,&#xd;		A.UPDATE_DATE updateDate,&#xd;		A.UPDATE_BY updateBy,&#xd;		F.POSITION_NAME collPositionName,&#xd;		G.POSITION_NAME collHeadPositionName,&#xd;		A.BUCKET_TYPE bucketType&#xd;	FROM MST_COLLECTOR A (nolock)&#xd;	JOIN MST_BRANCH B (nolock) ON A.BRANCH_CODE=B.BRANCH_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	--JOIN MST_GLOBAL_PARAM C ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	JOIN MST_EMPLOYEE D (nolock) ON A.COLL_CODE = D.NIK&#xd;	JOIN MST_EMPLOYEE E (nolock) ON A.COLL_HEAD_CODE = E.NIK&#xd;	JOIN MST_POSITION F (nolock) ON D.POSITION_CODE = F.POSITION_CODE&#xd;	JOIN MST_POSITION G (nolock) ON E.POSITION_CODE = G.POSITION_CODE&#xd;	WHERE  NOT EXISTS (SELECT 1 FROM TRX_DKH_HDR (nolock) WHERE DKH_STS IN ('OPEN', 'PROC') AND COLL_CODE=A.COLL_CODE)&#xd;) Z WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateSttuNoDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @branch_code VARCHAR(10) = :branchCode&#xd;DECLARE @aggr_no Varchar(50) = :aggrNo&#xd;&#xd;update trx_dkh_dtl set&#xd;	sttu_no = :sttuNo&#xd;where&#xd;	company_code = @COMPANY_CODE and&#xd;	branch_code = @branch_code and&#xd;	aggr_no = @aggr_no</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="callSpUpdCollByDkh" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_COLL_BY_DKH] &#xd;	(&#xd;		:companyCode,	&#xd;		:branchCode,&#xd;		:dkhNoFrom,&#xd;		:collCodeTo,&#xd;		:groupCode,&#xd;		:aggrNo,&#xd;		:productCode,&#xd;		:userLogin,&#xd;		:returnVal&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNoFrom" sqlType="STRING"/>
      <param name="collCodeTo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="userLogin" sqlType="STRING"/>
      <param name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
      <param name="groupCode" optional="false" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNoKontrakPindahBaket" useConfig="collectiondso1">
      <sql>select 1 as aggrNo, 1 customerFullname, 1 address, 1 villageName, 1 pastDueDays</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="pastDueDays" name="pastDueDays" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNoKontrakPindahBaket" useConfig="collectiondso1">
      <sql>select COUNT(0) total from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		f.branch_code branchCode,&#xd;		a.branch_code branchCodeAggr,&#xd;		a.ar_sts arSts,&#xd;		isnull(a.sub_sts, '') as subSts,&#xd;		a.aggr_no aggrNo,&#xd;		a.customer_fullname customerFullname,&#xd;		a.coll_code collCode,&#xd;		d.fullname collName,&#xd;		c.coll_head_code collHeadCode,&#xd;		a.bucket_code bucketCode,&#xd;		b.description bucketName,&#xd;		a.product_code productCode,&#xd;		a.bucket_type bucketType,&#xd;		e.dso_code dsoCode,&#xd;		(&#xd;			case&#xd;				when a.coll_address_type = 'I' then iv.village_code&#xd;				when a.coll_address_type = 'D' then dv.village_code&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'P' then kv.village_code&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'C' then cov.village_code&#xd;				when a.coll_address_type = 'B' then bv.village_code&#xd;			end&#xd;		) villageCode,&#xd;		(&#xd;			case&#xd;				when a.coll_address_type = 'I' then iv.village_name&#xd;				when a.coll_address_type = 'D' then dv.village_name&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'P' then kv.village_name&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'C' then cov.village_name&#xd;				when a.coll_address_type = 'B' then bv.village_code&#xd;			end&#xd;		) villageName,&#xd;		(&#xd;			case&#xd;				when a.coll_address_type = 'I' then g.id_address&#xd;				when a.coll_address_type = 'D' then g.domicile_address&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'P' then h.office_address&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'C' then co.OFFICE_ADDRESS&#xd;				when a.coll_address_type = 'B' then i.office_address&#xd;			end&#xd;		) address,&#xd;		a.past_due_days pastDueDays&#xd;	from trx_aggr a (nolock)&#xd;	left join mst_bucket b (nolock)&#xd;	on a.company_code = b.company_code and a.product_code = b.product_code and a.bucket_code = b.bucket_code and b.bucket_type = 'FCOL' and b.flag_active = '1'&#xd;	left join mst_collector c (nolock)&#xd;	on a.company_code = c.company_code and a.coll_code = c.coll_code and c.bucket_type = b.bucket_type&#xd;	left join mst_employee d (nolock)&#xd;	on a.company_code = d.company_code and a.coll_code = d.nik&#xd;	left join mst_branch e (nolock)&#xd;	on a.company_code = e.company_code and a.branch_code = e.branch_code&#xd;	left join mst_collector f (nolock)&#xd;	on a.company_code = f.company_code and a.coll_code = f.coll_code and a.product_code = f.product_code and a.bucket_type = f.bucket_type&#xd;	left join mst_customer g (nolock)&#xd;	on a.customer_code = g.customer_code&#xd;	left join mst_village iv (nolock)&#xd;	on g.id_village_code = iv.village_code&#xd;	left join mst_village dv (nolock)&#xd;	on g.domicile_village_code = dv.village_code&#xd;	left join mst_customer_employee h (nolock)&#xd;	on a.customer_code = h.customer_code and h.employee_type = 'O'&#xd;	left join mst_village kv (nolock)&#xd;	on h.office_village_Code = kv.village_code&#xd;	left join mst_customer_employee i (nolock)&#xd;	on a.customer_code = i.customer_code and i.employee_type = 'B'&#xd;	left join mst_village bv (nolock)&#xd;	on i.office_village_Code = bv.village_code&#xd;	left join mst_customer_co co (nolock)&#xd;	on a.company_code = co.company_code and a.customer_code = co.customer_code&#xd;	left join mst_village cov (nolock)&#xd;	on co.office_village_code = cov.village_code&#xd;	where not exists (select 1 from trx_coll_move_bucket (nolock) where aggr_no = a.aggr_no and trx_sts = '0' and APPRV_STS in ('OPEN','APPR','APPD','REVS') ) and a.PAST_DUE_DAYS &gt; 0&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNoKontrakPindahBaket" useConfig="collectiondso1">
      <sql>select distinct companyCode, branchCode, branchCodeAggr, arSts, subSts, aggrNo, customerFullname, collCode, collName, collHeadCode, bucketCode, bucketName, productCode, bucketType, dsoCode, villageCode, villageName, address, pastDueDays from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		f.branch_code branchCode,&#xd;		a.branch_code branchCodeAggr,&#xd;		a.ar_sts arSts,&#xd;		isnull(a.sub_sts, '') as subSts,&#xd;		a.aggr_no aggrNo,&#xd;		a.customer_fullname customerFullname,&#xd;		a.coll_code collCode,&#xd;		d.fullname collName,&#xd;		c.coll_head_code collHeadCode,&#xd;		a.bucket_code bucketCode,&#xd;		b.description bucketName,&#xd;		a.product_code productCode,&#xd;		a.bucket_type bucketType,&#xd;		e.dso_code dsoCode,&#xd;		(&#xd;			case&#xd;				when a.coll_address_type = 'I' then iv.village_code&#xd;				when a.coll_address_type = 'D' then dv.village_code&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'P' then kv.village_code&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'C' then cov.village_code&#xd;				when a.coll_address_type = 'B' then bv.village_code&#xd;			end&#xd;		) villageCode,&#xd;		(&#xd;			case&#xd;				when a.coll_address_type = 'I' then iv.village_name&#xd;				when a.coll_address_type = 'D' then dv.village_name&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'P' then kv.village_name&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'C' then cov.village_name&#xd;				when a.coll_address_type = 'B' then bv.village_code&#xd;			end&#xd;		) villageName,&#xd;		(&#xd;			case&#xd;				when a.coll_address_type = 'I' then g.id_address&#xd;				when a.coll_address_type = 'D' then g.domicile_address&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'P' then h.office_address&#xd;				when a.coll_address_type = 'K' and a.CUSTOMER_TYPE = 'C' then co.OFFICE_ADDRESS&#xd;				when a.coll_address_type = 'B' then i.office_address&#xd;			end&#xd;		) address,&#xd;		a.past_due_days pastDueDays&#xd;	from trx_aggr a (nolock)&#xd;	left join mst_bucket b (nolock)&#xd;	on a.company_code = b.company_code and a.product_code = b.product_code and a.bucket_code = b.bucket_code and b.bucket_type = 'FCOL' and b.flag_active = '1'&#xd;	left join mst_collector c (nolock)&#xd;	on a.company_code = c.company_code and a.coll_code = c.coll_code and c.bucket_type = b.bucket_type&#xd;	left join mst_employee d (nolock)&#xd;	on a.company_code = d.company_code and a.coll_code = d.nik&#xd;	left join mst_branch e (nolock)&#xd;	on a.company_code = e.company_code and a.branch_code = e.branch_code&#xd;	left join mst_collector f (nolock)&#xd;	on a.company_code = f.company_code and a.coll_code = f.coll_code and a.product_code = f.product_code and a.bucket_type = f.bucket_type&#xd;	left join mst_customer g (nolock)&#xd;	on a.customer_code = g.customer_code&#xd;	left join mst_village iv (nolock)&#xd;	on g.id_village_code = iv.village_code&#xd;	left join mst_village dv (nolock)&#xd;	on g.domicile_village_code = dv.village_code&#xd;	left join mst_customer_employee h (nolock)&#xd;	on a.customer_code = h.customer_code and h.employee_type = 'O'&#xd;	left join mst_village kv (nolock)&#xd;	on h.office_village_Code = kv.village_code&#xd;	left join mst_customer_employee i (nolock)&#xd;	on a.customer_code = i.customer_code and i.employee_type = 'B'&#xd;	left join mst_village bv (nolock)&#xd;	on i.office_village_Code = bv.village_code&#xd;	left join mst_customer_co co (nolock)&#xd;	on a.company_code = co.company_code and a.customer_code = co.customer_code&#xd;	left join mst_village cov (nolock)&#xd;	on co.office_village_code = cov.village_code&#xd;	where not exists (select 1 from trx_coll_move_bucket (nolock) where aggr_no = a.aggr_no and trx_sts = '0' and APPRV_STS in ('OPEN','APPR','APPD','REVS') ) and a.PAST_DUE_DAYS &gt; 0&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="branchCodeAggr" name="branchCodeAggr" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="pastDueDays" name="pastDueDays" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateCollFeeTrxSchedule" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(50) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(50) = :branchCode&#xd;DECLARE @AGGR_NO VARCHAR(50) = :aggrNo&#xd;&#xd;update trx_aggr_schedule set&#xd;	coll_fee = :collFee,&#xd;	coll_fee_date = getdate()&#xd;where&#xd;	company_code = @COMPANY_CODE and&#xd;	branch_code = @BRANCH_CODE and&#xd;	aggr_no = @AGGR_NO and&#xd;	inst_no = &#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN &#xd;						(&#xd;						SELECT &#xd;							convert(varchar(10),MAX(INST_NO)) &#xd;						FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = @AGGR_NO AND PAYMENT_STS = 'UNPAID' AND DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE&#xd;						) IS NULL THEN (&#xd;											SELECT &#xd;												MIN(INST_NO) instTo&#xd;											FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = @AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE&#xd;									   )&#xd;					ELSE&#xd;						(&#xd;							SELECT &#xd;								MAX(INST_NO) instNo &#xd;							FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = @AGGR_NO AND PAYMENT_STS = 'UNPAID' AND DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE&#xd;						)&#xd;				END RESULT&#xd;			)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="collFee" sqlType="STRING"/>
   </query>
   <query id="printedSttu" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(30) = :branchCode&#xd;DECLARE @STTU_NO  VARCHAR(50) = :sttuNo&#xd;DECLARE @PRINTED_DATE VARCHAR(50) = :printedDate&#xd;DECLARE @PRINTED_BY VARCHAR(50) = :printedBy&#xd;&#xd;&#xd;IF (@PRINTED_DATE = '1900-01-01' OR @PRINTED_DATE IS NULL)&#xd;BEGIN&#xd;	update trx_sttu set&#xd;		printed_date = GETDATE(),&#xd;		printed_by = @PRINTED_BY&#xd;	where&#xd;		company_code = @COMPANY_CODE and&#xd;		branch_code = @BRANCH_CODE and&#xd;		sttu_no = @STTU_NO&#xd;END&#xd;ELSE&#xd;BEGIN&#xd;	update trx_sttu set&#xd;		reprint_count = (SELECT ISNULL(MAX(reprint_count), 0) + 1 FROM trx_sttu WHERE sttu_no = @STTU_NO)&#xd;	where&#xd;		company_code = @COMPANY_CODE and&#xd;		branch_code = @BRANCH_CODE and&#xd;		sttu_no = @STTU_NO&#xd;END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="printedDate" sqlType="STRING"/>
      <param name="printedBy" sqlType="STRING"/>
   </query>
   <query id="updateLockTu" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @tu_deposit_no VARCHAR(50) = :tuDepositNo&#xd;&#xd;update trx_tu_deposit set&#xd;	deposit_sts = '3'&#xd;where&#xd;	company_code = 'EDV' AND&#xd;	tu_deposit_no = @tu_deposit_no</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="updateLockReadyToSell" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @TU_DEPOSIT_NO VARCHAR(50) = :tuDepositNo&#xd;&#xd;update trx_tu_deposit set&#xd;	deposit_sts = '3'&#xd;where&#xd;	tu_deposit_no = @TU_DEPOSIT_NO&#xd;&#xd;update trx_inventory_tu set&#xd;	inventory_sts = '2'&#xd;where &#xd;	tu_deposit_no = @TU_DEPOSIT_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="GetDataLisDebitur" useConfig="collectiondso1">
      <sql>SELECT companyCode, bucketReportCode, bucketReportName, jumlah FROM (&#xd;	SELECT companyCode, bucketReportCode, bucketReportName, SUM(aggrNo) as jumlah FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			ISNULL(B.BRANCH_CODE, '-') branchCode,&#xd;			A.CHAR_VALUES productCode,&#xd;			D.DSO_CODE dsoCode,&#xd;			A.VALUES_PARAM valuesParam,&#xd;			A.PARAM_CODE bucketReportCode,&#xd;			A.PARAM_DESCRIP bucketReportName,&#xd;			ISNULL(B.COLL_CODE, '-') collCode,&#xd;			C.FULLNAME collName,&#xd;			COUNT(B.AGGR_NO) aggrNo&#xd;		FROM MST_GLOBAL_PARAM(NOLOCK) A&#xd;		LEFT JOIN TRX_AGGR(NOLOCK) B&#xd;		ON A.COMPANY_CODE = B.COMPANY_CODE AND A.CHAR_VALUES = B.PRODUCT_CODE AND A.PARAM_CODE = BUCKET_REPORT AND B.AR_STS IN ('AR','BD') AND (B.WO_DATE = '1900-01-01' OR ISNULL(B.WO_DATE, '') = '')&#xd;		LEFT JOIN (SELECT *&#xd;				FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;						[AGGR_NO]&#xd;						ORDER BY [INST_NO]) RN&#xd;				FROM [dbo].[TRX_AGGR_SCHEDULE](NOLOCK) WHERE PAYMENT_STS = 'UNPAID'&#xd;				) X&#xd;				WHERE RN = 1) F&#xd;			ON  A.[COMPANY_CODE]	= F.[COMPANY_CODE] &#xd;			AND B.[AGGR_NO]			= F.[AGGR_NO]&#xd;		LEFT JOIN MST_EMPLOYEE(NOLOCK) C&#xd;		ON B.COLL_CODE = C.NIK&#xd;		LEFT JOIN getViewBranch() D&#xd;		ON B.BRANCH_CODE = D.BRANCH_CODE&#xd;		WHERE A.CONDITION = 'REPORT_AGING' AND A.FLAG_ACTIVE = '1' AND F.INST_NO IS NOT NULL&#xd;		GROUP BY A.VALUES_PARAM, A.COMPANY_CODE, B.BRANCH_CODE, A.CHAR_VALUES, D.DSO_CODE, A.PARAM_CODE, A.PARAM_DESCRIP, B.COLL_CODE, C.FULLNAME&#xd;	) a where :search :filter GROUP BY companyCode, bucketReportCode, bucketReportName&#xd;) a ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="bucketReportName" name="bucketReportName" xsdType="string"/>
         <element column="jumlah" name="jumlah" xsdType="string"/>
         <element column="bucketReportCode" name="bucketReportCode" xsdType="string"/>
         <element column="companyCode" name="companyCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="GetCountLisDebitur" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT companyCode, bucketReportCode, bucketReportName, SUM(aggrNo) as jumlah FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			ISNULL(B.BRANCH_CODE, '-') branchCode,&#xd;			A.CHAR_VALUES productCode,&#xd;			D.DSO_CODE dsoCode,&#xd;			A.VALUES_PARAM valuesParam,&#xd;			A.PARAM_CODE bucketReportCode,&#xd;			A.PARAM_DESCRIP bucketReportName,&#xd;			ISNULL(B.COLL_CODE, '-') collCode,&#xd;			C.FULLNAME collName,&#xd;			COUNT(B.AGGR_NO) aggrNo&#xd;		FROM MST_GLOBAL_PARAM(NOLOCK) A&#xd;		LEFT JOIN TRX_AGGR(NOLOCK) B&#xd;		ON A.COMPANY_CODE = B.COMPANY_CODE AND A.CHAR_VALUES = B.PRODUCT_CODE AND A.PARAM_CODE = BUCKET_REPORT AND B.AR_STS IN ('AR','BD') AND (B.WO_DATE = '1900-01-01' OR ISNULL(B.WO_DATE, '') = '')&#xd;		LEFT JOIN (SELECT *&#xd;				FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;						[AGGR_NO]&#xd;						ORDER BY [INST_NO]) RN&#xd;				FROM [dbo].[TRX_AGGR_SCHEDULE](NOLOCK) WHERE PAYMENT_STS = 'UNPAID'&#xd;				) X&#xd;				WHERE RN = 1) F&#xd;			ON  A.[COMPANY_CODE]	= F.[COMPANY_CODE] &#xd;			AND B.[AGGR_NO]			= F.[AGGR_NO]&#xd;		LEFT JOIN MST_EMPLOYEE(NOLOCK) C&#xd;		ON B.COLL_CODE = C.NIK&#xd;		LEFT JOIN getViewBranch() D&#xd;		ON B.BRANCH_CODE = D.BRANCH_CODE&#xd;		WHERE A.CONDITION = 'REPORT_AGING' AND A.FLAG_ACTIVE = '1' AND F.INST_NO IS NOT NULL&#xd;		GROUP BY A.VALUES_PARAM, A.COMPANY_CODE, B.BRANCH_CODE, A.CHAR_VALUES, D.DSO_CODE, A.PARAM_CODE, A.PARAM_DESCRIP, B.COLL_CODE, C.FULLNAME&#xd;	) a where :search :filter GROUP BY companyCode, bucketReportCode, bucketReportName&#xd;) a</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="GetColumnLisDebitur" useConfig="collectiondso1">
      <sql>SELECT 1 as bucketReportName</sql>
      <result element="Entries" rowName="">
         <element column="bucketReportName" name="bucketReportName" xsdType="string"/>
      </result>
   </query>
   <query id="checkUpdatedMstBucket" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, updated_date, 121) as updatedDate from mst_bucket where company_code = :companyCode and product_code = :productCode and bucket_code = :bucketCode and (updated_date = :updatedDateStr OR updated_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="updatedDateStr" optional="false" sqlType="STRING"/>
   </query>
   <query id="checkUpdatedMstRating" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, update_date, 121) as updatedDate from mst_rating where company_code = :companyCode and product_code = :productCode and payment_freq = :paymentFreq and rating_code = :ratingCode and criteria_code = :criteriaCode and (update_date = :updatedDateStr OR update_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="paymentFreq" sqlType="STRING"/>
      <param name="ratingCode" sqlType="STRING"/>
      <param name="criteriaCode" sqlType="STRING"/>
      <param name="updatedDateStr" optional="false" sqlType="STRING"/>
   </query>
   <query id="checkUpdatedMstCollAttendance" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, update_date, 121) as updatedDate from mst_coll_attendance where company_code = :companyCode and product_code = :productCode and att_code = :attCode and (update_date = :updatedDateStr OR update_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="attCode" sqlType="STRING"/>
      <param name="updatedDateStr" sqlType="STRING"/>
   </query>
   <query id="checkUpdatedMstCollDay" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, update_date, 121) as updatedDate from mst_coll_day_hdr where company_code = :companyCode and product_code = :productCode and coll_day_code = :collDayCode and (update_date = :updatedDateStr OR update_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collDayCode" sqlType="STRING"/>
      <param name="updatedDateStr" sqlType="STRING"/>
   </query>
   <query id="checkUpdatedMstCollFee" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, update_date, 121) as updatedDate from mst_coll_fee where company_code = :companyCode and product_code = :productCode and coll_kind_fee = :collKindFee and effective_date = :effectiveDate and (update_date = :updatedDateStr OR update_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="collKindFee" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
      <param name="updatedDateStr" sqlType="STRING"/>
   </query>
   <query id="checkUpdatedMstCollector" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, update_date, 121) as updatedDate from mst_collector where company_code = :companyCode and branch_code = :branchCode and product_code = :productCode and bucket_code = :bucketCode and bucket_type = :bucketType and coll_code = :collCode and (update_date = :updatedDateStr OR update_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="bucketType" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="updatedDateStr" sqlType="STRING"/>
   </query>
   <query id="checkUpdatedMstExtColl" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, update_date, 121) as updatedDate from mst_ext_coll where company_code = :companyCode and ext_coll_code = :extCollCode and (update_date = :updatedDateStr OR update_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
      <param name="updatedDateStr" sqlType="STRING"/>
   </query>
   <query id="updateTrxTagihUlang" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;update trx_tagih_ulang set&#xd;	tu_date = :tuDate,&#xd;	tu_time = :tuTime,&#xd;	updated_date = getdate(),&#xd;	updated_by = :updatedBy&#xd;where&#xd;	company_code = @COMPANY_CODE and&#xd;	branch_code = @BRANCH_CODE and&#xd;	aggr_no = @AGGR_NO and&#xd;	dkh_no = @DKH_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
   </query>
   <query id="updateTrxTagihUlangMikro" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;declare @GROUP_CODE varchar(50) = :groupCode&#xd;&#xd;update trx_tagih_ulang set&#xd;	tu_date = :tuDate,&#xd;	tu_time = :tuTime,&#xd;	updated_date = getdate(),&#xd;	updated_by = :updatedBy&#xd;where&#xd;	company_code = @COMPANY_CODE and&#xd;	branch_code = @BRANCH_CODE and&#xd;	aggr_no = @AGGR_NO and&#xd;	group_code = @GROUP_CODE and&#xd;	dkh_no = @DKH_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
   </query>
   <query id="checkUpdatedMstExtCollArea" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, update_date, 121) as updatedDate from mst_coll_area_hdr where company_code = :companyCode and branch_code = :branchCode and product_code = :productCode and bucket_code = :bucketCode and effective_date = :effectiveDate and (update_date = :updatedDateStr OR update_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
      <param name="updatedDateStr" sqlType="STRING"/>
   </query>
   <query id="insertHistArSts" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(50) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(50) = :branchCode&#xd;DECLARE @AGGR_NO VARCHAR(50) = :aggrNo&#xd;&#xd;insert into hist_ar_sts &#xd;(&#xd;	company_code,&#xd;	branch_code,&#xd;	aggr_no,&#xd;	seq_no,&#xd;	trx_code,&#xd;	ar_sts,&#xd;	sub_sts,&#xd;	created_date,&#xd;	created_by&#xd;)&#xd;values&#xd;(&#xd;	@COMPANY_CODE,&#xd;	@BRANCH_CODE,&#xd;	@AGGR_NO,&#xd;	(SELECT ISNULL(MAX(SEQ_NO), 0) + 1 FROM hist_ar_sts WHERE COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE AND AGGR_NO = @AGGR_NO),&#xd;	:trxCode,&#xd;	:arSts,&#xd;	:subSts,&#xd;	getdate(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="trxCode" sqlType="STRING"/>
      <param name="arSts" sqlType="STRING"/>
      <param name="subSts" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="getTrxCodeMstArSts" useConfig="collectiondso1">
      <sql>select trx_code as trxCode from mst_ar_sts where ar_sts = :arSts and sub_sts = 'TP'</sql>
      <result element="Entries" rowName="contents">
         <element column="trxCode" name="trxCode" xsdType="string"/>
      </result>
      <param name="arSts" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNomorKontrakSell" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 arStsName, 1 subStsName, 1 brandName, 1 typeName, 1 kindName, 1 colorName, 1 nopol, 1 chassisNo, 1 machineNo, 1 bpkbLocation</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="bpkbLocation" name="bpkbLocation" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNomorKontrakSell" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		J.TU_DEPOSIT_DATE tuDepositDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.NOPOL nopol,&#xd;		C.BRAND_CODE brandCode,&#xd;		D.BRAND_NAME brandName,&#xd;		D.CATEGORY_CODE categoryCode,&#xd;		E.PARAM_DESCRIP categoryName,&#xd;		C.TYPE_CODE typeCode,&#xd;		F.TYPE_NAME typeName,&#xd;		F.KIND_CODE kindCode,&#xd;		G.KIND_NAME kindName,&#xd;		C.MODEL_CODE modelCode,&#xd;		H.MODEL_NAME modelName,&#xd;		I.COLOR_NAME colorName,&#xd;		C.YEAR_MFG yearMfg,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo,&#xd;		C.BPKB_NAME stnkName,&#xd;		J.KM km,&#xd;		J.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;		J.LOC_RECEIPT_CODE locReceiptCode,&#xd;		LRC.BRANCH_NAME locReceiptCodeName,&#xd;		J.LOC_CODE locCode,&#xd;		LC.BRANCH_NAME locCodeName,&#xd;		(J.BAL_PRINCIPAL_VALUE) as sisaAngsuranPokok,&#xd;		(J.TU_COST + J.PENALTY_TU_VALUE) as nilaiBiayaPenyelesaian,&#xd;		(J.BAL_PRINCIPAL_VALUE) + (J.TU_COST + J.PENALTY_TU_VALUE) as perkiraanHargaJual,&#xd;		C.BPKB_NO bpkbNo,&#xd;		K.TRX_NAME arStsName,&#xd;		K.NOTES subStsName,&#xd;		J.PENALTY_TU_VALUE penaltyTuValue,&#xd;		J.TU_COST tuCost,&#xd;		J.DEPOSIT_STS depositSts,&#xd;		A.INVENTORY_STS inventorySts,&#xd;		L.BPKB_LOCATION bpkbLocation,&#xd;		O.PARAM_DESCRIP bpkbSts,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PRICE_VALUE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as priceValue,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.PRICE_AREA_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as marketPriceAreaCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.MODEL_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC &#xd;		) as marketModelCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.NEW_USED&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as marketNewUsed,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.YEAR_MFG&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as marketYearMfg,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.EFFECTIVE_DATE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as marketEffectiveDate,&#xd;		N.DSO_CODE dsoCode,&#xd;		(	CASE&#xd;				WHEN P.AGGR_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_INVENTORY_TU A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET C (nolock)&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND D (nolock)&#xd;	ON C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E (nolock)&#xd;	ON D.CATEGORY_CODE = E.PARAM_CODE AND E.CONDITION = 'CATEGORY_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE F (nolock)&#xd;	ON C.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND G (nolock)&#xd;	ON F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_MODEL H (nolock)&#xd;	ON C.MODEL_CODE = H.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR I (nolock)&#xd;	ON C.COLOR_CODE = I.COLOR_CODE&#xd;	JOIN TRX_TU_DEPOSIT J (nolock)&#xd;	ON A.TU_DEPOSIT_NO = J.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH LRC (nolock)&#xd;	ON J.LOC_RECEIPT_CODE = LRC.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH LC (nolock)&#xd;	ON J.LOC_CODE = LC.BRANCH_CODE&#xd;	LEFT JOIN MST_AR_STS K (nolock)&#xd;	ON B.AR_STS = K.AR_STS AND ISNULL(B.SUB_STS, '') = ISNULL(K.SUB_STS, '')&#xd;	LEFT JOIN MST_BPKB L (nolock)&#xd;	ON A.COMPANY_CODE = L.COMPANY_CODE AND A.BRANCH_CODE = L.BRANCH_CODE AND A.AGGR_NO = L.AGGR_NO AND C.BPKB_NO = L.BPKB_NO &#xd;	LEFT JOIN MST_BRANCH N (nolock)&#xd;	ON A.COMPANY_CODE = N.COMPANY_CODE AND A.BRANCH_CODE = N.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM O (nolock)&#xd;	ON L.COMPANY_CODE = O.COMPANY_CODE AND L.BPKB_STS = O.PARAM_CODE AND O.CONDITION = 'BPKB_STS' AND O.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_DTL P (nolock)&#xd;	ON A.COMPANY_CODE = P.COMPANY_CODE AND A.AGGR_NO = P.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE SC (nolock)&#xd;	ON B.COMPANY_CODE = SC.COMPANY_CODE AND B.AGGR_NO = SC.AGGR_NO&#xd;	WHERE B.AR_STS != 'LN' AND ISNULL(SC.AGGR_NO, '') != ''&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNomorKontrakSell" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, tuDepositNo, tuDepositDate, aggrNo, customerFullname, nopol, brandCode, brandName, categoryCode, categoryName, typeCode, typeName,&#xd;kindCode, kindName, modelCode, modelName, colorName, yearMfg, chassisNo, machineNo, stnkName, km, stnkExpiredDate, locReceiptCode, locReceiptCodeName,  &#xd;locCode, locCodeName, sisaAngsuranPokok, nilaiBiayaPenyelesaian, perkiraanHargaJual, bpkbNo, arStsName, subStsName, penaltyTuValue, tuCost, priceValue, marketPriceAreaCode, marketModelCode, marketNewUsed, marketYearMfg, marketEffectiveDate, depositSts, inventorySts, dsoCode, bpkbSts, stsOutUnit, bpkbLocation FROM (&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		J.TU_DEPOSIT_DATE tuDepositDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.NOPOL nopol,&#xd;		C.BRAND_CODE brandCode,&#xd;		D.BRAND_NAME brandName,&#xd;		D.CATEGORY_CODE categoryCode,&#xd;		E.PARAM_DESCRIP categoryName,&#xd;		C.TYPE_CODE typeCode,&#xd;		F.TYPE_NAME typeName,&#xd;		F.KIND_CODE kindCode,&#xd;		G.KIND_NAME kindName,&#xd;		C.MODEL_CODE modelCode,&#xd;		H.MODEL_NAME modelName,&#xd;		I.COLOR_NAME colorName,&#xd;		C.YEAR_MFG yearMfg,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo,&#xd;		C.BPKB_NAME stnkName,&#xd;		J.KM km,&#xd;		J.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;		J.LOC_RECEIPT_CODE locReceiptCode,&#xd;		LRC.BRANCH_NAME locReceiptCodeName,&#xd;		J.LOC_CODE locCode,&#xd;		LC.BRANCH_NAME locCodeName,&#xd;		(J.BAL_PRINCIPAL_VALUE) as sisaAngsuranPokok,&#xd;		(J.TU_COST + J.PENALTY_TU_VALUE) as nilaiBiayaPenyelesaian,&#xd;		(J.BAL_PRINCIPAL_VALUE) + (J.TU_COST + J.PENALTY_TU_VALUE) as perkiraanHargaJual,&#xd;		C.BPKB_NO bpkbNo,&#xd;		K.TRX_NAME arStsName,&#xd;		K.NOTES subStsName,&#xd;		J.PENALTY_TU_VALUE penaltyTuValue,&#xd;		J.TU_COST tuCost,&#xd;		J.DEPOSIT_STS depositSts,&#xd;		A.INVENTORY_STS inventorySts,&#xd;		L.BPKB_LOCATION bpkbLocation,&#xd;		O.PARAM_DESCRIP bpkbSts,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PRICE_VALUE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as priceValue,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.PRICE_AREA_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as marketPriceAreaCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.MODEL_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC &#xd;		) as marketModelCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.NEW_USED&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as marketNewUsed,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.YEAR_MFG&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as marketYearMfg,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.EFFECTIVE_DATE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY EFFECTIVE_DATE DESC&#xd;		) as marketEffectiveDate,&#xd;		N.DSO_CODE dsoCode,&#xd;		(	CASE&#xd;				WHEN P.AGGR_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_INVENTORY_TU A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET C (nolock)&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND D (nolock)&#xd;	ON C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E (nolock)&#xd;	ON D.CATEGORY_CODE = E.PARAM_CODE AND E.CONDITION = 'CATEGORY_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE F (nolock)&#xd;	ON C.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND G (nolock)&#xd;	ON F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_MODEL H (nolock)&#xd;	ON C.MODEL_CODE = H.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR I (nolock)&#xd;	ON C.COLOR_CODE = I.COLOR_CODE&#xd;	JOIN TRX_TU_DEPOSIT J (nolock)&#xd;	ON A.TU_DEPOSIT_NO = J.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH LRC (nolock)&#xd;	ON J.LOC_RECEIPT_CODE = LRC.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH LC (nolock)&#xd;	ON J.LOC_CODE = LC.BRANCH_CODE&#xd;	LEFT JOIN MST_AR_STS K (nolock)&#xd;	ON B.AR_STS = K.AR_STS AND ISNULL(B.SUB_STS, '') = ISNULL(K.SUB_STS, '')&#xd;	LEFT JOIN MST_BPKB L (nolock)&#xd;	ON A.COMPANY_CODE = L.COMPANY_CODE AND A.BRANCH_CODE = L.BRANCH_CODE AND A.AGGR_NO = L.AGGR_NO AND C.BPKB_NO = L.BPKB_NO &#xd;	LEFT JOIN MST_BRANCH N (nolock)&#xd;	ON A.COMPANY_CODE = N.COMPANY_CODE AND A.BRANCH_CODE = N.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM O (nolock)&#xd;	ON L.COMPANY_CODE = O.COMPANY_CODE AND L.BPKB_STS = O.PARAM_CODE AND O.CONDITION = 'BPKB_STS' AND O.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_DTL P (nolock)&#xd;	ON A.COMPANY_CODE = P.COMPANY_CODE AND A.AGGR_NO = P.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE SC (nolock)&#xd;	ON B.COMPANY_CODE = SC.COMPANY_CODE AND B.AGGR_NO = SC.AGGR_NO&#xd;	WHERE B.AR_STS != 'LN' AND ISNULL(SC.AGGR_NO, '') != ''&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="locReceiptCode" name="locReceiptCode" xsdType="string"/>
         <element column="locReceiptCodeName" name="locReceiptCodeName" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locCodeName" name="locCodeName" xsdType="string"/>
         <element column="sisaAngsuranPokok" name="sisaAngsuranPokok" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="perkiraanHargaJual" name="perkiraanHargaJual" xsdType="string"/>
         <element column="bpkbNo" name="bpkbNo" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="priceValue" name="priceValue" xsdType="string"/>
         <element column="marketPriceAreaCode" name="marketPriceAreaCode" xsdType="string"/>
         <element column="marketModelCode" name="marketModelCode" xsdType="string"/>
         <element column="marketNewUsed" name="marketNewUsed" xsdType="string"/>
         <element column="marketYearMfg" name="marketYearMfg" xsdType="string"/>
         <element column="marketEffectiveDate" name="marketEffectiveDate" xsdType="string"/>
         <element column="depositSts" name="depositSts" xsdType="string"/>
         <element column="inventorySts" name="inventorySts" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="bpkbSts" name="bpkbSts" xsdType="string"/>
         <element column="stsOutUnit" name="stsOutUnit" xsdType="string"/>
         <element column="tuDepositDate" name="tuDepositDate" xsdType="string"/>
         <element column="bpkbLocation" name="bpkbLocation" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnNoKontrakIndexPindahBalket" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 bucketCodeFrom, 1 bucketType, 1 collName</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="bucketCodeFrom" name="bucketCodeFrom" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountNoKontrakIndexPindahBalket" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TRX_NO trxNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.BUCKET_CODE_FROM bucketCodeFrom, &#xd;		A.COLL_CODE_FROM collCodeFrom,&#xd;		B.FULLNAME collName,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		D.DSO_CODE dsoCode&#xd;	FROM TRX_COLL_MOVE_BUCKET A&#xd;	LEFT JOIN MST_EMPLOYEE B&#xd;	ON A.COLL_CODE_FROM = B.NIK&#xd;	LEFT JOIN TRX_AGGR C&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRANCH D&#xd;	ON A.COMPANY_CODE = D.COMPANY_CODE AND A.BRANCH_CODE = D.BRANCH_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataNoKontrakIndexPindahBalket" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, trxNo, aggrNo, customerFullname, bucketCodeFrom, bucketType, collCodeFrom, collName, dsoCode FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.TRX_NO trxNo,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.BUCKET_CODE_FROM bucketCodeFrom, &#xd;		A.COLL_CODE_FROM collCodeFrom,&#xd;		B.FULLNAME collName,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		D.DSO_CODE dsoCode&#xd;	FROM TRX_COLL_MOVE_BUCKET A&#xd;	LEFT JOIN MST_EMPLOYEE B&#xd;	ON A.COLL_CODE_FROM = B.NIK&#xd;	LEFT JOIN TRX_AGGR C&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRANCH D&#xd;	ON A.COMPANY_CODE = D.COMPANY_CODE AND A.BRANCH_CODE = D.BRANCH_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="trxNo" name="trxNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="bucketCodeFrom" name="bucketCodeFrom" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="collCodeFrom" name="collCodeFrom" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="deletePaymentHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @REF_NO varchar(50) = :refNo&#xd;&#xd;delete a from trx_payment_hdr a &#xd;left join trx_sell_hdr b&#xd;on a.ref_no = b.sell_no&#xd;where a.company_code = @COMPANY_CODE and a.branch_code = @BRANCH_CODE and a.ref_no = @REF_NO and a.payment_type_code = 'bayarjualtarikbrg' and b.voucher_no != a.trx_no</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="refNo" sqlType="STRING"/>
   </query>
   <query id="getColumnReportLkh" useConfig="collectiondso1">
      <sql>select 1 as companyCode, 1 branchCode, 1 branchName, 1 dsoCode, 1 collCode, 1 collName, 1 dkhNo, 1 dkhDate, 1 groupCode, 1 groupName, 1 tanggalTagihUlangKelompok, 1 jamTagihUlangKelompok, 1 aggrNo, 1 customerFullname, 1 kunjunganKelompok, 1 jamKunjunganKelompok, 1 kunjunganDebitur, 1 jamKunjunganDebitur, 1 kehadiran, 1 interaksi, 1 hasilInteraksi, 1 tanggalTagihUlangDebitur, 1 tanggalBayarDebitur, 1 jumlahPembayaran, 1 collNotes, 1 productCode, 1 spReceiptType, 1 spReceiptName, 1 dayOverdue, 1 dueDate, 1 instFrom, 1 instTo, 1 villageCode, 1 villageName, 1 spTypeName, 1 sttuNo, 1 dsoName, 1 areaCode, 1 areaName, 1 regionCode, 1 regionName</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="tanggalTagihUlangKelompok" name="tanggalTagihUlangKelompok" xsdType="string"/>
         <element column="jamTagihUlangKelompok" name="jamTagihUlangKelompok" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="kunjunganKelompok" name="kunjunganKelompok" xsdType="string"/>
         <element column="jamKunjunganKelompok" name="jamKunjunganKelompok" xsdType="string"/>
         <element column="kunjunganDebitur" name="kunjunganDebitur" xsdType="string"/>
         <element column="jamKunjunganDebitur" name="jamKunjunganDebitur" xsdType="string"/>
         <element column="kehadiran" name="kehadiran" xsdType="string"/>
         <element column="interaksi" name="interaksi" xsdType="string"/>
         <element column="hasilInteraksi" name="hasilInteraksi" xsdType="string"/>
         <element column="tanggalTagihUlangDebitur" name="tanggalTagihUlangDebitur" xsdType="string"/>
         <element column="tanggalBayarDebitur" name="tanggalBayarDebitur" xsdType="string"/>
         <element column="jumlahPembayaran" name="jumlahPembayaran" xsdType="string"/>
         <element column="collNotes" name="collNotes" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
         <element column="spReceiptName" name="spReceiptName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportLkh" useConfig="collectiondso1">
      <sql>select count(0) as total from (&#xd;	select&#xd;		companyCode, &#xd;		branchCode, &#xd;		branchName, &#xd;		dsoCode, &#xd;		collCode, &#xd;		collName, &#xd;		dkhNo, &#xd;		dkhDate, &#xd;		groupCode, &#xd;		groupName, &#xd;		tanggalTagihUlangKelompok, &#xd;		jamTagihUlangKelompok, &#xd;		aggrNo, &#xd;		customerFullname, &#xd;		kunjunganKelompok, &#xd;		jamKunjunganKelompok, &#xd;		kunjunganDebitur, &#xd;		jamKunjunganDebitur, &#xd;		kehadiran, &#xd;		interaksi, &#xd;		hasilInteraksi, &#xd;		tanggalTagihUlangDebitur, &#xd;		tanggalBayarDebitur, &#xd;		jumlahPembayaran, &#xd;		collNotes, &#xd;		productCode,&#xd;		spReceiptType,&#xd;		spReceiptName,&#xd;		dayOverdue,&#xd;		dueDate,&#xd;		instFrom,&#xd;		instTo,&#xd;		villageCode,&#xd;		villageName,&#xd;		spTypeName,&#xd;		sttuNo,&#xd;		dsoName, &#xd;		areaCode, &#xd;		areaName, &#xd;		regionCode, &#xd;		regionName&#xd;	from [dbo].[reportLKH]()&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportLkh" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, branchName, dsoCode, collCode, collName, dkhNo, dkhDate, groupCode, groupName, tanggalTagihUlangKelompok, jamTagihUlangKelompok, aggrNo, customerFullname, kunjunganKelompok, jamKunjunganKelompok, kunjunganDebitur, jamKunjunganDebitur, kehadiran, interaksi, hasilInteraksi, tanggalTagihUlangDebitur, tanggalBayarDebitur, jumlahPembayaran, collNotes, productCode, spReceiptType, spReceiptName, dayOverdue, dueDate, instFrom, instTo, villageCode, villageName, spTypeName, sttuNo, dsoName, areaCode, areaName, regionCode, regionName from (&#xd;	select&#xd;		companyCode, &#xd;		branchCode, &#xd;		branchName, &#xd;		dsoCode, &#xd;		collCode, &#xd;		collName, &#xd;		dkhNo, &#xd;		dkhDate, &#xd;		groupCode, &#xd;		groupName, &#xd;		tanggalTagihUlangKelompok, &#xd;		jamTagihUlangKelompok, &#xd;		aggrNo, &#xd;		customerFullname, &#xd;		kunjunganKelompok, &#xd;		jamKunjunganKelompok, &#xd;		kunjunganDebitur, &#xd;		jamKunjunganDebitur, &#xd;		kehadiran, &#xd;		interaksi, &#xd;		hasilInteraksi, &#xd;		tanggalTagihUlangDebitur, &#xd;		tanggalBayarDebitur, &#xd;		jumlahPembayaran, &#xd;		collNotes, &#xd;		productCode,&#xd;		spReceiptType,&#xd;		spReceiptName,&#xd;		dayOverdue,&#xd;		dueDate,&#xd;		instFrom,&#xd;		instTo,&#xd;		villageCode,&#xd;		villageName,&#xd;		spTypeName,&#xd;		sttuNo,&#xd;		dsoName, &#xd;		areaCode, &#xd;		areaName, &#xd;		regionCode, &#xd;		regionName&#xd;	from [dbo].[reportLKH]()&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="tanggalTagihUlangKelompok" name="tanggalTagihUlangKelompok" xsdType="string"/>
         <element column="jamTagihUlangKelompok" name="jamTagihUlangKelompok" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="kunjunganKelompok" name="kunjunganKelompok" xsdType="string"/>
         <element column="jamKunjunganKelompok" name="jamKunjunganKelompok" xsdType="string"/>
         <element column="kunjunganDebitur" name="kunjunganDebitur" xsdType="string"/>
         <element column="jamKunjunganDebitur" name="jamKunjunganDebitur" xsdType="string"/>
         <element column="kehadiran" name="kehadiran" xsdType="string"/>
         <element column="interaksi" name="interaksi" xsdType="string"/>
         <element column="hasilInteraksi" name="hasilInteraksi" xsdType="string"/>
         <element column="tanggalTagihUlangDebitur" name="tanggalTagihUlangDebitur" xsdType="string"/>
         <element column="tanggalBayarDebitur" name="tanggalBayarDebitur" xsdType="string"/>
         <element column="jumlahPembayaran" name="jumlahPembayaran" xsdType="string"/>
         <element column="collNotes" name="collNotes" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
         <element column="spReceiptName" name="spReceiptName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnReportSp" useConfig="collectiondso1">
      <sql>select 1 as companyCode, 1 branchCode, 1 branchName, 1 dsoCode, 1 dsoName, 1 areaCode, 1 areaName, 1 regionCode, 1 regionName, 1 spNo, 1 spStatus, 1 groupName, 1 aggrNo, 1 customerFullname, 1 spDate, 1 spType, 1 spTypeName, 1 collCode, 1 collName, 1 printedDate, 1 returnedDate, 1 spReceiptType, 1 spReceiptName, 1 expiredDate, 1 dayOverdue</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="spNo" name="spNo" xsdType="string"/>
         <element column="spStatus" name="spStatus" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="spDate" name="spDate" xsdType="string"/>
         <element column="spType" name="spType" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="printedDate" name="printedDate" xsdType="string"/>
         <element column="returnedDate" name="returnedDate" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
         <element column="spReceiptName" name="spReceiptName" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportSp" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select &#xd;		companyCode, &#xd;		productCode,&#xd;		branchCode, &#xd;		branchName, &#xd;		dsoCode, &#xd;		dsoName, &#xd;		areaCode, &#xd;		areaName, &#xd;		regionCode, &#xd;		regionName, &#xd;		spNo, &#xd;		spStatus, &#xd;		groupName, &#xd;		aggrNo, &#xd;		customerFullname, &#xd;		spDate, &#xd;		spType, &#xd;		spTypeName, &#xd;		collCode, &#xd;		collName, &#xd;		printedDate, &#xd;		returnedDate, &#xd;		spReceiptType, &#xd;		spReceiptName,&#xd;		expiredDate,&#xd;		dayOverdue&#xd;	from dbo.reportSp()&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportSp" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, branchName, dsoCode, dsoName, areaCode, areaName, regionCode, regionName, spNo, spStatus, groupName, aggrNo, customerFullname, spDate, spType, spTypeName, collCode, collName, printedDate, returnedDate, spReceiptType, spReceiptName, expiredDate, dayOverdue from (&#xd;	select &#xd;		companyCode, &#xd;		productCode,&#xd;		branchCode, &#xd;		branchName, &#xd;		dsoCode, &#xd;		dsoName, &#xd;		areaCode, &#xd;		areaName, &#xd;		regionCode, &#xd;		regionName, &#xd;		spNo, &#xd;		spStatus, &#xd;		groupName, &#xd;		aggrNo, &#xd;		customerFullname, &#xd;		spDate, &#xd;		spType, &#xd;		spTypeName, &#xd;		collCode, &#xd;		collName, &#xd;		printedDate, &#xd;		returnedDate, &#xd;		spReceiptType, &#xd;		spReceiptName, &#xd;		expiredDate,&#xd;		dayOverdue&#xd;	from dbo.reportSp()&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="spNo" name="spNo" xsdType="string"/>
         <element column="spStatus" name="spStatus" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="spDate" name="spDate" xsdType="string"/>
         <element column="spType" name="spType" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="printedDate" name="printedDate" xsdType="string"/>
         <element column="returnedDate" name="returnedDate" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
         <element column="spReceiptName" name="spReceiptName" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnReportSttu" useConfig="collectiondso1">
      <sql>select 1 as companyCode, 1 branchCode, 1 branchName, 1 dsoCode, 1 dsoName, 1 areaCode, 1 areaName, 1 regionCode, 1 regionName, 1 aggrNo, 1 customerFullname, 1 sttuNo, 1 dayOverdue, 1 sttuDate, 1 expiredDate, 1 agentTypeName, 1 pic1Code, 1 pic1Name, 1 sttuStsName, 1 chronological, 1 executionDate, 1 positionName, 1 createdDate</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="agentTypeName" name="agentTypeName" xsdType="string"/>
         <element column="sttuStsName" name="sttuStsName" xsdType="string"/>
         <element column="chronological" name="chronological" xsdType="string"/>
         <element column="executionDate" name="executionDate" xsdType="string"/>
         <element column="pic1Code" name="pic1Code" xsdType="string"/>
         <element column="pic1Name" name="pic1Name" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportSttu" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		companyCode,&#xd;		companyName,&#xd;		branchCode,&#xd;		branchName,&#xd;		productCode,&#xd;		dsoCode,&#xd;		dsoName,&#xd;		areaCode,&#xd;		areaName,&#xd;		regionCode,&#xd;		regionName,&#xd;		aggrNo,&#xd;		customerFullname,&#xd;		sttuNo,&#xd;		dayOverdue,&#xd;		sttuDate,&#xd;		expiredDate,&#xd;		agentTypeName,&#xd;		pic1Code,&#xd;		pic1Name,&#xd;		sttuStsName,&#xd;		chronological,&#xd;		executionDate,&#xd;		sttuSts,&#xd;		agentType,&#xd;		branchAggr,&#xd;		positionName,&#xd;		createdDate&#xd;	from [dbo].[reportSttu]()&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportSttu" useConfig="collectiondso1">
      <sql>select companyCode, companyName, branchCode, branchName, dsoCode, dsoName, areaCode, areaName, regionCode, regionName, aggrNo, customerFullname, sttuNo, dayOverdue, sttuDate, expiredDate, agentTypeName, pic1Code, pic1Name, sttuStsName, chronological, executionDate, positionName, createdDate from (&#xd;	select&#xd;		companyCode,&#xd;		companyName,&#xd;		branchCode,&#xd;		branchName,&#xd;		productCode,&#xd;		dsoCode,&#xd;		dsoName,&#xd;		areaCode,&#xd;		areaName,&#xd;		regionCode,&#xd;		regionName,&#xd;		aggrNo,&#xd;		customerFullname,&#xd;		sttuNo,&#xd;		dayOverdue,&#xd;		sttuDate,&#xd;		expiredDate,&#xd;		agentTypeName,&#xd;		pic1Code,&#xd;		pic1Name,&#xd;		sttuStsName,&#xd;		chronological,&#xd;		executionDate,&#xd;		sttuSts,&#xd;		agentType,&#xd;		branchAggr,&#xd;		positionName,&#xd;		createdDate&#xd;	from [dbo].[reportSttu]()&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="agentTypeName" name="agentTypeName" xsdType="string"/>
         <element column="pic1Code" name="pic1Code" xsdType="string"/>
         <element column="pic1Name" name="pic1Name" xsdType="string"/>
         <element column="sttuStsName" name="sttuStsName" xsdType="string"/>
         <element column="chronological" name="chronological" xsdType="string"/>
         <element column="executionDate" name="executionDate" xsdType="string"/>
         <element column="companyName" name="companyName" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="insertTrxLkhSetor" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @setorno varchar(100) = :setorNo&#xd;declare @company_code varchar(50) = :companyCode&#xd;declare @dkh_no varchar(50) = :dkhNo&#xd;declare @branchcode varchar(50) = :branchCode&#xd;declare @cek int&#xd;set @cek = (select count(0) from trx_dkh_dtl(nolock) where company_code = @company_code and dkh_no = @dkh_no and voucher_no = @setorno)&#xd;&#xd;if @cek &gt;0&#xd;begin&#xd;&#xd;insert into trx_lkh_setor &#xd;(&#xd;	company_code,&#xd;	branch_code,&#xd;	setor_no,&#xd;	setor_date,&#xd;	tot_setor,&#xd;	dkh_no,&#xd;	flag_eod_journal,&#xd;	created_date,&#xd;	created_by&#xd;)&#xd;values&#xd;(&#xd;	@company_code,&#xd;	@branchcode,&#xd;	@setorno,&#xd;	:setorDate,&#xd;	:totSetor,&#xd;	@dkh_no,&#xd;	'0',&#xd;	getdate(),&#xd;	:createdBy&#xd;)&#xd;end&#xd;else&#xd;begin&#xd;update trx_dkh_hdr set&#xd;	UPDATED_DATE=GETDATE()&#xd;where&#xd;	company_code = @company_code and&#xd;	dkh_no = @dkh_no&#xd;end</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="setorNo" sqlType="STRING"/>
      <param name="setorDate" sqlType="STRING"/>
      <param name="totSetor" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="listDebiturLkhSetor" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;&#xd;select companyCode, branchCode, dkhNo, aggrNo, customerFullname, paidCash, groupCode, groupName from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.dkh_no dkhNo,&#xd;		a.aggr_no aggrNo,&#xd;		b.customer_fullname customerFullname,&#xd;		a.paid_cash paidCash,&#xd;		a.group_code groupCode,&#xd;		c.group_name groupName&#xd;	from trx_dkh_dtl a (nolock)&#xd;	left join trx_aggr b (nolock)&#xd;	on a.company_code = b.company_code and a.aggr_no = b.aggr_no&#xd;	left join mst_group_hdr c (nolock)&#xd;	on a.company_code = c.company_code and a.group_code = c.group_code&#xd;	where a.flag_send = '2' and (a.voucher_no = '' or a.voucher_no is null) and a.paid_sts != '999' and a.company_code = @COMPANY_CODE and a.dkh_no = @DKH_NO and a.paid_cash != '0'&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="paidCash" name="paidCash" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
   </query>
   <query id="updateTotPaidCashDkh" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @voucherno varchar(100) = :voucherNo&#xd;declare @company_code varchar(50) = :companyCode&#xd;declare @dkh_no varchar(50) = :dkhNo&#xd;declare @payment_point_deposit numeric(20, 4) = :paymentPointDeposit&#xd;declare @tot_paid_cash numeric(20, 4) = (select tot_paid_cash from trx_dkh_hdr where company_code = @company_code and dkh_no = @dkh_no)&#xd;declare @cashier_deposit_value numeric(20, 4) = (select cashier_deposit_value from trx_dkh_hdr where company_code = @company_code and dkh_no = @dkh_no)&#xd;declare @payment_point_deposit_before numeric(20, 4) = (select payment_point_deposit from trx_dkh_hdr where company_code = @company_code and dkh_no = @dkh_no)&#xd;declare @cek int&#xd;set @cek = (select count(0) from trx_dkh_dtl(nolock) where company_code = @company_code and dkh_no = @dkh_no and voucher_no = @voucherno)&#xd;&#xd;If @cek &gt; 0&#xd;begin&#xd;update trx_dkh_hdr set&#xd;	payment_point_deposit = @payment_point_deposit_before + @payment_point_deposit,&#xd;	coll_cash_on_hand = @tot_paid_cash - @cashier_deposit_value - (@payment_point_deposit_before + @payment_point_deposit)&#xd;where&#xd;	company_code = @company_code and&#xd;	dkh_no = @dkh_no&#xd;end&#xd;else&#xd;begin&#xd;update trx_dkh_hdr set&#xd;	UPDATED_DATE=GETDATE()&#xd;where&#xd;	company_code = @company_code and&#xd;	dkh_no = @dkh_no&#xd;end</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="paymentPointDeposit" sqlType="STRING"/>
      <param name="voucherNo" sqlType="STRING"/>
   </query>
   <query id="updateVoucherNoDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANYCODE VARCHAR(50) = :companyCode&#xd;DECLARE @DKHNO VARCHAR(50) = :dkhNo &#xd;DECLARE @AGGR_NO varchar(50) = :aggrNo&#xd;DECLARE @BRANCHCODE VARCHAR(50)&#xd;SET @BRANCHCODE=(SELECT BRANCH_CODE FROM TRX_DKH_HDR (NOLOCK) WHERE DKH_NO=@DKHNO AND COMPANY_CODE=@COMPANYCODE)&#xd;&#xd;update trx_dkh_dtl set voucher_no = :voucherNo&#xd;where &#xd;	company_code = @COMPANYCODE and&#xd;	dkh_no = @DKHNO  and&#xd;	aggr_no = @AGGR_NO and&#xd;	isnull(voucher_no, '') = '' and&#xd;	paid_cash &gt; 0 and&#xd;	branch_code = @BRANCHCODE</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="voucherNo" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" optional="false" sqlType="STRING"/>
   </query>
   <query id="getColumnLkhSetor" useConfig="collectiondso1">
      <sql>select 1 as setorNo</sql>
      <result element="Entries" rowName="">
         <element column="setorNo" name="setorNo" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLkhSetor" useConfig="collectiondso1">
      <sql>select COUNT(0) total from (&#xd;	select &#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.setor_no setorNo,&#xd;		a.setor_date setorDate,&#xd;		a.tot_setor totSetor,&#xd;		a.dkh_no dkhNo,&#xd;		b.coll_code collCode,&#xd;		c.fullname fullname,&#xd;		a.journal_no journalNo,&#xd;		a.flag_eod_journal flagEodJournal,&#xd;		a.created_date createdDate,&#xd;		a.canceled_date cancelDate,&#xd;		pic.fullname cancelPic,&#xd;		a.canceled_reason_setor cancelReason&#xd;	from trx_lkh_setor a (nolock)&#xd;	left join trx_dkh_hdr b (nolock)&#xd;	on a.company_code = b.company_code and a.dkh_no = b.dkh_no&#xd;	left join mst_employee c (nolock)&#xd;	on a.company_code = c.company_code and b.coll_code = c.nik&#xd;	left join mst_employee pic (nolock)&#xd;	on pic.company_code = a.company_code and pic.nik = a.canceled_pic&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLkhSetor" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, setorNo, setorDate, totSetor, dkhNo, collCode, fullname, journalNo, flagEodJournal, createdDate, cancelDate, cancelPic, cancelReason from (&#xd;	select &#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.setor_no setorNo,&#xd;		a.setor_date setorDate,&#xd;		a.tot_setor totSetor,&#xd;		a.dkh_no dkhNo,&#xd;		b.coll_code collCode,&#xd;		c.fullname fullname,&#xd;		a.journal_no journalNo,&#xd;		a.flag_eod_journal flagEodJournal,&#xd;		a.created_date createdDate,&#xd;		a.canceled_date cancelDate,&#xd;		pic.fullname cancelPic,&#xd;		a.canceled_reason_setor cancelReason&#xd;	from trx_lkh_setor a (nolock)&#xd;	left join trx_dkh_hdr b (nolock)&#xd;	on a.company_code = b.company_code and a.dkh_no = b.dkh_no&#xd;	left join mst_employee c (nolock)&#xd;	on a.company_code = c.company_code and b.coll_code = c.nik&#xd;	left join mst_employee pic (nolock)&#xd;	on pic.company_code = a.company_code and pic.nik = a.canceled_pic&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="setorNo" name="setorNo" xsdType="string"/>
         <element column="setorDate" name="setorDate" xsdType="string"/>
         <element column="totSetor" name="totSetor" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullname" name="fullname" xsdType="string"/>
         <element column="journalNo" name="journalNo" xsdType="string"/>
         <element column="flagEodJournal" name="flagEodJournal" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="cancelDate" name="cancelDate" xsdType="string"/>
         <element column="cancelPic" name="cancelPic" xsdType="string"/>
         <element column="cancelReason" name="cancelReason" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="findOneLkhSetor" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @SETOR_NO varchar(50) = :setorNo&#xd;&#xd;select companyCode, branchCode, setorNo, setorDate, totSetor, dkhNo, collCode, collName, journalNo, flagEodJournal, createdDate from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.setor_no setorNo,&#xd;		a.setor_date setorDate,&#xd;		a.tot_setor totSetor,&#xd;		a.dkh_no dkhNo,&#xd;		b.coll_code collCode,&#xd;		c.fullname collName,&#xd;		isnull(a.journal_no, '-') journalNo,&#xd;		a.flag_eod_journal flagEodJournal,&#xd;		a.created_date createdDate&#xd;	from trx_lkh_setor a (nolock)&#xd;	left join trx_dkh_hdr b (nolock)&#xd;	on a.company_code = b.company_code and a.dkh_no = b.dkh_no&#xd;	left join mst_employee c (nolock)&#xd;	on a.company_code = c.company_code and b.coll_code = c.nik&#xd;) a WHERE companyCode = @COMPANY_CODE and dkhNo = @DKH_NO and setorNo = @SETOR_NO</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="setorNo" name="setorNo" xsdType="string"/>
         <element column="setorDate" name="setorDate" xsdType="string"/>
         <element column="totSetor" name="totSetor" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="journalNo" name="journalNo" xsdType="string"/>
         <element column="flagEodJournal" name="flagEodJournal" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="setorNo" sqlType="STRING"/>
   </query>
   <query id="findOneVoucherNoDkhDtl" useConfig="collectiondso1">
      <sql>DECLARE @COMPANYCODE VARCHAR(50) = :companyCode&#xd;DECLARE @DKHNO VARCHAR(50) = :dkhNo &#xd;DECLARE @VOUCHER_NO varchar(50) = :setorNo&#xd;&#xd;select companyCode, branchCode, dkhNo, voucherNo, aggrNo, customerFullname, paidCash from (&#xd;	select &#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.dkh_no dkhNo,&#xd;		a.voucher_no voucherNo,&#xd;		a.aggr_no aggrNo,&#xd;		b.customer_fullname customerFullname,&#xd;		a.paid_cash paidCash&#xd;	from trx_dkh_dtl a (nolock)&#xd;	left join trx_aggr b (nolock)&#xd;	on a.company_code = b.company_code and a.aggr_no = b.aggr_no&#xd;	where a.company_code = @COMPANYCODE and a.dkh_no = @DKHNO and a.voucher_no = @VOUCHER_NO&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="paidCash" name="paidCash" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="setorNo" sqlType="STRING"/>
   </query>
   <query id="insertTrxInventory" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>insert into trx_inventory_tu &#xd;(&#xd;	company_code,&#xd;	branch_code,&#xd;	tu_deposit_no,&#xd;	loc_code,&#xd;	enter_date,&#xd;	aggr_no,&#xd;	bal_principal_value,&#xd;	bal_int_value,&#xd;	penalty_tu_value,&#xd;	tu_cost,&#xd;	selling,&#xd;	sell_loss,&#xd;	inventory_sts,&#xd;	posted_sts,&#xd;	created_date,&#xd;	created_by&#xd;)&#xd;values&#xd;(&#xd;	:companyCode,&#xd;	:branchCode,&#xd;	:tuDepositNo,&#xd;	:locCode,&#xd;	getdate(),&#xd;	:aggrNo,&#xd;	:balPrincipalValue,&#xd;	:balIntValue,&#xd;	:penaltyTuValue,&#xd;	:tuCost,&#xd;	'0',&#xd;	'0',&#xd;	'1',&#xd;	'0',&#xd;	getdate(),&#xd;	:createdBy&#xd;)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="locCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="balPrincipalValue" sqlType="STRING"/>
      <param name="balIntValue" sqlType="STRING"/>
      <param name="penaltyTuValue" sqlType="STRING"/>
      <param name="tuCost" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
   </query>
   <query id="insertTrxRequestCm" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @TYPE_COST varchar(50) = :typeCost&#xd;declare @STTU_NO varchar(50) = :sttuNo&#xd;declare @TRX_TYPE_CODE varchar(50) = 'RCAHO'&#xd;declare @REQUEST_NOTE varchar(50) =  case&#xd;										when @TYPE_COST = '001' then 'Pengajuan Biaya Tarik Unit'&#xd;										ELSE 'Klaim Biaya Tarik Unit'&#xd;									 end&#xd;declare @COMPANY_CODE varchar(50) = :companyCode&#xd;declare @BRANCH_CODE varchar(50) = :branchCode&#xd;declare @REQUEST_NO varchar(50) = :requestNo&#xd;declare @REQUEST_VALUE varchar(50) = :requestValue&#xd;declare @REFNO varchar(100) = :refNo&#xd;declare @isDuplikasi int&#xd;&#xd;set @isDuplikasi = (select count(*) from trx_request_cm_hdr where REF_NO=@REFNO and COMPANY_CODE = @company_code)&#xd;if @isDuplikasi = 0&#xd;begin&#xd;&#xd;insert into trx_request_cm_hdr&#xd;(&#xd;	company_code,&#xd;	branch_code,&#xd;	request_no,&#xd;	trx_type_code,&#xd;	request_date,&#xd;	expense_group_code,&#xd;	ref_no,&#xd;	payment_type,&#xd;	request_value,&#xd;	pic_code,&#xd;	product_code,&#xd;	request_position,&#xd;	request_nik,&#xd;	request_name,&#xd;	request_sts,&#xd;	request_note,&#xd;	appv_sts,&#xd;	br_to,&#xd;	created_date,&#xd;	created_by&#xd;)&#xd;values&#xd;(&#xd;	@COMPANY_CODE,&#xd;	@BRANCH_CODE,&#xd;	@REQUEST_NO,&#xd;	@TRX_TYPE_CODE,&#xd;	getdate(),&#xd;	'RTN',&#xd;	@REFNO,&#xd;	'CASH',&#xd;	@REQUEST_VALUE,&#xd;	:picCode,&#xd;	:productCode,&#xd;	:requestPosition,&#xd;	:requestNik,&#xd;	:requestName,&#xd;	'BVLD',&#xd;	concat(@REQUEST_NOTE, ' ', @STTU_NO),&#xd;	'APPD',&#xd;	:brTo,&#xd;	getdate(),&#xd;	'SYSTEM'&#xd;)&#xd;&#xd;insert into trx_request_cm_dtl&#xd;(&#xd;	company_code,&#xd;	branch_code,&#xd;	request_no,&#xd;	seq_no,&#xd;	expense_cost_code,&#xd;	aggr_no,&#xd;	trx_value,&#xd;	created_date,&#xd;	created_by&#xd;)&#xd;values&#xd;(&#xd;	@COMPANY_CODE,&#xd;	@BRANCH_CODE,&#xd;	@REQUEST_NO,&#xd;	(SELECT ISNULL(MAX(SEQ_NO), 0) + 1 from trx_request_cm_dtl where COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE AND REQUEST_NO = @REQUEST_NO),&#xd;	'TRKBRG',&#xd;	:aggrNo,&#xd;	@REQUEST_VALUE,&#xd;	getdate(),&#xd;	'SYSTEM'&#xd;)&#xd;end&#xd;else&#xd;begin&#xd;UPDATE TRX_REQUEST_CM_HDR SET UPDATED_DATE=GETDATE() WHERE REF_NO=@REFNO&#xd;end</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="typeCost" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="requestNo" sqlType="STRING"/>
      <param name="requestValue" sqlType="STRING"/>
      <param name="refNo" sqlType="STRING"/>
      <param name="picCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="requestPosition" sqlType="STRING"/>
      <param name="requestNik" sqlType="STRING"/>
      <param name="requestName" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="brTo" sqlType="STRING"/>
   </query>
   <query id="cekDataTrxXcollateral" useConfig="collectiondso1">
      <sql>declare @aggr_no varchar(50) = :aggrNo&#xd;&#xd;select&#xd;	COMPANY_CODE companyCode,&#xd;	(&#xd;		case &#xd;			when AGGR_NO1 = @aggr_no then AGGR_NO2&#xd;			when AGGR_NO2 = @aggr_no then AGGR_NO1&#xd;		end&#xd;	) as aggrNo &#xd;from TRX_XCOLLATERAL where AGGR_NO1 = @aggr_no OR AGGR_NO2 = @aggr_no</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
      </result>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="cekArStsTrxAggr" useConfig="collectiondso1">
      <sql>SELECT &#xd;	AGGR_NO aggrNo, &#xd;	AR_STS arSts&#xd;FROM TRX_AGGR WHERE AGGR_NO IN (:aggrNo) AND AR_STS != 'LN'</sql>
      <result element="Entries" rowName="contents">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
      </result>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="cekAppdXCollateral" useConfig="collectiondso1">
      <sql>declare @vAggrNo varchar(max) = :aggrNo&#xd;&#xd;	SELECT LTRIM(RTRIM(value)) AS AggrNo&#xd;	INTO #TEMP0 &#xd;	FROM STRING_SPLIT(@vAggrNo, ',')  &#xd;	WHERE RTRIM(value) &lt;&gt; '';&#xd;&#xd;SELECT &#xd;	COMPANY_CODE companyCode,&#xd;	AGGR_NO1 aggrNo1,&#xd;	AGGR_NO2 aggrNo2,&#xd;	RELEASE_APPV_STS releaseAppvSts&#xd;FROM TRX_XCOLLATERAL &#xd;WHERE (AGGR_NO1 IN (SELECT AggrNo FROM #TEMP0) OR AGGR_NO2 IN (SELECT AggrNo FROM #TEMP0)) AND RELEASE_APPV_STS  != 'APPD'&#xd;&#xd;DROP TABLE #TEMP0</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="aggrNo1" name="aggrNo1" xsdType="string"/>
         <element column="releaseAppvSts" name="releaseAppvSts" xsdType="string"/>
         <element column="aggrNo2" name="aggrNo2" xsdType="string"/>
      </result>
      <param name="aggrNo" optional="false" sqlType="STRING"/>
   </query>
   <query id="collSpGenClosingDkh" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[GEN_CLOSING_DKH] &#xd;	(&#xd;		:companyCode,	&#xd;		:branchCode,&#xd;		:dkhNo,&#xd;		:dateEod,&#xd;		:userLogin,&#xd;		:returnVal1,&#xd;        :message,&#xd;		:returnVal2&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal1" name="returnVal1" xsdType="string"/>
         <element column="message" name="message" xsdType="string"/>
         <element column="returnVal2" name="returnVal2" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="dateEod" sqlType="STRING"/>
      <param name="returnVal1" optional="false" sqlType="STRING" type="OUT"/>
      <param name="message" optional="false" sqlType="STRING" type="OUT"/>
      <param name="returnVal2" optional="false" sqlType="STRING" type="OUT"/>
      <param name="userLogin" optional="false" sqlType="STRING"/>
   </query>
   <query id="collSpGenDkh" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[GEN_DKH] &#xd;	(&#xd;		:companyCode,&#xd;		:dateEod,&#xd;		:collCode,&#xd;        :checkGen,&#xd;		:returnVal,&#xd;		''&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
         <element column="checkGen" name="checkGen" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dateEod" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
      <param name="checkGen" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="checkDateDkh" useConfig="collectiondso1">
      <sql>SELECT &#xd;	CASE&#xd;		WHEN :dkhDate &lt; CONVERT(DATE,GETDATE()) THEN '0'&#xd;		ELSE '1'&#xd;	END as result</sql>
      <result element="Entries" rowName="contents">
         <element column="result" name="result" xsdType="string"/>
      </result>
      <param name="dkhDate" sqlType="STRING"/>
   </query>
   <query id="getColumnLovGetPositionHeadCode" useConfig="collectiondso1">
      <sql>SELECT 1 as positionCode, 1 positionName</sql>
      <result element="Entries" rowName="">
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovGetPositionHeadCode" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) AS total FROM (&#xd;	SELECT &#xd;		A.NIK nik, &#xd;		A.BRANCH_CODE branchCode,&#xd;		A.POSITION_CODE positionCode, &#xd;		B.POSITION_NAME positionName &#xd;	FROM MST_EMPLOYEE A&#xd;	JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;	JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;) t  WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovGetPositionHeadCode" useConfig="collectiondso1">
      <sql>SELECT nik, branchCode, positionName, positionCode FROM (&#xd;	SELECT &#xd;		A.NIK nik, &#xd;		A.BRANCH_CODE branchCode,&#xd;		A.POSITION_CODE positionCode, &#xd;		B.POSITION_NAME positionName &#xd;	FROM MST_EMPLOYEE A&#xd;	JOIN MST_POSITION B ON A.POSITION_CODE=B.POSITION_CODE&#xd;	JOIN MST_BRANCH C ON A.BRANCH_CODE=C.BRANCH_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="nik" name="nik" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="checkExistDataCollAttendance" useConfig="collectiondso1">
      <sql>select att_code as attCode from MST_COLL_ATTENDANCE where ATTEND_FLAG = :attendFlag and CASH_FLAG = :cashFlag and UTJ_FLAG = :utjFlag</sql>
      <result element="Entries" rowName="contents">
         <element column="attCode" name="attCode" xsdType="string"/>
      </result>
      <param name="attendFlag" sqlType="STRING"/>
      <param name="cashFlag" sqlType="STRING"/>
      <param name="utjFlag" sqlType="STRING"/>
   </query>
   <query id="checkExistDataCollDay" useConfig="collectiondso1">
      <sql>SELECT companyCode, productCode, collDayCode, codeHariTagih FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.COLL_DAY_CODE collDayCode,&#xd;		STUFF((&#xd;			SELECT '' +&#xd;			( &#xd;				CASE&#xd;					WHEN B.DAY_CODE = '1' THEN '1'&#xd;					WHEN B.DAY_CODE = '2' THEN '2'&#xd;					WHEN B.DAY_CODE = '3' THEN '3'&#xd;					WHEN B.DAY_CODE = '4' THEN '4'&#xd;					WHEN B.DAY_CODE = '5' THEN '5'&#xd;					WHEN B.DAY_CODE = '6' THEN '6'&#xd;					WHEN B.DAY_CODE = '7' THEN '7'&#xd;				END&#xd;			)&#xd;			FROM MST_COLL_DAY_DTL B WHERE COMPANY_CODE = A.COMPANY_CODE AND PRODUCT_CODE = A.PRODUCT_CODE AND COLL_DAY_CODE = A.COLL_DAY_CODE AND B.FLAG_ACTIVE = '1'&#xd;			FOR XML PATH('')&#xd;		), 1, 0, '') as codeHariTagih&#xd;	FROM MST_COLL_DAY_HDR A&#xd;) a WHERE companyCode = :companyCode AND productCode = :productCode AND codeHariTagih = :codeHariTagih</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="collDayCode" name="collDayCode" xsdType="string"/>
         <element column="codeHariTagih" name="codeHariTagih" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="codeHariTagih" sqlType="STRING"/>
   </query>
   <query id="getColumnFilterMstCollFee" useConfig="collectiondso1">
      <sql>SELECT 1 as productName, 1 collKindFeeName, 1 collFee, 1 effectiveDate</sql>
      <result element="Entries" rowName="">
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collKindFeeName" name="collKindFeeName" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountFilterMstCollFee" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode, &#xd;		A.PRODUCT_CODE productCode,&#xd;		B.PARAM_DESCRIP productName, &#xd;		A.COLL_KIND_FEE collKindFee,&#xd;		C.PARAM_DESCRIP collKindFeeName,&#xd;		A.CATEGORY_CODE categoryCode,&#xd;		D.PARAM_DESCRIP categoryName,&#xd;		A.COLL_FEE collFee, &#xd;		CONVERT(datetime, A.effective_date) as effectiveDate,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updatedDateStr&#xd;		FROM MST_COLL_FEE A&#xd;	LEFT JOIN MST_GLOBAL_PARAM B&#xd;		ON A.product_code = B.param_code AND B.condition = 'PRODUCT_CODE' AND B.flag_active = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;		ON A.coll_kind_fee = C.param_code AND C.condition = 'COLL_KIND_FEE' AND C.flag_active = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;		ON A.category_code = D.param_code AND D.condition = 'CATEGORY_CODE' AND D.flag_active = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataFilterMstCollFee" useConfig="collectiondso1">
      <sql>SELECT companyCode, productCode, productName, collKindFee, collKindFeeName, categoryCode, categoryName, collFee, effectiveDate, updatedDateStr FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode, &#xd;		A.PRODUCT_CODE productCode,&#xd;		B.PARAM_DESCRIP productName, &#xd;		A.COLL_KIND_FEE collKindFee,&#xd;		C.PARAM_DESCRIP collKindFeeName,&#xd;		A.CATEGORY_CODE categoryCode,&#xd;		D.PARAM_DESCRIP categoryName,&#xd;		A.COLL_FEE collFee, &#xd;		CONVERT(datetime, A.effective_date) as effectiveDate,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updatedDateStr&#xd;		FROM MST_COLL_FEE A&#xd;	LEFT JOIN MST_GLOBAL_PARAM B&#xd;		ON A.product_code = B.param_code AND B.condition = 'PRODUCT_CODE' AND B.flag_active = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;		ON A.coll_kind_fee = C.param_code AND C.condition = 'COLL_KIND_FEE' AND C.flag_active = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;		ON A.category_code = D.param_code AND D.condition = 'CATEGORY_CODE' AND D.flag_active = '1'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collKindFee" name="collKindFee" xsdType="string"/>
         <element column="collKindFeeName" name="collKindFeeName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnFilterMstCollArea" useConfig="collectiondso1">
      <sql>select 1 as branchName, 1 productName, 1 bucketCode, 1 effectiveDate</sql>
      <result element="Entries" rowName="">
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountFilterMstCollArea" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.company_code companyCode, &#xd;		A.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		A.product_code productCode,&#xd;		gb.param_descrip productName,&#xd;		A.bucket_code bucketCode, &#xd;		bc.description bucketName,&#xd;		CONVERT(datetime,A.effective_date) as effectiveDate,&#xd;		CONVERT(varchar, A.update_date, 121) as updatedDateStr &#xd;	FROM mst_coll_area_hdr A&#xd;	join mst_branch br on (A.branch_code = br.branch_code and A.company_code = br.company_code)&#xd;	join mst_global_param gb on (A.product_code = gb.param_code and A.company_code = gb.company_code and gb.condition = 'PRODUCT_CODE')&#xd;	join mst_bucket bc on (A.bucket_code = bc.bucket_code) and bc.bucket_type = 'FCOL' and a.product_code = bc.product_code&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataFilterMstCollArea" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName, productCode, productName, bucketCode, bucketName, effectiveDate, updatedDateStr FROM (&#xd;	SELECT &#xd;		A.company_code companyCode, &#xd;		A.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		A.product_code productCode,&#xd;		gb.param_descrip productName,&#xd;		A.bucket_code bucketCode, &#xd;		bc.description bucketName,&#xd;		CONVERT(datetime,A.effective_date) as effectiveDate,&#xd;		CONVERT(varchar, A.update_date, 121) as updatedDateStr &#xd;	FROM mst_coll_area_hdr A&#xd;	join mst_branch br on (A.branch_code = br.branch_code and A.company_code = br.company_code)&#xd;	join mst_global_param gb on (A.product_code = gb.param_code and A.company_code = gb.company_code and gb.condition = 'PRODUCT_CODE')&#xd;	join mst_bucket bc on (A.bucket_code = bc.bucket_code) and bc.bucket_type = 'FCOL' and a.product_code = bc.product_code&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnMstCollectorByCollHeadCode" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode, 1 branchCode, 1 collHeadCode</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstCollectorByCollHeadCode" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.COLL_HEAD_CODE collHeadCode,&#xd;		A.COLL_CODE collCode, &#xd;		B.POSITION_CODE collPositionCode,&#xd;		PS.POSITION_NAME collPositionName,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		GP.PARAM_DESCRIP bucketTypeName,&#xd;		A.FLAG_ACTIVE flagActive,&#xd;		B.JOIN_DATE joinDate,&#xd;		B.FULLNAME fullnameColl,&#xd;		A.PRODUCT_CODE productCode&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_EMPLOYEE B ON A.COLL_CODE=B.NIK&#xd;	LEFT JOIN MST_GLOBAL_PARAM GP&#xd;	ON A.COMPANY_CODE = GP.COMPANY_CODE AND A.BUCKET_TYPE = GP.PARAM_CODE AND GP.CONDITION = 'BUCKET_TYPE' AND GP.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_POSITION PS&#xd;	ON B.POSITION_CODE = PS.POSITION_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMstCollectorByCollHeadCode" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, collHeadCode, collCode, collPositionCode, collPositionName, bucketCode, bucketType, bucketTypeName, flagActive, joinDate, fullnameColl FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.COLL_HEAD_CODE collHeadCode,&#xd;		A.COLL_CODE collCode, &#xd;		B.POSITION_CODE collPositionCode,&#xd;		PS.POSITION_NAME collPositionName,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		GP.PARAM_DESCRIP bucketTypeName,&#xd;		A.FLAG_ACTIVE flagActive,&#xd;		B.JOIN_DATE joinDate,&#xd;		B.FULLNAME fullnameColl,&#xd;		A.PRODUCT_CODE productCode&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_EMPLOYEE B ON A.COLL_CODE=B.NIK&#xd;	LEFT JOIN MST_GLOBAL_PARAM GP&#xd;	ON A.COMPANY_CODE = GP.COMPANY_CODE AND A.BUCKET_TYPE = GP.PARAM_CODE AND GP.CONDITION = 'BUCKET_TYPE' AND GP.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_POSITION PS&#xd;	ON B.POSITION_CODE = PS.POSITION_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="bucketTypeName" name="bucketTypeName" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovPositionHeadCodeIndex" useConfig="collectiondso1">
      <sql>SELECT 1 as positionCode, 1 positionName</sql>
      <result element="Entries" rowName="">
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovPositionHeadCodeIndex" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT DISTINCT positionCode, positionName FROM (&#xd;		SELECT&#xd;			DISTINCT&#xd;			B.POSITION_CODE positionCode,&#xd;			C.POSITION_NAME positionName,&#xd;			A.BRANCH_CODE branchCode&#xd;		FROM MST_COLLECTOR A&#xd;		JOIN MST_EMPLOYEE B&#xd;		ON A.COLL_HEAD_CODE = B.NIK&#xd;		JOIN MST_POSITION C&#xd;		ON B.POSITION_CODE = C.POSITION_CODE&#xd;	) a  WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovPositionHeadCodeIndex" useConfig="collectiondso1">
      <sql>SELECT DISTINCT positionCode, positionName FROM (&#xd;	SELECT&#xd;		DISTINCT&#xd;		B.POSITION_CODE positionCode,&#xd;		C.POSITION_NAME positionName,&#xd;		A.BRANCH_CODE branchCode&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_EMPLOYEE B&#xd;	ON A.COLL_HEAD_CODE = B.NIK&#xd;	JOIN MST_POSITION C&#xd;	ON B.POSITION_CODE = C.POSITION_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovGetAtasanIndex" useConfig="collectiondso1">
      <sql>SELECT 1 as collHeadCode, 1 fullnameCollHead, 1 collHeadPositionCode, 1 collHeadPositionName, 1 branchName, 1 joinDate</sql>
      <result element="Entries" rowName="">
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="fullnameCollHead" name="fullnameCollHead" xsdType="string"/>
         <element column="collHeadPositionCode" name="collHeadPositionCode" xsdType="string"/>
         <element column="collHeadPositionName" name="collHeadPositionName" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovGetAtasanIndex" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;		DISTINCT&#xd;		A.COLL_HEAD_CODE collHeadCode,&#xd;		B.FULLNAME fullnameCollHead,&#xd;		B.POSITION_CODE collHeadPositionCode,&#xd;		C.POSITION_NAME collHeadPositionName,&#xd;		A.BRANCH_CODE branchCode,&#xd;		D.BRANCH_NAME branchName,&#xd;		B.JOIN_DATE joinDate&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_EMPLOYEE B&#xd;	ON A.COLL_HEAD_CODE = B.NIK&#xd;	JOIN MST_POSITION C&#xd;	ON B.POSITION_CODE = C.POSITION_CODE&#xd;	JOIN MST_BRANCH D&#xd;	ON A.BRANCH_CODE = D.BRANCH_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovGetAtasanIndex" useConfig="collectiondso1">
      <sql>SELECT collHeadCode, fullnameCollHead, collHeadPositionCode, collHeadPositionName, branchName, joinDate FROM (&#xd;	SELECT&#xd;		DISTINCT&#xd;		A.COLL_HEAD_CODE collHeadCode,&#xd;		B.FULLNAME fullnameCollHead,&#xd;		B.POSITION_CODE collHeadPositionCode,&#xd;		C.POSITION_NAME collHeadPositionName,&#xd;		A.BRANCH_CODE branchCode,&#xd;		D.BRANCH_NAME branchName,&#xd;		B.JOIN_DATE joinDate&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_EMPLOYEE B&#xd;	ON A.COLL_HEAD_CODE = B.NIK&#xd;	JOIN MST_POSITION C&#xd;	ON B.POSITION_CODE = C.POSITION_CODE&#xd;	JOIN MST_BRANCH D&#xd;	ON A.BRANCH_CODE = D.BRANCH_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="fullnameCollHead" name="fullnameCollHead" xsdType="string"/>
         <element column="collHeadPositionCode" name="collHeadPositionCode" xsdType="string"/>
         <element column="collHeadPositionName" name="collHeadPositionName" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getDetailMstCollAreaDtl" useConfig="collectiondso1">
      <sql>declare @companyCode varchar(10)	= :companyCode&#xd;declare @branchCode varchar(10)		= :branchCode&#xd;declare @productCode varchar(10)	= :productCode&#xd;declare @bucketCode varchar(10)		= :bucketCode&#xd;declare @EffDate varchar(10)		= :effectiveDate&#xd;&#xd;select &#xd;	company_code companyCode&#xd;	, branch_code branchCode&#xd;	, branch_name branchName&#xd;	, product_code productCode&#xd;	, product_name productName&#xd;	, bucket_code bucketCode&#xd;	, bucket_name bucketName&#xd;	, village_code villageCode&#xd;	, village_name villageName&#xd;	, subdistrict_name subdistrictName&#xd;	, SUM(TOT_AGGR) as totalAggr&#xd;	, qty_aggr_no qtyAggrNo&#xd;	, effective_date effectiveDate&#xd;	, isnull(coll_code, '') collCode&#xd;	, fullname_coll fullnameColl&#xd;	, isnull(coll_day_code, '') collCodeDay&#xd;	, description collDayName&#xd;from ( &#xd;	select distinct&#xd;		c.company_code,&#xd;		br.branch_code,&#xd;		br.branch_name,&#xd;		c.village_code,&#xd;		c.village_name,&#xd;		k.PARAM_CODE as product_code,&#xd;		k.PARAM_DESCRIP as product_name,&#xd;		'' CLUSTER,&#xd;		ISNULL(l.TOT_AGGR,0) AS TOT_AGGR,&#xd;		e.subdistrict_name,&#xd;		h.bucket_code bucket_code,&#xd;		buc.DESCRIPTION bucket_name,&#xd;		h.effective_date effective_date,&#xd;		ISNULL(h.qty_aggr_no, 0) qty_aggr_no,&#xd;		h.coll_code coll_code,&#xd;		em.fullname fullname_coll,&#xd;		h.coll_day_code coll_day_code,&#xd;		cdh.description description&#xd;	from [dbo].[mst_village] c (nolock)&#xd;&#xd;	left join [dbo].[mst_branch] br (nolock)&#xd;	on c.company_code = br.company_code&#xd;	and br.branch_code = @branchCode&#xd;&#xd;	join dbo.getviewbranch() d&#xd;	on d.company_code = br.company_code&#xd;	and (&#xd;	case &#xd;	when br.structure_type = 'ST05' then d.branch_code&#xd;	when br.structure_type = 'ST04' then d.dso_code end&#xd;	) = br.branch_code&#xd;&#xd;	left join [dbo].[trx_aggr] a (nolock)&#xd;	on a.company_code = c.company_code&#xd;	and a.branch_code = d.branch_code&#xd;	and a.coll_village_code = c.VILLAGE_CODE&#xd;	and (a.wo_date is null or a.wo_date = '1900-01-01')&#xd;	and a.ar_sts in ('ar','bd')&#xd;&#xd;	left join [dbo].[MST_TOTAL_AGGR] l (nolock)&#xd;	on l.COMPANY_CODE = c.COMPANY_CODE&#xd;	and l.BRANCH_CODE = d.BRANCH_CODE&#xd;	and l.VILLAGE_CODE = c.VILLAGE_CODE&#xd;&#xd;	left join [dbo].[MST_BRANCH] j (nolock)&#xd;	on j.COMPANY_CODE = c.COMPANY_CODE&#xd;	and j.BRANCH_CODE = d.BRANCH_CODE&#xd;&#xd;	left join [dbo].[MST_GLOBAL_PARAM] k (nolock)&#xd;	on k.COMPANY_CODE = c.COMPANY_CODE&#xd;	and k.CONDITION = 'PRODUCT_CODE'&#xd;	and k.PARAM_CODE = @productCode&#xd;&#xd;	left join [dbo].[mst_subdistrict] e (nolock)&#xd;	on e.company_code = c.company_code&#xd;	and e.SUBDISTRICT_CODE = c.subdistrict_code&#xd;&#xd;	left join [dbo].[mst_cover_area_dtl] f (nolock)&#xd;	on f.company_code = c.COMPANY_CODE&#xd;	and f.village_code = c.VILLAGE_CODE&#xd;	and f.BRANCH_CODE = d.BRANCH_CODE&#xd;	and f.PRODUCT_CODE = @productCode&#xd;&#xd;	left join [dbo].[MST_COVER_AREA_HDR] g (nolock)&#xd;	on g.COMPANY_CODE = f.COMPANY_CODE&#xd;	and g.BRANCH_CODE = f.BRANCH_CODE&#xd;	and g.FLAG_ACTIVE = 1&#xd;&#xd;	left join MST_COLL_AREA_DTL h (nolock)&#xd;	on h.COMPANY_CODE = c.COMPANY_CODE&#xd;	and @branchCode = h.BRANCH_CODE&#xd;	and h.PRODUCT_CODE = @productCode&#xd;	and h.BUCKET_CODE = @bucketCode&#xd;	and h.EFFECTIVE_DATE = @EffDate&#xd;	and h.VILLAGE_CODE = c.VILLAGE_CODE&#xd;&#xd;	left join MST_COLL_AREA_HDR i (nolock)&#xd;	on i.COMPANY_CODE=h.COMPANY_CODE&#xd;	and i.BRANCH_CODE = h.BRANCH_CODE&#xd;	and i.BUCKET_CODE=h.BUCKET_CODE&#xd;	and i.EFFECTIVE_DATE = h.EFFECTIVE_DATE&#xd;	and i.PRODUCT_CODE = h.PRODUCT_CODE&#xd;&#xd;	left join mst_bucket buc (nolock)&#xd;	on h.bucket_code = buc.bucket_code and buc.bucket_type = 'fcol' and h.product_code = buc.product_code&#xd;&#xd;	left join mst_employee em (nolock)&#xd;	on h.coll_code = em.nik&#xd;&#xd;	left join mst_coll_day_hdr cdh (nolock)&#xd;	on h.coll_day_code = cdh.coll_day_code and h.product_code = cdh.product_code&#xd;&#xd;	where (a.coll_village_code is not null or (f.village_code is not null and g.branch_code is not null) or h.VILLAGE_CODE is not null) &#xd;	and c.company_code = @companyCode&#xd;) a&#xd;group by &#xd;	COMPANY_CODE&#xd;	, branch_code&#xd;	, branch_name&#xd;	, village_code&#xd;	, village_name&#xd;	, product_code&#xd;	, product_name&#xd;	, subdistrict_name&#xd;	, bucket_code&#xd;	, bucket_name&#xd;	, effective_date&#xd;	, qty_aggr_no&#xd;	, coll_code&#xd;	, fullname_coll&#xd;	, coll_day_code&#xd;	, description&#xd;order by village_code asc</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="totalAggr" name="totalAggr" xsdType="string"/>
         <element column="qtyAggrNo" name="qtyAggrNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collCodeDay" name="collCodeDay" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
   </query>
   <query id="getColumnMonitorLkh" useConfig="collectiondso1">
      <sql>SELECT 1 as hari, 1 tanggal, 1 dkhNo, 1 jumlahPenugasanKelompok, 1 jumlahRealisasiKelompok, 1 pencapaianDebitur</sql>
      <result element="Entries" rowName="">
         <element column="hari" name="hari" xsdType="string"/>
         <element column="tanggal" name="tanggal" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="jumlahPenugasanKelompok" name="jumlahPenugasanKelompok" xsdType="string"/>
         <element column="jumlahRealisasiKelompok" name="jumlahRealisasiKelompok" xsdType="string"/>
         <element column="pencapaianDebitur" name="pencapaianDebitur" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMonitorLkh" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT distinct companyCode, branchCode, productCode, dkhNo, collCode, collHeadCode, dkhDate, hari, tanggal, jumlahPenugasanKelompok, jumlahRealisasiKelompok, concat('Kelompok ', pencapaianKelompok, ' %, ', ' Debitur ', pencapaianDebitur, ' %') as pencapaian&#xd;	FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.DKH_NO dkhNo,&#xd;			A.COLL_CODE collCode,&#xd;			B.COLL_HEAD_CODE collHeadCode,&#xd;			B.BUCKET_CODE bucketCode,&#xd;			FORMAT(A.DKH_DATE, 'yyyy-MM') as dkhDate,&#xd;			(&#xd;				case&#xd;					when datename(dw, A.DKH_DATE) = 'Sunday' then 'Minggu'&#xd;					when datename(dw, A.DKH_DATE) = 'Monday' then 'Senin'&#xd;					when datename(dw, A.DKH_DATE) = 'Tuesday' then 'Selasa'&#xd;					when datename(dw, A.DKH_DATE) = 'Wednesday' then 'Rabu'&#xd;					when datename(dw, A.DKH_DATE) = 'Thursday' then 'Kamis'&#xd;					when datename(dw, A.DKH_DATE) = 'Friday' then 'Jumat'&#xd;					when datename(dw, A.DKH_DATE) = 'Saturday' then 'Sabtu'&#xd;				end&#xd;			) as hari,&#xd;			FORMAT(A.DKH_DATE, 'dd') as tanggal,&#xd;			concat(A.QTY_GROUP, ' Kelompok, ', A.QTY_CUSTOMER, ' Debitur') as jumlahPenugasanKelompok,&#xd;			concat(A.QTY_GROUP_CASH, ' Kelompok, ', A.QTY_CUSTOMER_CASH, ' Debitur') as jumlahRealisasiKelompok,&#xd;			(&#xd;				CASE&#xd;					WHEN A.QTY_GROUP_CASH = '0' AND A.QTY_GROUP = '0' THEN '0'&#xd;					ELSE (convert(float,A.QTY_GROUP_CASH) / convert(float,A.QTY_GROUP)) * 100&#xd;				END&#xd;			) as pencapaianKelompok,&#xd;			(&#xd;				CASE&#xd;					WHEN A.QTY_CUSTOMER_CASH = '0' AND A.QTY_CUSTOMER = '0' THEN '0'&#xd;					ELSE (convert(float,A.QTY_CUSTOMER_CASH) / convert(float,A.QTY_CUSTOMER)) * 100&#xd;				END&#xd;			) as pencapaianDebitur&#xd;		FROM TRX_DKH_HDR A&#xd;		JOIN MST_COLLECTOR B&#xd;		ON A.COMPANY_CODE = B.COMPANY_CODE AND A.COLL_CODE = B.COLL_CODE AND BUCKET_TYPE = 'FCOL'&#xd;	) a WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataMonitorLkh" useConfig="collectiondso1">
      <sql>SELECT distinct companyCode, branchCode, productCode, dkhNo, collCode, collHeadCode, dkhDate, hari, tanggal, jumlahPenugasanKelompok, jumlahRealisasiKelompok, concat('Kelompok ', pencapaianKelompok, ' %, ', ' Debitur ', pencapaianDebitur, ' %') as pencapaian&#xd;FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.DKH_NO dkhNo,&#xd;		A.COLL_CODE collCode,&#xd;		B.COLL_HEAD_CODE collHeadCode,&#xd;		B.BUCKET_CODE bucketCode,&#xd;		FORMAT(A.DKH_DATE, 'yyyy-MM') as dkhDate,&#xd;		(&#xd;			case&#xd;				when datename(dw, A.DKH_DATE) = 'Sunday' then 'Minggu'&#xd;				when datename(dw, A.DKH_DATE) = 'Monday' then 'Senin'&#xd;				when datename(dw, A.DKH_DATE) = 'Tuesday' then 'Selasa'&#xd;				when datename(dw, A.DKH_DATE) = 'Wednesday' then 'Rabu'&#xd;				when datename(dw, A.DKH_DATE) = 'Thursday' then 'Kamis'&#xd;				when datename(dw, A.DKH_DATE) = 'Friday' then 'Jumat'&#xd;				when datename(dw, A.DKH_DATE) = 'Saturday' then 'Sabtu'&#xd;			end&#xd;		) as hari,&#xd;		FORMAT(A.DKH_DATE, 'dd') as tanggal,&#xd;		concat(A.QTY_GROUP, ' Kelompok, ', A.QTY_CUSTOMER, ' Debitur') as jumlahPenugasanKelompok,&#xd;		concat(A.QTY_GROUP_CASH, ' Kelompok, ', A.QTY_CUSTOMER_CASH, ' Debitur') as jumlahRealisasiKelompok,&#xd;		(&#xd;			CASE&#xd;				WHEN A.QTY_GROUP_CASH = '0' AND A.QTY_GROUP = '0' THEN '0'&#xd;				ELSE (convert(float,A.QTY_GROUP_CASH) / convert(float,A.QTY_GROUP)) * 100&#xd;			END&#xd;		) as pencapaianKelompok,&#xd;		(&#xd;			CASE&#xd;				WHEN A.QTY_CUSTOMER_CASH = '0' AND A.QTY_CUSTOMER = '0' THEN '0'&#xd;				ELSE (convert(float,A.QTY_CUSTOMER_CASH) / convert(float,A.QTY_CUSTOMER)) * 100&#xd;			END&#xd;		) as pencapaianDebitur&#xd;	FROM TRX_DKH_HDR A&#xd;	JOIN MST_COLLECTOR B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.COLL_CODE = B.COLL_CODE AND BUCKET_TYPE = 'FCOL'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="hari" name="hari" xsdType="string"/>
         <element column="tanggal" name="tanggal" xsdType="string"/>
         <element column="jumlahPenugasanKelompok" name="jumlahPenugasanKelompok" xsdType="string"/>
         <element column="jumlahRealisasiKelompok" name="jumlahRealisasiKelompok" xsdType="string"/>
         <element column="pencapaian" name="pencapaian" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovKolektor" useConfig="collectiondso1">
      <sql>SELECT 1 as branchName, 1 collCode, 1 collPositionCode, 1 collPositionName, 1 joinDate, 1 fullnameColl, 1 bucketTypeName, 1 bucketCode</sql>
      <result element="Entries" rowName="">
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="bucketTypeName" name="bucketTypeName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovKolektor" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode, &#xd;		B.BRANCH_NAME branchName, &#xd;		A.PRODUCT_CODE productCode, &#xd;		C.PARAM_DESCRIP productName, &#xd;		A.COLL_CODE collCode,&#xd;		D.FULLNAME fullnameColl, &#xd;		D.POSITION_CODE collPositionCode, &#xd;		A.COLL_HEAD_CODE collHeadCode, &#xd;		E.FULLNAME fullnameCollHead,&#xd;		E.POSITION_CODE collHeadPositionCode, &#xd;		A.BUCKET_CODE bucketCode, &#xd;		A.JOIN_DATE joinDate, &#xd;		A.FLAG_ACTIVE flagActive,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.CREATED_BY createdBy,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updateDate,&#xd;		A.UPDATE_BY updateBy,&#xd;		F.POSITION_NAME collPositionName,&#xd;		G.POSITION_NAME collHeadPositionName,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		H.PARAM_DESCRIP bucketTypeName&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_BRANCH B ON A.BRANCH_CODE=B.BRANCH_CODE&#xd;	JOIN MST_GLOBAL_PARAM C ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	JOIN MST_EMPLOYEE D ON A.COLL_CODE = D.NIK&#xd;	JOIN MST_EMPLOYEE E ON A.COLL_HEAD_CODE = E.NIK&#xd;	JOIN MST_POSITION F ON D.POSITION_CODE = F.POSITION_CODE&#xd;	JOIN MST_POSITION G ON E.POSITION_CODE = G.POSITION_CODE&#xd;	JOIN MST_GLOBAL_PARAM H ON A.BUCKET_TYPE = H.PARAM_CODE AND H.CONDITION = 'BUCKET_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovKolektor" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName,&#xd;productCode, productName, collCode, fullnameColl, collPositionCode, collPositionName, collHeadCode, fullnameCollHead, collHeadPositionCode, collHeadPositionName, bucketCode, joinDate, flagActive, createdDate, createdBy, updateDate, updateBy, bucketType, bucketTypeName FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode, &#xd;		B.BRANCH_NAME branchName, &#xd;		A.PRODUCT_CODE productCode, &#xd;		C.PARAM_DESCRIP productName, &#xd;		A.COLL_CODE collCode,&#xd;		D.FULLNAME fullnameColl, &#xd;		D.POSITION_CODE collPositionCode, A.COLL_HEAD_CODE collHeadCode, &#xd;		E.FULLNAME fullnameCollHead,&#xd;		E.POSITION_CODE collHeadPositionCode, A.BUCKET_CODE bucketCode, &#xd;		A.JOIN_DATE joinDate, &#xd;		A.FLAG_ACTIVE flagActive,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.CREATED_BY createdBy,&#xd;		CONVERT(varchar, A.UPDATE_DATE, 121) as updateDate,&#xd;		A.UPDATE_BY updateBy,&#xd;		F.POSITION_NAME collPositionName,&#xd;		G.POSITION_NAME collHeadPositionName,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		H.PARAM_DESCRIP bucketTypeName&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_BRANCH B ON A.BRANCH_CODE=B.BRANCH_CODE&#xd;	JOIN MST_GLOBAL_PARAM C ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	JOIN MST_EMPLOYEE D ON A.COLL_CODE = D.NIK&#xd;	JOIN MST_EMPLOYEE E ON A.COLL_HEAD_CODE = E.NIK&#xd;	JOIN MST_POSITION F ON D.POSITION_CODE = F.POSITION_CODE&#xd;	JOIN MST_POSITION G ON E.POSITION_CODE = G.POSITION_CODE&#xd;	JOIN MST_GLOBAL_PARAM H ON A.BUCKET_TYPE = H.PARAM_CODE AND H.CONDITION = 'BUCKET_TYPE' AND H.FLAG_ACTIVE = '1'&#xd;) Z WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="fullnameCollHead" name="fullnameCollHead" xsdType="string"/>
         <element column="collHeadPositionCode" name="collHeadPositionCode" xsdType="string"/>
         <element column="collHeadPositionName" name="collHeadPositionName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="flagActive" name="flagActive" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="createdBy" name="createdBy" xsdType="string"/>
         <element column="updateDate" name="updateDate" xsdType="string"/>
         <element column="updateBy" name="updateBy" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="bucketTypeName" name="bucketTypeName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="rejectPindahBaket" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>update TRX_COLL_MOVE_BUCKET set APPRV_STS = 'APPD', TRX_STS = '1', CANCEL_DATE = GETDATE(), APPRV_DATE = GETDATE()&#xd;where TRX_NO =:trxNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="trxNo" sqlType="STRING"/>
   </query>
   <query id="getColumnLovKelompokTagihUlang" useConfig="collectiondso1">
      <sql>SELECT 1 as groupCode, 1 groupName, 1 collDayName, 1 groupAddress, 1 flagRevitalization, 1 villageName, 1 subdistrictName, 1 cityName, 1 provinceName, 1 totalDebitur, 1 createdDate, 1 groupLeader, 1 collTime</sql>
      <result element="Entries" rowName="">
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="flagRevitalization" name="flagRevitalization" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="groupLeader" name="groupLeader" xsdType="string"/>
         <element column="collTime" name="collTime" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovKelompokTagihUlang" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;SELECT		A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.GROUP_NAME groupName,&#xd;			CASE WHEN A.FLAG_REVITALIZATION = '0' THEN&#xd;			(&#xd;				case&#xd;					when A.COLL_DAY = '1' then 'Minggu'&#xd;					when A.COLL_DAY = '2' then 'Senin'&#xd;					when A.COLL_DAY = '3' then 'Selasa'&#xd;					when A.COLL_DAY = '4' then 'Rabu'&#xd;					when A.COLL_DAY = '5' then 'Kamis'&#xd;					when A.COLL_DAY = '6' then 'Jumat'&#xd;					when A.COLL_DAY = '7' then 'Sabtu'&#xd;				end&#xd;			) else STUFF((SELECT ', ' + &#xd;					case&#xd;						when cdtl.day_code = '1' then 'Minggu'&#xd;						when cdtl.day_code = '2' then 'Senin'&#xd;						when cdtl.day_code = '3' then 'Selasa'&#xd;						when cdtl.day_code = '4' then 'Rabu'&#xd;						when cdtl.day_code = '5' then 'Kamis'&#xd;						when cdtl.day_code = '6' then 'Jumat'&#xd;						when cdtl.day_code = '7' then 'Sabtu'&#xd;					end&#xd;					FROM mst_coll_day_hdr(nolock) cd&#xd;					left join mst_coll_day_dtl(nolock) cdtl&#xd;					on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;					WHERE A.COLL_DAY_CODE = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.PRODUCT_CODE and A.FLAG_REVITALIZATION='1'&#xd;					FOR XML PATH('')&#xd;			), 1, 1, '') end as collDayName,&#xd;			A.GROUP_ADDRESS groupAddress,&#xd;			A.FLAG_REVITALIZATION flagRevitalization,&#xd;			B.VILLAGE_NAME villageName,&#xd;			C.SUBDISTRICT_NAME subdistrictName,&#xd;			D.CITY_NAME cityName,&#xd;			E.PROVINCE_NAME provinceName,&#xd;			(select count(0) from (select distinct group_code,aggr_no from TRX_COLLECTOR_SCHEDULE_WITH_AGGR_NO (nolock)&#xd;			where company_code=A.COMPANY_CODE and group_code =A.GROUP_CODE) as sq)  as totalDebitur,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.GROUP_LEADER groupLeader,&#xd;			A.COLL_TIME collTime,&#xd;			F.PARAM_DESCRIP collTimeDescrip,&#xd;			A.FUNDING_DATE fundingDate,&#xd;			case when A.FLAG_REVITALIZATION = '1' then ''&#xd;			else (select PF.PARAM_DESCRIP FROM MST_GLOBAL_PARAM PF (NOLOCK) WHERE A.COMPANY_CODE = PF.COMPANY_CODE AND PF.PARAM_CODE = A.PAYMENT_FREQ AND PF.CONDITION = 'PAYMENT_FREQ')&#xd;			end as paymentFreq&#xd;		FROM MST_GROUP_HDR A (nolock)&#xd;		LEFT JOIN MST_VILLAGE B (nolock)&#xd;		ON A.GROUP_VILLAGE_CODE = B.VILLAGE_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT C (nolock)&#xd;		ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE AND B.COMPANY_CODE=C.COMPANY_CODE&#xd;		LEFT JOIN MST_CITY D (nolock)&#xd;		ON B.CITY_CODE = D.CITY_CODE AND B.COMPANY_CODE=D.COMPANY_CODE&#xd;		LEFT JOIN MST_PROVINCE E (nolock)&#xd;		ON B.PROVINCE_CODE = E.PROVINCE_CODE AND B.COMPANY_CODE=E.COMPANY_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;		ON A.COMPANY_CODE = F.COMPANY_CODE AND A.COLL_TIME = F.PARAM_CODE AND F.CONDITION = 'VISIT_TIME' AND F.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_BRANCH BR (nolock) ON A.BRANCH_CODE = BR.BRANCH_CODE AND A.COMPANY_CODE = BR.COMPANY_CODE&#xd;		left join (select company_code,group_code,dkh_sts,rn&#xd;					from (select dtl.company_code, dtl.group_code, hdr.dkh_sts, row_number() over(partition by dtl.company_code,&#xd;							dtl.group_code&#xd;							order by hdr.created_date desc) rn&#xd;						from trx_dkh_dtl(nolock) dtl&#xd;						join trx_dkh_hdr(nolock) hdr&#xd;						on dtl.company_code = hdr.company_code&#xd;						and dtl.dkh_no = hdr.dkh_no&#xd;						and hdr.dkh_sts in ('OPEN','PROC')&#xd;					) x&#xd;			where rn = 1) gr&#xd;			on A.company_code = gr.company_code and A.group_code = gr.group_code&#xd;		WHERE A.GROUP_STS = '1' and gr.dkh_sts is null&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovKelompokTagihUlang" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, collCode, groupCode, groupName, collDayName, groupAddress, flagRevitalization, villageName, subdistrictName, cityName, provinceName, totalDebitur, createdDate, groupLeader, collTime, collTimeDescrip, fundingDate, paymentFreq FROM (&#xd;SELECT		A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.GROUP_NAME groupName,&#xd;			CASE WHEN A.FLAG_REVITALIZATION = '0' THEN&#xd;			(&#xd;				case&#xd;					when A.COLL_DAY = '1' then 'Minggu'&#xd;					when A.COLL_DAY = '2' then 'Senin'&#xd;					when A.COLL_DAY = '3' then 'Selasa'&#xd;					when A.COLL_DAY = '4' then 'Rabu'&#xd;					when A.COLL_DAY = '5' then 'Kamis'&#xd;					when A.COLL_DAY = '6' then 'Jumat'&#xd;					when A.COLL_DAY = '7' then 'Sabtu'&#xd;				end&#xd;			) else STUFF((SELECT ', ' + &#xd;					case&#xd;						when cdtl.day_code = '1' then 'Minggu'&#xd;						when cdtl.day_code = '2' then 'Senin'&#xd;						when cdtl.day_code = '3' then 'Selasa'&#xd;						when cdtl.day_code = '4' then 'Rabu'&#xd;						when cdtl.day_code = '5' then 'Kamis'&#xd;						when cdtl.day_code = '6' then 'Jumat'&#xd;						when cdtl.day_code = '7' then 'Sabtu'&#xd;					end&#xd;					FROM mst_coll_day_hdr(nolock) cd&#xd;					left join mst_coll_day_dtl(nolock) cdtl&#xd;					on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;					WHERE A.COLL_DAY_CODE = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.PRODUCT_CODE and A.FLAG_REVITALIZATION='1'&#xd;					FOR XML PATH('')&#xd;			), 1, 1, '') end as collDayName,&#xd;			A.GROUP_ADDRESS groupAddress,&#xd;			A.FLAG_REVITALIZATION flagRevitalization,&#xd;			B.VILLAGE_NAME villageName,&#xd;			C.SUBDISTRICT_NAME subdistrictName,&#xd;			D.CITY_NAME cityName,&#xd;			E.PROVINCE_NAME provinceName,&#xd;			(select count(0) from (select distinct group_code,aggr_no from TRX_COLLECTOR_SCHEDULE_WITH_AGGR_NO (nolock)&#xd;			where company_code=A.COMPANY_CODE and group_code =A.GROUP_CODE) as sq)  as totalDebitur,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.GROUP_LEADER groupLeader,&#xd;			A.COLL_TIME collTime,&#xd;			F.PARAM_DESCRIP collTimeDescrip,&#xd;			A.FUNDING_DATE fundingDate,&#xd;			case when A.FLAG_REVITALIZATION = '1' then ''&#xd;			else (select PF.PARAM_DESCRIP FROM MST_GLOBAL_PARAM PF (NOLOCK) WHERE A.COMPANY_CODE = PF.COMPANY_CODE AND PF.PARAM_CODE = A.PAYMENT_FREQ AND PF.CONDITION = 'PAYMENT_FREQ')&#xd;			end as paymentFreq&#xd;		FROM MST_GROUP_HDR A (nolock)&#xd;		LEFT JOIN MST_VILLAGE B (nolock)&#xd;		ON A.GROUP_VILLAGE_CODE = B.VILLAGE_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT C (nolock)&#xd;		ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE AND B.COMPANY_CODE=C.COMPANY_CODE&#xd;		LEFT JOIN MST_CITY D (nolock)&#xd;		ON B.CITY_CODE = D.CITY_CODE AND B.COMPANY_CODE=D.COMPANY_CODE&#xd;		LEFT JOIN MST_PROVINCE E (nolock)&#xd;		ON B.PROVINCE_CODE = E.PROVINCE_CODE AND B.COMPANY_CODE=E.COMPANY_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;		ON A.COMPANY_CODE = F.COMPANY_CODE AND A.COLL_TIME = F.PARAM_CODE AND F.CONDITION = 'VISIT_TIME' AND F.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_BRANCH BR (nolock) ON A.BRANCH_CODE = BR.BRANCH_CODE AND A.COMPANY_CODE = BR.COMPANY_CODE&#xd;		left join (select company_code,group_code,dkh_sts,rn&#xd;					from (select dtl.company_code, dtl.group_code, hdr.dkh_sts, row_number() over(partition by dtl.company_code,&#xd;							dtl.group_code&#xd;							order by hdr.created_date desc) rn&#xd;						from trx_dkh_dtl(nolock) dtl&#xd;						join trx_dkh_hdr(nolock) hdr&#xd;						on dtl.company_code = hdr.company_code&#xd;						and dtl.dkh_no = hdr.dkh_no&#xd;						and hdr.dkh_sts in ('OPEN','PROC')&#xd;					) x&#xd;			where rn = 1) gr&#xd;			on A.company_code = gr.company_code and A.group_code = gr.group_code&#xd;		WHERE A.GROUP_STS = '1' and gr.dkh_sts is null&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="flagRevitalization" name="flagRevitalization" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="groupLeader" name="groupLeader" xsdType="string"/>
         <element column="collTime" name="collTime" xsdType="string"/>
         <element column="collTimeDescrip" name="collTimeDescrip" xsdType="string"/>
         <element column="fundingDate" name="fundingDate" xsdType="string"/>
         <element column="paymentFreq" name="paymentFreq" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnRiwayatTaskToDo" useConfig="collectiondso1">
      <sql>SELECT 1 as rowNumber, 1 subject, 1 nik, 1 positionName, 1 branchName, 1 decisionSts, 1 reasonLog</sql>
      <result element="Entries" rowName="">
         <element column="rowNumber" name="rowNumber" xsdType="string"/>
         <element column="subject" name="subject" xsdType="string"/>
         <element column="nik" name="nik" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="decisionSts" name="decisionSts" xsdType="string"/>
         <element column="reasonLog" name="reasonLog" xsdType="string"/>
      </result>
   </query>
   <query id="getCountRiwayatTaskToDo" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) as total FROM (&#xd;	SELECT ROW_NUMBER() OVER(ORDER BY trxSeq asc) as rowNumber, trxSeq, subject, nik, positionCode, positionName, branchCode, branchName, decisionSts, reasonLog, fullName, dicisionDate FROM (&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.TRX_CODE trxCode,&#xd;			A.TRX_SEQ trxSeq,&#xd;			A.SUBJECT subject,&#xd;			A.NIK nik,&#xd;			A.POSITION_CODE positionCode,&#xd;			B.POSITION_NAME positionName,&#xd;			A.BRANCH_CODE branchCode,&#xd;			C.BRANCH_NAME branchName,&#xd;			A.DECISION_STS decisionSts,&#xd;			CONVERT(DATE, A.DECISION_DATE) dicisionDate,&#xd;			A.REASON_LOG reasonLog,&#xd;			D.FULLNAME fullName&#xd;		FROM TRX_APPROVAL A (nolock)&#xd;		LEFT JOIN MST_POSITION B (nolock)&#xd;		ON A.POSITION_CODE = B.POSITION_CODE&#xd;		LEFT JOIN MST_BRANCH C (nolock)&#xd;		ON A.BRANCH_CODE = C.BRANCH_CODE&#xd;		LEFT JOIN MST_EMPLOYEE D (nolock)&#xd;		ON A.NIK = D.NIK&#xd;	) a WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataRiwayatTaskToDo" useConfig="collectiondso1">
      <sql>SELECT ROW_NUMBER() OVER(ORDER BY trxSeq asc) as rowNumber, trxSeq, subject, nik, positionCode, positionName, branchCode, branchName, decisionSts, reasonLog, fullName, dicisionDate FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.TRX_CODE trxCode,&#xd;		A.TRX_SEQ trxSeq,&#xd;		A.SUBJECT subject,&#xd;		A.NIK nik,&#xd;		A.POSITION_CODE positionCode,&#xd;		B.POSITION_NAME positionName,&#xd;		A.BRANCH_CODE branchCode,&#xd;		C.BRANCH_NAME branchName,&#xd;		A.DECISION_STS decisionSts,&#xd;        CONVERT(DATE, A.DECISION_DATE) dicisionDate,&#xd;		A.REASON_LOG reasonLog,&#xd;		D.FULLNAME fullName&#xd;	FROM TRX_APPROVAL A (nolock)&#xd;	LEFT JOIN MST_POSITION B (nolock)&#xd;	ON A.POSITION_CODE = B.POSITION_CODE&#xd;	LEFT JOIN MST_BRANCH C (nolock)&#xd;	ON A.BRANCH_CODE = C.BRANCH_CODE&#xd;	LEFT JOIN MST_EMPLOYEE D (nolock)&#xd;	ON A.NIK = D.NIK&#xd;) a where :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="trxSeq" name="trxSeq" xsdType="string"/>
         <element column="subject" name="subject" xsdType="string"/>
         <element column="nik" name="nik" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="decisionSts" name="decisionSts" xsdType="string"/>
         <element column="reasonLog" name="reasonLog" xsdType="string"/>
         <element column="fullName" name="fullName" xsdType="string"/>
         <element column="dicisionDate" name="dicisionDate" xsdType="string"/>
         <element column="rowNumber" name="rowNumber" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="generateMstCoverAreaDtlDso" useConfig="collectiondso1">
      <sql>declare @companyCode	varchar(10) = :companyCode&#xd;declare @productCode	varchar(10) = :productCode&#xd;declare @branchCode		varchar(20) = :branchCode&#xd;&#xd;select &#xd;	company_code companyCode&#xd;	, village_code villageCode&#xd;	, village_name villageName&#xd;	, product_code productCode&#xd;	, product_name productName&#xd;	, CLUSTER cluster&#xd;	, SUM(TOT_AGGR) as totalAggr&#xd;	, subdistrict_name subdistrictName&#xd;from ( &#xd;	select distinct&#xd;		c.company_code,&#xd;		br.branch_code,&#xd;		j.branch_name,&#xd;		c.village_code,&#xd;		c.village_name,&#xd;		k.PARAM_CODE as product_code,&#xd;		k.PARAM_DESCRIP as product_name,&#xd;		'' CLUSTER,&#xd;		ISNULL(l.TOT_AGGR,0) AS TOT_AGGR,&#xd;		e.subdistrict_name&#xd;	from [dbo].[mst_village] c&#xd;&#xd;	left join [dbo].[mst_branch] br&#xd;	on c.company_code = br.company_code&#xd;	and br.branch_code = @branchCode&#xd;&#xd;	join dbo.getviewbranch() d&#xd;	on d.company_code = br.company_code&#xd;	and (&#xd;	case &#xd;	when br.structure_type = 'ST05' then d.branch_code&#xd;	when br.structure_type = 'ST04' then d.dso_code end&#xd;	) = br.branch_code&#xd;&#xd;	left join [dbo].[trx_aggr] a&#xd;	on a.company_code = c.company_code&#xd;	and a.branch_code = d.branch_code&#xd;	and a.coll_village_code = c.VILLAGE_CODE&#xd;	and (a.wo_date is null or a.wo_date = '1900-01-01')&#xd;	and a.ar_sts in ('ar','bd')&#xd;&#xd;	left join [dbo].[MST_TOTAL_AGGR] l&#xd;	on l.COMPANY_CODE = c.COMPANY_CODE&#xd;	and l.BRANCH_CODE = d.BRANCH_CODE&#xd;	and l.VILLAGE_CODE = c.VILLAGE_CODE&#xd;&#xd;	left join [dbo].[MST_BRANCH] j&#xd;	on j.COMPANY_CODE = c.COMPANY_CODE&#xd;	and j.BRANCH_CODE = d.BRANCH_CODE&#xd;&#xd;	left join [dbo].[MST_GLOBAL_PARAM] k&#xd;	on k.COMPANY_CODE = c.COMPANY_CODE&#xd;	and k.CONDITION = 'PRODUCT_CODE'&#xd;	and k.PARAM_CODE = @productCode&#xd;&#xd;	left join [dbo].[mst_subdistrict] e&#xd;	on e.company_code = c.company_code&#xd;	and e.SUBDISTRICT_CODE = c.subdistrict_code&#xd;&#xd;	left join [dbo].[mst_cover_area_dtl] f&#xd;	on f.company_code = c.COMPANY_CODE&#xd;	and f.village_code = c.VILLAGE_CODE&#xd;	and f.BRANCH_CODE = d.BRANCH_CODE&#xd;	and f.PRODUCT_CODE = @productCode&#xd;&#xd;	left join [dbo].[MST_COVER_AREA_HDR] g&#xd;	on g.COMPANY_CODE = f.COMPANY_CODE&#xd;	and g.BRANCH_CODE = f.BRANCH_CODE&#xd;	and g.FLAG_ACTIVE = 1&#xd;&#xd;&#xd;	where (a.coll_village_code is not null or (f.village_code is not null and g.branch_code is not null)) &#xd;	and c.company_code = @companyCode&#xd;) a&#xd;group by &#xd;	COMPANY_CODE&#xd;	, village_code&#xd;	, village_name&#xd;	, product_code&#xd;	, product_name&#xd;	, CLUSTER&#xd;	, subdistrict_name&#xd;order by village_code asc</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="cluster" name="cluster" xsdType="string"/>
         <element column="totalAggr" name="totalAggr" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="getDetailMstCollAreaDtlDso" useConfig="collectiondso1">
      <sql>declare @companyCode varchar(10)	= :companyCode&#xd;declare @branchCode varchar(10)		= :branchCode&#xd;declare @productCode varchar(10)	= :productCode&#xd;declare @bucketCode varchar(10)		= :bucketCode&#xd;declare @EffDate varchar(10)		= :effectiveDate&#xd;&#xd;select &#xd;	company_code companyCode&#xd;	, branch_code branchCode&#xd;	, branch_name branchName&#xd;	, product_code productCode&#xd;	, product_name productName&#xd;	, bucket_code bucketCode&#xd;	, bucket_name bucketName&#xd;	, village_code villageCode&#xd;	, village_name villageName&#xd;	, subdistrict_name subdistrictName&#xd;	, SUM(TOT_AGGR) as totalAggr&#xd;	, qty_aggr_no qtyAggrNo&#xd;	, effective_date effectiveDate&#xd;	, isnull(coll_code, '') collCode&#xd;	, fullname_coll fullnameColl&#xd;	, isnull(coll_day_code, '') collCodeDay&#xd;	, description collDayName&#xd;from ( &#xd;	select distinct&#xd;		c.company_code,&#xd;		br.branch_code,&#xd;		br.branch_name,&#xd;		c.village_code,&#xd;		c.village_name,&#xd;		k.PARAM_CODE as product_code,&#xd;		k.PARAM_DESCRIP as product_name,&#xd;		'' CLUSTER,&#xd;		ISNULL(l.TOT_AGGR,0) AS TOT_AGGR,&#xd;		e.subdistrict_name,&#xd;		h.bucket_code bucket_code,&#xd;		buc.DESCRIPTION bucket_name,&#xd;		h.effective_date effective_date,&#xd;		ISNULL(h.qty_aggr_no, 0) qty_aggr_no,&#xd;		h.coll_code coll_code,&#xd;		em.fullname fullname_coll,&#xd;		h.coll_day_code coll_day_code,&#xd;		cdh.description description&#xd;	from [dbo].[mst_village] c (nolock)&#xd;&#xd;	left join [dbo].[mst_branch] br (nolock)&#xd;	on c.company_code = br.company_code&#xd;	and br.branch_code = @branchCode&#xd;&#xd;	join dbo.getviewbranch() d&#xd;	on d.company_code = br.company_code&#xd;	and (&#xd;	case &#xd;	when br.structure_type = 'ST05' then d.branch_code&#xd;	when br.structure_type = 'ST04' then d.dso_code end&#xd;	) = br.branch_code&#xd;&#xd;	left join [dbo].[trx_aggr] a (nolock)&#xd;	on a.company_code = c.company_code&#xd;	and a.branch_code = d.branch_code&#xd;	and a.coll_village_code = c.VILLAGE_CODE&#xd;	and (a.wo_date is null or a.wo_date = '1900-01-01')&#xd;	and a.ar_sts in ('ar','bd')&#xd;&#xd;	left join [dbo].[MST_TOTAL_AGGR] l (nolock)&#xd;	on l.COMPANY_CODE = c.COMPANY_CODE&#xd;	and l.BRANCH_CODE = d.BRANCH_CODE&#xd;	and l.VILLAGE_CODE = c.VILLAGE_CODE&#xd;&#xd;	left join [dbo].[MST_BRANCH] j (nolock)&#xd;	on j.COMPANY_CODE = c.COMPANY_CODE&#xd;	and j.BRANCH_CODE = d.BRANCH_CODE&#xd;&#xd;	left join [dbo].[MST_GLOBAL_PARAM] k (nolock)&#xd;	on k.COMPANY_CODE = c.COMPANY_CODE&#xd;	and k.CONDITION = 'PRODUCT_CODE'&#xd;	and k.PARAM_CODE = @productCode&#xd;&#xd;	left join [dbo].[mst_subdistrict] e (nolock)&#xd;	on e.company_code = c.company_code&#xd;	and e.SUBDISTRICT_CODE = c.subdistrict_code&#xd;&#xd;	left join [dbo].[mst_cover_area_dtl] f (nolock)&#xd;	on f.company_code = c.COMPANY_CODE&#xd;	and f.village_code = c.VILLAGE_CODE&#xd;	and f.BRANCH_CODE = d.BRANCH_CODE&#xd;	and f.PRODUCT_CODE = @productCode&#xd;&#xd;	left join [dbo].[MST_COVER_AREA_HDR] g (nolock)&#xd;	on g.COMPANY_CODE = f.COMPANY_CODE&#xd;	and g.BRANCH_CODE = f.BRANCH_CODE&#xd;	and g.FLAG_ACTIVE = 1&#xd;&#xd;	left join MST_COLL_AREA_DTL h (nolock)&#xd;	on h.COMPANY_CODE = c.COMPANY_CODE&#xd;	and @branchCode = h.BRANCH_CODE&#xd;	and h.PRODUCT_CODE = @productCode&#xd;	and h.BUCKET_CODE = @bucketCode&#xd;	and h.EFFECTIVE_DATE = @EffDate&#xd;	and h.VILLAGE_CODE = c.VILLAGE_CODE&#xd;&#xd;	left join MST_COLL_AREA_HDR i (nolock)&#xd;	on i.COMPANY_CODE=h.COMPANY_CODE&#xd;	and i.BRANCH_CODE = h.BRANCH_CODE&#xd;	and i.BUCKET_CODE=h.BUCKET_CODE&#xd;	and i.EFFECTIVE_DATE = h.EFFECTIVE_DATE&#xd;	and i.PRODUCT_CODE = h.PRODUCT_CODE&#xd;&#xd;	left join mst_bucket buc (nolock)&#xd;	on h.bucket_code = buc.bucket_code and buc.bucket_type = 'fcol' and h.product_code = buc.product_code&#xd;&#xd;	left join mst_employee em (nolock)&#xd;	on h.coll_code = em.nik&#xd;&#xd;	left join mst_coll_day_hdr cdh (nolock)&#xd;	on h.coll_day_code = cdh.coll_day_code and h.product_code = cdh.product_code&#xd;&#xd;	where (a.coll_village_code is not null or (f.village_code is not null and g.branch_code is not null) or h.VILLAGE_CODE is not null) &#xd;	and c.company_code = @companyCode&#xd;) a&#xd;group by &#xd;	COMPANY_CODE&#xd;	, branch_code&#xd;	, branch_name&#xd;	, village_code&#xd;	, village_name&#xd;	, product_code&#xd;	, product_name&#xd;	, subdistrict_name&#xd;	, bucket_code&#xd;	, bucket_name&#xd;	, effective_date&#xd;	, qty_aggr_no&#xd;	, coll_code&#xd;	, fullname_coll&#xd;	, coll_day_code&#xd;	, description&#xd;order by village_code asc</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="totalAggr" name="totalAggr" xsdType="string"/>
         <element column="qtyAggrNo" name="qtyAggrNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collCodeDay" name="collCodeDay" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
   </query>
   <query id="callSpPrcUpdCollCode" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[PRC_UPD_COLL_CODE] &#xd;	(&#xd;		:companyCode,	&#xd;		:branchCode,&#xd;		:productCode,&#xd;		:bucketCode,&#xd;		:effectiveDate,&#xd;		:returnVal&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="getColumnLovCollectorIndex" useConfig="collectiondso1">
      <sql>SELECT 1 as collCode, 1 fullnameColl, &#xd;1 branchName, 1 joinDate, 1 collPositionCode, 1 collPositionName</sql>
      <result element="Entries" rowName="">
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovCollectorIndex" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT DISTINCT companyCode, branchCode, branchName, dsoCode, dsoName, areaCode, areaName, regionCode, regionName,&#xd;	productCode, productName, collCode, fullnameColl, collPositionCode, collPositionName, joinDate, bucketType, collHeadCode FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			case&#xd;				when b.structure_type = 'ST05' then a.branch_code&#xd;				when b.structure_type = 'ST04' then a.branch_code&#xd;			end branchCode,&#xd;			case&#xd;				when b.structure_type = 'ST05' then b.branch_name&#xd;				when b.structure_type = 'ST04' then b.branch_name&#xd;			end branchName,&#xd;			case&#xd;				when b.structure_type = 'ST04' then a.branch_code&#xd;				else vb.dso_code&#xd;			end dsoCode,&#xd;			case&#xd;				when b.structure_type = 'ST04' then vd.dso_name&#xd;				else vb.dso_name&#xd;			end dsoName,&#xd;			case&#xd;				when b.structure_type = 'ST04' then vd.area_code&#xd;				else vb.area_code&#xd;			end areaCode,&#xd;			case&#xd;				when b.structure_type = 'ST04' then vd.area_name&#xd;				else vb.area_name&#xd;			end areaName,&#xd;			case&#xd;				when b.structure_type = 'ST04' then vd.region_code&#xd;				else vb.region_code&#xd;			end regionCode,&#xd;			case&#xd;				when b.structure_type = 'ST04' then vd.region_name&#xd;				else vb.region_name&#xd;			end regionName, &#xd;			A.PRODUCT_CODE productCode, &#xd;			C.PARAM_DESCRIP productName, &#xd;			A.COLL_CODE collCode,&#xd;			D.FULLNAME fullnameColl, &#xd;			D.POSITION_CODE collPositionCode, &#xd;			A.COLL_HEAD_CODE collHeadCode, &#xd;			E.FULLNAME fullnameCollHead,&#xd;			E.POSITION_CODE collHeadPositionCode, &#xd;			A.BUCKET_CODE bucketCode, &#xd;			A.JOIN_DATE joinDate, &#xd;			A.FLAG_ACTIVE flagActive,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.CREATED_BY createdBy,&#xd;			A.UPDATE_DATE updateDate,&#xd;			A.UPDATE_BY updateBy,&#xd;			F.POSITION_NAME collPositionName,&#xd;			G.POSITION_NAME collHeadPositionName,&#xd;			A.BUCKET_TYPE bucketType&#xd;		FROM MST_COLLECTOR A&#xd;		JOIN MST_BRANCH B ON A.BRANCH_CODE=B.BRANCH_CODE&#xd;		left join getViewBranch() vb&#xd;		on a.company_code = vb.company_code and a.branch_code = vb.branch_code&#xd;		left join getViewBranch() vd&#xd;		on a.company_code = vd.company_code and a.branch_code = vd.dso_code&#xd;		JOIN MST_GLOBAL_PARAM C ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;		JOIN MST_EMPLOYEE D ON A.COLL_CODE = D.NIK AND D.STATUS = '1'&#xd;		JOIN MST_EMPLOYEE E ON A.COLL_HEAD_CODE = E.NIK&#xd;		JOIN MST_POSITION F ON D.POSITION_CODE = F.POSITION_CODE&#xd;		JOIN MST_POSITION G ON E.POSITION_CODE = G.POSITION_CODE&#xd;	) Z WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovCollectorIndex" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, branchCode, branchName, dsoCode, dsoName, areaCode, areaName, regionCode, regionName,&#xd;productCode, productName, collCode, fullnameColl, collPositionCode, collPositionName, joinDate, bucketType, collHeadCode FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		case&#xd;			when b.structure_type = 'ST05' then a.branch_code&#xd;			when b.structure_type = 'ST04' then a.branch_code&#xd;		end branchCode,&#xd;		case&#xd;			when b.structure_type = 'ST05' then b.branch_name&#xd;			when b.structure_type = 'ST04' then b.branch_name&#xd;		end branchName,&#xd;		case&#xd;			when b.structure_type = 'ST04' then a.branch_code&#xd;			else vb.dso_code&#xd;		end dsoCode,&#xd;		case&#xd;			when b.structure_type = 'ST04' then vd.dso_name&#xd;			else vb.dso_name&#xd;		end dsoName,&#xd;		case&#xd;			when b.structure_type = 'ST04' then vd.area_code&#xd;			else vb.area_code&#xd;		end areaCode,&#xd;		case&#xd;			when b.structure_type = 'ST04' then vd.area_name&#xd;			else vb.area_name&#xd;		end areaName,&#xd;		case&#xd;			when b.structure_type = 'ST04' then vd.region_code&#xd;			else vb.region_code&#xd;		end regionCode,&#xd;		case&#xd;			when b.structure_type = 'ST04' then vd.region_name&#xd;			else vb.region_name&#xd;		end regionName, &#xd;		A.PRODUCT_CODE productCode, &#xd;		C.PARAM_DESCRIP productName, &#xd;		A.COLL_CODE collCode,&#xd;		D.FULLNAME fullnameColl, &#xd;		D.POSITION_CODE collPositionCode, &#xd;		A.COLL_HEAD_CODE collHeadCode, &#xd;		E.FULLNAME fullnameCollHead,&#xd;		E.POSITION_CODE collHeadPositionCode, &#xd;		A.BUCKET_CODE bucketCode, &#xd;		A.JOIN_DATE joinDate, &#xd;		A.FLAG_ACTIVE flagActive,&#xd;		A.CREATED_DATE createdDate,&#xd;		A.CREATED_BY createdBy,&#xd;		A.UPDATE_DATE updateDate,&#xd;		A.UPDATE_BY updateBy,&#xd;		F.POSITION_NAME collPositionName,&#xd;		G.POSITION_NAME collHeadPositionName,&#xd;		A.BUCKET_TYPE bucketType&#xd;	FROM MST_COLLECTOR A&#xd;	JOIN MST_BRANCH B ON A.BRANCH_CODE=B.BRANCH_CODE&#xd;	left join getViewBranch() vb&#xd;	on a.company_code = vb.company_code and a.branch_code = vb.branch_code&#xd;	left join getViewBranch() vd&#xd;	on a.company_code = vd.company_code and a.branch_code = vd.dso_code&#xd;	JOIN MST_GLOBAL_PARAM C ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	JOIN MST_EMPLOYEE D ON A.COLL_CODE = D.NIK AND D.STATUS = '1'&#xd;	JOIN MST_EMPLOYEE E ON A.COLL_HEAD_CODE = E.NIK&#xd;	JOIN MST_POSITION F ON D.POSITION_CODE = F.POSITION_CODE&#xd;	JOIN MST_POSITION G ON E.POSITION_CODE = G.POSITION_CODE&#xd;) Z WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collPositionCode" name="collPositionCode" xsdType="string"/>
         <element column="collPositionName" name="collPositionName" xsdType="string"/>
         <element column="joinDate" name="joinDate" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="spCheckFlagSendSatu" useConfig="collectiondso1">
      <sql>DECLARE @SP_NO varchar(50) = :spNo&#xd;&#xd;select spNo from (&#xd;	select&#xd;		a.sp_no spNo,&#xd;		a.sp_sts spSts&#xd;	from trx_sp(nolock) a&#xd;	join trx_dkh_dtl(nolock) b&#xd;	on a.company_code = b.company_code and a.sp_no = b.sp_no and b.flag_send &gt; '0'&#xd;) a where spNo = @SP_NO</sql>
      <result element="Entries" rowName="contents">
         <element column="spNo" name="spNo" xsdType="string"/>
      </result>
      <param name="spNo" sqlType="STRING"/>
   </query>
   <query id="spCheckFlagSendNol" useConfig="collectiondso1">
      <sql>declare @spNo varchar(50) = :spNo&#xd;&#xd;select dkhNo, spNo from (&#xd;	select&#xd;		a.dkh_no dkhNo,&#xd;		a.sp_no spNo,&#xd;		a.flag_Send flagSend,&#xd;		b.dkh_sts dKhSts&#xd;	from trx_dkh_dtl(nolock) a&#xd;	join trx_dkh_hdr(nolock) b&#xd;	on a.company_code = b.company_code and a.dkh_no = b.dkh_no&#xd;) a where spNo = @spNo and flagSend = '0' and dkhSts in ('OPEN', 'PROC')</sql>
      <result element="Entries" rowName="contents">
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="spNo" name="spNo" xsdType="string"/>
      </result>
      <param name="spNo" sqlType="STRING"/>
   </query>
   <query id="updateSpsts" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>update trx_sp set&#xd;	canceled_date = GETDATE(),&#xd;	sp_sts = 'CANC'&#xd;where&#xd;	sp_no = :spNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="spNo" sqlType="STRING"/>
   </query>
   <query id="updateSpNoDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @dkh_no varchar(50) = :dkhNo&#xd;&#xd;update trx_dkh_dtl set&#xd;	sp_no = '',&#xd;	sp_type = ''&#xd;where&#xd;	company_code = 'EDV' AND&#xd;	dkh_no = @dkh_no</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="dkhNo" sqlType="STRING"/>
   </query>
   <query id="updateLockUnlockInventory" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;DECLARE @AGGR_NO VARCHAR(50) = :aggrNo&#xd;&#xd;UPDATE TRX_INVENTORY_TU SET&#xd;	INVENTORY_STS = :inventorySts&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE&#xd;	AND TU_DEPOSIT_NO = @TU_DEPOSIT_NO&#xd;	AND AGGR_NO = @AGGR_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="inventorySts" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="cancelSellUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE TRX_SELL_HDR SET&#xd;	SELL_STS = :sellSts,&#xd;	CANCEL_DATE = GETDATE()&#xd;WHERE	&#xd;	SELL_NO = :sellNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sellSts" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
   </query>
   <query id="updateReadyToSellUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @SELL_NO VARCHAR(50) = :sellNo&#xd;DECLARE @INVENTORY_STS VARCHAR(50) = :inventorySts&#xd;&#xd;UPDATE TRX_INVENTORY_TU SET&#xd;	INVENTORY_STS = @INVENTORY_STS&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE&#xd;AND TU_DEPOSIT_NO IN (SELECT TU_DEPOSIT_NO FROM TRX_SELL_UNIT WHERE SELL_NO = @SELL_NO AND FLAG_ACTIVE = '1')&#xd;AND AGGR_NO IN (SELECT AGGR_NO FROM TRX_SELL_UNIT WHERE SELL_NO = @SELL_NO AND FLAG_ACTIVE = '1')</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="inventorySts" sqlType="STRING"/>
   </query>
   <query id="updateMstCollAreaHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE MST_COLL_AREA_HDR SET&#xd;	UPDATE_BY = :updatedBy,&#xd;	UPDATE_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = :companyCode AND&#xd;	BRANCH_CODE = :branchCode AND&#xd;	PRODUCT_CODE = :productCode AND&#xd;	BUCKET_CODE = :bucketCode AND&#xd;	EFFECTIVE_DATE = :effectiveDate</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
   </query>
   <query id="getColumnLovKelompokMonitorUtj" useConfig="collectiondso1">
      <sql>SELECT 1 as groupCode, 1 groupName, 1 collDayName, 1 groupAddress, 1 flagRevitalization, 1 villageName, 1 subdistrictName, 1 cityName, 1 provinceName, 1 totalDebitur, 1 createdDate, 1 groupLeader, 1 collTime</sql>
      <result element="Entries" rowName="">
         <element column="collTime" name="collTime" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="flagRevitalization" name="flagRevitalization" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="groupLeader" name="groupLeader" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovKelompokMonitorUtj" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT distinct companyCode, branchCode, collCode, groupCode, groupName, collDayName, groupAddress, flagRevitalization, villageName, subdistrictName, cityName, provinceName, totalDebitur, createdDate, groupLeader, collTime, collTimeDescrip FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.GROUP_NAME groupName,&#xd;			case when A.FLAG_REVITALIZATION = '0' THEN A.COLL_DAY &#xd;			else cdtl.day_code&#xd;			end as collDay,&#xd;			CASE WHEN A.FLAG_REVITALIZATION = '0' THEN&#xd;			(&#xd;				case&#xd;					when A.COLL_DAY = '1' then 'Minggu'&#xd;					when A.COLL_DAY = '2' then 'Senin'&#xd;					when A.COLL_DAY = '3' then 'Selasa'&#xd;					when A.COLL_DAY = '4' then 'Rabu'&#xd;					when A.COLL_DAY = '5' then 'Kamis'&#xd;					when A.COLL_DAY = '6' then 'Jumat'&#xd;					when A.COLL_DAY = '7' then 'Sabtu'&#xd;				end&#xd;			) else STUFF((SELECT ', ' + &#xd;					case&#xd;						when cdtl.day_code = '1' then 'Minggu'&#xd;						when cdtl.day_code = '2' then 'Senin'&#xd;						when cdtl.day_code = '3' then 'Selasa'&#xd;						when cdtl.day_code = '4' then 'Rabu'&#xd;						when cdtl.day_code = '5' then 'Kamis'&#xd;						when cdtl.day_code = '6' then 'Jumat'&#xd;						when cdtl.day_code = '7' then 'Sabtu'&#xd;					end&#xd;					FROM mst_coll_day_hdr cd (nolock)&#xd;					left join mst_coll_day_dtl cdtl (nolock)&#xd;					on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;					WHERE A.COLL_DAY_CODE = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.PRODUCT_CODE and A.FLAG_REVITALIZATION='1'&#xd;					FOR XML PATH('')&#xd;			), 1, 1, '') end as collDayName,&#xd;			A.GROUP_ADDRESS groupAddress,&#xd;			A.FLAG_REVITALIZATION flagRevitalization,&#xd;			B.VILLAGE_NAME villageName,&#xd;			C.SUBDISTRICT_NAME subdistrictName,&#xd;			D.CITY_NAME cityName,&#xd;			E.PROVINCE_NAME provinceName,&#xd;			(SELECT COUNT(0) FROM MST_GROUP_DTL X (NOLOCK) WHERE X.GROUP_CODE = A.GROUP_CODE AND X.COMPANY_CODE=A.COMPANY_CODE) as totalDebitur,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.GROUP_LEADER groupLeader,&#xd;			A.COLL_TIME collTime,&#xd;			F.PARAM_DESCRIP collTimeDescrip&#xd;		FROM MST_GROUP_HDR A (nolock)&#xd;		LEFT JOIN MST_VILLAGE B (nolock)&#xd;		ON A.GROUP_VILLAGE_CODE = B.VILLAGE_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT C (nolock)&#xd;		ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE AND B.COMPANY_CODE=C.COMPANY_CODE&#xd;		LEFT JOIN MST_CITY D (nolock)&#xd;		ON B.CITY_CODE = D.CITY_CODE AND B.COMPANY_CODE=D.COMPANY_CODE&#xd;		LEFT JOIN MST_PROVINCE E (nolock)&#xd;		ON B.PROVINCE_CODE = E.PROVINCE_CODE AND B.COMPANY_CODE=E.COMPANY_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;		ON A.COMPANY_CODE = F.COMPANY_CODE AND A.COLL_TIME = F.PARAM_CODE AND F.CONDITION = 'VISIT_TIME' AND F.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_BRANCH BR (nolock) ON A.BRANCH_CODE = BR.BRANCH_CODE AND A.COMPANY_CODE = BR.COMPANY_CODE&#xd;		left join mst_coll_day_hdr cd (nolock)&#xd;		on A.coll_day_code = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.product_code and a.flag_revitalization='1'&#xd;		left join mst_coll_day_dtl cdtl (nolock)&#xd;		on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;		WHERE A.GROUP_STS = '1'&#xd;	) A &#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovKelompokMonitorUtj" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, collCode, groupCode, groupName, collDayName, groupAddress, flagRevitalization, villageName, subdistrictName, cityName, provinceName, totalDebitur, createdDate, groupLeader, collTime, collTimeDescrip FROM (&#xd;	SELECT distinct companyCode, branchCode, collCode, groupCode, groupName, collDayName, groupAddress, flagRevitalization, villageName, subdistrictName, cityName, provinceName, totalDebitur, createdDate, groupLeader, collTime, collTimeDescrip FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.GROUP_CODE groupCode,&#xd;			A.GROUP_NAME groupName,&#xd;			case when A.FLAG_REVITALIZATION = '0' THEN A.COLL_DAY &#xd;			else cdtl.day_code&#xd;			end as collDay,&#xd;			CASE WHEN A.FLAG_REVITALIZATION = '0' THEN&#xd;			(&#xd;				case&#xd;					when A.COLL_DAY = '1' then 'Minggu'&#xd;					when A.COLL_DAY = '2' then 'Senin'&#xd;					when A.COLL_DAY = '3' then 'Selasa'&#xd;					when A.COLL_DAY = '4' then 'Rabu'&#xd;					when A.COLL_DAY = '5' then 'Kamis'&#xd;					when A.COLL_DAY = '6' then 'Jumat'&#xd;					when A.COLL_DAY = '7' then 'Sabtu'&#xd;				end&#xd;			) else STUFF((SELECT ', ' + &#xd;					case&#xd;						when cdtl.day_code = '1' then 'Minggu'&#xd;						when cdtl.day_code = '2' then 'Senin'&#xd;						when cdtl.day_code = '3' then 'Selasa'&#xd;						when cdtl.day_code = '4' then 'Rabu'&#xd;						when cdtl.day_code = '5' then 'Kamis'&#xd;						when cdtl.day_code = '6' then 'Jumat'&#xd;						when cdtl.day_code = '7' then 'Sabtu'&#xd;					end&#xd;					FROM mst_coll_day_hdr cd (nolock)&#xd;					left join mst_coll_day_dtl cdtl (nolock)&#xd;					on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;					WHERE A.COLL_DAY_CODE = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.PRODUCT_CODE and A.FLAG_REVITALIZATION='1'&#xd;					FOR XML PATH('')&#xd;			), 1, 1, '') end as collDayName,&#xd;			A.GROUP_ADDRESS groupAddress,&#xd;			A.FLAG_REVITALIZATION flagRevitalization,&#xd;			B.VILLAGE_NAME villageName,&#xd;			C.SUBDISTRICT_NAME subdistrictName,&#xd;			D.CITY_NAME cityName,&#xd;			E.PROVINCE_NAME provinceName,&#xd;			(SELECT COUNT(0) FROM MST_GROUP_DTL X (NOLOCK) WHERE X.GROUP_CODE = A.GROUP_CODE AND X.COMPANY_CODE=A.COMPANY_CODE) as totalDebitur,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.GROUP_LEADER groupLeader,&#xd;			A.COLL_TIME collTime,&#xd;			F.PARAM_DESCRIP collTimeDescrip&#xd;		FROM MST_GROUP_HDR A (nolock)&#xd;		LEFT JOIN MST_VILLAGE B (nolock)&#xd;		ON A.GROUP_VILLAGE_CODE = B.VILLAGE_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT C (nolock)&#xd;		ON B.SUBDISTRICT_CODE = C.SUBDISTRICT_CODE AND B.COMPANY_CODE=C.COMPANY_CODE&#xd;		LEFT JOIN MST_CITY D (nolock)&#xd;		ON B.CITY_CODE = D.CITY_CODE AND B.COMPANY_CODE=D.COMPANY_CODE&#xd;		LEFT JOIN MST_PROVINCE E (nolock)&#xd;		ON B.PROVINCE_CODE = E.PROVINCE_CODE AND B.COMPANY_CODE=E.COMPANY_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM F (nolock)&#xd;		ON A.COMPANY_CODE = F.COMPANY_CODE AND A.COLL_TIME = F.PARAM_CODE AND F.CONDITION = 'VISIT_TIME' AND F.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_BRANCH BR (nolock) ON A.BRANCH_CODE = BR.BRANCH_CODE AND A.COMPANY_CODE = BR.COMPANY_CODE&#xd;		left join mst_coll_day_hdr cd (nolock)&#xd;		on A.coll_day_code = cd.coll_day_code and cd.flag_active = '1' and cd.product_code = BR.product_code and a.flag_revitalization='1'&#xd;		left join mst_coll_day_dtl cdtl (nolock)&#xd;		on cd.coll_day_code = cdtl.coll_day_code and cdtl.flag_active = '1' and cdtl.product_code = cd.product_code&#xd;		WHERE A.GROUP_STS = '1'&#xd;	) A &#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="flagRevitalization" name="flagRevitalization" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="groupLeader" name="groupLeader" xsdType="string"/>
         <element column="collTime" name="collTime" xsdType="string"/>
         <element column="collTimeDescrip" name="collTimeDescrip" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovDebitur" useConfig="collectiondso1">
      <sql>SELECT 1 as customerCode, 1 customerFullname, 1 villageName, 1 idNo, 1 aggrNo, 1 branchName</sql>
      <result element="Entries" rowName="">
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="idNo" name="idNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovDebitur" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		E.BRANCH_NAME branchName,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.GROUP_CODE groupCode,&#xd;		A.CUSTOMER_CODE customerCode,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		A.COLL_ADDRESS_TYPE collAddressType,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN KV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		B.ID_NO idNo&#xd;	FROM TRX_AGGR A (NOLOCK)&#xd;	LEFT JOIN MST_CUSTOMER B (NOLOCK)&#xd;	ON A.CUSTOMER_CODE = B.CUSTOMER_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (NOLOCK)&#xd;	ON B.ID_VILLAGE_CODE = IV.VILLAGE_CODE AND B.COMPANY_CODE=IV.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (NOLOCK)&#xd;	ON B.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE AND B.COMPANY_CODE=DV.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE C (NOLOCK)&#xd;	ON A.CUSTOMER_CODE = C.CUSTOMER_CODE AND C.EMPLOYEE_TYPE = 'O' AND A.COMPANY_CODE=C.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE KV (NOLOCK)&#xd;	ON C.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE AND C.COMPANY_CODE=KV.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE D (NOLOCK)&#xd;	ON A.CUSTOMER_CODE = D.CUSTOMER_CODE AND D.EMPLOYEE_TYPE = 'B' AND A.COMPANY_CODE=D.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE BV (NOLOCK)&#xd;	ON D.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE AND D.COMPANY_CODE=BV.COMPANY_CODE&#xd;	LEFT JOIN MST_BRANCH E (NOLOCK)&#xd;	ON A.BRANCH_CODE = E.BRANCH_CODE AND A.COMPANY_CODE=E.COMPANY_CODE&#xd;        WHERE A.PRODUCT_CODE = 'PC02'&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovDebitur" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, branchName, aggrNo, groupCode, customerCode, customerFullname, collAddressType, villageName, idNo FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		E.BRANCH_NAME branchName,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.GROUP_CODE groupCode,&#xd;		A.CUSTOMER_CODE customerCode,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		A.COLL_ADDRESS_TYPE collAddressType,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN KV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		B.ID_NO idNo&#xd;	FROM TRX_AGGR A (NOLOCK)&#xd;	LEFT JOIN MST_CUSTOMER B (NOLOCK)&#xd;	ON A.CUSTOMER_CODE = B.CUSTOMER_CODE AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (NOLOCK)&#xd;	ON B.ID_VILLAGE_CODE = IV.VILLAGE_CODE AND B.COMPANY_CODE=IV.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (NOLOCK)&#xd;	ON B.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE AND B.COMPANY_CODE=DV.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE C (NOLOCK)&#xd;	ON A.CUSTOMER_CODE = C.CUSTOMER_CODE AND C.EMPLOYEE_TYPE = 'O' AND A.COMPANY_CODE=C.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE KV (NOLOCK)&#xd;	ON C.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE AND C.COMPANY_CODE=KV.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE D (NOLOCK)&#xd;	ON A.CUSTOMER_CODE = D.CUSTOMER_CODE AND D.EMPLOYEE_TYPE = 'B' AND A.COMPANY_CODE=D.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE BV (NOLOCK)&#xd;	ON D.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE AND D.COMPANY_CODE=BV.COMPANY_CODE&#xd;	LEFT JOIN MST_BRANCH E (NOLOCK)&#xd;	ON A.BRANCH_CODE = E.BRANCH_CODE AND A.COMPANY_CODE=E.COMPANY_CODE&#xd;        WHERE A.PRODUCT_CODE = 'PC02'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="collAddressType" name="collAddressType" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="idNo" name="idNo" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateLockUnlockPenyelesaianTarikUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;&#xd;UPDATE TRX_INVENTORY_TU SET&#xd;	INVENTORY_STS = :inventorySts&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE&#xd;AND TU_DEPOSIT_NO = @TU_DEPOSIT_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="inventorySts" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNomorKontrakSpUkm" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 address, 1 rt, 1 rw, 1 villageName, 1 subdistrictName, 1 cityName, 1 provinceName, 1 zipCode, 1 dayOverdue</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNomorKontrakSpUkm" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;		SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.COLL_CODE collCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		A.CUSTOMER_CODE customerCode,&#xd;		A.APPL_NO applNo,&#xd;		A.WO_DATE woDate,&#xd;		A.TENOR tenor,&#xd;		(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;		) as dayOverdue,&#xd;		(&#xd;				SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;				) a&#xd;		) as instFrom,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN &#xd;					(&#xd;					SELECT &#xd;						convert(varchar(10),MAX(INST_NO)) &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() &#xd;					) IS NULL THEN (&#xd;									SELECT &#xd;										MIN(INST_NO) instTo&#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;								)&#xd;				ELSE&#xd;					(SELECT &#xd;						MAX(INST_NO) instNo &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;			END RESULT&#xd;		) as instTo,&#xd;		(&#xd;&#xd;			SELECT SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID))&#xd;				&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND &#xd;				INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;				) a) &#xd;				AND&#xd;				INST_NO &lt;= (SELECT &#xd;							CASE &#xd;								WHEN &#xd;									(&#xd;									SELECT &#xd;										convert(varchar(10),MAX(INST_NO)) &#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;									) IS NULL THEN (&#xd;													SELECT &#xd;														MIN(INST_NO) instTo&#xd;													FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;												)&#xd;								ELSE&#xd;									(SELECT &#xd;										MAX(INST_NO) instNo &#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;							END RESULT)&#xd;				AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;		) as tagihanAngsuran,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_ADDRESS&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RT&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RW&#xd;			END AS RESULT&#xd;		) as rw,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END&#xd;		) as subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END&#xd;		) as cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END&#xd;		) as provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END&#xd;		) as zipCode,&#xd;		(&#xd;			SELECT TOP 1 dueDate FROM (&#xd;				SELECT &#xd;					MIN(INST_NO) instNo,&#xd;					DUE_DATE dueDate&#xd;				FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;				GROUP BY DUE_DATE&#xd;			) a&#xd;		) as dueDate,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(PINALTY_VALUE, 0) - ISNULL(PINALTY_PAID, 0)) as penaltyFee&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as penaltyFee,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(COLL_FEE, 0) - ISNULL(COLL_FEE_PAID, 0)) as collFee&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as collFee,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(PRINCIPAL_PAID, 0) - ISNULL(INT_PAID, 0)) as installmentPaid&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as installmentPaid,&#xd;		(&#xd;			SELECT &#xd;				ISNULL(BEGIN_BAL,0) - ISNULL(USAGE_VALUE,0) - ISNULL(BOOK_VALUE,0) + ISNULL(PLUS_VALUE,0)&#xd;			FROM MST_UTJ (nolock) WHERE COMPANY_CODE = A.COMPANY_CODE AND AGGR_NO = A.AGGR_NO&#xd;		) as utjBalance,&#xd;		A.AR_STS arSts,&#xd;		isnull(A.SUB_STS, '') subSts,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		D.FULLNAME collName,&#xd;		E.DSO_CODE dsoCode&#xd;	FROM TRX_AGGR A (nolock)&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_EMPLOYEE D (nolock)&#xd;	ON A.COLL_CODE = D.NIK&#xd;	LEFT JOIN MST_BRANCH E (nolock)&#xd;	ON A.COMPANY_CODE = E.COMPANY_CODE AND A.BRANCH_CODE = E.BRANCH_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON A.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON A.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON A.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;	WHERE B.PAYMENT_STS = 'UNPAID' AND B.COLL_DUE_DATE &lt;= GETDATE() AND A.PRODUCT_CODE != 'PC02' AND NOT EXISTS (SELECT 1 FROM TRX_SP (nolock) WHERE EXPIRED_DATE &gt; GETDATE() AND SP_STS != 'CANC' and AGGR_NO=A.AGGR_NO)&#xd;) a WHERE (ISNULL(woDate, '') = '' OR woDate = '1900-01-01') AND dayOverdue &gt; 1 AND :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNomorKontrakSpUkm" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, branchCode, productCode, collCode, aggrNo, customerFullname, customerCode, applNo, woDate, dayOverdue, instFrom, instTo, tagihanAngsuran, address, rt, rw, villageName, &#xd;subdistrictName, cityName, provinceName, zipCode, tenor, dueDate, arSts, subSts, bucketCode, bucketType, collName, dsoCode, penaltyFee, collFee, installmentPaid, isnull(utjBalance, 0) as utjBalance FROM (&#xd;		SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.COLL_CODE collCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		A.CUSTOMER_CODE customerCode,&#xd;		A.APPL_NO applNo,&#xd;		A.WO_DATE woDate,&#xd;		A.TENOR tenor,&#xd;		(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;		) as dayOverdue,&#xd;		(&#xd;				SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;				) a&#xd;		) as instFrom,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN &#xd;					(&#xd;					SELECT &#xd;						convert(varchar(10),MAX(INST_NO)) &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() &#xd;					) IS NULL THEN (&#xd;									SELECT &#xd;										MIN(INST_NO) instTo&#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;								)&#xd;				ELSE&#xd;					(SELECT &#xd;						MAX(INST_NO) instNo &#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;			END RESULT&#xd;		) as instTo,&#xd;		(&#xd;&#xd;			SELECT SUM((PRINCIPAL_VALUE-PRINCIPAL_PAID)+(INT_VALUE-INT_PAID))&#xd;				&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND &#xd;				INST_NO &gt;= (SELECT TOP 1 instNo FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo&#xd;					FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;				) a) &#xd;				AND&#xd;				INST_NO &lt;= (SELECT &#xd;							CASE &#xd;								WHEN &#xd;									(&#xd;									SELECT &#xd;										convert(varchar(10),MAX(INST_NO)) &#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;									) IS NULL THEN (&#xd;													SELECT &#xd;														MIN(INST_NO) instTo&#xd;													FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE()&#xd;												)&#xd;								ELSE&#xd;									(SELECT &#xd;										MAX(INST_NO) instNo &#xd;									FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE())&#xd;							END RESULT)&#xd;				AND COMPANY_CODE = A.COMPANY_CODE&#xd;&#xd;		) as tagihanAngsuran,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_ADDRESS&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RT &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RT&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RT&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CS.ID_RW &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CS.DOMICILE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN F.OFFICE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN CO.OFFICE_RW&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN G.OFFICE_RW&#xd;			END AS RESULT&#xd;		) as rw,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COSUB.SUBDISTRICT_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END&#xd;		) as subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COVC.CITY_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END&#xd;		) as cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COP.PROVINCE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END&#xd;		) as provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'P' THEN KV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' AND A.CUSTOMER_TYPE = 'C' THEN COV.ZIPCODE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END&#xd;		) as zipCode,&#xd;		(&#xd;			SELECT TOP 1 dueDate FROM (&#xd;				SELECT &#xd;					MIN(INST_NO) instNo,&#xd;					DUE_DATE dueDate&#xd;				FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE&#xd;				GROUP BY DUE_DATE&#xd;			) a&#xd;		) as dueDate,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(PINALTY_VALUE, 0) - ISNULL(PINALTY_PAID, 0)) as penaltyFee&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as penaltyFee,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(COLL_FEE, 0) - ISNULL(COLL_FEE_PAID, 0)) as collFee&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as collFee,&#xd;		(&#xd;			SELECT &#xd;				SUM(ISNULL(PRINCIPAL_PAID, 0) - ISNULL(INT_PAID, 0)) as installmentPaid&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE &#xd;		) as installmentPaid,&#xd;		(&#xd;			SELECT &#xd;				ISNULL(BEGIN_BAL,0) - ISNULL(USAGE_VALUE,0) - ISNULL(BOOK_VALUE,0) + ISNULL(PLUS_VALUE,0)&#xd;			FROM MST_UTJ (nolock) WHERE COMPANY_CODE = A.COMPANY_CODE AND AGGR_NO = A.AGGR_NO&#xd;		) as utjBalance,&#xd;		A.AR_STS arSts,&#xd;		isnull(A.SUB_STS, '') subSts,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.BUCKET_TYPE bucketType,&#xd;		D.FULLNAME collName,&#xd;		E.DSO_CODE dsoCode&#xd;	FROM TRX_AGGR A (nolock)&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN MST_EMPLOYEE D (nolock)&#xd;	ON A.COLL_CODE = D.NIK&#xd;	LEFT JOIN MST_BRANCH E (nolock)&#xd;	ON A.COMPANY_CODE = E.COMPANY_CODE AND A.BRANCH_CODE = E.BRANCH_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON A.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON A.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON A.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE&#xd;	WHERE B.PAYMENT_STS = 'UNPAID' AND B.COLL_DUE_DATE &lt;= GETDATE() AND A.PRODUCT_CODE != 'PC02' AND NOT EXISTS (SELECT 1 FROM TRX_SP (nolock) WHERE EXPIRED_DATE &gt; GETDATE() AND SP_STS != 'CANC' and AGGR_NO=A.AGGR_NO)&#xd;) a WHERE (ISNULL(woDate, '') = '' OR woDate = '1900-01-01') AND dayOverdue &gt; 1 AND &#xd;:search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="applNo" name="applNo" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="penaltyFee" name="penaltyFee" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="installmentPaid" name="installmentPaid" xsdType="string"/>
         <element column="utjBalance" name="utjBalance" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovNoKontrakIndexPindahBaket" useConfig="collectiondso1">
      <sql>select 1 as companyCode, 1 branchCode, 1 arSts, 1 subSts, 1 aggrNo, 1 customerFullname, 1 collCode, 1 collName, 1 collHeadCode, 1 bucketCode, 1 bucketName, 1 productCode</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNoKontrakIndexPindahBaket" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		f.branch_code branchCode,&#xd;		a.branch_code branchCodeAggr,&#xd;		a.ar_sts arSts,&#xd;		isnull(a.sub_sts, '') as subSts,&#xd;		a.aggr_no aggrNo,&#xd;		a.customer_fullname customerFullname,&#xd;		a.coll_code collCode,&#xd;		d.fullname collName,&#xd;		c.coll_head_code collHeadCode,&#xd;		a.bucket_code bucketCode,&#xd;		b.description bucketName,&#xd;		a.product_code productCode,&#xd;		a.bucket_type bucketType,&#xd;		e.dso_code dsoCode&#xd;	from trx_aggr a&#xd;	left join mst_bucket b&#xd;	on a.company_code = b.company_code and a.product_code = b.product_code and a.bucket_code = b.bucket_code and b.bucket_type = 'FCOL' and b.flag_active = '1'&#xd;	left join mst_collector c&#xd;	on a.company_code = c.company_code and a.coll_code = c.coll_code and c.bucket_type = b.bucket_type&#xd;	left join mst_employee d&#xd;	on a.company_code = d.company_code and a.coll_code = d.nik&#xd;	left join mst_branch e&#xd;	on a.company_code = e.company_code and a.branch_code = e.branch_code&#xd;	left join mst_collector f&#xd;	on a.company_code = f.company_code and a.coll_code = f.coll_code and a.product_code = f.product_code and a.bucket_type = f.bucket_type&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNoKontrakIndexPindahBaket" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, branchCodeAggr, arSts, subSts, aggrNo, customerFullname, collCode, collName, collHeadCode, bucketCode, bucketName, productCode, bucketType, dsoCode from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		f.branch_code branchCode,&#xd;		a.branch_code branchCodeAggr,&#xd;		a.ar_sts arSts,&#xd;		isnull(a.sub_sts, '') as subSts,&#xd;		a.aggr_no aggrNo,&#xd;		a.customer_fullname customerFullname,&#xd;		a.coll_code collCode,&#xd;		d.fullname collName,&#xd;		c.coll_head_code collHeadCode,&#xd;		a.bucket_code bucketCode,&#xd;		b.description bucketName,&#xd;		a.product_code productCode,&#xd;		a.bucket_type bucketType,&#xd;		e.dso_code dsoCode&#xd;	from trx_aggr a&#xd;	left join mst_bucket b&#xd;	on a.company_code = b.company_code and a.product_code = b.product_code and a.bucket_code = b.bucket_code and b.bucket_type = 'FCOL' and b.flag_active = '1'&#xd;	left join mst_collector c&#xd;	on a.company_code = c.company_code and a.coll_code = c.coll_code and c.bucket_type = b.bucket_type&#xd;	left join mst_employee d&#xd;	on a.company_code = d.company_code and a.coll_code = d.nik&#xd;	left join mst_branch e&#xd;	on a.company_code = e.company_code and a.branch_code = e.branch_code&#xd;	left join mst_collector f&#xd;	on a.company_code = f.company_code and a.coll_code = f.coll_code and a.product_code = f.product_code and a.bucket_type = f.bucket_type &#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchCodeAggr" name="branchCodeAggr" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="collHeadCode" name="collHeadCode" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="bucketType" name="bucketType" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="GetColumnLisDebiturDtl" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 villageName, 1 collDueDate, 1 tenor, 1 pastDueDays, 1 instFrom, 1 instTo, 1 tagihanAngsuran, 1 tagihanDenda, 1 biayaTagih, 1 totalTagihan</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="collDueDate" name="collDueDate" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="pastDueDays" name="pastDueDays" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="tagihanDenda" name="tagihanDenda" xsdType="string"/>
         <element column="biayaTagih" name="biayaTagih" xsdType="string"/>
         <element column="totalTagihan" name="totalTagihan" xsdType="string"/>
      </result>
   </query>
   <query id="GetCountLisDebiturDtl" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT aggrNo, collCode, collName, bucketReportCode, bucketReportName, customerFullname, villageName, collDueDate, tenor, pastDueDays, instFrom, instTo, tagihanAngsuran, tagihanDenda, biayaTagih, (tagihanAngsuran+tagihanDenda+biayaTagih) as totalTagihan FROM (&#xd;SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		B.DSO_CODE dsoCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.COLL_CODE collCode,&#xd;		J.FULLNAME collName,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		A.BUCKET_REPORT bucketReportCode,&#xd;		K.PARAM_DESCRIP bucketReportName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN KV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		F.COLL_DUE_DATE collDueDate,&#xd;		A.TENOR tenor,&#xd;		A.PAST_DUE_DAYS pastDueDays,&#xd;		F.INST_NO instFrom,&#xd;		(&#xd;			CASE&#xd;				WHEN G.INST_NO IS NULL THEN F.INST_NO&#xd;				ELSE G.INST_NO&#xd;			END&#xd;		) instTo,&#xd;		(&#xd;			CASE&#xd;				WHEN G.INST_NO IS NULL THEN &#xd;					(SELECT SUM((H.PRINCIPAL_VALUE-H.PRINCIPAL_PAID) + (H.INT_VALUE-H.INT_PAID)) FROM TRX_AGGR_SCHEDULE H (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND (INST_NO &gt;= F.INST_NO AND INST_NO &lt;= F.INST_NO))&#xd;				ELSE (SELECT SUM((H.PRINCIPAL_VALUE-H.PRINCIPAL_PAID) + (H.INT_VALUE-H.INT_PAID)) FROM TRX_AGGR_SCHEDULE H (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND (INST_NO &gt;= F.INST_NO AND INST_NO &lt;= G.INST_NO))&#xd;			END&#xd;		) tagihanAngsuran,&#xd;		SUM(I.PINALTY_VALUE-I.PINALTY_PAID) tagihanDenda,&#xd;		SUM(I.COLL_FEE - I.COLL_FEE_PAID) biayaTagih,&#xd;		A.INST_VALUE intValue&#xd;	FROM TRX_AGGR A (NOLOCK)&#xd;	LEFT JOIN getViewBranch() B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_CUSTOMER C (NOLOCK)&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND A.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (NOLOCK)&#xd;	ON C.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (NOLOCK)&#xd;	ON C.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE D (NOLOCK)&#xd;	ON A.CUSTOMER_CODE = D.CUSTOMER_CODE AND D.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV (NOLOCK)&#xd;	ON D.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE E (NOLOCK)&#xd;	ON  A.CUSTOMER_CODE = E.CUSTOMER_CODE AND E.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV (NOLOCK)&#xd;	ON E.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;&#xd;	LEFT JOIN (SELECT *&#xd;				FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;						[AGGR_NO]&#xd;						ORDER BY [INST_NO]) RN&#xd;				FROM [dbo].[TRX_AGGR_SCHEDULE] (NOLOCK) WHERE PAYMENT_STS = 'UNPAID'&#xd;				) X&#xd;				WHERE RN = 1) F&#xd;			ON  A.[COMPANY_CODE]	= F.[COMPANY_CODE] &#xd;			AND A.[AGGR_NO]			= F.[AGGR_NO]&#xd;&#xd;	LEFT JOIN (SELECT *&#xd;				FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;						[AGGR_NO]&#xd;						ORDER BY [INST_NO] DESC) RN&#xd;				FROM [dbo].[TRX_AGGR_SCHEDULE] (NOLOCK) WHERE COLL_DUE_DATE &lt;= GETDATE() AND PAYMENT_STS		= 'UNPAID'&#xd;				) X&#xd;				WHERE RN = 1) G&#xd;			ON  A.[COMPANY_CODE]	= G.[COMPANY_CODE] &#xd;			AND A.[AGGR_NO]			= G.[AGGR_NO]&#xd;&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE I (NOLOCK)&#xd;	ON A.COMPANY_CODE = I.COMPANY_CODE AND A.AGGR_NO = I.AGGR_NO&#xd;	LEFT JOIN MST_EMPLOYEE J (NOLOCK)&#xd;	ON A.COLL_CODE = J.NIK&#xd;	LEFT JOIN MST_GLOBAL_PARAM K (NOLOCK)&#xd;	ON A.BUCKET_REPORT = K.PARAM_CODE AND K.CONDITION = 'REPORT_AGING' AND K.FLAG_ACTIVE = '1'&#xd;	WHERE A.AR_STS IN ('AR','BD') AND (ISNULL(A.WO_DATE, '') = '' OR A.WO_DATE = '1900-01-01')&#xd;	GROUP BY A.COMPANY_CODE, A.BRANCH_CODE, B.DSO_CODE, A.AGGR_NO, A.CUSTOMER_FULLNAME, A.BUCKET_REPORT, A.COLL_ADDRESS_TYPE, IV.VILLAGE_NAME, DV.VILLAGE_NAME, KV.VILLAGE_NAME, BV.VILLAGE_NAME,&#xd;	F.COLL_DUE_DATE, A.TENOR, A.PAST_DUE_DAYS, F.INST_NO, G.INST_NO, A.PRODUCT_CODE, A.COLL_CODE, J.FULLNAME, K.PARAM_DESCRIP, A.INST_VALUE&#xd;	) a WHERE :search :filter and instFrom is not null&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="GetDataLisDebiturDtl" useConfig="collectiondso1">
      <sql>SELECT aggrNo, collCode, collName, bucketReportCode, bucketReportName, customerFullname, villageName, collDueDate, tenor, pastDueDays, instFrom, instTo, tagihanAngsuran, tagihanDenda, biayaTagih, (tagihanAngsuran+tagihanDenda+biayaTagih) as totalTagihan, intValue FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		B.DSO_CODE dsoCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.COLL_CODE collCode,&#xd;		J.FULLNAME collName,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		A.BUCKET_REPORT bucketReportCode,&#xd;		K.PARAM_DESCRIP bucketReportName,&#xd;		(&#xd;			CASE&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN KV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) as villageName,&#xd;		F.COLL_DUE_DATE collDueDate,&#xd;		A.TENOR tenor,&#xd;		A.PAST_DUE_DAYS pastDueDays,&#xd;		F.INST_NO instFrom,&#xd;		(&#xd;			CASE&#xd;				WHEN G.INST_NO IS NULL THEN F.INST_NO&#xd;				ELSE G.INST_NO&#xd;			END&#xd;		) instTo,&#xd;		(&#xd;			CASE&#xd;				WHEN G.INST_NO IS NULL THEN &#xd;					(SELECT SUM((H.PRINCIPAL_VALUE-H.PRINCIPAL_PAID) + (H.INT_VALUE-H.INT_PAID)) FROM TRX_AGGR_SCHEDULE H (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND (INST_NO &gt;= F.INST_NO AND INST_NO &lt;= F.INST_NO))&#xd;				ELSE (SELECT SUM((H.PRINCIPAL_VALUE-H.PRINCIPAL_PAID) + (H.INT_VALUE-H.INT_PAID)) FROM TRX_AGGR_SCHEDULE H (NOLOCK) WHERE AGGR_NO = A.AGGR_NO AND (INST_NO &gt;= F.INST_NO AND INST_NO &lt;= G.INST_NO))&#xd;			END&#xd;		) tagihanAngsuran,&#xd;		SUM(I.PINALTY_VALUE-I.PINALTY_PAID) tagihanDenda,&#xd;		SUM(I.COLL_FEE - I.COLL_FEE_PAID) biayaTagih,&#xd;		A.INST_VALUE intValue&#xd;	FROM TRX_AGGR A (NOLOCK)&#xd;	LEFT JOIN getViewBranch() B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_CUSTOMER C (NOLOCK)&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND A.CUSTOMER_CODE = C.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (NOLOCK)&#xd;	ON C.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (NOLOCK)&#xd;	ON C.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE D (NOLOCK)&#xd;	ON A.CUSTOMER_CODE = D.CUSTOMER_CODE AND D.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV (NOLOCK)&#xd;	ON D.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE E (NOLOCK)&#xd;	ON  A.CUSTOMER_CODE = E.CUSTOMER_CODE AND E.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV (NOLOCK)&#xd;	ON E.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;&#xd;	LEFT JOIN (SELECT *&#xd;				FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;						[AGGR_NO]&#xd;						ORDER BY [INST_NO]) RN&#xd;				FROM [dbo].[TRX_AGGR_SCHEDULE] (NOLOCK) WHERE PAYMENT_STS = 'UNPAID'&#xd;				) X&#xd;				WHERE RN = 1) F&#xd;			ON  A.[COMPANY_CODE]	= F.[COMPANY_CODE] &#xd;			AND A.[AGGR_NO]			= F.[AGGR_NO]&#xd;&#xd;	LEFT JOIN (SELECT *&#xd;				FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;						[AGGR_NO]&#xd;						ORDER BY [INST_NO] DESC) RN&#xd;				FROM [dbo].[TRX_AGGR_SCHEDULE] (NOLOCK) WHERE COLL_DUE_DATE &lt;= GETDATE() AND PAYMENT_STS		= 'UNPAID'&#xd;				) X&#xd;				WHERE RN = 1) G&#xd;			ON  A.[COMPANY_CODE]	= G.[COMPANY_CODE] &#xd;			AND A.[AGGR_NO]			= G.[AGGR_NO]&#xd;&#xd;	LEFT JOIN TRX_AGGR_SCHEDULE I (NOLOCK)&#xd;	ON A.COMPANY_CODE = I.COMPANY_CODE AND A.AGGR_NO = I.AGGR_NO&#xd;	LEFT JOIN MST_EMPLOYEE J (NOLOCK)&#xd;	ON A.COLL_CODE = J.NIK&#xd;	LEFT JOIN MST_GLOBAL_PARAM K (NOLOCK)&#xd;	ON A.BUCKET_REPORT = K.PARAM_CODE AND K.CONDITION = 'REPORT_AGING' AND K.FLAG_ACTIVE = '1'&#xd;	WHERE A.AR_STS IN ('AR','BD') AND (ISNULL(A.WO_DATE, '') = '' OR A.WO_DATE = '1900-01-01')&#xd;	GROUP BY A.COMPANY_CODE, A.BRANCH_CODE, B.DSO_CODE, A.AGGR_NO, A.CUSTOMER_FULLNAME, A.BUCKET_REPORT, A.COLL_ADDRESS_TYPE, IV.VILLAGE_NAME, DV.VILLAGE_NAME, KV.VILLAGE_NAME, BV.VILLAGE_NAME,&#xd;	F.COLL_DUE_DATE, A.TENOR, A.PAST_DUE_DAYS, F.INST_NO, G.INST_NO, A.PRODUCT_CODE, A.COLL_CODE, J.FULLNAME, K.PARAM_DESCRIP, A.INST_VALUE&#xd;) a WHERE :search :filter and instFrom is not null ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="collDueDate" name="collDueDate" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="pastDueDays" name="pastDueDays" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="tagihanAngsuran" name="tagihanAngsuran" xsdType="string"/>
         <element column="tagihanDenda" name="tagihanDenda" xsdType="string"/>
         <element column="biayaTagih" name="biayaTagih" xsdType="string"/>
         <element column="totalTagihan" name="totalTagihan" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="bucketReportCode" name="bucketReportCode" xsdType="string"/>
         <element column="bucketReportName" name="bucketReportName" xsdType="string"/>
         <element column="intValue" name="intValue" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovNoKontrakIndexSerahTerima" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 address, 1 rt, 1 rw, 1 villageName, 1 subdistrictName, 1 cityName, 1 provinceName, 1 zipCode, 1 dayOverdue, 1 productCode</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="daysOverdue" name="daysOverdue" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNoKontrakIndexSerahTerima" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT DISTINCT aggrNo, customerFullname, daysOverudue, address, rt, rw, villageName, subdistrictName, cityName, provinceName, zipCode FROM (&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			B.DSO_CODE dsoCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			C.CUSTOMER_FULLNAME customerFullname,&#xd;			A.DAYS_OVERDUE daysOverudue,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_ADDRESS&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_ADDRESS&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_ADDRESS&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_ADDRESS&#xd;				END&#xd;			) address,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_RT&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_RT&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_RT&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_RT&#xd;				END&#xd;			) rt,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_RW&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_RW&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_RW&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_RW&#xd;				END&#xd;			) rw,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KV.VILLAGE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;				END&#xd;			) villageName,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KSUB.SUBDISTRICT_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;				END&#xd;			) subdistrictName,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KC.CITY_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;				END&#xd;			) cityName,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KP.PROVINCE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;				END&#xd;			) provinceName,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KV.ZIPCODE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;				END&#xd;			) zipCode&#xd;		FROM TRX_TU_DEPOSIT A&#xd;		LEFT JOIN getViewBranch() B&#xd;		ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;		JOIN TRX_AGGR C&#xd;		ON A.AGGR_NO = C.AGGR_NO&#xd;		LEFT JOIN MST_CUSTOMER D&#xd;		ON C.CUSTOMER_CODE = D.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV&#xd;		ON D.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT ISUB&#xd;		ON IV.SUBDISTRICT_CODE = ISUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY IC&#xd;		ON IV.CITY_CODE = IC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE IP&#xd;		ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV&#xd;		ON D.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT DSUB&#xd;		ON DV.SUBDISTRICT_CODE = DSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY DC&#xd;		ON DV.CITY_CODE = DC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE DP&#xd;		ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE E&#xd;		ON C.CUSTOMER_CODE = E.CUSTOMER_CODE AND E.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE KV&#xd;		ON E.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT KSUB&#xd;		ON KV.SUBDISTRICT_CODE = KSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY KC&#xd;		ON KV.CITY_CODE = KC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE KP&#xd;		ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE F&#xd;		ON C.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV&#xd;		ON F.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT BSUB&#xd;		ON BV.SUBDISTRICT_CODE = BSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY BC&#xd;		ON BV.CITY_CODE = BC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE BP&#xd;		ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;&#xd;&#xd;		UNION ALL&#xd;&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			B.DSO_CODE dsoCode,&#xd;			C.PRODUCT_CODE productCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			C.CUSTOMER_FULLNAME customerFullname,&#xd;			A.DAY_OVERDUE daysOverudue,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_ADDRESS&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_ADDRESS&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_ADDRESS&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_ADDRESS&#xd;				END&#xd;			) address,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_RT&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_RT&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_RT&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_RT&#xd;				END&#xd;			) rt,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_RW&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_RW&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_RW&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_RW&#xd;				END&#xd;			) rw,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KV.VILLAGE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;				END&#xd;			) villageName,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KSUB.SUBDISTRICT_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;				END&#xd;			) subdistrictName,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KC.CITY_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;				END&#xd;			) cityName,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KP.PROVINCE_NAME&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;				END&#xd;			) provinceName,&#xd;			(&#xd;				CASE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KV.ZIPCODE&#xd;					WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;				END&#xd;			) zipCode&#xd;		FROM TRX_STTU A&#xd;		LEFT JOIN getViewBranch() B&#xd;		ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;		JOIN TRX_AGGR C&#xd;		ON A.AGGR_NO = C.AGGR_NO&#xd;		LEFT JOIN MST_CUSTOMER D&#xd;		ON C.CUSTOMER_CODE = D.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV&#xd;		ON D.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT ISUB&#xd;		ON IV.SUBDISTRICT_CODE = ISUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY IC&#xd;		ON IV.CITY_CODE = IC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE IP&#xd;		ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV&#xd;		ON D.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT DSUB&#xd;		ON DV.SUBDISTRICT_CODE = DSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY DC&#xd;		ON DV.CITY_CODE = DC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE DP&#xd;		ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE E&#xd;		ON C.CUSTOMER_CODE = E.CUSTOMER_CODE AND E.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE KV&#xd;		ON E.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT KSUB&#xd;		ON KV.SUBDISTRICT_CODE = KSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY KC&#xd;		ON KV.CITY_CODE = KC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE KP&#xd;		ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE F&#xd;		ON C.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV&#xd;		ON F.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT BSUB&#xd;		ON BV.SUBDISTRICT_CODE = BSUB.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_CITY BC&#xd;		ON BV.CITY_CODE = BC.CITY_CODE&#xd;		LEFT JOIN MST_PROVINCE BP&#xd;		ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;		WHERE A.STTU_STS = 'PROC'&#xd;	) a WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNoKontrakIndexSerahTerima" useConfig="collectiondso1">
      <sql>SELECT DISTINCT aggrNo, customerFullname, daysOverudue, address, rt, rw, villageName, subdistrictName, cityName, provinceName, zipCode FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.DSO_CODE dsoCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		A.DAYS_OVERDUE daysOverudue,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_ADDRESS&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_ADDRESS&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_ADDRESS&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_ADDRESS&#xd;			END&#xd;		) address,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_RT&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_RT&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_RT&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_RT&#xd;			END&#xd;		) rt,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_RW&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_RW&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_RW&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_RW&#xd;			END&#xd;		) rw,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KV.VILLAGE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END&#xd;		) subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KC.CITY_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END&#xd;		) cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KP.PROVINCE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END&#xd;		) provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KV.ZIPCODE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END&#xd;		) zipCode&#xd;	FROM TRX_TU_DEPOSIT A&#xd;	LEFT JOIN getViewBranch() B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	JOIN TRX_AGGR C&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_CUSTOMER D&#xd;	ON C.CUSTOMER_CODE = D.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV&#xd;	ON D.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB&#xd;	ON IV.SUBDISTRICT_CODE = ISUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY IC&#xd;	ON IV.CITY_CODE = IC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV&#xd;	ON D.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB&#xd;	ON DV.SUBDISTRICT_CODE = DSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY DC&#xd;	ON DV.CITY_CODE = DC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE E&#xd;	ON C.CUSTOMER_CODE = E.CUSTOMER_CODE AND E.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV&#xd;	ON E.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB&#xd;	ON KV.SUBDISTRICT_CODE = KSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY KC&#xd;	ON KV.CITY_CODE = KC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F&#xd;	ON C.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV&#xd;	ON F.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB&#xd;	ON BV.SUBDISTRICT_CODE = BSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY BC&#xd;	ON BV.CITY_CODE = BC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.DSO_CODE dsoCode,&#xd;		C.PRODUCT_CODE productCode,&#xd;		A.AGGR_NO aggrNo,&#xd;		C.CUSTOMER_FULLNAME customerFullname,&#xd;		A.DAY_OVERDUE daysOverudue,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_ADDRESS&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_ADDRESS&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_ADDRESS&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_ADDRESS&#xd;			END&#xd;		) address,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_RT&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_RT&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_RT&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_RT&#xd;			END&#xd;		) rt,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN D.ID_RW&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN D.DOMICILE_RW&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN E.OFFICE_RW&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN F.OFFICE_RW&#xd;			END&#xd;		) rw,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KV.VILLAGE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END&#xd;		) villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN ISUB.SUBDISTRICT_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DSUB.SUBDISTRICT_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KSUB.SUBDISTRICT_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BSUB.SUBDISTRICT_NAME&#xd;			END&#xd;		) subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IC.CITY_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DC.CITY_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KC.CITY_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BC.CITY_NAME&#xd;			END&#xd;		) cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IP.PROVINCE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DP.PROVINCE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KP.PROVINCE_NAME&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BP.PROVINCE_NAME&#xd;			END&#xd;		) provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'I' THEN IV.ZIPCODE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'D' THEN DV.ZIPCODE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'K' THEN KV.ZIPCODE&#xd;				WHEN C.COLL_ADDRESS_TYPE = 'B' THEN BV.ZIPCODE&#xd;			END&#xd;		) zipCode&#xd;	FROM TRX_STTU A&#xd;	LEFT JOIN getViewBranch() B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	JOIN TRX_AGGR C&#xd;	ON A.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_CUSTOMER D&#xd;	ON C.CUSTOMER_CODE = D.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV&#xd;	ON D.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB&#xd;	ON IV.SUBDISTRICT_CODE = ISUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY IC&#xd;	ON IV.CITY_CODE = IC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV&#xd;	ON D.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB&#xd;	ON DV.SUBDISTRICT_CODE = DSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY DC&#xd;	ON DV.CITY_CODE = DC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE E&#xd;	ON C.CUSTOMER_CODE = E.CUSTOMER_CODE AND E.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE KV&#xd;	ON E.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB&#xd;	ON KV.SUBDISTRICT_CODE = KSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY KC&#xd;	ON KV.CITY_CODE = KC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F&#xd;	ON C.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV&#xd;	ON F.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB&#xd;	ON BV.SUBDISTRICT_CODE = BSUB.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_CITY BC&#xd;	ON BV.CITY_CODE = BC.CITY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE&#xd;	WHERE A.STTU_STS = 'PROC'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="daysOverudue" name="daysOverudue" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="totalDendaRiwayatPembayaran" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;SELECT&#xd;	SUM(PINALTY_VALUE) pinaltyValue,&#xd;	SUM(PINALTY_PAID) pinaltyPaid&#xd;FROM TRX_AGGR_SCHEDULE(NOLOCK)&#xd;WHERE COMPANY_CODE = @COMPANY_CODE AND AGGR_NO = @AGGR_NO</sql>
      <result element="Entries" rowName="contents">
         <element column="pinaltyValue" name="pinaltyValue" xsdType="string"/>
         <element column="pinaltyPaid" name="pinaltyPaid" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="getColumnAreaDtlMoveBucket" useConfig="collectiondso1">
      <sql>SELECT 1 as collCode</sql>
      <result element="Entries" rowName="">
         <element column="collCode" name="collCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountAreaDtlMoveBucket" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.DSO_CODE dsoCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.COLL_CODE collCode,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.VILLAGE_CODE villageCode,&#xd;		MAX(A.EFFECTIVE_DATE) effectiveDate&#xd;	FROM MST_COLL_AREA_DTL A&#xd;	LEFT JOIN getViewBranch() B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE&#xd;	GROUP BY A.COMPANY_CODE, A.COLL_CODE, A.BRANCH_CODE, B.DSO_CODE, A.PRODUCT_CODE, A.BUCKET_CODE, A.VILLAGE_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataAreaDtlMoveBucket" useConfig="collectiondso1">
      <sql>SELECT collCode FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.DSO_CODE dsoCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		A.COLL_CODE collCode,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		A.VILLAGE_CODE villageCode,&#xd;		MAX(A.EFFECTIVE_DATE) effectiveDate&#xd;	FROM MST_COLL_AREA_DTL A&#xd;	LEFT JOIN getViewBranch() B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.BRANCH_CODE = B.BRANCH_CODE&#xd;	GROUP BY A.COMPANY_CODE, A.COLL_CODE, A.BRANCH_CODE, B.DSO_CODE, A.PRODUCT_CODE, A.BUCKET_CODE, A.VILLAGE_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="collCode" name="collCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovPartner" useConfig="collectiondso1">
      <sql>SELECT 1 as groupPartnerName, 1 partnerCode, 1 partnerName, 1 rangeFrom, 1 rangeTo, 1 adminCost</sql>
      <result element="Entries" rowName="">
         <element column="groupPartnerName" name="groupPartnerName" xsdType="string"/>
         <element column="partnerCode" name="partnerCode" xsdType="string"/>
         <element column="partnerName" name="partnerName" xsdType="string"/>
         <element column="rangeFrom" name="rangeFrom" xsdType="string"/>
         <element column="rangeTo" name="rangeTo" xsdType="string"/>
         <element column="adminCost" name="adminCost" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovPartner" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.GROUP_PARTNER_CODE groupPartnerCode,&#xd;		A.GROUP_PARTNER_NAME groupPartnerName,&#xd;		B.PARTNER_CODE partnerCode,&#xd;		B.PARTNER_NAME partnerName,&#xd;		B.RANGE_FROM rangeFrom,&#xd;		B.RANGE_TO rangeTo,&#xd;		B.ADMIN_COST adminCost,&#xd;		A.FLAG_ACTIVE flagActive&#xd;	FROM MST_GROUP_PARTNER A&#xd;	JOIN (SELECT *&#xd;		FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;				GROUP_PARTNER_CODE,&#xd;				PARTNER_CODE&#xd;				ORDER BY RANGE_TO DESC) RN&#xd;		FROM MST_PARTNER&#xd;		WHERE FLAG_ACTIVE = '1'&#xd;		) X&#xd;		WHERE RN = 1) B&#xd;	ON A.COMPANY_CODE			= B.COMPANY_CODE&#xd;	AND A.GROUP_PARTNER_CODE	= B.GROUP_PARTNER_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovPartner" useConfig="collectiondso1">
      <sql>SELECT groupPartnerName, partnerCode, partnerName, rangeFrom, rangeTo, adminCost FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.GROUP_PARTNER_CODE groupPartnerCode,&#xd;		A.GROUP_PARTNER_NAME groupPartnerName,&#xd;		B.PARTNER_CODE partnerCode,&#xd;		B.PARTNER_NAME partnerName,&#xd;		B.RANGE_FROM rangeFrom,&#xd;		B.RANGE_TO rangeTo,&#xd;		B.ADMIN_COST adminCost,&#xd;		A.FLAG_ACTIVE flagActive&#xd;	FROM MST_GROUP_PARTNER A&#xd;	JOIN (SELECT *&#xd;		FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;				GROUP_PARTNER_CODE,&#xd;				PARTNER_CODE&#xd;				ORDER BY RANGE_TO DESC) RN&#xd;		FROM MST_PARTNER&#xd;		WHERE FLAG_ACTIVE = '1'&#xd;		) X&#xd;		WHERE RN = 1) B&#xd;	ON A.COMPANY_CODE			= B.COMPANY_CODE&#xd;	AND A.GROUP_PARTNER_CODE	= B.GROUP_PARTNER_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="groupPartnerName" name="groupPartnerName" xsdType="string"/>
         <element column="partnerCode" name="partnerCode" xsdType="string"/>
         <element column="partnerName" name="partnerName" xsdType="string"/>
         <element column="rangeTo" name="rangeTo" xsdType="string"/>
         <element column="adminCost" name="adminCost" xsdType="string"/>
         <element column="rangeFrom" name="rangeFrom" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getRequesterCollection" useConfig="collectiondso1">
      <sql>SELECT TOP 1 &#xd;	FULLNAME requesterName&#xd;FROM MST_EMPLOYEE (nolock) WHERE USERNAME = :requester</sql>
      <result element="Entries" rowName="contents">
         <element column="requesterName" name="requesterName" xsdType="string"/>
      </result>
      <param name="requester" sqlType="STRING"/>
   </query>
   <query id="getColumnRiwayatSetor" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountRiwayatSetor" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.DKH_NO dkhNo,&#xd;		A.VOUCHER_NO voucherNo,&#xd;		'Kasir Cabang' as kasir,&#xd;		B.TRX_DATE tanggalSetor,&#xd;		C.TRX_VALUE nilaiSetor&#xd;	FROM TRX_DKH_DTL A&#xd;	JOIN TRX_PAYMENT_HDR B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.VOUCHER_NO = B.TRX_NO&#xd;	JOIN TRX_PAYMENT_DTL C&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND B.TRX_NO = C.TRX_NO&#xd;WHERE A.VOUCHER_NO != ''&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.DKH_NO dkhNo,&#xd;		A.VOUCHER_NO voucherNo,&#xd;		'Payment Point' as kasir,&#xd;		B.SETOR_DATE tanggalSetor,&#xd;		B.TOT_SETOR nilaiSetor&#xd;	FROM TRX_DKH_DTL A&#xd;	JOIN TRX_LKH_SETOR B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.VOUCHER_NO = B.SETOR_NO AND (B.CANCELED_DATE IS NULL OR B.CANCELED_PIC IS NULL)&#xd;	WHERE A.VOUCHER_NO != ''&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataRiwayatSetor" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, dkhNo, voucherNo, kasir, tanggalSetor, nilaiSetor FROM (&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.DKH_NO dkhNo,&#xd;		A.VOUCHER_NO voucherNo,&#xd;		'Kasir Cabang' as kasir,&#xd;		B.TRX_DATE tanggalSetor,&#xd;		C.TRX_VALUE nilaiSetor&#xd;	FROM TRX_DKH_DTL A&#xd;	JOIN TRX_PAYMENT_HDR B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.VOUCHER_NO = B.TRX_NO&#xd;	JOIN TRX_PAYMENT_DTL C&#xd;	ON A.COMPANY_CODE = C.COMPANY_CODE AND B.TRX_NO = C.TRX_NO&#xd;	WHERE A.VOUCHER_NO != ''&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		A.DKH_NO dkhNo,&#xd;		A.VOUCHER_NO voucherNo,&#xd;		'Payment Point' as kasir,&#xd;		B.SETOR_DATE tanggalSetor,&#xd;		B.TOT_SETOR nilaiSetor&#xd;	FROM TRX_DKH_DTL A&#xd;	JOIN TRX_LKH_SETOR B&#xd;	ON A.COMPANY_CODE = B.COMPANY_CODE AND A.VOUCHER_NO = B.SETOR_NO AND (B.CANCELED_DATE IS NULL OR B.CANCELED_PIC IS NULL)&#xd;	WHERE A.VOUCHER_NO != ''&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="kasir" name="kasir" xsdType="string"/>
         <element column="tanggalSetor" name="tanggalSetor" xsdType="string"/>
         <element column="nilaiSetor" name="nilaiSetor" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="callSpPrcDkhUtj" useConfig="collectiondso1">
      <sql>{call [dbo].[PRC_DKH_UTJ](:companyCode,	:dkhNo, :userLogin, :aggrNo, :returnVal)}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" optional="false" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="userLogin" sqlType="STRING"/>
      <param defaultValue="oke" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="getColumnTrxDkhDtlUtj" useConfig="collectiondso1">
      <sql>SELECT 1 as companyCode</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountTrxDkhDtlUtj" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.DKH_NO dkhNo,&#xd;		A.AGGR_NO_RECIPIENT aggrNoRecipient,&#xd;		A.AGGR_NO_DONOR aggrNoDonor,&#xd;		A.UTJ_USAGE_VALUE utjUsageValue&#xd;	FROM TRX_DKH_DTL_UTJ A&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataTrxDkhDtlUtj" useConfig="collectiondso1">
      <sql>SELECT companyCode, dkhNo, aggrNoRecipient, aggrNoDonor, utjUsageValue FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.DKH_NO dkhNo,&#xd;		A.AGGR_NO_RECIPIENT aggrNoRecipient,&#xd;		A.AGGR_NO_DONOR aggrNoDonor,&#xd;		A.UTJ_USAGE_VALUE utjUsageValue&#xd;	FROM TRX_DKH_DTL_UTJ A&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="aggrNoRecipient" name="aggrNoRecipient" xsdType="string"/>
         <element column="aggrNoDonor" name="aggrNoDonor" xsdType="string"/>
         <element column="utjUsageValue" name="utjUsageValue" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovKelengkapan" useConfig="collectiondso1">
      <sql>SELECT 1 as sparepartCode, 1 sparepartName, 1 sparepartTypeName</sql>
      <result element="Entries" rowName="">
         <element column="sparepartCode" name="sparepartCode" xsdType="string"/>
         <element column="sparepartName" name="sparepartName" xsdType="string"/>
         <element column="sparepartTypeName" name="sparepartTypeName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovKelengkapan" useConfig="collectiondso1">
      <sql>SELECT count(*) as total FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.SPAREPART_CODE sparepartCode,&#xd;		A.SPAREPART_NAME sparepartName,&#xd;		A.SPAREPART_TYPE sparepartType,&#xd;		D.PARAM_DESCRIP sparepartTypeName,&#xd;		B.CATEGORY_CODE categoryCode,&#xd;		C.PARAM_DESCRIP categoryName,&#xd;		B.SPAREPART_PRICE sparepartPrice,&#xd;		MAX(B.EFFECTIVE_DATE) effectiveDate,&#xd;		B.kind_code kindCode&#xd;	FROM MST_SPAREPART A&#xd;	JOIN (SELECT *&#xd;				FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;						[SPAREPART_CODE],&#xd;						[CATEGORY_CODE], kind_code&#xd;						ORDER BY EFFECTIVE_DATE DESC) RN&#xd;				FROM [dbo].[MST_SPAREPART_PRICE]&#xd;				WHERE EFFECTIVE_DATE &lt;= GETDATE()&#xd;				) X WHERE RN = 1&#xd;				) B&#xd;			ON A.[COMPANY_CODE]			= B.[COMPANY_CODE] &#xd;			AND A.[SPAREPART_CODE]		= B.[SPAREPART_CODE]&#xd;&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON B.COMPANY_CODE = C.COMPANY_CODE AND B.CATEGORY_CODE = C.PARAM_CODE AND C.CONDITION = 'CATEGORY_CODE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;	ON A.COMPANY_CODE = D.COMPANY_CODE AND A.SPAREPART_TYPE = D.PARAM_CODE AND D.CONDITION = 'SPAREPART_TYPE' AND D.FLAG_ACTIVE = '1'&#xd;	WHERE A.FLAG_ACTIVE = '1' &#xd;	GROUP BY A.COMPANY_CODE, A.SPAREPART_CODE, A.SPAREPART_NAME, C.PARAM_DESCRIP, B.SPAREPART_PRICE,B.KIND_CODE,B.CATEGORY_CODE,A.SPAREPART_TYPE,D.PARAM_DESCRIP&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovKelengkapan" useConfig="collectiondso1">
      <sql>SELECT companyCode, sparepartCode, sparepartName, sparepartType, sparepartTypeName, categoryCode, categoryName, sparepartPrice, kindCode FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.SPAREPART_CODE sparepartCode,&#xd;		A.SPAREPART_NAME sparepartName,&#xd;		A.SPAREPART_TYPE sparepartType,&#xd;		D.PARAM_DESCRIP sparepartTypeName,&#xd;		B.CATEGORY_CODE categoryCode,&#xd;		C.PARAM_DESCRIP categoryName,&#xd;		B.SPAREPART_PRICE sparepartPrice,&#xd;		MAX(B.EFFECTIVE_DATE) effectiveDate,&#xd;		B.kind_code kindCode&#xd;	FROM MST_SPAREPART A&#xd;	JOIN (SELECT *&#xd;				FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY [COMPANY_CODE],&#xd;						[SPAREPART_CODE],&#xd;						[CATEGORY_CODE], kind_code&#xd;						ORDER BY EFFECTIVE_DATE DESC) RN&#xd;				FROM [dbo].[MST_SPAREPART_PRICE]&#xd;				WHERE EFFECTIVE_DATE &lt;= GETDATE()&#xd;				) X WHERE RN = 1&#xd;				) B&#xd;			ON A.[COMPANY_CODE]			= B.[COMPANY_CODE] &#xd;			AND A.[SPAREPART_CODE]		= B.[SPAREPART_CODE]&#xd;&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON B.COMPANY_CODE = C.COMPANY_CODE AND B.CATEGORY_CODE = C.PARAM_CODE AND C.CONDITION = 'CATEGORY_CODE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GLOBAL_PARAM D&#xd;	ON A.COMPANY_CODE = D.COMPANY_CODE AND A.SPAREPART_TYPE = D.PARAM_CODE AND D.CONDITION = 'SPAREPART_TYPE' AND D.FLAG_ACTIVE = '1'&#xd;	WHERE A.FLAG_ACTIVE = '1' &#xd;	GROUP BY A.COMPANY_CODE, A.SPAREPART_CODE, A.SPAREPART_NAME, C.PARAM_DESCRIP, B.SPAREPART_PRICE,B.KIND_CODE,B.CATEGORY_CODE,A.SPAREPART_TYPE,D.PARAM_DESCRIP&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="sparepartCode" name="sparepartCode" xsdType="string"/>
         <element column="sparepartName" name="sparepartName" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="sparepartPrice" name="sparepartPrice" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="sparepartType" name="sparepartType" xsdType="string"/>
         <element column="sparepartTypeName" name="sparepartTypeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnReportPenarikanPenjualan" useConfig="collectiondso1">
      <sql>SELECT 1 as regionName, 1 areaName, 1 dsoName, 1 branchName, 1 aggrNo, 1 customerFullname, 1 categoryName, 1 brandName, 1 typeName, 1 modelName, 1 kindName, 1 yearMfg, 1 sttuDate, 1 executionDate, 1 createdDate,  1 tuDepositDate, 1 enterDate, 1 daysOverdue, 1 umurReadyToSell, 1 principalValue, 1 osp, 1 totalPelunasan, 1 statusKontrak, 1 subStatusKontrak, 1 woDate, 1 voucherDate, 1 idTypeName, 1 idNo, 1 namaPembeli, 1 hpNo, 1 selling, 1 agentTypeName, 1 penaltyTuValue, 1 tuCost, 1 biayaPenyelesaian, 1 unitCondition, 1 lokasiUnit, 1 petugasTarik, 1 instFrom, 1 instTo, 1 positionName</sql>
      <result element="Entries" rowName="">
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="executionDate" name="executionDate" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="tuDepositDate" name="tuDepositDate" xsdType="string"/>
         <element column="enterDate" name="enterDate" xsdType="string"/>
         <element column="daysOverdue" name="daysOverdue" xsdType="string"/>
         <element column="umurReadyToSell" name="umurReadyToSell" xsdType="string"/>
         <element column="principalValue" name="principalValue" xsdType="string"/>
         <element column="osp" name="osp" xsdType="string"/>
         <element column="totalPelunasan" name="totalPelunasan" xsdType="string"/>
         <element column="statusKontrak" name="statusKontrak" xsdType="string"/>
         <element column="subStatusKontrak" name="subStatusKontrak" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="voucherDate" name="voucherDate" xsdType="string"/>
         <element column="idTypeName" name="idTypeName" xsdType="string"/>
         <element column="idNo" name="idNo" xsdType="string"/>
         <element column="namaPembeli" name="namaPembeli" xsdType="string"/>
         <element column="hpNo" name="hpNo" xsdType="string"/>
         <element column="selling" name="selling" xsdType="string"/>
         <element column="agentTypeName" name="agentTypeName" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="biayaPenyelesaian" name="biayaPenyelesaian" xsdType="string"/>
         <element column="unitCondition" name="unitCondition" xsdType="string"/>
         <element column="lokasiUnit" name="lokasiUnit" xsdType="string"/>
         <element column="petugasTarik" name="petugasTarik" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportPenarikanPenjualan" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		companyCode, &#xd;		companyName, &#xd;		branchCode, &#xd;		branchName, &#xd;		dsoCode, &#xd;		dsoName, &#xd;		areaCode, &#xd;		areaName, &#xd;		regionCode, &#xd;		regionName, &#xd;		tuDepositNo, &#xd;		aggrNo, &#xd;		customerFullname, &#xd;		categoryName, &#xd;		brandName, &#xd;		typeName, &#xd;		modelName, &#xd;		kindName, &#xd;		yearMfg, &#xd;		sttuDate, &#xd;		executionDate, &#xd;		createdDate, &#xd;		case&#xd;			when tuDepositDate = '1900-01-01' then null&#xd;			else tuDepositDate&#xd;		end tuDepositDate,  &#xd;		enterDate, &#xd;		daysOverdue, &#xd;		umurReadyToSell, &#xd;		principalValue, &#xd;		osp, &#xd;		totalPelunasan, &#xd;		statusKontrak, &#xd;		subStatusKontrak, &#xd;		woDate, &#xd;		sellNo, &#xd;		voucherDate, &#xd;		idTypeName, &#xd;		idNo, &#xd;		namaPembeli, &#xd;		hpNo, &#xd;		selling, &#xd;		agentTypeName,&#xd;		penaltyTuValue, &#xd;		tuCost,&#xd;		biayaPenyelesaian, &#xd;		unitCondition, &#xd;		lokasiUnit, &#xd;		expiredDate, &#xd;		productCode, &#xd;		productName,&#xd;		branchAggr,&#xd;		petugasTarik,&#xd;		instFrom,&#xd;		instTo,&#xd;		positionName&#xd;	from [dbo].[reportPenarikanPenjualan]()&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportPenarikanPenjualan" useConfig="collectiondso1">
      <sql>select sttuDate, executionDate, companyCode, companyName, branchCode, branchName, dsoCode, dsoName, areaCode, areaName, regionCode, regionName, tuDepositNo, aggrNo, customerFullname, categoryName, brandName, typeName, modelName, kindName, yearMfg, createdDate, tuDepositDate, enterDate, daysOverdue, umurReadyToSell, principalValue, osp, totalPelunasan, statusKontrak, subStatusKontrak, woDate, sellNo, voucherDate, idTypeName, idNo, namaPembeli, hpNo, selling, agentTypeName, penaltyTuValue, tuCost, biayaPenyelesaian, unitCondition, lokasiUnit, expiredDate, productCode, productName, petugasTarik, instFrom, instTo, positionName from (&#xd;	select&#xd;		companyCode, &#xd;		companyName, &#xd;		branchCode, &#xd;		branchName, &#xd;		dsoCode, &#xd;		dsoName, &#xd;		areaCode, &#xd;		areaName, &#xd;		regionCode, &#xd;		regionName, &#xd;		tuDepositNo, &#xd;		aggrNo, &#xd;		customerFullname, &#xd;		categoryName, &#xd;		brandName, &#xd;		typeName, &#xd;		modelName, &#xd;		kindName, &#xd;		yearMfg, &#xd;		sttuDate, &#xd;		executionDate, &#xd;		createdDate, &#xd;		case&#xd;			when tuDepositDate = '1900-01-01' then null&#xd;			else tuDepositDate&#xd;		end tuDepositDate, &#xd;		enterDate, &#xd;		daysOverdue, &#xd;		umurReadyToSell, &#xd;		principalValue, &#xd;		osp, &#xd;		totalPelunasan, &#xd;		statusKontrak, &#xd;		subStatusKontrak, &#xd;		woDate, &#xd;		sellNo, &#xd;		voucherDate, &#xd;		idTypeName, &#xd;		idNo, &#xd;		namaPembeli, &#xd;		hpNo, &#xd;		selling, &#xd;		agentTypeName,&#xd;		penaltyTuValue, &#xd;		tuCost,&#xd;		biayaPenyelesaian, &#xd;		unitCondition, &#xd;		lokasiUnit, &#xd;		expiredDate, &#xd;		productCode, &#xd;		productName,&#xd;		branchAggr,&#xd;		petugasTarik,&#xd;		instFrom,&#xd;		instTo,&#xd;		positionName&#xd;	from [dbo].[reportPenarikanPenjualan]()&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="executionDate" name="executionDate" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="tuDepositDate" name="tuDepositDate" xsdType="string"/>
         <element column="enterDate" name="enterDate" xsdType="string"/>
         <element column="daysOverdue" name="daysOverdue" xsdType="string"/>
         <element column="umurReadyToSell" name="umurReadyToSell" xsdType="string"/>
         <element column="principalValue" name="principalValue" xsdType="string"/>
         <element column="osp" name="osp" xsdType="string"/>
         <element column="totalPelunasan" name="totalPelunasan" xsdType="string"/>
         <element column="statusKontrak" name="statusKontrak" xsdType="string"/>
         <element column="subStatusKontrak" name="subStatusKontrak" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="voucherDate" name="voucherDate" xsdType="string"/>
         <element column="idTypeName" name="idTypeName" xsdType="string"/>
         <element column="idNo" name="idNo" xsdType="string"/>
         <element column="namaPembeli" name="namaPembeli" xsdType="string"/>
         <element column="hpNo" name="hpNo" xsdType="string"/>
         <element column="selling" name="selling" xsdType="string"/>
         <element column="agentTypeName" name="agentTypeName" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="biayaPenyelesaian" name="biayaPenyelesaian" xsdType="string"/>
         <element column="unitCondition" name="unitCondition" xsdType="string"/>
         <element column="lokasiUnit" name="lokasiUnit" xsdType="string"/>
         <element column="expiredDate" name="expiredDate" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="companyName" name="companyName" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="petugasTarik" name="petugasTarik" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnReportListDebitur" useConfig="collectiondso1">
      <sql>select 1 as namaRegion, 1 namaArea, 1 namaDso, 1 kodeCabang, 1 namaCabang, 1 noKontrak, 1 namaDebitur, 1 noHp, 1 namaKelompok, 1 hariTagih, 1 statusKontrak, 1 subStatusKontrak, 1 tanggalWo, 1 hariTelat, 1 namaBaketLaporan, 1 alamat, 1 namaKelurahan, 1 kodePos, 1 namaPot, 1 tanggalPencairan, 1 tanggalGolive, 1 angsuranPokok, 1 nilaiPencairan, 1 angsuran, 1 biayaTagih, 1 denda, 1 harusDibayar, 1 totalAngsuranTertunggak, 1 totalPartial, 1 sudahDibayar, 1 sisaUtj, 1 sisaPelunasan, 1 tanggalJatuhTempo, 1 tenor, 1 angsuranKeDari, 1 sisaTenor, 1 tenorDibayar, 1 kodeKolektor, 1 namaKolektor, 1 kategori, 1 merk, 1 tipe, 1 model, 1 jenis, 1 tahunKendaraan, 1 nopol, 1 machineNo, 1 chassisNo, 1 surveyorName, 1 angsuranKeSampai, 1 alamatTagih, 1 keluarahanTagih</sql>
      <result element="Entries" rowName="">
         <element column="namaRegion" name="namaRegion" xsdType="string"/>
         <element column="namaArea" name="namaArea" xsdType="string"/>
         <element column="namaDso" name="namaDso" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="namaCabang" name="namaCabang" xsdType="string"/>
         <element column="noKontrak" name="noKontrak" xsdType="string"/>
         <element column="namaDebitur" name="namaDebitur" xsdType="string"/>
         <element column="noHp" name="noHp" xsdType="string"/>
         <element column="namaKelompok" name="namaKelompok" xsdType="string"/>
         <element column="hariTagih" name="hariTagih" xsdType="string"/>
         <element column="statusKontrak" name="statusKontrak" xsdType="string"/>
         <element column="subStatusKontrak" name="subStatusKontrak" xsdType="string"/>
         <element column="tanggalWo" name="tanggalWo" xsdType="string"/>
         <element column="hariTelat" name="hariTelat" xsdType="string"/>
         <element column="namaBaketLaporan" name="namaBaketLaporan" xsdType="string"/>
         <element column="alamat" name="alamat" xsdType="string"/>
         <element column="namaKelurahan" name="namaKelurahan" xsdType="string"/>
         <element column="kodePos" name="kodePos" xsdType="string"/>
         <element column="namaPot" name="namaPot" xsdType="string"/>
         <element column="tanggalPencairan" name="tanggalPencairan" xsdType="string"/>
         <element column="tanggalGolive" name="tanggalGolive" xsdType="string"/>
         <element column="angsuranPokok" name="angsuranPokok" xsdType="string"/>
         <element column="nilaiPencairan" name="nilaiPencairan" xsdType="string"/>
         <element column="angsuran" name="angsuran" xsdType="string"/>
         <element column="biayaTagih" name="biayaTagih" xsdType="string"/>
         <element column="denda" name="denda" xsdType="string"/>
         <element column="harusDibayar" name="harusDibayar" xsdType="string"/>
         <element column="totalAngsuranTertunggak" name="totalAngsuranTertunggak" xsdType="string"/>
         <element column="totalPartial" name="totalPartial" xsdType="string"/>
         <element column="sudahDibayar" name="sudahDibayar" xsdType="string"/>
         <element column="sisaUtj" name="sisaUtj" xsdType="string"/>
         <element column="sisaPelunasan" name="sisaPelunasan" xsdType="string"/>
         <element column="tanggalJatuhTempo" name="tanggalJatuhTempo" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="angsuranKeDari" name="angsuranKeDari" xsdType="string"/>
         <element column="sisaTenor" name="sisaTenor" xsdType="string"/>
         <element column="tenorDibayar" name="tenorDibayar" xsdType="string"/>
         <element column="kodeKolektor" name="kodeKolektor" xsdType="string"/>
         <element column="namaKolektor" name="namaKolektor" xsdType="string"/>
         <element column="kategori" name="kategori" xsdType="string"/>
         <element column="merk" name="merk" xsdType="string"/>
         <element column="tipe" name="tipe" xsdType="string"/>
         <element column="model" name="model" xsdType="string"/>
         <element column="jenis" name="jenis" xsdType="string"/>
         <element column="tahunKendaraan" name="tahunKendaraan" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="surveyorName" name="surveyorName" xsdType="string"/>
         <element column="angsuranKeSampai" name="angsuranKeSampai" xsdType="string"/>
         <element column="alamatTagih" name="alamatTagih" xsdType="string"/>
         <element column="keluarahanTagih" name="keluarahanTagih" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportListDebitur" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		companyCode, &#xd;		namaPerusahaan, &#xd;		productCode,&#xd;		regionCode,&#xd;		namaProduk,&#xd;		namaRegion, &#xd;		areaCode, &#xd;		namaArea, &#xd;		dsoCode, &#xd;		namaDso, &#xd;		branchCode, &#xd;		namaCabang, &#xd;		noKontrak, &#xd;		namaDebitur, &#xd;		noHp, &#xd;		namaKelompok, &#xd;		hariTagih, &#xd;		statusKontrak, &#xd;		subStatusKontrak, &#xd;		tanggalWo, &#xd;		hariTelat, &#xd;		namaBaketLaporan, &#xd;		alamat, &#xd;		namaKelurahan, &#xd;		kodePos,&#xd;		programCode,&#xd;		namaPot, &#xd;		tanggalPencairan,&#xd;		tanggalPencairanFilter,&#xd;		tanggalGolive, &#xd;		angsuranPokok, &#xd;		nilaiPencairan, &#xd;		angsuran, &#xd;		biayaTagih, &#xd;		denda, &#xd;		harusDibayar, &#xd;		totalAngsuranTertunggak, &#xd;		totalPartial, &#xd;		sudahDibayar, &#xd;		sisaUtj, &#xd;		sisaPelunasan, &#xd;		tanggalJatuhTempo, &#xd;		tenor, &#xd;		angsuranKeDari, &#xd;		sisaTenor, &#xd;		tenorDibayar, &#xd;		kodeKolektor, &#xd;		namaKolektor, &#xd;		kategori, &#xd;		merk, &#xd;		tipe, &#xd;		model, &#xd;		jenis, &#xd;		tahunKendaraan, &#xd;		nopol,&#xd;		arSts,&#xd;		subSts,&#xd;		machineNo,&#xd;		chassisNo,&#xd;		surveyorName,&#xd;		angsuranKeSampai,&#xd;		alamatTagih,&#xd;		keluarahanTagih&#xd;	from [dbo].[reportListDebitur]()&#xd;	where arSts in ('AR','BD')&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportListDebitur" useConfig="collectiondso1">
      <sql>select companyCode, namaPerusahaan, productCode, regionCode, namaProduk, namaRegion, areaCode, namaArea, dsoCode, namaDso, branchCode, namaCabang, noKontrak, namaDebitur, noHp, namaKelompok, hariTagih, statusKontrak, subStatusKontrak, tanggalWo, hariTelat, namaBaketLaporan, alamat, namaKelurahan, kodePos, programCode, namaPot, tanggalPencairan, tanggalGolive, angsuranPokok, nilaiPencairan, angsuran, biayaTagih, denda, harusDibayar, totalAngsuranTertunggak, totalPartial, sudahDibayar, sisaUtj, sisaPelunasan, tanggalJatuhTempo, tenor, angsuranKeDari, sisaTenor, tenorDibayar, kodeKolektor, namaKolektor, kategori, merk, tipe, model, jenis, tahunKendaraan, nopol, machineNo, chassisNo, surveyorName, angsuranKeSampai, alamatTagih, keluarahanTagih from (&#xd;	select&#xd;		companyCode, &#xd;		namaPerusahaan, &#xd;		productCode,&#xd;		regionCode,&#xd;		namaProduk,&#xd;		namaRegion, &#xd;		areaCode, &#xd;		namaArea, &#xd;		dsoCode, &#xd;		namaDso, &#xd;		branchCode, &#xd;		namaCabang, &#xd;		noKontrak, &#xd;		namaDebitur, &#xd;		noHp, &#xd;		namaKelompok, &#xd;		hariTagih, &#xd;		statusKontrak, &#xd;		subStatusKontrak, &#xd;		tanggalWo, &#xd;		hariTelat, &#xd;		namaBaketLaporan, &#xd;		alamat, &#xd;		namaKelurahan, &#xd;		kodePos,&#xd;		programCode,&#xd;		namaPot, &#xd;		tanggalPencairan,&#xd;		tanggalPencairanFilter,&#xd;		tanggalGolive, &#xd;		angsuranPokok, &#xd;		nilaiPencairan, &#xd;		angsuran, &#xd;		biayaTagih, &#xd;		denda, &#xd;		harusDibayar, &#xd;		totalAngsuranTertunggak, &#xd;		totalPartial, &#xd;		sudahDibayar, &#xd;		sisaUtj, &#xd;		sisaPelunasan, &#xd;		tanggalJatuhTempo, &#xd;		tenor, &#xd;		angsuranKeDari, &#xd;		sisaTenor, &#xd;		tenorDibayar, &#xd;		kodeKolektor, &#xd;		namaKolektor, &#xd;		kategori, &#xd;		merk, &#xd;		tipe, &#xd;		model, &#xd;		jenis, &#xd;		tahunKendaraan, &#xd;		nopol,&#xd;		arSts,&#xd;		subSts,&#xd;		machineNo,&#xd;		chassisNo,&#xd;		surveyorName,&#xd;		angsuranKeSampai,&#xd;		alamatTagih,&#xd;		keluarahanTagih&#xd;	from [dbo].[reportListDebitur]()&#xd;	where arSts in ('AR','BD')&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="namaPerusahaan" name="namaPerusahaan" xsdType="string"/>
         <element column="namaRegion" name="namaRegion" xsdType="string"/>
         <element column="namaArea" name="namaArea" xsdType="string"/>
         <element column="namaDso" name="namaDso" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="namaCabang" name="namaCabang" xsdType="string"/>
         <element column="noKontrak" name="noKontrak" xsdType="string"/>
         <element column="namaDebitur" name="namaDebitur" xsdType="string"/>
         <element column="noHp" name="noHp" xsdType="string"/>
         <element column="namaKelompok" name="namaKelompok" xsdType="string"/>
         <element column="hariTagih" name="hariTagih" xsdType="string"/>
         <element column="statusKontrak" name="statusKontrak" xsdType="string"/>
         <element column="subStatusKontrak" name="subStatusKontrak" xsdType="string"/>
         <element column="tanggalWo" name="tanggalWo" xsdType="string"/>
         <element column="hariTelat" name="hariTelat" xsdType="string"/>
         <element column="namaBaketLaporan" name="namaBaketLaporan" xsdType="string"/>
         <element column="alamat" name="alamat" xsdType="string"/>
         <element column="namaKelurahan" name="namaKelurahan" xsdType="string"/>
         <element column="kodePos" name="kodePos" xsdType="string"/>
         <element column="namaPot" name="namaPot" xsdType="string"/>
         <element column="tanggalPencairan" name="tanggalPencairan" xsdType="string"/>
         <element column="tanggalGolive" name="tanggalGolive" xsdType="string"/>
         <element column="angsuranPokok" name="angsuranPokok" xsdType="string"/>
         <element column="nilaiPencairan" name="nilaiPencairan" xsdType="string"/>
         <element column="angsuran" name="angsuran" xsdType="string"/>
         <element column="biayaTagih" name="biayaTagih" xsdType="string"/>
         <element column="denda" name="denda" xsdType="string"/>
         <element column="harusDibayar" name="harusDibayar" xsdType="string"/>
         <element column="totalAngsuranTertunggak" name="totalAngsuranTertunggak" xsdType="string"/>
         <element column="totalPartial" name="totalPartial" xsdType="string"/>
         <element column="sudahDibayar" name="sudahDibayar" xsdType="string"/>
         <element column="sisaUtj" name="sisaUtj" xsdType="string"/>
         <element column="sisaPelunasan" name="sisaPelunasan" xsdType="string"/>
         <element column="tanggalJatuhTempo" name="tanggalJatuhTempo" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="angsuranKeDari" name="angsuranKeDari" xsdType="string"/>
         <element column="sisaTenor" name="sisaTenor" xsdType="string"/>
         <element column="tenorDibayar" name="tenorDibayar" xsdType="string"/>
         <element column="kodeKolektor" name="kodeKolektor" xsdType="string"/>
         <element column="namaKolektor" name="namaKolektor" xsdType="string"/>
         <element column="kategori" name="kategori" xsdType="string"/>
         <element column="merk" name="merk" xsdType="string"/>
         <element column="tipe" name="tipe" xsdType="string"/>
         <element column="model" name="model" xsdType="string"/>
         <element column="jenis" name="jenis" xsdType="string"/>
         <element column="tahunKendaraan" name="tahunKendaraan" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="namaProduk" name="namaProduk" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="programCode" name="programCode" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="surveyorName" name="surveyorName" xsdType="string"/>
         <element column="angsuranKeSampai" name="angsuranKeSampai" xsdType="string"/>
         <element column="alamatTagih" name="alamatTagih" xsdType="string"/>
         <element column="keluarahanTagih" name="keluarahanTagih" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getListDocumentSolving" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE varchar(10) = :companyCode&#xd;DECLARE @TU_DEPOSIT_NO varchar(50) = :tuDepositNo&#xd;DECLARE @VALUES_PARAM numeric(20,4) = :solvingType&#xd;&#xd;&#xd;SELECT companyCode, branchCode, tuDepositNo, documentCode, documentName, documentType, solvingType, flagChoose FROM (&#xd;	SELECT&#xd;		SOL.COMPANY_CODE companyCode,&#xd;		SOL.BRANCH_CODE branchCode,&#xd;		SOL.TU_DEPOSIT_NO tuDepositNo,&#xd;		DOC.DOCUMENT_CODE documentCode,&#xd;		DOC.DOCUMENT_NAME documentName,&#xd;		DOC.DOCUMENT_TYPE documentType,&#xd;		CD.VALUES_PARAM solvingType,&#xd;		ISNULL(SOL.FLAG_CHOOSE, '0') flagChoose&#xd;	FROM TRX_TU_SOLVING_DOC(NOLOCK) SOL&#xd;	RIGHT JOIN MST_DOCUMENT(NOLOCK) DOC ON (SOL.COMPANY_CODE = DOC.COMPANY_CODE AND SOL.DOCUMENT_CODE = DOC.DOCUMENT_CODE AND DOC.FLAG_ACTIVE = '1' AND SOL.COMPANY_CODE = @COMPANY_CODE AND SOL.TU_DEPOSIT_NO = @TU_DEPOSIT_NO AND SOL.TU_SOLVING_DATE = :tuSolvingDate)&#xd;	LEFT JOIN MST_GLOBAL_PARAM(NOLOCK) CD ON DOC.COMPANY_CODE = CD.COMPANY_CODE AND CD.CONDITION = 'COLL_DOKUMEN' AND CD.FLAG_ACTIVE = '1' AND DOC.DOCUMENT_CODE = CD.CHAR_VALUES&#xd;	WHERE DOC.DOCUMENT_TYPE = 'D03' &#xd;	AND CD.VALUES_PARAM = @VALUES_PARAM&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="documentCode" name="documentCode" xsdType="string"/>
         <element column="documentName" name="documentName" xsdType="string"/>
         <element column="documentType" name="documentType" xsdType="string"/>
         <element column="solvingType" name="solvingType" xsdType="string"/>
         <element column="flagChoose" name="flagChoose" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="solvingType" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
   </query>
   <query id="checkValidasiPenyelesaianPerpanjangan" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @TU_DEPOSIT_NO VARCHAR(50) = :tuDepositNo&#xd;&#xd;select&#xd;	(&#xd;		select &#xd;			VALUES_PARAM&#xd;		from MST_GLOBAL_PARAM gp&#xd;		left join trx_tu_deposit x&#xd;		on gp.CHAR_VALUES = x.PRODUCT_CODE &#xd;		where gp.CONDITION = 'DEPOSIT_EXPIRED' and gp.FLAG_ACTIVE = '1' and x.tu_deposit_no = @TU_DEPOSIT_NO&#xd;&#xd;	)  jumlah,&#xd;	IIF(count(sol.TU_DEPOSIT_NO) &gt;=&#xd;		(&#xd;			select &#xd;				VALUES_PARAM&#xd;			from MST_GLOBAL_PARAM gp&#xd;			left join trx_tu_deposit x&#xd;			on gp.CHAR_VALUES = x.PRODUCT_CODE &#xd;			where gp.CONDITION = 'DEPOSIT_EXPIRED' and gp.FLAG_ACTIVE = '1' and x.tu_deposit_no = @TU_DEPOSIT_NO&#xd;&#xd;		) &#xd;	, '1', '0') as result&#xd;from trx_tu_solving sol&#xd;left join trx_tu_deposit dep&#xd;on sol.company_code = dep.company_code and sol.tu_deposit_no = dep.tu_deposit_no	&#xd;where dep.company_code = @COMPANY_CODE and dep.tu_deposit_no = @TU_DEPOSIT_NO and sol.tu_solving_type  = '1' and sol.appv_sts = 'APPD'</sql>
      <result element="Entries" rowName="contents">
         <element column="result" name="result" xsdType="string"/>
         <element column="jumlah" name="jumlah" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
   </query>
   <query id="getColumnReportAbsensiWithGroup" useConfig="collectiondso1">
      <sql>select 1 as namaRegion, 1 namaArea, 1 namaDso, 1 branchCode, 1 namaCabang, 1 kodeKelompok, 1 namaKelompok, 1 dkhDate, 1 totalDebitur, 1 totalTakHadir</sql>
      <result element="Entries" rowName="">
         <element column="namaRegion" name="namaRegion" xsdType="string"/>
         <element column="namaArea" name="namaArea" xsdType="string"/>
         <element column="namaDso" name="namaDso" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="namaCabang" name="namaCabang" xsdType="string"/>
         <element column="kodeKelompok" name="kodeKelompok" xsdType="string"/>
         <element column="namaKelompok" name="namaKelompok" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="totalTakHadir" name="totalTakHadir" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportAbsensiWithGroup" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		companyCode, &#xd;		namaPerusahaan, &#xd;		productCode, &#xd;		namaProduk, &#xd;		regionCode, &#xd;		namaRegion, &#xd;		areaCode, &#xd;		namaArea, &#xd;		dsoCode, &#xd;		namaDso, &#xd;		branchCode, &#xd;		namaCabang, &#xd;		kodeKelompok, &#xd;		namaKelompok, &#xd;		dkhDate, &#xd;		totalDebitur, &#xd;		totalTakHadir,&#xd;		dkhDateFilter&#xd;	from [dbo].[reportAbsensiWithGroup]()&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportAbsensiWithGroup" useConfig="collectiondso1">
      <sql>select companyCode, namaPerusahaan, productCode, namaProduk, regionCode, namaRegion, areaCode, namaArea, dsoCode, namaDso, branchCode, namaCabang, kodeKelompok, namaKelompok, dkhDate, totalDebitur, totalTakHadir from (&#xd;	select&#xd;		companyCode, &#xd;		namaPerusahaan, &#xd;		productCode, &#xd;		namaProduk, &#xd;		regionCode, &#xd;		namaRegion, &#xd;		areaCode, &#xd;		namaArea, &#xd;		dsoCode, &#xd;		namaDso, &#xd;		branchCode, &#xd;		namaCabang, &#xd;		kodeKelompok, &#xd;		namaKelompok, &#xd;		dkhDate, &#xd;		totalDebitur, &#xd;		totalTakHadir,&#xd;		dkhDateFilter&#xd;	from [dbo].[reportAbsensiWithGroup]()&#xd;) a WHERE  :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="namaPerusahaan" name="namaPerusahaan" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="namaProduk" name="namaProduk" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="namaRegion" name="namaRegion" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="namaArea" name="namaArea" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="namaDso" name="namaDso" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="namaCabang" name="namaCabang" xsdType="string"/>
         <element column="kodeKelompok" name="kodeKelompok" xsdType="string"/>
         <element column="namaKelompok" name="namaKelompok" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="totalTakHadir" name="totalTakHadir" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnReportAbsensiNotGroup" useConfig="collectiondso1">
      <sql>select 1 as namaRegion, 1 namaArea, 1 namaDso, 1 branchCode, 1 namaCabang, 1 dkhDate, 1 totalDebitur, 1 totalTakHadir</sql>
      <result element="Entries" rowName="">
         <element column="namaRegion" name="namaRegion" xsdType="string"/>
         <element column="namaArea" name="namaArea" xsdType="string"/>
         <element column="namaDso" name="namaDso" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="namaCabang" name="namaCabang" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="totalTakHadir" name="totalTakHadir" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportAbsensiNotGroup" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		companyCode, &#xd;		namaPerusahaan, &#xd;		productCode, &#xd;		namaProduk, &#xd;		regionCode, &#xd;		namaRegion, &#xd;		areaCode, &#xd;		namaArea, &#xd;		dsoCode, &#xd;		namaDso, &#xd;		branchCode, &#xd;		namaCabang, &#xd;		dkhDate, &#xd;		totalDebitur, &#xd;		totalTakHadir,&#xd;		dkhDateFilter&#xd;	from [dbo].[reportAbsensiNothGroup]()&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportAbsensiNotGroup" useConfig="collectiondso1">
      <sql>select companyCode, namaPerusahaan, productCode, namaProduk, regionCode, namaRegion, areaCode, namaArea, dsoCode, namaDso, branchCode, namaCabang, dkhDate, totalDebitur, totalTakHadir from (&#xd;	select&#xd;		companyCode, &#xd;		namaPerusahaan, &#xd;		productCode, &#xd;		namaProduk, &#xd;		regionCode, &#xd;		namaRegion, &#xd;		areaCode, &#xd;		namaArea, &#xd;		dsoCode, &#xd;		namaDso, &#xd;		branchCode, &#xd;		namaCabang, &#xd;		dkhDate, &#xd;		totalDebitur, &#xd;		totalTakHadir,&#xd;		dkhDateFilter&#xd;	from [dbo].[reportAbsensiNothGroup]()&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="namaPerusahaan" name="namaPerusahaan" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="namaProduk" name="namaProduk" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="namaRegion" name="namaRegion" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="namaArea" name="namaArea" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="namaDso" name="namaDso" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="namaCabang" name="namaCabang" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="totalTakHadir" name="totalTakHadir" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnReportAbsensiSummary" useConfig="collectiondso1">
      <sql>select 1 as kodePerusahaan, 1 namaRegion, 1 namaArea, 1 namaDso, 1 kodeCabang, 1 namaCabang, 1 totalKelompok, 1 totalDebitur, 1 totalTakHadir, 1 persentase</sql>
      <result element="Entries" rowName="">
         <element column="kodePerusahaan" name="kodePerusahaan" xsdType="string"/>
         <element column="namaRegion" name="namaRegion" xsdType="string"/>
         <element column="namaArea" name="namaArea" xsdType="string"/>
         <element column="namaDso" name="namaDso" xsdType="string"/>
         <element column="kodeCabang" name="kodeCabang" xsdType="string"/>
         <element column="namaCabang" name="namaCabang" xsdType="string"/>
         <element column="totalKelompok" name="totalKelompok" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="totalTakHadir" name="totalTakHadir" xsdType="string"/>
         <element column="persentase" name="persentase" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportAbsensiSummary" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select kodePerusahaan, regionCode, namaRegion, areaCode, namaArea, dsoCode, namaDso, kodeCabang, namaCabang, case when productCode = 'PC02' then count(isnull(totalKelompok, 0)) else 0 end totalKelompok, cast(sum(totalDebitur) as numeric(10,0)) totalDebitur, cast(sum(totalTakHadir) as numeric(10,0)) totalTakHadir, concat (  cast( (cast(sum(totalTakHadir) as numeric(10,2))/sum(totalDebitur) * 100) as numeric(10,2)) , '%') persentase  from (&#xd;		select&#xd;			kodePerusahaan,&#xd;			dkhDate,&#xd;			productCode,&#xd;			regionCode, &#xd;			namaRegion, &#xd;			areaCode, &#xd;			namaArea, &#xd;			dsoCode, &#xd;			namaDso, &#xd;			kodeCabang, &#xd;			namaCabang, &#xd;			totalKelompok,&#xd;			totalDebitur, &#xd;			totalTakHadir&#xd;		from [dbo].[reportAbsensiSummary]()&#xd;	) a WHERE :search :filter group by kodePerusahaan, productCode, regionCode, namaRegion, areaCode, namaArea, dsoCode, namaDso, kodeCabang, namaCabang&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportAbsensiSummary" useConfig="collectiondso1">
      <sql>select kodePerusahaan, regionCode, namaRegion, areaCode, namaArea, dsoCode, namaDso, kodeCabang, namaCabang, totalKelompok, totalDebitur, totalTakHadir, persentase from (&#xd;	select kodePerusahaan, regionCode, namaRegion, areaCode, namaArea, dsoCode, namaDso, kodeCabang, namaCabang, case when productCode = 'PC02' then count(isnull(totalKelompok, 0)) else 0 end totalKelompok, cast(sum(totalDebitur) as numeric(10,0)) totalDebitur, cast(sum(totalTakHadir) as numeric(10,0)) totalTakHadir, concat (  cast( (cast(sum(totalTakHadir) as numeric(10,2))/sum(totalDebitur) * 100) as numeric(10,2)) , '%') persentase  from (&#xd;		select&#xd;			kodePerusahaan,&#xd;			dkhDate,&#xd;			productCode,&#xd;			regionCode, &#xd;			namaRegion, &#xd;			areaCode, &#xd;			namaArea, &#xd;			dsoCode, &#xd;			namaDso, &#xd;			kodeCabang, &#xd;			namaCabang, &#xd;			totalKelompok,&#xd;			totalDebitur, &#xd;			totalTakHadir&#xd;		from [dbo].[reportAbsensiSummary]()&#xd;	) a WHERE :search :filter group by kodePerusahaan, productCode, regionCode, namaRegion, areaCode, namaArea, dsoCode, namaDso, kodeCabang, namaCabang&#xd;) x ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="kodePerusahaan" name="kodePerusahaan" xsdType="string"/>
         <element column="namaRegion" name="namaRegion" xsdType="string"/>
         <element column="namaArea" name="namaArea" xsdType="string"/>
         <element column="namaDso" name="namaDso" xsdType="string"/>
         <element column="kodeCabang" name="kodeCabang" xsdType="string"/>
         <element column="namaCabang" name="namaCabang" xsdType="string"/>
         <element column="totalKelompok" name="totalKelompok" xsdType="string"/>
         <element column="totalDebitur" name="totalDebitur" xsdType="string"/>
         <element column="totalTakHadir" name="totalTakHadir" xsdType="string"/>
         <element column="persentase" name="persentase" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="rejectPenyelesaian" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @TU_DEPOSIT_NO VARCHAR(50) = :tuDepositNo&#xd;DECLARE @SOLVING_TYPE VARCHAR(10) = :solvingType&#xd;DECLARE @WO_DATE VARCHAR(20) = :woDate&#xd;DECLARE @UPDATED_BY VARCHAR(30) = :updatedBy&#xd;&#xd;IF(@SOLVING_TYPE = '1' OR @SOLVING_TYPE = '3' OR @SOLVING_TYPE = '4' OR @SOLVING_TYPE = '5' OR @SOLVING_TYPE = '6')&#xd;BEGIN&#xd;	UPDATE TRX_TU_DEPOSIT SET&#xd;		SOLVING_TYPE = '0',&#xd;		SOLVING_DATE = '1900-01-01',&#xd;		SOLVING_NOTES = '',&#xd;		DEPOSIT_STS = CASE WHEN @SOLVING_TYPE = '6' THEN '2' WHEN  @WO_DATE = '1900-01-01' or @WO_DATE = 'null' or @WO_DATE = '' THEN '1' ELSE '4' END,&#xd;		UPDATED_BY = 'SYSTEM',&#xd;		UPDATED_DATE = GETDATE()&#xd;	WHERE&#xd;		COMPANY_CODE = @COMPANY_CODE&#xd;	AND TU_DEPOSIT_NO = @TU_DEPOSIT_NO&#xd;END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="solvingType" sqlType="STRING"/>
      <param name="woDate" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNoKontrakMutasi" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 nopol, 1 categoryName, 1 brandName, 1 typeName, 1 modelName, 1 kindName, 1 colorName, 1 yearMfg</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNoKontrakMutasi" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT DISTINCT&#xd;		MDTL.COMPANY_CODE companyCode,&#xd;		MDTL.BRANCH_CODE branchCode,&#xd;		MDTL.AGGR_NO aggrNo,&#xd;		AGGR.CUSTOMER_FULLNAME customerFullname,&#xd;		ASS.NOPOL nopol,&#xd;		CD.PARAM_DESCRIP categoryName,&#xd;		BR.BRAND_NAME brandName,&#xd;		TY.TYPE_NAME typeName,&#xd;		MD.MODEL_NAME modelName,&#xd;		KN.KIND_NAME kindName,&#xd;		COL.COLOR_NAME colorName,&#xd;		ASS.YEAR_MFG yearMfg&#xd;	FROM TRX_TU_MUTASI_DTL MDTL&#xd;	LEFT JOIN TRX_AGGR AGGR&#xd;	ON MDTL.COMPANY_CODE = AGGR.COMPANY_CODE AND MDTL.AGGR_NO = AGGR.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET ASS&#xd;	ON MDTL.COMPANY_CODE = ASS.COMPANY_CODE AND MDTL.AGGR_NO = ASS.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM CD&#xd;	ON  MDTL.COMPANY_CODE = CD.COMPANY_CODE AND AGGR.CATEGORY_CODE = CD.PARAM_CODE AND CD.CONDITION = 'CATEGORY_CODE' AND CD.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRAND BR&#xd;	ON MDTL.COMPANY_CODE = BR.COMPANY_CODE AND ASS.BRAND_CODE = BR.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE TY&#xd;	ON MDTL.COMPANY_CODE = TY.COMPANY_CODE AND ASS.TYPE_CODE = TY.TYPE_CODE&#xd;	LEFT JOIN MST_KIND KN&#xd;	ON MDTL.COMPANY_CODE = KN.COMPANY_CODE AND TY.KIND_CODE = KN.KIND_CODE&#xd;	LEFT JOIN MST_MODEL MD&#xd;	ON MDTL.COMPANY_CODE = MD.COMPANY_CODE AND ASS.MODEL_CODE = MD.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR COL&#xd;	ON MDTL.COMPANY_CODE = COL.COMPANY_CODE AND ASS.COLOR_CODE = COL.COLOR_CODE&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNoKontrakMutasi" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, aggrNo, customerFullname, nopol, categoryName, brandName, typeName, modelName, kindName, colorName, yearMfg FROM (&#xd;	SELECT DISTINCT&#xd;		MDTL.COMPANY_CODE companyCode,&#xd;		MDTL.BRANCH_CODE branchCode,&#xd;		MDTL.AGGR_NO aggrNo,&#xd;		AGGR.CUSTOMER_FULLNAME customerFullname,&#xd;		ASS.NOPOL nopol,&#xd;		CD.PARAM_DESCRIP categoryName,&#xd;		BR.BRAND_NAME brandName,&#xd;		TY.TYPE_NAME typeName,&#xd;		MD.MODEL_NAME modelName,&#xd;		KN.KIND_NAME kindName,&#xd;		COL.COLOR_NAME colorName,&#xd;		ASS.YEAR_MFG yearMfg&#xd;	FROM TRX_TU_MUTASI_DTL MDTL&#xd;	LEFT JOIN TRX_AGGR AGGR&#xd;	ON MDTL.COMPANY_CODE = AGGR.COMPANY_CODE AND MDTL.AGGR_NO = AGGR.AGGR_NO&#xd;	LEFT JOIN TRX_AGGR_ASSET ASS&#xd;	ON MDTL.COMPANY_CODE = ASS.COMPANY_CODE AND MDTL.AGGR_NO = ASS.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM CD&#xd;	ON  MDTL.COMPANY_CODE = CD.COMPANY_CODE AND AGGR.CATEGORY_CODE = CD.PARAM_CODE AND CD.CONDITION = 'CATEGORY_CODE' AND CD.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BRAND BR&#xd;	ON MDTL.COMPANY_CODE = BR.COMPANY_CODE AND ASS.BRAND_CODE = BR.BRAND_CODE&#xd;	LEFT JOIN MST_TYPE TY&#xd;	ON MDTL.COMPANY_CODE = TY.COMPANY_CODE AND ASS.TYPE_CODE = TY.TYPE_CODE&#xd;	LEFT JOIN MST_KIND KN&#xd;	ON MDTL.COMPANY_CODE = KN.COMPANY_CODE AND TY.KIND_CODE = KN.KIND_CODE&#xd;	LEFT JOIN MST_MODEL MD&#xd;	ON MDTL.COMPANY_CODE = MD.COMPANY_CODE AND ASS.MODEL_CODE = MD.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR COL&#xd;	ON MDTL.COMPANY_CODE = COL.COMPANY_CODE AND ASS.COLOR_CODE = COL.COLOR_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnReportScoreBoard" useConfig="collectiondso1">
      <sql>select 1 as dayNo, 1 dayName, 1 tanggal, 1 weekNumber, 1 delapan, 1 embilan, 1 sepuluh, 1 sebelas, 1 tigaBelas, 1 empatBelas, 1 limaBelas, 1 enamBelas</sql>
      <result element="Entries" rowName="">
         <element column="dayNo" name="dayNo" xsdType="string"/>
         <element column="dayName" name="dayName" xsdType="string"/>
         <element column="tanggal" name="tanggal" xsdType="string"/>
         <element column="weekNumber" name="weekNumber" xsdType="string"/>
         <element column="delapan" name="delapan" xsdType="string"/>
         <element column="embilan" name="embilan" xsdType="string"/>
         <element column="sepuluh" name="sepuluh" xsdType="string"/>
         <element column="sebelas" name="sebelas" xsdType="string"/>
         <element column="tigaBelas" name="tigaBelas" xsdType="string"/>
         <element column="empatBelas" name="empatBelas" xsdType="string"/>
         <element column="limaBelas" name="limaBelas" xsdType="string"/>
         <element column="enamBelas" name="enamBelas" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportScoreBoard" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select &#xd;		A.DAYNO dayNo,&#xd;		case&#xd;			when A.DAYNO = '1' THEN 'Senin'&#xd;			when A.DAYNO = '2' THEN 'Selasa'&#xd;			when A.DAYNO = '3' THEN 'Rabu'&#xd;			when A.DAYNO = '4' THEN 'Kamis'&#xd;			when A.DAYNO = '5' THEN 'Jumat'&#xd;			when A.DAYNO = '6' THEN 'Sabtu'&#xd;			when A.DAYNO = '7' THEN 'Minggu'&#xd;		end dayName,&#xd;		A.TANGGAL tanggal,&#xd;		A.WEEKNUMBER as weekNumberNo,&#xd;		case&#xd;			when A.WEEKNUMBER = 1 then 1&#xd;			when A.WEEKNUMBER = 3 then 2&#xd;			when A.WEEKNUMBER = 5 then 3&#xd;			when A.WEEKNUMBER = 2 then 4&#xd;			when A.WEEKNUMBER = 4 then 5 &#xd;			when A.WEEKNUMBER = 6 then 6 &#xd;		end as weekNumber,&#xd;		A.[08:00] as delapan,&#xd;		A.[09:00] as sembilan,&#xd;		A.[10:00] as sepuluh,&#xd;		A.[11:00] as sebelas,&#xd;		A.[13:00] as tigaBelas,&#xd;		A.[14:00] as empatBelas,&#xd;		A.[15:00] as limaBelas,&#xd;		A.[16:00] as enamBelas&#xd;	from FUNC_SCOREBOARD(:year,:collCode,:branchCode,:productCode,:companyCode) A&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="year" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="productCode" optional="false" sqlType="STRING"/>
      <param name="companyCode" optional="false" sqlType="STRING"/>
   </query>
   <query id="getDataReportScoreBoard" useConfig="collectiondso1">
      <sql>select dayNo, dayName, tanggal, weekNumber, delapan, sembilan, sepuluh, sebelas, tigaBelas, empatBelas, limaBelas, enamBelas from (&#xd;	select &#xd;		A.DAYNO dayNo,&#xd;		case&#xd;			when A.DAYNO = '1' THEN 'Senin'&#xd;			when A.DAYNO = '2' THEN 'Selasa'&#xd;			when A.DAYNO = '3' THEN 'Rabu'&#xd;			when A.DAYNO = '4' THEN 'Kamis'&#xd;			when A.DAYNO = '5' THEN 'Jumat'&#xd;			when A.DAYNO = '6' THEN 'Sabtu'&#xd;			when A.DAYNO = '7' THEN 'Minggu'&#xd;		end dayName,&#xd;		A.TANGGAL tanggal,&#xd;		A.WEEKNUMBER as weekNumberNo,&#xd;		case&#xd;			when A.WEEKNUMBER = 1 then 1&#xd;			when A.WEEKNUMBER = 3 then 2&#xd;			when A.WEEKNUMBER = 5 then 3&#xd;			when A.WEEKNUMBER = 2 then 4&#xd;			when A.WEEKNUMBER = 4 then 5 &#xd;			when A.WEEKNUMBER = 6 then 6 &#xd;		end as weekNumber,&#xd;		A.[08:00] as delapan,&#xd;		A.[09:00] as sembilan,&#xd;		A.[10:00] as sepuluh,&#xd;		A.[11:00] as sebelas,&#xd;		A.[13:00] as tigaBelas,&#xd;		A.[14:00] as empatBelas,&#xd;		A.[15:00] as limaBelas,&#xd;		A.[16:00] as enamBelas&#xd;	from FUNC_SCOREBOARD(:year,:collCode,:branchCode,:productCode,:companyCode) A&#xd;) a WHERE :search :filter ORDER BY dayNo, weekNumber OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="dayNo" name="dayNo" xsdType="string"/>
         <element column="dayName" name="dayName" xsdType="string"/>
         <element column="tanggal" name="tanggal" xsdType="string"/>
         <element column="weekNumber" name="weekNumber" xsdType="string"/>
         <element column="delapan" name="delapan" xsdType="string"/>
         <element column="sembilan" name="sembilan" xsdType="string"/>
         <element column="sepuluh" name="sepuluh" xsdType="string"/>
         <element column="sebelas" name="sebelas" xsdType="string"/>
         <element column="tigaBelas" name="tigaBelas" xsdType="string"/>
         <element column="empatBelas" name="empatBelas" xsdType="string"/>
         <element column="limaBelas" name="limaBelas" xsdType="string"/>
         <element column="enamBelas" name="enamBelas" xsdType="string"/>
      </result>
      <param name="year" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="productCode" optional="false" sqlType="STRING"/>
      <param name="companyCode" optional="false" sqlType="STRING"/>
   </query>
   <query id="deleteUnitBidder" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @SELL_NO VARCHAR(50) = :sellNo&#xd;&#xd;delete from trx_sell_unit where company_code = @COMPANY_CODE and sell_no = @SELL_NO&#xd;delete from trx_sell_bidder where company_code = @COMPANY_CODE and sell_no = @SELL_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
   </query>
   <query id="updateReadyToSellPenjualan" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @SELL_NO VARCHAR(50) = :sellNo&#xd;&#xd;update trx_inventory_tu set&#xd;	inventory_sts = '1'&#xd;where&#xd;	company_code  in (select company_code from trx_sell_unit where company_code = @COMPANY_CODE and sell_no = @SELL_NO)&#xd;and	tu_deposit_no in (select tu_deposit_no from trx_sell_unit where company_code = @COMPANY_CODE and sell_no = @SELL_NO)&#xd;and aggr_no       in (select aggr_no from trx_sell_unit where company_code = @COMPANY_CODE and sell_no = @SELL_NO)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNoKontrakIndexLkh" useConfig="collectiondso1">
      <sql>select 1 as aggrNo, 1 customerFullname, 1 address, 1 villageName, 1 pastDueDays</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="pastDueDays" name="pastDueDays" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNoKontrakIndexLkh" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		ISNULL(c.dso_code, a.branch_code) dsoCode,&#xd;		b.product_code productCode,&#xd;		isnull(a.group_code, '') groupCode,&#xd;		a.aggr_no aggrNo,&#xd;		d.customer_fullname customerFullname,&#xd;		case&#xd;			when d.coll_address_type = 'I' then f.id_address&#xd;			when d.coll_address_type = 'D' then f.domicile_address&#xd;			when d.coll_address_type = 'K' then g.office_address&#xd;			when d.coll_address_type = 'B' then h.office_address&#xd;		end as address,&#xd;		case&#xd;			when d.coll_address_type = 'I' then iv.village_name&#xd;			when d.coll_address_type = 'D' then dv.village_name&#xd;			when d.coll_address_type = 'K' then kv.village_name&#xd;			when d.coll_address_type = 'B' then bv.village_name&#xd;		end as villageName,&#xd;		d.past_due_days pastDueDays&#xd;	from trx_dkh_dtl a&#xd;	left join trx_dkh_hdr b&#xd;	on a.company_code = b.company_code and a.dkh_no = b.dkh_no&#xd;	left join getViewBranch() c&#xd;	on a.company_code = c.company_code and a.branch_code = c.branch_code&#xd;	left join trx_aggr d&#xd;	on a.company_code = d.company_code and a.aggr_no = d.aggr_no&#xd;	left join mst_customer f&#xd;	on a.company_code = f.company_code and d.customer_code = f.customer_code&#xd;	left join mst_customer_employee g&#xd;	on a.company_code = g.company_code and d.customer_code = g.customer_code and g.employee_type = 'O'&#xd;	left join mst_customer_employee h&#xd;	on a.company_code = h.company_code and d.customer_code = h.customer_code and h.employee_type = 'B'&#xd;	left join mst_village iv&#xd;	on a.company_code = iv.company_code and f.id_village_code = iv.village_code&#xd;	left join mst_village dv&#xd;	on a.company_code = dv.company_code and f.domicile_village_code = dv.village_code&#xd;	left join mst_village kv&#xd;	on a.company_code = kv.company_code and g.office_village_code = kv.village_code&#xd;	left join mst_village bv&#xd;	on a.company_code = bv.company_code and h.office_village_code = bv.village_code&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNoKontrakIndexLkh" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, dsoCode, productCode, groupCode, aggrNo, customerFullname, address, villageName, pastDueDays from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		ISNULL(c.dso_code, a.branch_code) dsoCode,&#xd;		b.product_code productCode,&#xd;		isnull(a.group_code, '') groupCode,&#xd;		a.aggr_no aggrNo,&#xd;		d.customer_fullname customerFullname,&#xd;		case&#xd;			when d.coll_address_type = 'I' then f.id_address&#xd;			when d.coll_address_type = 'D' then f.domicile_address&#xd;			when d.coll_address_type = 'K' then g.office_address&#xd;			when d.coll_address_type = 'B' then h.office_address&#xd;		end as address,&#xd;		case&#xd;			when d.coll_address_type = 'I' then iv.village_name&#xd;			when d.coll_address_type = 'D' then dv.village_name&#xd;			when d.coll_address_type = 'K' then kv.village_name&#xd;			when d.coll_address_type = 'B' then bv.village_name&#xd;		end as villageName,&#xd;		d.past_due_days pastDueDays&#xd;	from trx_dkh_dtl a&#xd;	left join trx_dkh_hdr b&#xd;	on a.company_code = b.company_code and a.dkh_no = b.dkh_no&#xd;	left join getViewBranch() c&#xd;	on a.company_code = c.company_code and a.branch_code = c.branch_code&#xd;	left join trx_aggr d&#xd;	on a.company_code = d.company_code and a.aggr_no = d.aggr_no&#xd;	left join mst_customer f&#xd;	on a.company_code = f.company_code and d.customer_code = f.customer_code&#xd;	left join mst_customer_employee g&#xd;	on a.company_code = g.company_code and d.customer_code = g.customer_code and g.employee_type = 'O'&#xd;	left join mst_customer_employee h&#xd;	on a.company_code = h.company_code and d.customer_code = h.customer_code and h.employee_type = 'B'&#xd;	left join mst_village iv&#xd;	on a.company_code = iv.company_code and f.id_village_code = iv.village_code&#xd;	left join mst_village dv&#xd;	on a.company_code = dv.company_code and f.domicile_village_code = dv.village_code&#xd;	left join mst_village kv&#xd;	on a.company_code = kv.company_code and g.office_village_code = kv.village_code&#xd;	left join mst_village bv&#xd;	on a.company_code = bv.company_code and h.office_village_code = bv.village_code&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="pastDueDays" name="pastDueDays" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getPositionPenjualanTarikUnit" useConfig="collectiondso1">
      <sql>select&#xd;	position_code positionCode&#xd;from mst_position&#xd;where position_code = :positionCode and position_name like '%Branch Manag%' and flag_Active = '1'</sql>
      <result element="Entries" rowName="contents">
         <element column="positionCode" name="positionCode" xsdType="string"/>
      </result>
      <param name="positionCode" sqlType="STRING"/>
   </query>
   <query id="updateTrxDkhDtlUtj" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO_RECIPIENT varchar(50) = :aggrNoRecipient&#xd;declare @AGGR_NO_DONOR varchar(50) = :aggrNoDonor&#xd;&#xd;UPDATE TRX_DKH_DTL_UTJ SET&#xd;	UTJ_TRANS_CODE = :utjTransCode,&#xd;	UTJ_USAGE_VALUE = :utjUsageValue,&#xd;	UPDATED_BY = :updatedBy,&#xd;	UPDATED_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE&#xd;AND DKH_NO = @DKH_NO&#xd;AND AGGR_NO_RECIPIENT = @AGGR_NO_RECIPIENT&#xd;AND AGGR_NO_DONOR = @AGGR_NO_DONOR</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="utjTransCode" sqlType="STRING"/>
      <param name="utjUsageValue" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNoRecipient" sqlType="STRING"/>
      <param name="aggrNoDonor" sqlType="STRING"/>
   </query>
   <query id="getDataPemakaianUtj" useConfig="collectiondso1">
      <sql>declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @GROUP_CODE varchar(50) = :groupCode&#xd;&#xd;SELECT companyCode, branchCode, dkhNo, aggrNo, customerFullname, groupCode, isnull(pemakaianUtj, 0) as utjUsageValue FROM (&#xd;	SELECT&#xd;		DTL.COMPANY_CODE companyCode,&#xd;		DTL.BRANCH_CODE branchCode,&#xd;		DTL.DKH_NO dkhNo,&#xd;		DTL.AGGR_NO aggrNo,&#xd;		AGGR.CUSTOMER_FULLNAME customerFullname,&#xd;		DTL.GROUP_CODE groupCode,&#xd;		DTL.UTJ_BALANCE utjBalance,&#xd;		(&#xd;			SELECT&#xd;				SUM(UT.UTJ_USAGE_VALUE)&#xd;			FROM TRX_DKH_DTL_UTJ(NOLOCK) UT&#xd;			WHERE UT.DKH_NO = DTL.DKH_NO AND UT.AGGR_NO_DONOR = DTL.AGGR_NO&#xd;		) as pemakaianUtj&#xd;	FROM TRX_DKH_DTL DTL(NOLOCK)&#xd;	LEFT JOIN TRX_AGGR AGGR(NOLOCK)&#xd;	ON DTL.COMPANY_CODE = AGGR.COMPANY_CODE AND DTL.AGGR_NO = AGGR.AGGR_NO&#xd;) a WHERE groupCode = @GROUP_CODE and dkhNo = @DKH_NO</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="utjUsageValue" name="utjUsageValue" xsdType="string"/>
      </result>
      <param name="groupCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
   </query>
   <query id="checkPositionHeadCollector" useConfig="collectiondso1">
      <sql>select&#xd;	position_code positionCode&#xd;from mst_position&#xd;where position_code = :positionCode and position_name like '%Branch Collection Hea%' and flag_Active = '1'</sql>
      <result element="Entries" rowName="contents">
         <element column="positionCode" name="positionCode" xsdType="string"/>
      </result>
      <param name="positionCode" sqlType="STRING"/>
   </query>
   <query id="checkUpdatedTrxDkh" useConfig="collectiondso1">
      <sql>select CONVERT(varchar, updated_date, 121) as updatedDate from trx_dkh_hdr where company_code = :companyCode and dkh_no = :dkhNo and (updated_date = :updatedDateStr OR updated_date IS NULL)</sql>
      <result element="Entries" rowName="contents">
         <element column="updatedDate" name="updatedDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="updatedDateStr" sqlType="STRING"/>
   </query>
   <query id="getColumnLovSttuPettyCash" useConfig="collectiondso1">
      <sql>select 1 as sttuNo, 1 sttuDate, 1 aggrNo, 1 customerName</sql>
      <result element="Entries" rowName="">
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerName" name="customerName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovSttuPettyCash" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		stt.company_code companyCode,&#xd;		stt.branch_code branchCode,&#xd;		vb.dso_code dsoCode,&#xd;		stt.sttu_no sttuNo,&#xd;		stt.sttu_date sttuDate,&#xd;		stt.aggr_no aggrNo,&#xd;		agg.customer_fullname customerName&#xd;	from trx_sttu stt&#xd;	left join getViewBranch() vb&#xd;	on stt.company_code = vb.company_code and stt.branch_code = vb.branch_code&#xd;	left join trx_aggr agg&#xd;	on stt.company_code = agg.company_code and stt.aggr_no = agg.aggr_no&#xd;	where stt.sttu_sts in ('PROC') and stt.agent_type in ('INT') and stt.sttu_no not in (select sttu_no from trx_sttu_cost_hdr where req_cost_sts not in ('CANC','REJE')) and stt.sttu_no not in (select sttu_no from trx_tu_deposit)&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovSttuPettyCash" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, dsoCode, sttuNo, sttuDate, aggrNo, customerName from (&#xd;	select&#xd;		stt.company_code companyCode,&#xd;		stt.branch_code branchCode,&#xd;		vb.dso_code dsoCode,&#xd;		stt.sttu_no sttuNo,&#xd;		stt.sttu_date sttuDate,&#xd;		stt.aggr_no aggrNo,&#xd;		agg.customer_fullname customerName&#xd;	from trx_sttu stt&#xd;	left join getViewBranch() vb&#xd;	on stt.company_code = vb.company_code and stt.branch_code = vb.branch_code&#xd;	left join trx_aggr agg&#xd;	on stt.company_code = agg.company_code and stt.aggr_no = agg.aggr_no&#xd;	where stt.sttu_sts in ('PROC') and stt.agent_type in ('INT') and stt.sttu_no not in (select sttu_no from trx_sttu_cost_hdr where req_cost_sts not in ('CANC','REJE')) and stt.sttu_no not in (select sttu_no from trx_tu_deposit)&#xd;) a WHERE :search :filter  ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerName" name="customerName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovSttuKlaim" useConfig="collectiondso1">
      <sql>select 1 as sttuNo, 1 sttuDate, 1 aggrNo, 1 customerName</sql>
      <result element="Entries" rowName="">
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerName" name="customerName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovSttuKlaim" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		stt.company_code companyCode,&#xd;		stt.branch_code branchCode,&#xd;		vb.dso_code dsoCode,&#xd;		stt.sttu_no sttuNo,&#xd;		stt.sttu_date sttuDate,&#xd;		stt.aggr_no aggrNo,&#xd;		agg.customer_fullname customerName,&#xd;		case&#xd;			when DEP.TU_DEPOSIT_NO IS NULL then 'Tidak'&#xd;			else 'Ya'&#xd;		end flagBerhasilTarik&#xd;	from trx_sttu stt&#xd;	left join getViewBranch() vb&#xd;	on stt.company_code = vb.company_code and stt.branch_code = vb.branch_code&#xd;	left join trx_aggr agg&#xd;	on stt.company_code = agg.company_code and stt.aggr_no = agg.aggr_no&#xd;	left join trx_tu_deposit dep&#xd;	on stt.sttu_no = dep.sttu_no and agg.aggr_no = dep.aggr_no&#xd;	where &#xd;	stt.sttu_sts in ('SUCC') &#xd;	and stt.sttu_no not in (select sttu_no from trx_sttu_cost_hdr where req_cost_sts not in ('CANC','REJE')) &#xd;	and stt.sttu_no not in (select sttu_no from trx_tu_solving s left join trx_tu_deposit d on s.tu_deposit_no = d.tu_deposit_no where s.tu_solving_type in ('3','4','5') and s.appv_sts in ('OPEN','APPR','APPD','REVS')) &#xd;	and stt.sttu_no not in (select sttu_no from trx_inventory_tu tu left join trx_tu_deposit de on tu.tu_deposit_no = de.tu_deposit_no)&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovSttuKlaim" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, dsoCode, sttuNo, sttuDate, aggrNo, customerName, flagBerhasilTarik from (&#xd;	select&#xd;		stt.company_code companyCode,&#xd;		stt.branch_code branchCode,&#xd;		vb.dso_code dsoCode,&#xd;		stt.sttu_no sttuNo,&#xd;		stt.sttu_date sttuDate,&#xd;		stt.aggr_no aggrNo,&#xd;		agg.customer_fullname customerName,&#xd;		case&#xd;			when DEP.TU_DEPOSIT_NO IS NULL then 'Tidak'&#xd;			else 'Ya'&#xd;		end flagBerhasilTarik&#xd;	from trx_sttu stt&#xd;	left join getViewBranch() vb&#xd;	on stt.company_code = vb.company_code and stt.branch_code = vb.branch_code&#xd;	left join trx_aggr agg&#xd;	on stt.company_code = agg.company_code and stt.aggr_no = agg.aggr_no&#xd;	left join trx_tu_deposit dep&#xd;	on stt.sttu_no = dep.sttu_no and agg.aggr_no = dep.aggr_no&#xd;	where &#xd;	stt.sttu_sts in ('SUCC') &#xd;	and stt.sttu_no not in (select sttu_no from trx_sttu_cost_hdr where req_cost_sts not in ('CANC','REJE')) &#xd;	and stt.sttu_no not in (select sttu_no from trx_tu_solving s left join trx_tu_deposit d on s.tu_deposit_no = d.tu_deposit_no where s.tu_solving_type in ('3','4','5') and s.appv_sts in ('OPEN','APPR','APPD','REVS')) &#xd;	and stt.sttu_no not in (select sttu_no from trx_inventory_tu tu left join trx_tu_deposit de on tu.tu_deposit_no = de.tu_deposit_no)&#xd;) a WHERE :search :filter  ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="sttuDate" name="sttuDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerName" name="customerName" xsdType="string"/>
         <element column="flagBerhasilTarik" name="flagBerhasilTarik" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateSpTrxDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @aggr_no varchar(50) = :aggrNo&#xd;&#xd;update dtl set &#xd;		sp_no = :spNo,&#xd;		sp_type = :spType&#xd;	from trx_dkh_dtl dtl&#xd;	join trx_dkh_hdr hdr&#xd;	on dtl.company_code = hdr.company_code and dtl.dkh_no = hdr.dkh_no&#xd;	WHERE hdr.dkh_date = format(getdate(), 'yyyy-MM-dd') &#xd;	and hdr.dkh_sts in ('OPEN','PROC') &#xd;	and dtl.flag_send = '0' &#xd;	and dtl.aggr_no = @aggr_no</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="spNo" sqlType="STRING"/>
      <param name="spType" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="getColumnLovNomorKontrakSttuIndex" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 address, 1 villageName, 1 dayOverdue</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNomorKontrakSttuIndex" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT DISTINCT companyCode, productCode, woDate, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			VB.DSO_CODE dsoCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			(&#xd;				CASE&#xd;					WHEN A.WO_DATE IS NULL THEN '0'&#xd;					WHEN A.WO_DATE = '1900-01-01' THEN '0'&#xd;					ELSE '1'&#xd;				END&#xd;			) as woDate,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_ADDRESS FROM MST_CUSTOMER X WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_ADDRESS FROM MST_CUSTOMER X WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;				END AS RESULT&#xd;			) as address,&#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END AS villageName,&#xd;			(&#xd;				SELECT TOP 1 ISNULL(dayOverdue, 0) dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						ISNULL(DAY_OVERDUE, 0) dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID'&#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue&#xd;		FROM TRX_AGGR A&#xd;		LEFT JOIN getViewBranch() VB&#xd;		on A.COMPANY_CODE = VB.COMPANY_CODE AND A.BRANCH_CODE = VB.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CUS&#xd;		ON A.COMPANY_CODE = CUS.COMPANY_CODE AND A.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV&#xd;		ON A.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV&#xd;		ON A.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CE&#xd;		ON A.COMPANY_CODE = CE.COMPANY_CODE AND A.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE OV&#xd;		ON A.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB&#xd;		ON A.COMPANY_CODE = CEB.COMPANY_CODE AND A.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV&#xd;		ON A.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;		WHERE A.AGGR_NO NOT IN (SELECT AGGR_NO FROM TRX_STTU WHERE STTU_STS IN ('OPEN','APPR','PROC') AND EXPIRED_DATE &gt; GETDATE()) AND&#xd;				A.AGGR_NO NOT IN (SELECT X.AGGR_NO FROM TRX_TU_DEPOSIT X JOIN TRX_STTU Y ON X.STTU_NO = Y.STTU_NO AND X.AGGR_NO = Y.AGGR_NO AND Y.STTU_STS = 'SUCC' WHERE (X.EXPIRED_DATE &gt; GETDATE() OR X.EXPIRED_DATE = '1900-01-01')) AND A.AR_STS IN ('AR','BD') AND A.SUB_STS NOT IN ('SU','CM','DL')&#xd;&#xd;		UNION ALL&#xd;&#xd;		SELECT&#xd;			STT.COMPANY_CODE companyCode,&#xd;			STT.BRANCH_CODE branchCode,&#xd;			VB.DSO_CODE dsoCode,&#xd;			AGG.PRODUCT_CODE productCode,&#xd;			(&#xd;				CASE&#xd;					WHEN AGG.WO_DATE IS NULL THEN '0'&#xd;					WHEN AGG.WO_DATE = '1900-01-01' THEN '0'&#xd;					ELSE '1'&#xd;				END&#xd;			) as woDate,&#xd;			STT.AGGR_NO aggrNo,&#xd;			AGG.CUSTOMER_FULLNAME customerFullname,&#xd;			(&#xd;				SELECT &#xd;				CASE &#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_ADDRESS FROM MST_CUSTOMER X WHERE X.CUSTOMER_CODE = AGG.CUSTOMER_CODE)&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_ADDRESS FROM MST_CUSTOMER X WHERE X.CUSTOMER_CODE = AGG.CUSTOMER_CODE)&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X WHERE X.CUSTOMER_CODE = AGG.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X WHERE X.CUSTOMER_CODE = AGG.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;				END AS RESULT&#xd;			) as address,&#xd;			CASE &#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END AS villageName,&#xd;			(&#xd;				SELECT TOP 1 ISNULL(dayOverdue, 0) dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						ISNULL(DAY_OVERDUE, 0) dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = AGG.AGGR_NO AND PAYMENT_STS = 'UNPAID'&#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue&#xd;		FROM TRX_STTU STT&#xd;		LEFT JOIN getViewBranch() VB&#xd;		on STT.COMPANY_CODE = VB.COMPANY_CODE AND STT.BRANCH_CODE = VB.BRANCH_CODE&#xd;		LEFT JOIN TRX_AGGR AGG&#xd;		ON STT.COMPANY_CODE = AGG.COMPANY_CODE AND STT.AGGR_NO = AGG.AGGR_NO&#xd;		LEFT JOIN MST_CUSTOMER CUS&#xd;		ON STT.COMPANY_CODE = CUS.COMPANY_CODE AND AGG.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV&#xd;		ON STT.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV&#xd;		ON STT.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CE&#xd;		ON STT.COMPANY_CODE = CE.COMPANY_CODE AND AGG.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE OV&#xd;		ON STT.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB&#xd;		ON STT.COMPANY_CODE = CEB.COMPANY_CODE AND AGG.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV&#xd;		ON STT.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;	) a	WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNomorKontrakSttuIndex" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, productCode, woDate, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;	SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		VB.DSO_CODE dsoCode,&#xd;		A.PRODUCT_CODE productCode,&#xd;		(&#xd;			CASE&#xd;				WHEN A.WO_DATE IS NULL THEN '0'&#xd;				WHEN A.WO_DATE = '1900-01-01' THEN '0'&#xd;				ELSE '1'&#xd;			END&#xd;		) as woDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		A.CUSTOMER_FULLNAME customerFullname,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_ADDRESS FROM MST_CUSTOMER X WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_ADDRESS FROM MST_CUSTOMER X WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE)&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X WHERE X.CUSTOMER_CODE = A.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as address,&#xd;		CASE &#xd;			WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;			WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;			WHEN A.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;			WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;		END AS villageName,&#xd;		(&#xd;			SELECT TOP 1 ISNULL(dayOverdue, 0) dayOverdue FROM (&#xd;				SELECT &#xd;					MIN(INST_NO) instNo,&#xd;					ISNULL(DAY_OVERDUE, 0) dayOverdue&#xd;				FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID'&#xd;				GROUP BY INST_NO, DAY_OVERDUE&#xd;			) a&#xd;		) as dayOverdue&#xd;	FROM TRX_AGGR A&#xd;	LEFT JOIN getViewBranch() VB&#xd;	on A.COMPANY_CODE = VB.COMPANY_CODE AND A.BRANCH_CODE = VB.BRANCH_CODE&#xd;	LEFT JOIN MST_CUSTOMER CUS&#xd;	ON A.COMPANY_CODE = CUS.COMPANY_CODE AND A.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV&#xd;	ON A.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV&#xd;	ON A.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE CE&#xd;	ON A.COMPANY_CODE = CE.COMPANY_CODE AND A.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE OV&#xd;	ON A.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB&#xd;	ON A.COMPANY_CODE = CEB.COMPANY_CODE AND A.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV&#xd;	ON A.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;	WHERE A.AGGR_NO NOT IN (SELECT AGGR_NO FROM TRX_STTU WHERE STTU_STS IN ('OPEN','APPR','PROC') AND EXPIRED_DATE &gt; GETDATE()) AND&#xd;			A.AGGR_NO NOT IN (SELECT X.AGGR_NO FROM TRX_TU_DEPOSIT X JOIN TRX_STTU Y ON X.STTU_NO = Y.STTU_NO AND X.AGGR_NO = Y.AGGR_NO AND Y.STTU_STS = 'SUCC' WHERE (X.EXPIRED_DATE &gt; GETDATE() OR X.EXPIRED_DATE = '1900-01-01')) AND A.AR_STS IN ('AR','BD') AND A.SUB_STS NOT IN ('SU','CM','DL')&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT&#xd;		STT.COMPANY_CODE companyCode,&#xd;		STT.BRANCH_CODE branchCode,&#xd;		VB.DSO_CODE dsoCode,&#xd;		AGG.PRODUCT_CODE productCode,&#xd;		(&#xd;			CASE&#xd;				WHEN AGG.WO_DATE IS NULL THEN '0'&#xd;				WHEN AGG.WO_DATE = '1900-01-01' THEN '0'&#xd;				ELSE '1'&#xd;			END&#xd;		) as woDate,&#xd;		STT.AGGR_NO aggrNo,&#xd;		AGG.CUSTOMER_FULLNAME customerFullname,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN (SELECT ID_ADDRESS FROM MST_CUSTOMER X WHERE X.CUSTOMER_CODE = AGG.CUSTOMER_CODE)&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DOMICILE_ADDRESS FROM MST_CUSTOMER X WHERE X.CUSTOMER_CODE = AGG.CUSTOMER_CODE)&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X WHERE X.CUSTOMER_CODE = AGG.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'O')&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN (SELECT OFFICE_ADDRESS FROM MST_CUSTOMER_EMPLOYEE X WHERE X.CUSTOMER_CODE = AGG.CUSTOMER_CODE AND X.EMPLOYEE_TYPE = 'B')&#xd;			END AS RESULT&#xd;		) as address,&#xd;		CASE &#xd;			WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;			WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;			WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;			WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;		END AS villageName,&#xd;		(&#xd;			SELECT TOP 1 ISNULL(dayOverdue, 0) dayOverdue FROM (&#xd;				SELECT &#xd;					MIN(INST_NO) instNo,&#xd;					ISNULL(DAY_OVERDUE, 0) dayOverdue&#xd;				FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = AGG.AGGR_NO AND PAYMENT_STS = 'UNPAID'&#xd;				GROUP BY INST_NO, DAY_OVERDUE&#xd;			) a&#xd;		) as dayOverdue&#xd;	FROM TRX_STTU STT&#xd;	LEFT JOIN getViewBranch() VB&#xd;	on STT.COMPANY_CODE = VB.COMPANY_CODE AND STT.BRANCH_CODE = VB.BRANCH_CODE&#xd;	LEFT JOIN TRX_AGGR AGG&#xd;	ON STT.COMPANY_CODE = AGG.COMPANY_CODE AND STT.AGGR_NO = AGG.AGGR_NO&#xd;	LEFT JOIN MST_CUSTOMER CUS&#xd;	ON STT.COMPANY_CODE = CUS.COMPANY_CODE AND AGG.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE IV&#xd;	ON STT.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;	LEFT JOIN MST_VILLAGE DV&#xd;	ON STT.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE CE&#xd;	ON STT.COMPANY_CODE = CE.COMPANY_CODE AND AGG.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_VILLAGE OV&#xd;	ON STT.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB&#xd;	ON STT.COMPANY_CODE = CEB.COMPANY_CODE AND AGG.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_VILLAGE BV&#xd;	ON STT.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="woDate" name="woDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovNoKontrakIndexSpUkm" useConfig="collectiondso1">
      <sql>SELECT 1 as aggrNo, 1 customerFullname, 1 address, 1 villageName, 1 dayOverdue</sql>
      <result element="Entries" rowName="">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovNoKontrakIndexSpUkm" useConfig="collectiondso1">
      <sql>SELECT COUNT(*) as total FROM (&#xd;	SELECT DISTINCT companyCode, aggrNo, customerFullname, address, villageName, isnull(dayOverdue, 0) dayOverdue FROM (&#xd;		SELECT DISTINCT companyCode, branchCode, dsoCode, productCode, collCode, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;			SELECT&#xd;				SP.COMPANY_CODE companyCode,&#xd;				SP.BRANCH_CODE branchCode,&#xd;				VB.DSO_CODE dsoCode,&#xd;				SP.PRODUCT_CODE productCode,&#xd;				SP.COLL_CODE collCode,&#xd;				SP.AGGR_NO aggrNo,&#xd;				AGG.CUSTOMER_FULLNAME customerFullname,&#xd;				CASE &#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN CUS.ID_ADDRESS&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN CUS.DOMICILE_ADDRESS&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN CE.OFFICE_ADDRESS&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN CEB.OFFICE_ADDRESS&#xd;				END AS address,&#xd;				CASE &#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;					WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;				END AS villageName,&#xd;				(&#xd;					SELECT TOP 1 dayOverdue FROM (&#xd;						SELECT &#xd;							MIN(INST_NO) instNo,&#xd;							DAY_OVERDUE dayOverdue&#xd;						FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = SP.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = SP.COMPANY_CODE &#xd;						GROUP BY INST_NO, DAY_OVERDUE&#xd;					) a&#xd;				) as dayOverdue,&#xd;				AGG.WO_DATE woDate,&#xd;				AGG.AR_STS arSts,&#xd;				AGG.SUB_STS subSts&#xd;			FROM TRX_SP SP&#xd;			LEFT JOIN TRX_AGGR AGG&#xd;			ON SP.COMPANY_CODE = AGG.COMPANY_CODE AND SP.AGGR_NO = AGG.AGGR_NO&#xd;			LEFT JOIN getViewBranch() VB&#xd;			ON SP.COMPANY_CODE = VB.COMPANY_CODE AND SP.BRANCH_CODE = VB.BRANCH_CODE&#xd;			LEFT JOIN MST_CUSTOMER CUS&#xd;			ON SP.COMPANY_CODE = CUS.COMPANY_CODE AND AGG.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;			LEFT JOIN MST_VILLAGE IV&#xd;			ON SP.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;			LEFT JOIN MST_VILLAGE DV&#xd;			ON SP.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;			LEFT JOIN MST_CUSTOMER_EMPLOYEE CE&#xd;			ON SP.COMPANY_CODE = CE.COMPANY_CODE AND AGG.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;			LEFT JOIN MST_VILLAGE OV&#xd;			ON SP.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;			LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB&#xd;			ON SP.COMPANY_CODE = CEB.COMPANY_CODE AND AGG.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;			LEFT JOIN MST_VILLAGE BV&#xd;			ON SP.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;			WHERE SP.PRODUCT_CODE != 'PC02'&#xd;		) a&#xd;&#xd;		UNION ALL&#xd;&#xd;		SELECT DISTINCT companyCode, branchCode, dsoCode, productCode, collCode, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;			SELECT&#xd;				A.COMPANY_CODE companyCode,&#xd;				A.BRANCH_CODE branchCode,&#xd;				VB.DSO_CODE dsoCode,&#xd;				A.PRODUCT_CODE productCode,&#xd;				A.COLL_CODE collCode,&#xd;				A.AGGR_NO aggrNo,&#xd;				A.CUSTOMER_FULLNAME customerFullname,&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CUS.ID_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CUS.DOMICILE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' THEN CE.OFFICE_ADDRESS&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN CEB.OFFICE_ADDRESS&#xd;				END AS address,&#xd;				CASE &#xd;					WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;					WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;				END AS villageName,&#xd;				(&#xd;					SELECT TOP 1 dayOverdue FROM (&#xd;						SELECT &#xd;							MIN(INST_NO) instNo,&#xd;							DAY_OVERDUE dayOverdue&#xd;						FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;						GROUP BY INST_NO, DAY_OVERDUE&#xd;					) a&#xd;				) as dayOverdue,&#xd;				A.WO_DATE woDate,&#xd;				A.AR_STS arSts,&#xd;				A.SUB_STS subSts&#xd;			FROM TRX_AGGR A&#xd;			LEFT JOIN TRX_AGGR_SCHEDULE B&#xd;			ON A.COMPANY_CODE = B.COMPANY_CODE AND A.AGGR_NO = B.AGGR_NO&#xd;			LEFT JOIN getViewBranch() VB&#xd;			ON A.COMPANY_CODE = VB.COMPANY_CODE AND A.BRANCH_CODE = VB.BRANCH_CODE&#xd;			LEFT JOIN MST_CUSTOMER CUS&#xd;			ON A.COMPANY_CODE = CUS.COMPANY_CODE AND A.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;			LEFT JOIN MST_VILLAGE IV&#xd;			ON A.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;			LEFT JOIN MST_VILLAGE DV&#xd;			ON A.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;			LEFT JOIN MST_CUSTOMER_EMPLOYEE CE&#xd;			ON A.COMPANY_CODE = CE.COMPANY_CODE AND A.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;			LEFT JOIN MST_VILLAGE OV&#xd;			ON A.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;			LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB&#xd;			ON A.COMPANY_CODE = CEB.COMPANY_CODE AND A.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;			LEFT JOIN MST_VILLAGE BV&#xd;			ON A.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;			WHERE B.PAYMENT_STS = 'UNPAID' AND B.COLL_DUE_DATE &lt;= GETDATE() AND A.PRODUCT_CODE != 'PC02' AND A.AGGR_NO NOT IN (SELECT AGGR_NO FROM TRX_SP WHERE EXPIRED_DATE &gt; GETDATE() AND SP_STS != 'CANC')&#xd;		) a WHERE arSts in ('AR') and subSts not in ('TP','SU','CM','DL') and (ISNULL(woDate, '') = '' OR woDate = '1900-01-01') AND dayOverdue &gt; 1&#xd;	) a WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovNoKontrakIndexSpUkm" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, aggrNo, customerFullname, address, villageName, isnull(dayOverdue, 0) dayOverdue FROM (&#xd;	SELECT DISTINCT companyCode, branchCode, dsoCode, productCode, collCode, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;		SELECT&#xd;			SP.COMPANY_CODE companyCode,&#xd;			SP.BRANCH_CODE branchCode,&#xd;			VB.DSO_CODE dsoCode,&#xd;			SP.PRODUCT_CODE productCode,&#xd;			SP.COLL_CODE collCode,&#xd;			SP.AGGR_NO aggrNo,&#xd;			AGG.CUSTOMER_FULLNAME customerFullname,&#xd;			CASE &#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN CUS.ID_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN CUS.DOMICILE_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN CE.OFFICE_ADDRESS&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN CEB.OFFICE_ADDRESS&#xd;			END AS address,&#xd;			CASE &#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;				WHEN AGG.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END AS villageName,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = SP.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = SP.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			AGG.WO_DATE woDate,&#xd;			AGG.AR_STS arSts,&#xd;			AGG.SUB_STS subSts&#xd;		FROM TRX_SP SP&#xd;		LEFT JOIN TRX_AGGR AGG&#xd;		ON SP.COMPANY_CODE = AGG.COMPANY_CODE AND SP.AGGR_NO = AGG.AGGR_NO&#xd;		LEFT JOIN getViewBranch() VB&#xd;		ON SP.COMPANY_CODE = VB.COMPANY_CODE AND SP.BRANCH_CODE = VB.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CUS&#xd;		ON SP.COMPANY_CODE = CUS.COMPANY_CODE AND AGG.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV&#xd;		ON SP.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV&#xd;		ON SP.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CE&#xd;		ON SP.COMPANY_CODE = CE.COMPANY_CODE AND AGG.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE OV&#xd;		ON SP.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB&#xd;		ON SP.COMPANY_CODE = CEB.COMPANY_CODE AND AGG.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV&#xd;		ON SP.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;		WHERE SP.PRODUCT_CODE != 'PC02'&#xd;	) a&#xd;&#xd;	UNION ALL&#xd;&#xd;	SELECT DISTINCT companyCode, branchCode, dsoCode, productCode, collCode, aggrNo, customerFullname, address, villageName, dayOverdue FROM (&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			VB.DSO_CODE dsoCode,&#xd;			A.PRODUCT_CODE productCode,&#xd;			A.COLL_CODE collCode,&#xd;			A.AGGR_NO aggrNo,&#xd;			A.CUSTOMER_FULLNAME customerFullname,&#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN CUS.ID_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN CUS.DOMICILE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN CE.OFFICE_ADDRESS&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN CEB.OFFICE_ADDRESS&#xd;			END AS address,&#xd;			CASE &#xd;				WHEN A.COLL_ADDRESS_TYPE = 'I' THEN IV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'D' THEN DV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'K' THEN OV.VILLAGE_NAME&#xd;				WHEN A.COLL_ADDRESS_TYPE = 'B' THEN BV.VILLAGE_NAME&#xd;			END AS villageName,&#xd;			(&#xd;				SELECT TOP 1 dayOverdue FROM (&#xd;					SELECT &#xd;						MIN(INST_NO) instNo,&#xd;						DAY_OVERDUE dayOverdue&#xd;					FROM TRX_AGGR_SCHEDULE WHERE AGGR_NO = A.AGGR_NO AND PAYMENT_STS = 'UNPAID' AND COLL_DUE_DATE &lt;= GETDATE() AND COMPANY_CODE = A.COMPANY_CODE &#xd;					GROUP BY INST_NO, DAY_OVERDUE&#xd;				) a&#xd;			) as dayOverdue,&#xd;			A.WO_DATE woDate,&#xd;			A.AR_STS arSts,&#xd;			A.SUB_STS subSts&#xd;		FROM TRX_AGGR A&#xd;		LEFT JOIN TRX_AGGR_SCHEDULE B&#xd;		ON A.COMPANY_CODE = B.COMPANY_CODE AND A.AGGR_NO = B.AGGR_NO&#xd;		LEFT JOIN getViewBranch() VB&#xd;		ON A.COMPANY_CODE = VB.COMPANY_CODE AND A.BRANCH_CODE = VB.BRANCH_CODE&#xd;		LEFT JOIN MST_CUSTOMER CUS&#xd;		ON A.COMPANY_CODE = CUS.COMPANY_CODE AND A.CUSTOMER_CODE = CUS.CUSTOMER_CODE&#xd;		LEFT JOIN MST_VILLAGE IV&#xd;		ON A.COMPANY_CODE = IV.COMPANY_CODE AND CUS.ID_VILLAGE_CODE = IV.VILLAGE_CODE&#xd;		LEFT JOIN MST_VILLAGE DV&#xd;		ON A.COMPANY_CODE = DV.COMPANY_CODE AND CUS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CE&#xd;		ON A.COMPANY_CODE = CE.COMPANY_CODE AND A.CUSTOMER_CODE = CE.CUSTOMER_CODE AND CE.EMPLOYEE_TYPE = 'O'&#xd;		LEFT JOIN MST_VILLAGE OV&#xd;		ON A.COMPANY_CODE = OV.COMPANY_CODE AND OV.VILLAGE_CODE = CE.OFFICE_VILLAGE_CODE&#xd;		LEFT JOIN MST_CUSTOMER_EMPLOYEE CEB&#xd;		ON A.COMPANY_CODE = CEB.COMPANY_CODE AND A.CUSTOMER_CODE = CEB.CUSTOMER_CODE AND CEB.EMPLOYEE_TYPE = 'B'&#xd;		LEFT JOIN MST_VILLAGE BV&#xd;		ON A.COMPANY_CODE = BV.COMPANY_CODE AND BV.VILLAGE_CODE = CEB.OFFICE_VILLAGE_CODE&#xd;		WHERE B.PAYMENT_STS = 'UNPAID' AND B.COLL_DUE_DATE &lt;= GETDATE() AND A.PRODUCT_CODE != 'PC02' AND A.AGGR_NO NOT IN (SELECT AGGR_NO FROM TRX_SP WHERE EXPIRED_DATE &gt; GETDATE() AND SP_STS != 'CANC')&#xd;	) a WHERE arSts in ('AR') and subSts not in ('TP','SU','CM','DL') and (ISNULL(woDate, '') = '' OR woDate = '1900-01-01') AND dayOverdue &gt; 1&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="listExpiredSttu" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, sttuNo, hiePositionVersion from (&#xd;	select &#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.sttu_no sttuNo,&#xd;		c.hie_position_version hiePositionVersion&#xd;	from trx_sttu a &#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,&#xd;					trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT115'&#xd;		) b&#xd;		on a.company_code	= b.companyCode &#xd;		and a.sttu_no		= b.trxCode&#xd;	join trx_approval c&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts = 'APPR'&#xd;	and a.company_code = c.company_code and a.sttu_no = c.trx_code&#xd;	where a.expired_date &lt;= DATEADD(day, 1, :eodDate) and a.sttu_sts in ('APPR')&#xd;) a where companyCode = :companyCode and branchCode = :branchCode order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="listExpiredSerahTerimaUnit" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, sttuNo, hiePositionVersion from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.sttu_no sttuNo,&#xd;		C.hie_position_version hiePositionVersion&#xd;	from trx_sttu a&#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,&#xd;					trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT115'&#xd;		) b&#xd;		on a.company_code	= b.companyCode &#xd;		and a.sttu_no		= b.trxCode&#xd;	join trx_approval c&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts = 'APPD'&#xd;	and a.company_code = c.company_code and a.sttu_no = c.trx_code&#xd;	where a.expired_date &lt;= DATEADD(day, 1, :eodDate) and a.sttu_sts in ('PROC')&#xd;) a where companyCode = :companyCode and branchCode = :branchCode order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="updatedExpiredSttuSts" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>UPDATE TRX_STTU SET&#xd;    STTU_STS = :sttuSts,&#xd;	STTU_STS_DATE = GETDATE(),&#xd;    UPDATED_DATE = GETDATE(),&#xd;	UPDATED_BY = :updatedBy&#xd;WHERE&#xd;    STTU_NO = :sttuNo AND&#xd;	BRANCH_CODE = :branchCode AND&#xd;	COMPANY_CODE = :companyCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sttuSts" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
   </query>
   <query id="getColumnLovRegion" useConfig="collectiondso1">
      <sql>select 1 as regionCode, 1 regionName</sql>
      <result element="Entries" rowName="">
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovRegion" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		a.region_code regionCode,&#xd;		b.branch_name regionName&#xd;	from getViewBranch() a&#xd;	left join mst_branch b&#xd;	on a.company_code = b.company_code and a.region_code = b.branch_code&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovRegion" useConfig="collectiondso1">
      <sql>select companyCode, regionCode, regionName from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		a.region_code regionCode,&#xd;		b.branch_name regionName&#xd;	from getViewBranch() a&#xd;	left join mst_branch b&#xd;	on a.company_code = b.company_code and a.region_code = b.branch_code&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovArea" useConfig="collectiondso1">
      <sql>select 1 as areaCode, 1 areaName</sql>
      <result element="Entries" rowName="">
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovArea" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		a.region_code regionCode,&#xd;		b.branch_name regionName,&#xd;		a.area_code areaCode,&#xd;		c.branch_name areaName&#xd;	from getViewBranch() a&#xd;	left join mst_branch b&#xd;	on a.company_code = b.company_code and a.region_code = b.branch_code&#xd;	left join mst_branch c&#xd;	on a.company_code = c.company_code and a.area_code = c.branch_code&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovArea" useConfig="collectiondso1">
      <sql>select companyCode, regionCode, regionName, areaCode, areaName from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		a.region_code regionCode,&#xd;		b.branch_name regionName,&#xd;		a.area_code areaCode,&#xd;		c.branch_name areaName&#xd;	from getViewBranch() a&#xd;	left join mst_branch b&#xd;	on a.company_code = b.company_code and a.region_code = b.branch_code&#xd;	left join mst_branch c&#xd;	on a.company_code = c.company_code and a.area_code = c.branch_code&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovDso" useConfig="collectiondso1">
      <sql>select 1 as dsoCode, 1 dsoName</sql>
      <result element="Entries" rowName="">
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovDso" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		a.region_code regionCode,&#xd;		b.branch_name regionName,&#xd;		a.area_code areaCode,&#xd;		c.branch_name areaName,&#xd;		a.dso_code dsoCode,&#xd;		d.branch_name dsoName&#xd;	from getViewBranch() a&#xd;	left join mst_branch b&#xd;	on a.company_code = b.company_code and a.region_code = b.branch_code&#xd;	left join mst_branch c&#xd;	on a.company_code = c.company_code and a.area_code = c.branch_code&#xd;	left join mst_branch d&#xd;	on a.company_code = d.company_code and a.dso_code = d.branch_code&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovDso" useConfig="collectiondso1">
      <sql>select companyCode, regionCode, regionName, areaCode, areaName, dsoCode, dsoName from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		a.region_code regionCode,&#xd;		b.branch_name regionName,&#xd;		a.area_code areaCode,&#xd;		c.branch_name areaName,&#xd;		a.dso_code dsoCode,&#xd;		d.branch_name dsoName&#xd;	from getViewBranch() a&#xd;	left join mst_branch b&#xd;	on a.company_code = b.company_code and a.region_code = b.branch_code&#xd;	left join mst_branch c&#xd;	on a.company_code = c.company_code and a.area_code = c.branch_code&#xd;	left join mst_branch d&#xd;	on a.company_code = d.company_code and a.dso_code = d.branch_code&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="regionCode" name="regionCode" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="areaCode" name="areaCode" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnLovStatusKontrak" useConfig="collectiondso1">
      <sql>select 1 as trxCode, 1 statusKontrak, 1 subStatusKontrak</sql>
      <result element="Entries" rowName="">
         <element column="trxCode" name="trxCode" xsdType="string"/>
         <element column="statusKontrak" name="statusKontrak" xsdType="string"/>
         <element column="subStatusKontrak" name="subStatusKontrak" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovStatusKontrak" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.trx_code trxCode,&#xd;		a.ar_sts arSts,&#xd;		isnull(a.sub_sts, '') subSts,&#xd;		a.notes statusKontrak,&#xd;		a.trx_name subStatusKontrak&#xd;	from mst_ar_sts a&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovStatusKontrak" useConfig="collectiondso1">
      <sql>select companyCode, trxCode, arSts, subSts, statusKontrak, subStatusKontrak from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.trx_code trxCode,&#xd;		a.ar_sts arSts,&#xd;		isnull(a.sub_sts, '') subSts,&#xd;		a.notes statusKontrak,&#xd;		a.trx_name subStatusKontrak&#xd;	from mst_ar_sts a&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="trxCode" name="trxCode" xsdType="string"/>
         <element column="arSts" name="arSts" xsdType="string"/>
         <element column="subSts" name="subSts" xsdType="string"/>
         <element column="statusKontrak" name="statusKontrak" xsdType="string"/>
         <element column="subStatusKontrak" name="subStatusKontrak" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getColumnReportPenerimaanAngsuranKelompok" useConfig="collectiondso1">
      <sql>select 1 as regu, 1 noKontrak, 1 namaDebitur, 1 tanggalDkh, 1 ratingName, 1 penyertaanKe, 1 penyertaanJumlah, 1 tanggalJatuhTempo, 1 angsuranKeDari, 1 angsuranKeSampai, 1 hadirBayarTunaiTanpaUtj, 1 tidakHadirBayarTunaiTanpaUtj, 1 hadirTidakBayarTunaiDgnUtj, 1 tidakHadirBayarTunaiDgnUTJ, 1 hadirTidakBayarTunaiTanpaUTJ, 1 tidakHadirTidakBayarTunaiTanpaUTJ, 1 hadirBayarTunaiDgnUTJ, 1 tidakHadirTidakBayarTunaiDgnUTJ, 1 nilaiAngsuran, 1 angsuranTertunggak, 1 sisaSaldo, 1 totalDitanggungUTJKelompok, 1 totalKehadiran, 1 totalPembayaranSendiriTunai, 1 saldoUTJAwal, 1 tungguPersetujuanBayaranDgnUTJ, 1 pemakaianUTJ, 1 setorUTJTunai, 1 persentaseKehadiran, 1 hasilAbsen, 1 keterangan1, 1 keterangan2, 1 hariTagih, 1 intervalPembayaran, 1 saldoUTJ, 1 tenor</sql>
      <result element="Entries" rowName="">
         <element column="regu" name="regu" xsdType="string"/>
         <element column="noKontrak" name="noKontrak" xsdType="string"/>
         <element column="namaDebitur" name="namaDebitur" xsdType="string"/>
         <element column="tanggalDkh" name="tanggalDkh" xsdType="string"/>
         <element column="ratingName" name="ratingName" xsdType="string"/>
         <element column="penyertaanKe" name="penyertaanKe" xsdType="string"/>
         <element column="penyertaanJumlah" name="penyertaanJumlah" xsdType="string"/>
         <element column="tanggalJatuhTempo" name="tanggalJatuhTempo" xsdType="string"/>
         <element column="angsuranKeDari" name="angsuranKeDari" xsdType="string"/>
         <element column="angsuranKeSampai" name="angsuranKeSampai" xsdType="string"/>
         <element column="hadirBayarTunaiTanpaUtj" name="hadirBayarTunaiTanpaUtj" xsdType="string"/>
         <element column="tidakHadirBayarTunaiTanpaUtj" name="tidakHadirBayarTunaiTanpaUtj" xsdType="string"/>
         <element column="hadirTidakBayarTunaiDgnUtj" name="hadirTidakBayarTunaiDgnUtj" xsdType="string"/>
         <element column="tidakHadirBayarTunaiDgnUTJ" name="tidakHadirBayarTunaiDgnUTJ" xsdType="string"/>
         <element column="hadirTidakBayarTunaiTanpaUTJ" name="hadirTidakBayarTunaiTanpaUTJ" xsdType="string"/>
         <element column="tidakHadirTidakBayarTunaiTanpaUTJ" name="tidakHadirTidakBayarTunaiTanpaUTJ" xsdType="string"/>
         <element column="hadirBayarTunaiDgnUTJ" name="hadirBayarTunaiDgnUTJ" xsdType="string"/>
         <element column="tidakHadirTidakBayarTunaiDgnUTJ" name="tidakHadirTidakBayarTunaiDgnUTJ" xsdType="string"/>
         <element column="nilaiAngsuran" name="nilaiAngsuran" xsdType="string"/>
         <element column="angsuranTertunggak" name="angsuranTertunggak" xsdType="string"/>
         <element column="sisaSaldo" name="sisaSaldo" xsdType="string"/>
         <element column="totalDitanggungUTJKelompok" name="totalDitanggungUTJKelompok" xsdType="string"/>
         <element column="totalKehadiran" name="totalKehadiran" xsdType="string"/>
         <element column="totalPembayaranSendiriTunai" name="totalPembayaranSendiriTunai" xsdType="string"/>
         <element column="saldoUTJAwal" name="saldoUTJAwal" xsdType="string"/>
         <element column="tungguPersetujuanBayaranDgnUTJ" name="tungguPersetujuanBayaranDgnUTJ" xsdType="string"/>
         <element column="pemakaianUTJ" name="pemakaianUTJ" xsdType="string"/>
         <element column="setorUTJTunai" name="setorUTJTunai" xsdType="string"/>
         <element column="persentaseKehadiran" name="persentaseKehadiran" xsdType="string"/>
         <element column="hasilAbsen" name="hasilAbsen" xsdType="string"/>
         <element column="keterangan1" name="keterangan1" xsdType="string"/>
         <element column="keterangan2" name="keterangan2" xsdType="string"/>
         <element column="hariTagih" name="hariTagih" xsdType="string"/>
         <element column="intervalPembayaran" name="intervalPembayaran" xsdType="string"/>
         <element column="saldoUTJ" name="saldoUTJ" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportPenerimaanAngsuranKelompok" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		regu,&#xd;		noKontrak,&#xd;		branchCode,&#xd;		groupCode,&#xd;		namaDebitur,&#xd;		ratingCode,&#xd;		tanggalDkh,&#xd;		ratingName,&#xd;		penyertaanKe,&#xd;		penyertaanJumlah,&#xd;		tanggalJatuhTempo,&#xd;		angsuranKeDari,&#xd;		angsuranKeSampai,&#xd;		isnull(hadirBayarTunaiTanpaUTJ, 0) hadirBayarTunaiTanpaUtj,&#xd;		isnull(tidakHadirBayarTunaiTanpaUTJ, 0) tidakHadirBayarTunaiTanpaUtj,&#xd;		isnull(hadirTidakBayarTunaiDgnUTJ, 0) hadirTidakBayarTunaiDgnUtj,&#xd;		isnull(tidakHadirBayarTunaiDgnUTJ, 0) tidakHadirBayarTunaiDgnUTJ,&#xd;		isnull(hadirTidakBayarTunaiTanpaUTJ, 0) hadirTidakBayarTunaiTanpaUTJ,&#xd;		isnull(tidakHadirTidakBayarTunaiTanpaUTJ, 0) tidakHadirTidakBayarTunaiTanpaUTJ,&#xd;		isnull(hadirBayarTunaiDgnUTJ, 0) hadirBayarTunaiDgnUTJ,&#xd;		isnull(tidakHadirTidakBayarTunaiDgnUTJ, 0) tidakHadirTidakBayarTunaiDgnUTJ,&#xd;		nilaiAngsuran,&#xd;		angsuranTertunggak,&#xd;		sisaSaldo,&#xd;		isnull(totalDitanggungUTJKelompok, 0) totalDitanggungUTJKelompok,&#xd;		totalKehadiran,&#xd;		isnull(totalPembayaranSendiriTunai, 0) totalPembayaranSendiriTunai,&#xd;		saldoUTJAwal,&#xd;		isnull(tungguPersetujuanBayaranDgnUTJ, 0) tungguPersetujuanBayaranDgnUTJ,&#xd;		isnull(pemakaianUTJ, 0) pemakaianUTJ,&#xd;		setorUTJTunai,&#xd;		persentaseKehadiran,&#xd;		hasilAbsen,&#xd;		keterangan1,&#xd;		keterangan2,&#xd;		hariTagih,&#xd;		intervalPembayaran,&#xd;		saldoUTJ,&#xd;		tenor&#xd;	from [dbo].[reportPenerimaanAngsKel](:companyCode,:productCode,:branchCode,:groupCode,:dkhFrom,:dkhTo)&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
      <param name="dkhFrom" sqlType="STRING"/>
      <param name="dkhTo" sqlType="STRING"/>
   </query>
   <query id="getDataReportPenerimaanAngsuranKelompok" useConfig="collectiondso1">
      <sql>select regu, noKontrak, branchCode, groupCode, namaDebitur, ratingCode, tanggalDkh, ratingName, penyertaanKe, penyertaanJumlah, tanggalJatuhTempo, angsuranKeDari, angsuranKeSampai, hadirBayarTunaiTanpaUtj, tidakHadirBayarTunaiTanpaUtj, hadirTidakBayarTunaiDgnUtj, tidakHadirBayarTunaiDgnUTJ, hadirTidakBayarTunaiTanpaUTJ, tidakHadirTidakBayarTunaiTanpaUTJ, hadirBayarTunaiDgnUTJ, tidakHadirTidakBayarTunaiDgnUTJ, nilaiAngsuran, angsuranTertunggak, sisaSaldo, totalDitanggungUTJKelompok, totalKehadiran, totalPembayaranSendiriTunai, saldoUTJAwal, tungguPersetujuanBayaranDgnUTJ, pemakaianUTJ, setorUTJTunai, persentaseKehadiran, hasilAbsen, keterangan1, keterangan2, hariTagih, intervalPembayaran, saldoUTJ, tenor from (&#xd;	select&#xd;		regu,&#xd;		noKontrak,&#xd;		branchCode,&#xd;		groupCode,&#xd;		namaDebitur,&#xd;		ratingCode,&#xd;		tanggalDkh,&#xd;		ratingName,&#xd;		penyertaanKe,&#xd;		penyertaanJumlah,&#xd;		tanggalJatuhTempo,&#xd;		angsuranKeDari,&#xd;		angsuranKeSampai,&#xd;		isnull(hadirBayarTunaiTanpaUTJ, 0) hadirBayarTunaiTanpaUtj,&#xd;		isnull(tidakHadirBayarTunaiTanpaUTJ, 0) tidakHadirBayarTunaiTanpaUtj,&#xd;		isnull(hadirTidakBayarTunaiDgnUTJ, 0) hadirTidakBayarTunaiDgnUtj,&#xd;		isnull(tidakHadirBayarTunaiDgnUTJ, 0) tidakHadirBayarTunaiDgnUTJ,&#xd;		isnull(hadirTidakBayarTunaiTanpaUTJ, 0) hadirTidakBayarTunaiTanpaUTJ,&#xd;		isnull(tidakHadirTidakBayarTunaiTanpaUTJ, 0) tidakHadirTidakBayarTunaiTanpaUTJ,&#xd;		isnull(hadirBayarTunaiDgnUTJ, 0) hadirBayarTunaiDgnUTJ,&#xd;		isnull(tidakHadirTidakBayarTunaiDgnUTJ, 0) tidakHadirTidakBayarTunaiDgnUTJ,&#xd;		nilaiAngsuran,&#xd;		angsuranTertunggak,&#xd;		sisaSaldo,&#xd;		isnull(totalDitanggungUTJKelompok, 0) totalDitanggungUTJKelompok,&#xd;		totalKehadiran,&#xd;		isnull(totalPembayaranSendiriTunai, 0) totalPembayaranSendiriTunai,&#xd;		saldoUTJAwal,&#xd;		isnull(tungguPersetujuanBayaranDgnUTJ, 0) tungguPersetujuanBayaranDgnUTJ,&#xd;		isnull(pemakaianUTJ, 0) pemakaianUTJ,&#xd;		setorUTJTunai,&#xd;		persentaseKehadiran,&#xd;		hasilAbsen,&#xd;		keterangan1,&#xd;		keterangan2,&#xd;		hariTagih,&#xd;		intervalPembayaran,&#xd;		saldoUTJ,&#xd;		tenor&#xd;	from [dbo].[reportPenerimaanAngsKel](:companyCode,:productCode,:branchCode,:groupCode,:dkhFrom,:dkhTo)&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="regu" name="regu" xsdType="string"/>
         <element column="noKontrak" name="noKontrak" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="namaDebitur" name="namaDebitur" xsdType="string"/>
         <element column="ratingCode" name="ratingCode" xsdType="string"/>
         <element column="tanggalDkh" name="tanggalDkh" xsdType="string"/>
         <element column="ratingName" name="ratingName" xsdType="string"/>
         <element column="penyertaanKe" name="penyertaanKe" xsdType="string"/>
         <element column="penyertaanJumlah" name="penyertaanJumlah" xsdType="string"/>
         <element column="tanggalJatuhTempo" name="tanggalJatuhTempo" xsdType="string"/>
         <element column="angsuranKeDari" name="angsuranKeDari" xsdType="string"/>
         <element column="angsuranKeSampai" name="angsuranKeSampai" xsdType="string"/>
         <element column="hadirBayarTunaiTanpaUtj" name="hadirBayarTunaiTanpaUtj" xsdType="string"/>
         <element column="tidakHadirBayarTunaiTanpaUtj" name="tidakHadirBayarTunaiTanpaUtj" xsdType="string"/>
         <element column="hadirTidakBayarTunaiDgnUtj" name="hadirTidakBayarTunaiDgnUtj" xsdType="string"/>
         <element column="tidakHadirBayarTunaiDgnUTJ" name="tidakHadirBayarTunaiDgnUTJ" xsdType="string"/>
         <element column="hadirTidakBayarTunaiTanpaUTJ" name="hadirTidakBayarTunaiTanpaUTJ" xsdType="string"/>
         <element column="tidakHadirTidakBayarTunaiTanpaUTJ" name="tidakHadirTidakBayarTunaiTanpaUTJ" xsdType="string"/>
         <element column="hadirBayarTunaiDgnUTJ" name="hadirBayarTunaiDgnUTJ" xsdType="string"/>
         <element column="tidakHadirTidakBayarTunaiDgnUTJ" name="tidakHadirTidakBayarTunaiDgnUTJ" xsdType="string"/>
         <element column="nilaiAngsuran" name="nilaiAngsuran" xsdType="string"/>
         <element column="angsuranTertunggak" name="angsuranTertunggak" xsdType="string"/>
         <element column="sisaSaldo" name="sisaSaldo" xsdType="string"/>
         <element column="totalDitanggungUTJKelompok" name="totalDitanggungUTJKelompok" xsdType="string"/>
         <element column="totalKehadiran" name="totalKehadiran" xsdType="string"/>
         <element column="totalPembayaranSendiriTunai" name="totalPembayaranSendiriTunai" xsdType="string"/>
         <element column="saldoUTJAwal" name="saldoUTJAwal" xsdType="string"/>
         <element column="tungguPersetujuanBayaranDgnUTJ" name="tungguPersetujuanBayaranDgnUTJ" xsdType="string"/>
         <element column="pemakaianUTJ" name="pemakaianUTJ" xsdType="string"/>
         <element column="setorUTJTunai" name="setorUTJTunai" xsdType="string"/>
         <element column="persentaseKehadiran" name="persentaseKehadiran" xsdType="string"/>
         <element column="hasilAbsen" name="hasilAbsen" xsdType="string"/>
         <element column="keterangan1" name="keterangan1" xsdType="string"/>
         <element column="keterangan2" name="keterangan2" xsdType="string"/>
         <element column="hariTagih" name="hariTagih" xsdType="string"/>
         <element column="intervalPembayaran" name="intervalPembayaran" xsdType="string"/>
         <element column="saldoUTJ" name="saldoUTJ" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
      <param name="dkhFrom" sqlType="STRING"/>
      <param name="dkhTo" sqlType="STRING"/>
   </query>
   <query id="printedTuOutHdr" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @PRINTED_BY varchar(20) = :printedBy&#xd;&#xd;update trx_tu_out_hdr set&#xd;	printed_by = @PRINTED_BY,&#xd;	printed_date = getdate(),&#xd;	updated_date = getdate(),&#xd;	updated_by = @PRINTED_BY&#xd;where&#xd;	company_code = :companyCode&#xd;and trx_no = :trxNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="printedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
   </query>
   <query id="callSpDkhRecalculate" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[DKH_RECALCULATE] &#xd;	(&#xd;		:companyCode,	&#xd;		:productCode,&#xd;		:dkhNo,&#xd;		:returnVal&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="getDataLovNopolMutasi" useConfig="collectiondso1">
      <sql>SELECT companyCode, branchCode, tuDepositNo, tuDepositDate, aggrNo, customerFullname, nopol, brandCode, brandName, categoryCode, categoryName, typeCode, typeName,&#xd;kindCode, kindName, modelCode, modelName, colorName, yearMfg, chassisNo, machineNo, stnkName, km, stnkExpiredDate, locReceiptCode, locReceiptCodeName,  &#xd;locCode, locCodeName, sisaAngsuranPokok, nilaiBiayaPenyelesaian, perkiraanHargaJual, bpkbNo, arStsName, subStsName, penaltyTuValue, tuCost, priceValue, marketPriceAreaCode, marketModelCode, marketNewUsed, marketYearMfg, marketEffectiveDate, depositSts, inventorySts, dsoCode, bpkbSts, bpkbLocation, stsOutUnit FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		B.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.TU_DEPOSIT_DATE tuDepositDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.NOPOL nopol,&#xd;		C.BRAND_CODE brandCode,&#xd;		D.BRAND_NAME brandName,&#xd;		D.CATEGORY_CODE categoryCode,&#xd;		E.PARAM_DESCRIP categoryName,&#xd;		C.TYPE_CODE typeCode,&#xd;		F.TYPE_NAME typeName,&#xd;		F.KIND_CODE kindCode,&#xd;		G.KIND_NAME kindName,&#xd;		C.MODEL_CODE modelCode,&#xd;		H.MODEL_NAME modelName,&#xd;		I.COLOR_NAME colorName,&#xd;		C.YEAR_MFG yearMfg,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo,&#xd;		C.BPKB_NAME stnkName,&#xd;		A.KM km,&#xd;		A.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;		A.LOC_RECEIPT_CODE locReceiptCode,&#xd;		LRC.BRANCH_NAME locReceiptCodeName,&#xd;		A.LOC_CODE locCode,&#xd;		LC.BRANCH_NAME locCodeName,&#xd;		(A.BAL_PRINCIPAL_VALUE) as sisaAngsuranPokok,&#xd;		(A.TU_COST + A.PENALTY_TU_VALUE) as nilaiBiayaPenyelesaian,&#xd;		(A.BAL_PRINCIPAL_VALUE) + (A.TU_COST + A.PENALTY_TU_VALUE) as perkiraanHargaJual,&#xd;		C.BPKB_NO bpkbNo,&#xd;		K.TRX_NAME arStsName,&#xd;		K.NOTES subStsName,&#xd;		A.PENALTY_TU_VALUE penaltyTuValue,&#xd;		A.TU_COST tuCost,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PRICE_VALUE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as priceValue,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.PRICE_AREA_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketPriceAreaCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.MODEL_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketModelCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.NEW_USED&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketNewUsed,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.YEAR_MFG&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketYearMfg,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.EFFECTIVE_DATE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketEffectiveDate,&#xd;		A.DEPOSIT_STS depositSts,&#xd;		ISNULL(J.INVENTORY_STS, '') inventorySts,&#xd;		L.DSO_CODE dsoCode,&#xd;		M.BPKB_LOCATION bpkbLocation,&#xd;		N.PARAM_DESCRIP bpkbSts,&#xd;		(	CASE&#xd;				WHEN O.AGGR_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_TU_DEPOSIT A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN TRX_AGGR_ASSET C (nolock)&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND D (nolock)&#xd;	ON C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E (nolock)&#xd;	ON D.CATEGORY_CODE = E.PARAM_CODE AND E.CONDITION = 'CATEGORY_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE F (nolock)&#xd;	ON C.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND G (nolock)&#xd;	ON F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_MODEL H (nolock)&#xd;	ON C.MODEL_CODE = H.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR I (nolock)&#xd;	ON C.COLOR_CODE = I.COLOR_CODE&#xd;	LEFT JOIN TRX_INVENTORY_TU J (nolock)&#xd;	ON A.TU_DEPOSIT_NO = J.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH LRC (nolock)&#xd;	ON A.LOC_RECEIPT_CODE = LRC.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH LC (nolock)&#xd;	ON A.LOC_CODE = LC.BRANCH_CODE&#xd;	LEFT JOIN MST_AR_STS K (nolock)&#xd;	ON B.AR_STS = K.AR_STS AND ISNULL(B.SUB_STS, '') = ISNULL(K.SUB_STS, '')&#xd;	LEFT JOIN MST_BRANCH L (nolock)&#xd;	ON A.COMPANY_CODE = L.COMPANY_CODE AND A.BRANCH_CODE = L.BRANCH_CODE&#xd;	LEFT JOIN MST_BPKB M (nolock)&#xd;	ON B.COMPANY_CODE = M.COMPANY_CODE AND B.AGGR_NO = M.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM N (nolock)&#xd;	ON M.COMPANY_CODE = N.COMPANY_CODE AND M.BPKB_STS = N.PARAM_CODE AND N.CONDITION = 'BPKB_STS' AND N.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_DTL O (nolock)&#xd;	ON B.COMPANY_CODE = O.COMPANY_CODE AND B.AGGR_NO = O.AGGR_NO&#xd;	WHERE NOT EXISTS (SELECT 1 FROM TRX_TU_MUTASI_DTL DTL (nolock) JOIN TRX_TU_MUTASI_HDR HDR (nolock) ON DTL.TRX_NO = HDR.TRX_NO WHERE HDR.TRX_STS IN ('001','002') AND DTL.TU_DEPOSIT_NO= A.TU_DEPOSIT_NO) AND B.AR_STS != 'LN'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="tuDepositDate" name="tuDepositDate" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="locReceiptCode" name="locReceiptCode" xsdType="string"/>
         <element column="locReceiptCodeName" name="locReceiptCodeName" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locCodeName" name="locCodeName" xsdType="string"/>
         <element column="sisaAngsuranPokok" name="sisaAngsuranPokok" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="perkiraanHargaJual" name="perkiraanHargaJual" xsdType="string"/>
         <element column="bpkbNo" name="bpkbNo" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="priceValue" name="priceValue" xsdType="string"/>
         <element column="marketPriceAreaCode" name="marketPriceAreaCode" xsdType="string"/>
         <element column="marketModelCode" name="marketModelCode" xsdType="string"/>
         <element column="marketNewUsed" name="marketNewUsed" xsdType="string"/>
         <element column="marketYearMfg" name="marketYearMfg" xsdType="string"/>
         <element column="marketEffectiveDate" name="marketEffectiveDate" xsdType="string"/>
         <element column="depositSts" name="depositSts" xsdType="string"/>
         <element column="inventorySts" name="inventorySts" xsdType="string"/>
         <element column="dsoCode" name="dsoCode" xsdType="string"/>
         <element column="bpkbSts" name="bpkbSts" xsdType="string"/>
         <element column="bpkbLocation" name="bpkbLocation" xsdType="string"/>
         <element column="stsOutUnit" name="stsOutUnit" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="getCountLovNopolMutasi" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		B.BRANCH_CODE branchCode,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.TU_DEPOSIT_DATE tuDepositDate,&#xd;		A.AGGR_NO aggrNo,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		C.NOPOL nopol,&#xd;		C.BRAND_CODE brandCode,&#xd;		D.BRAND_NAME brandName,&#xd;		D.CATEGORY_CODE categoryCode,&#xd;		E.PARAM_DESCRIP categoryName,&#xd;		C.TYPE_CODE typeCode,&#xd;		F.TYPE_NAME typeName,&#xd;		F.KIND_CODE kindCode,&#xd;		G.KIND_NAME kindName,&#xd;		C.MODEL_CODE modelCode,&#xd;		H.MODEL_NAME modelName,&#xd;		I.COLOR_NAME colorName,&#xd;		C.YEAR_MFG yearMfg,&#xd;		C.CHASSIS_NO chassisNo,&#xd;		C.MACHINE_NO machineNo,&#xd;		C.BPKB_NAME stnkName,&#xd;		A.KM km,&#xd;		A.STNK_EXPIRED_DATE stnkExpiredDate,&#xd;		A.LOC_RECEIPT_CODE locReceiptCode,&#xd;		LRC.BRANCH_NAME locReceiptCodeName,&#xd;		A.LOC_CODE locCode,&#xd;		LC.BRANCH_NAME locCodeName,&#xd;		(A.BAL_PRINCIPAL_VALUE) as sisaAngsuranPokok,&#xd;		(A.TU_COST + A.PENALTY_TU_VALUE) as nilaiBiayaPenyelesaian,&#xd;		(A.BAL_PRINCIPAL_VALUE) + (A.TU_COST + A.PENALTY_TU_VALUE) as perkiraanHargaJual,&#xd;		C.BPKB_NO bpkbNo,&#xd;		K.TRX_NAME arStsName,&#xd;		K.NOTES subStsName,&#xd;		A.PENALTY_TU_VALUE penaltyTuValue,&#xd;		A.TU_COST tuCost,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PRICE_VALUE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as priceValue,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.PRICE_AREA_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketPriceAreaCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.MODEL_CODE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketModelCode,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.NEW_USED&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketNewUsed,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.YEAR_MFG&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketYearMfg,&#xd;		(&#xd;			SELECT TOP 1&#xd;				PC.EFFECTIVE_DATE&#xd;			FROM MST_PRICE PC (nolock)&#xd;			LEFT JOIN MST_PRICE_AREA_HDR PCH (nolock)&#xd;			ON PC.PRICE_AREA_CODE = PCH.PRICE_AREA_CODE AND PC.COMPANY_CODE = PCH.COMPANY_CODE &#xd;			LEFT JOIN MST_PRICE_AREA_DTL PCD (nolock)&#xd;			ON PCH.PRICE_AREA_CODE = PCD.PRICE_AREA_CODE AND PCH.COMPANY_CODE = PCD.COMPANY_CODE&#xd;			WHERE PC.COMPANY_CODE = C.COMPANY_CODE AND PC.MODEL_CODE = C.MODEL_CODE AND PCD.BRANCH_CODE = C.BRANCH_CODE AND&#xd;			PC.YEAR_MFG = C.YEAR_MFG AND PC.NEW_USED = 'U' AND PC.EFFECTIVE_DATE &lt;= GETDATE() ORDER BY PC.EFFECTIVE_DATE DESC&#xd;		) as marketEffectiveDate,&#xd;		A.DEPOSIT_STS depositSts,&#xd;		ISNULL(J.INVENTORY_STS, '') inventorySts,&#xd;		L.DSO_CODE dsoCode,&#xd;		M.BPKB_LOCATION bpkbLocation,&#xd;		N.PARAM_DESCRIP bpkbSts,&#xd;		(	CASE&#xd;				WHEN O.AGGR_NO IS NULL THEN 'Tidak'&#xd;				ELSE 'Iya'&#xd;			END&#xd;		) as stsOutUnit&#xd;	FROM TRX_TU_DEPOSIT A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN TRX_AGGR_ASSET C (nolock)&#xd;	ON B.AGGR_NO = C.AGGR_NO&#xd;	LEFT JOIN MST_BRAND D (nolock)&#xd;	ON C.BRAND_CODE = D.BRAND_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM E (nolock)&#xd;	ON D.CATEGORY_CODE = E.PARAM_CODE AND E.CONDITION = 'CATEGORY_CODE' AND E.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_TYPE F (nolock)&#xd;	ON C.TYPE_CODE = F.TYPE_CODE&#xd;	LEFT JOIN MST_KIND G (nolock)&#xd;	ON F.KIND_CODE = G.KIND_CODE&#xd;	LEFT JOIN MST_MODEL H (nolock)&#xd;	ON C.MODEL_CODE = H.MODEL_CODE&#xd;	LEFT JOIN MST_COLOR I (nolock)&#xd;	ON C.COLOR_CODE = I.COLOR_CODE&#xd;	LEFT JOIN TRX_INVENTORY_TU J (nolock)&#xd;	ON A.TU_DEPOSIT_NO = J.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH LRC (nolock)&#xd;	ON A.LOC_RECEIPT_CODE = LRC.BRANCH_CODE&#xd;	LEFT JOIN MST_BRANCH LC (nolock)&#xd;	ON A.LOC_CODE = LC.BRANCH_CODE&#xd;	LEFT JOIN MST_AR_STS K (nolock)&#xd;	ON B.AR_STS = K.AR_STS AND ISNULL(B.SUB_STS, '') = ISNULL(K.SUB_STS, '')&#xd;	LEFT JOIN MST_BRANCH L (nolock)&#xd;	ON A.COMPANY_CODE = L.COMPANY_CODE AND A.BRANCH_CODE = L.BRANCH_CODE&#xd;	LEFT JOIN MST_BPKB M (nolock)&#xd;	ON B.COMPANY_CODE = M.COMPANY_CODE AND B.AGGR_NO = M.AGGR_NO&#xd;	LEFT JOIN MST_GLOBAL_PARAM N (nolock)&#xd;	ON M.COMPANY_CODE = N.COMPANY_CODE AND M.BPKB_STS = N.PARAM_CODE AND N.CONDITION = 'BPKB_STS' AND N.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN TRX_TU_OUT_DTL O (nolock)&#xd;	ON B.COMPANY_CODE = O.COMPANY_CODE AND B.AGGR_NO = O.AGGR_NO&#xd;	WHERE NOT EXISTS (SELECT 1 FROM TRX_TU_MUTASI_DTL DTL (nolock) JOIN TRX_TU_MUTASI_HDR HDR (nolock) ON DTL.TRX_NO = HDR.TRX_NO WHERE HDR.TRX_STS IN ('001','002') AND DTL.TU_DEPOSIT_NO= A.TU_DEPOSIT_NO) AND B.AR_STS != 'LN'&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getColumnLovNopolMutasi" useConfig="collectiondso1">
      <sql>SELECT 1 companyCode, 1 branchCode, 1 tuDepositNo, 1 aggrNo, 1 customerFullname, 1 nopol, 1 brandCode, 1 brandName, 1 categoryCode,1 categoryName, 1 typeCode, 1 typeName,&#xd;1 kindCode, 1 kindName, 1 modelCode, 1 modelName,1 colorName, 1 yearMfg, 1 chassisNo, 1 machineNo, 1 stnkName, 1 km, 1 stnkExpiredDate, 1 locReceiptCode,  1 locReceiptCodeName,  &#xd;1 locCode, 1 locCodeName, 1 sisaAngsuranPokok, 1 nilaiBiayaPenyelesaian, 1 perkiraanHargaJual,  1 bpkbNo, 1 arStsName, 1 subStsName, 1 penaltyTuValue, 1 tuCost, 1 priceValue</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="brandCode" name="brandCode" xsdType="string"/>
         <element column="brandName" name="brandName" xsdType="string"/>
         <element column="categoryCode" name="categoryCode" xsdType="string"/>
         <element column="categoryName" name="categoryName" xsdType="string"/>
         <element column="typeCode" name="typeCode" xsdType="string"/>
         <element column="typeName" name="typeName" xsdType="string"/>
         <element column="kindCode" name="kindCode" xsdType="string"/>
         <element column="kindName" name="kindName" xsdType="string"/>
         <element column="modelCode" name="modelCode" xsdType="string"/>
         <element column="modelName" name="modelName" xsdType="string"/>
         <element column="colorName" name="colorName" xsdType="string"/>
         <element column="yearMfg" name="yearMfg" xsdType="string"/>
         <element column="chassisNo" name="chassisNo" xsdType="string"/>
         <element column="machineNo" name="machineNo" xsdType="string"/>
         <element column="stnkName" name="stnkName" xsdType="string"/>
         <element column="km" name="km" xsdType="string"/>
         <element column="stnkExpiredDate" name="stnkExpiredDate" xsdType="string"/>
         <element column="locReceiptCode" name="locReceiptCode" xsdType="string"/>
         <element column="locReceiptCodeName" name="locReceiptCodeName" xsdType="string"/>
         <element column="locCode" name="locCode" xsdType="string"/>
         <element column="locCodeName" name="locCodeName" xsdType="string"/>
         <element column="sisaAngsuranPokok" name="sisaAngsuranPokok" xsdType="string"/>
         <element column="nilaiBiayaPenyelesaian" name="nilaiBiayaPenyelesaian" xsdType="string"/>
         <element column="perkiraanHargaJual" name="perkiraanHargaJual" xsdType="string"/>
         <element column="bpkbNo" name="bpkbNo" xsdType="string"/>
         <element column="arStsName" name="arStsName" xsdType="string"/>
         <element column="subStsName" name="subStsName" xsdType="string"/>
         <element column="penaltyTuValue" name="penaltyTuValue" xsdType="string"/>
         <element column="tuCost" name="tuCost" xsdType="string"/>
         <element column="priceValue" name="priceValue" xsdType="string"/>
      </result>
   </query>
   <query id="getColumLovCabangAsalMutasi" useConfig="collectiondso1">
      <sql>select 1 as branchCode, 1 branchName</sql>
      <result element="Entries" rowName="">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovCabangAsalMutasi" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) total FROM (&#xd;SELECT DISTINCT companyCode, branchCode, branchName FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.LOC_CODE branchCode,&#xd;		BR.BRANCH_NAME branchName,&#xd;		--B.BRANCH_CODE branchCodeAggr,&#xd;		(select B.BRANCH_CODE from trx_aggr B (nolock) where A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE=B.COMPANY_CODE) branchCodeAggr,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.DEPOSIT_STS depositSts,&#xd;		ISNULL(J.INVENTORY_STS, '') inventorySts&#xd;	FROM TRX_TU_DEPOSIT A (nolock)&#xd;	--LEFT JOIN TRX_AGGR B&#xd;	--ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_INVENTORY_TU J (nolock)&#xd;	ON A.TU_DEPOSIT_NO = J.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH BR (nolock)&#xd;	ON A.COMPANY_CODE = BR.COMPANY_CODE AND A.LOC_CODE = BR.BRANCH_CODE&#xd;	WHERE NOT EXISTS (SELECT 1 FROM TRX_TU_MUTASI_DTL DTL JOIN TRX_TU_MUTASI_HDR HDR ON DTL.TRX_NO = HDR.TRX_NO WHERE DTL.TU_DEPOSIT_NO=A.TU_DEPOSIT_NO AND HDR.TRX_STS IN ('001','002')) AND A.DEPOSIT_STS IN ('1','2','3','4') AND ISNULL(J.INVENTORY_STS, '') NOT IN ('3','4') AND ISNULL(A.LOC_CODE, '') != ''&#xd;) a WHERE :search :filter&#xd;) b</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovCabangAsalMutasi" useConfig="collectiondso1">
      <sql>SELECT DISTINCT companyCode, branchCode, branchName FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.LOC_CODE branchCode,&#xd;		BR.BRANCH_NAME branchName,&#xd;		--B.BRANCH_CODE branchCodeAggr,&#xd;		(select B.BRANCH_CODE from trx_aggr B (nolock) where A.AGGR_NO = B.AGGR_NO AND A.COMPANY_CODE=B.COMPANY_CODE) branchCodeAggr,&#xd;		A.TU_DEPOSIT_NO tuDepositNo,&#xd;		A.DEPOSIT_STS depositSts,&#xd;		ISNULL(J.INVENTORY_STS, '') inventorySts&#xd;	FROM TRX_TU_DEPOSIT A (nolock)&#xd;	--LEFT JOIN TRX_AGGR B&#xd;	--ON A.AGGR_NO = B.AGGR_NO&#xd;	LEFT JOIN TRX_INVENTORY_TU J (nolock)&#xd;	ON A.TU_DEPOSIT_NO = J.TU_DEPOSIT_NO&#xd;	LEFT JOIN MST_BRANCH BR (nolock)&#xd;	ON A.COMPANY_CODE = BR.COMPANY_CODE AND A.LOC_CODE = BR.BRANCH_CODE&#xd;	WHERE NOT EXISTS (SELECT 1 FROM TRX_TU_MUTASI_DTL DTL JOIN TRX_TU_MUTASI_HDR HDR ON DTL.TRX_NO = HDR.TRX_NO WHERE DTL.TU_DEPOSIT_NO=A.TU_DEPOSIT_NO AND HDR.TRX_STS IN ('001','002')) AND A.DEPOSIT_STS IN ('1','2','3','4') AND ISNULL(J.INVENTORY_STS, '') NOT IN ('3','4') AND ISNULL(A.LOC_CODE, '') != ''&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="updateTuDepositValidasiMutasi" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(50) = :companyCode&#xd;DECLARE @TRX_NO VARCHAR(50) = :trxNo&#xd;&#xd;&#xd;UPDATE TRX_TU_DEPOSIT SET&#xd;	LOC_CODE = (SELECT BRANCH_TO FROM TRX_TU_MUTASI_HDR WHERE TRX_NO = @TRX_NO)&#xd;WHERE COMPANY_CODE = @COMPANY_CODE&#xd;AND TU_DEPOSIT_NO IN (SELECT TU_DEPOSIT_NO FROM TRX_TU_MUTASI_DTL WHERE TRX_NO = @TRX_NO)&#xd;&#xd;UPDATE TRX_INVENTORY_TU SET&#xd;	LOC_CODE = (SELECT BRANCH_TO FROM TRX_TU_MUTASI_HDR WHERE TRX_NO = @TRX_NO)&#xd;WHERE COMPANY_CODE = @COMPANY_CODE&#xd;AND TU_DEPOSIT_NO IN (SELECT TU_DEPOSIT_NO FROM TRX_TU_MUTASI_DTL WHERE TRX_NO = @TRX_NO)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="trxNo" sqlType="STRING"/>
   </query>
   <query id="getDataCollectorTujuan" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BUCKET_CODE varchar(20) = :bucketTujuan&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;select companyCode, branchCode, collCode, collName, structurType from (&#xd;	select TOP 1&#xd;		col.company_code companyCode,&#xd;		col.branch_code branchCode,&#xd;		col.coll_code collCode,&#xd;		em.fullname collName,&#xd;		br.structure_type structurType&#xd;	from mst_collector col&#xd;	join trx_aggr agg&#xd;	on col.company_code = agg.company_code and col.product_code = agg.product_code&#xd;	left join getViewBRanch() vb&#xd;	on agg.company_code = vb.company_code and agg.branch_code = vb.branch_code&#xd;	left join mst_branch br&#xd;	on col.company_code = br.company_code and col.branch_code = br.branch_code&#xd;	left join mst_employee em&#xd;	on col.company_code = em.company_code and col.coll_code = em.nik&#xd;	where agg.company_code = @COMPANY_CODE and agg.aggr_no = @AGGR_NO &#xd;	and col.bucket_code = @BUCKET_CODE &#xd;	and col.bucket_type = 'FCOL' &#xd;	and col.flag_active = '1' &#xd;	and col.branch_code in (agg.branch_code,vb.dso_code)&#xd;	order by br.structure_type desc&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="structurType" name="structurType" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="bucketTujuan" sqlType="STRING"/>
   </query>
   <query id="getPimpinanCabang" useConfig="collectiondso1">
      <sql>select companyCode, nik, fullName, positionCode, positionName from (&#xd;	select&#xd;		br.company_code companyCode,&#xd;		em.nik nik,&#xd;		em.fullname fullName,&#xd;		em.position_code positionCode,&#xd;		po.position_name positionName&#xd;	from mst_branch br&#xd;	join mst_employee em&#xd;	on br.company_code = em.company_code and br.manager_code = em.position_code and br.branch_code = em.branch_code&#xd;	join mst_position po&#xd;	on em.company_code = po.company_code and em.position_code = po.position_code&#xd;	where br.company_code = :companyCode and br.branch_code = :branchCode&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="nik" name="nik" xsdType="string"/>
         <element column="fullName" name="fullName" xsdType="string"/>
         <element column="positionCode" name="positionCode" xsdType="string"/>
         <element column="positionName" name="positionName" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="updateSolvingDocRevisi" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DELETE FROM TRX_TU_SOLVING_DOC&#xd;WHERE&#xd;        COMPANY_CODE = :companyCode AND&#xd;        BRANCH_CODE = :branchCode AND&#xd;        TU_DEPOSIT_NO = :tuDepositNo AND&#xd;		TU_SOLVING_DATE = :tuSolvingDate</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
   </query>
   <query id="getColumnLovKolektorEksternal" useConfig="collectiondso1">
      <sql>select 1 as companyCode, 1 extCollCode, 1 extCollName, 1 address, 1 picName, 1 noPhone</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="extCollCode" name="extCollCode" xsdType="string"/>
         <element column="extCollName" name="extCollName" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="picName" name="picName" xsdType="string"/>
         <element column="noPhone" name="noPhone" xsdType="string"/>
      </result>
   </query>
   <query id="getCountLovKolektorEksternal" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select distinct companyCode, extCollCode, extCollName, address, picName, noPhone from (&#xd;		select&#xd;			ext.company_code companyCode,&#xd;			ext.ext_coll_code extCollCode,&#xd;			ext.ext_coll_name extCollName,&#xd;			ext.address address,&#xd;			ext.pic_name picName,&#xd;			concat(ext.area_code_phone1,'-',ext.phone_no1) noPhone,&#xd;			br.branch_code branchCode&#xd;		from mst_ext_coll ext&#xd;		left join mst_ext_coll_branch br&#xd;		on ext.company_code = br.company_code and ext.ext_coll_code = br.ext_coll_code&#xd;		where ext.flag_active = '1' and br.flag_active = '1'&#xd;	) a WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataLovKolektorEksternal" useConfig="collectiondso1">
      <sql>select distinct companyCode, extCollCode, extCollName, address, picName, noPhone from (&#xd;	select&#xd;		ext.company_code companyCode,&#xd;		ext.ext_coll_code extCollCode,&#xd;		ext.ext_coll_name extCollName,&#xd;		ext.address address,&#xd;		ext.pic_name picName,&#xd;		concat(ext.area_code_phone1,'-',ext.phone_no1) noPhone,&#xd;		br.branch_code branchCode&#xd;	from mst_ext_coll ext&#xd;	left join mst_ext_coll_branch br&#xd;	on ext.company_code = br.company_code and ext.ext_coll_code = br.ext_coll_code&#xd;	where ext.flag_active = '1' and br.flag_active = '1'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="extCollCode" name="extCollCode" xsdType="string"/>
         <element column="extCollName" name="extCollName" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="picName" name="picName" xsdType="string"/>
         <element column="noPhone" name="noPhone" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="listExpiredPenyelesaianPerpanjangan" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, tuDepositNo, tuSolvingDate, hiePositionVersion from (	&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.tu_deposit_no tuDepositNo,&#xd;		a.tu_solving_date tuSolvingDate,&#xd;		c.hie_position_version hiePositionVersion&#xd;	from trx_tu_solving a&#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,&#xd;					trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT117'&#xd;		) b&#xd;		on a.company_code	= b.companyCode &#xd;		and a.tu_deposit_no	= b.trxCode&#xd;		and a.tu_solving_type = '1'&#xd;	join trx_approval c&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts = 'APPR'&#xd;	and a.company_code = c.company_code and a.tu_deposit_no = c.trx_code&#xd;	where a.inventory_date_old = DATEADD(day, 1, :eodDate) and a.appv_sts in ('APPR')&#xd;) a where companyCode = :companyCode and branchCode = :branchCode order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="tuSolvingDate" name="tuSolvingDate" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="listExpiredPenyelesaianPercepatan" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, tuDepositNo, tuSolvingDate, hiePositionVersion from (	&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.tu_deposit_no tuDepositNo,&#xd;		a.tu_solving_date tuSolvingDate,&#xd;		c.hie_position_version hiePositionVersion&#xd;	from trx_tu_solving a&#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,&#xd;					trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT117'&#xd;		) b&#xd;		on a.company_code	= b.companyCode &#xd;		and a.tu_deposit_no	= b.trxCode&#xd;		and a.tu_solving_type = '3'&#xd;	join trx_approval c&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts = 'APPR'&#xd;	and a.company_code = c.company_code and a.tu_deposit_no = c.trx_code&#xd;	where a.inventory_date_new = DATEADD(day, 1, :eodDate) and a.appv_sts in ('APPR')&#xd;) a where companyCode = :companyCode and branchCode = :branchCode order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="tuSolvingDate" name="tuSolvingDate" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="updateExpiredPenyelesaianTarikUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>update trx_tu_solving set&#xd;	appv_sts = :appvSts,&#xd;	appv_date = getdate(),&#xd;	update_date = getdate(),&#xd;	update_by = 'K2'&#xd;where company_code = :companyCode and tu_deposit_no = :tuDepositNo and tu_solving_date = :tuSolvingDate</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
   </query>
   <query id="listExpiredPindahBaketPermanen" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, trxCode, hiePositionVersion from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.trx_no trxCode,&#xd;		C.hie_position_version hiePositionVersion&#xd;	from trx_coll_move_bucket a&#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,&#xd;					trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT114'&#xd;		) b&#xd;		on a.company_code	= b.companyCode &#xd;		and a.trx_no		= b.trxCode&#xd;	left join trx_approval c&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts in ('APPR','REVS')&#xd;	and a.company_code = c.company_code and a.trx_no = c.trx_code&#xd;	where DATEADD(day, 1, :eodDate) &gt;= cast(a.effective_date as date) and a.apprv_sts in ('APPR','REVS') and a.trx_sts = '0'&#xd;) a where companyCode = :companyCode and branchCode = :branchCode order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="trxCode" name="trxCode" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="updateExpiredPindahBaket" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>update trx_coll_move_bucket set&#xd;	apprv_sts = :appvSts,&#xd;	apprv_date = getdate(),&#xd;	updated_date = getdate(),&#xd;	updated_by = 'K2'&#xd;where company_code = :companyCode and trx_no = :trxCode</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="appvSts" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="trxCode" optional="false" sqlType="STRING"/>
   </query>
   <query id="listExpiredPenjualanUnit" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, sellNo, hiePositionVersion from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.sell_no sellNo,&#xd;		C.hie_position_version hiePositionVersion&#xd;	from trx_sell_hdr a&#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,&#xd;					trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT119'&#xd;		) b&#xd;		on a.company_code	= b.companyCode &#xd;		and a.sell_no		= b.trxCode&#xd;	left join trx_approval c&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts in ('APPR','REVS')&#xd;	and a.company_code = c.company_code and a.sell_no = c.trx_code&#xd;	where a.expired_date &lt;= DATEADD(day, 1, :eodDate) and a.sell_sts in ('APPR','REVS')&#xd;) a where companyCode = :companyCode and branchCode = :branchCode order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="sellNo" name="sellNo" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="updateExpiredPenjualanUnit" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>update trx_sell_hdr set&#xd;	sell_sts = :sellSts,&#xd;	update_date = getdate(),&#xd;	update_by = 'K2'&#xd;where company_code = :companyCode and sell_no = :sellNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="sellSts" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
   </query>
   <query id="checkPrepaymentHdr" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;select companyCode, prepaymentNo, aggrNo from (&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.prepayment_no prepaymentNo,&#xd;		a.aggr_no aggrNo&#xd;	from trx_prepayment_hdr a&#xd;	where a.appv_sts in ('OPEN','APPR','APPD')&#xd;) a where companyCode = @COMPANY_CODE and aggrNo = @AGGR_NO</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="prepaymentNo" name="prepaymentNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="getColumnDetailMstCollAreaDtl" useConfig="collectiondso1">
      <sql>select 1 as companyCode</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountDetailMstCollAreaDtl" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(50)	= :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(50)	= :branchCode&#xd;DECLARE @PRODUCT_CODE VARCHAR(50)	= :productCode&#xd;DECLARE @BUCKET_CODE VARCHAR(50)	= :bucketCode&#xd;DECLARE @EFFECTIVE_DATE VARCHAR(50) = :effectiveDate&#xd;&#xd;SELECT COUNT(*) as total from (&#xd;	SELECT companyCode, branchCode, branchName, productCode, productName, bucketCode, bucketName, effectiveDate, villageCode, villageName, subdistrictName, totalAggr, qtyAggrNo,&#xd;	collCode, fullnameColl, collCodeDay, collDayName FROM (&#xd;			SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			B.BRANCH_NAME branchName,&#xd;			A.PRODUCT_CODE productCode,&#xd;			C.PARAM_DESCRIP productName,&#xd;			A.BUCKET_CODE bucketCode,&#xd;			D.DESCRIPTION bucketName,&#xd;			A.EFFECTIVE_DATE effectiveDate,&#xd;			A.VILLAGE_CODE villageCode,&#xd;			E.VILLAGE_NAME villageName,&#xd;			F.SUBDISTRICT_NAME subdistrictName,&#xd;			ISNULL(I.TOT_AGGR, 0) totalAggr,&#xd;			ISNULL(A.QTY_AGGR_NO, 0) qtyAggrNo,&#xd;			A.COLL_CODE collCode,&#xd;			G.FULLNAME fullnameColl,&#xd;			A.COLL_DAY_CODE collCodeDay,&#xd;			H.DESCRIPTION collDayName&#xd;		FROM MST_COLL_AREA_DTL A&#xd;		LEFT JOIN MST_BRANCH B&#xd;		ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM C&#xd;		ON A.PRODUCT_CODE = C.PARAM_CODE AND C.CONDITION = 'PRODUCT_CODE' AND C.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_BUCKET D&#xd;		ON A.BUCKET_CODE = D.BUCKET_CODE AND BUCKET_TYPE = 'FCOL' AND A.PRODUCT_CODE = D.PRODUCT_CODE&#xd;		LEFT JOIN MST_VILLAGE E&#xd;		ON A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT F&#xd;		ON E.SUBDISTRICT_CODE = F.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_EMPLOYEE G&#xd;		ON A.COLL_CODE = G.NIK&#xd;		LEFT JOIN MST_COLL_DAY_HDR H&#xd;		ON A.COLL_DAY_CODE = H.COLL_DAY_CODE AND A.PRODUCT_CODE = H.PRODUCT_CODE&#xd;		LEFT JOIN MST_TOTAL_AGGR I&#xd;		ON A.COMPANY_CODE = I.COMPANY_CODE AND A.BRANCH_CODE = I.BRANCH_CODE AND A.VILLAGE_CODE = I.VILLAGE_CODE&#xd;		WHERE A.COMPANY_CODE = @COMPANY_CODE AND A.BRANCH_CODE = @BRANCH_CODE AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BUCKET_CODE = @BUCKET_CODE AND A.EFFECTIVE_DATE = @EFFECTIVE_DATE&#xd;&#xd;		UNION ALL&#xd;&#xd;		select &#xd;			A.company_code companyCode, &#xd;			A.branch_code branchCode,&#xd;			(select '') as branchName,&#xd;			A.product_code productCode,&#xd;			C.param_descrip productName,&#xd;			(select '') as bucketCode,&#xd;			(select '') as bucketName,&#xd;			(select '') as effectiveDate,&#xd;			A.village_code villageCode, &#xd;			B.village_name villageName,&#xd;			D.subdistrict_name subdistrictName,&#xd;			ISNULL(E.tot_aggr, 0) totalAggr,&#xd;			(select 0) as qtyAggrNo,&#xd;			(select '') as collCode,&#xd;			(select '') as fullnameColl,&#xd;			(select '') as collCodeDay,&#xd;			(select '') as collCodeDay&#xd;		from MST_COVER_AREA_DTL A&#xd;		LEFT JOIN MST_VILLAGE B &#xd;		ON A.VILLAGE_CODE=B.VILLAGE_CODE &#xd;		LEFT JOIN MST_GLOBAL_PARAM C &#xd;		ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT D&#xd;		ON B.SUBDISTRICT_CODE = D.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_TOTAL_AGGR E&#xd;		ON A.COMPANY_CODE = E.COMPANY_CODE AND A.BRANCH_CODE = E.BRANCH_CODE AND A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;		JOIN MST_COVER_AREA_HDR HDR&#xd;		ON A.COMPANY_CODE = HDR.COMPANY_CODE AND A.BRANCH_CODE = HDR.BRANCH_CODE AND HDR.FLAG_ACTIVE = '1'&#xd;		WHERE A.VILLAGE_CODE NOT IN (SELECT VILLAGE_CODE FROM MST_COLL_AREA_DTL CA WHERE CA.COMPANY_CODE = @COMPANY_CODE AND CA.BRANCH_CODE = @BRANCH_CODE AND CA.PRODUCT_CODE = @PRODUCT_CODE AND CA.BUCKET_CODE = @BUCKET_CODE AND CA.EFFECTIVE_DATE = @EFFECTIVE_DATE) AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BRANCH_CODE = @BRANCH_CODE&#xd;	) a WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
   </query>
   <query id="getDataDetailMstCollAreaDtl" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(50)	= :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(50)	= :branchCode&#xd;DECLARE @PRODUCT_CODE VARCHAR(50)	= :productCode&#xd;DECLARE @BUCKET_CODE VARCHAR(50)	= :bucketCode&#xd;DECLARE @EFFECTIVE_DATE VARCHAR(50) = :effectiveDate&#xd;&#xd;SELECT companyCode, branchCode, branchName, productCode, productName, bucketCode, bucketName, effectiveDate, villageCode, villageName, subdistrictName, totalAggr, qtyAggrNo,&#xd;collCode, fullnameColl, collCodeDay, collDayName FROM (&#xd;		SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.PRODUCT_CODE productCode,&#xd;		C.PARAM_DESCRIP productName,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		D.DESCRIPTION bucketName,&#xd;		A.EFFECTIVE_DATE effectiveDate,&#xd;		A.VILLAGE_CODE villageCode,&#xd;		E.VILLAGE_NAME villageName,&#xd;		F.SUBDISTRICT_NAME subdistrictName,&#xd;		ISNULL(I.TOT_AGGR, 0) totalAggr,&#xd;		ISNULL(A.QTY_AGGR_NO, 0) qtyAggrNo,&#xd;		A.COLL_CODE collCode,&#xd;		G.FULLNAME fullnameColl,&#xd;		A.COLL_DAY_CODE collCodeDay,&#xd;		H.DESCRIPTION collDayName&#xd;	FROM MST_COLL_AREA_DTL A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.PRODUCT_CODE = C.PARAM_CODE AND C.CONDITION = 'PRODUCT_CODE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BUCKET D&#xd;	ON A.BUCKET_CODE = D.BUCKET_CODE AND BUCKET_TYPE = 'FCOL' AND A.PRODUCT_CODE = D.PRODUCT_CODE&#xd;	LEFT JOIN MST_VILLAGE E&#xd;	ON A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT F&#xd;	ON E.SUBDISTRICT_CODE = F.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_EMPLOYEE G&#xd;	ON A.COLL_CODE = G.NIK&#xd;	LEFT JOIN MST_COLL_DAY_HDR H&#xd;	ON A.COLL_DAY_CODE = H.COLL_DAY_CODE AND A.PRODUCT_CODE = H.PRODUCT_CODE&#xd;	LEFT JOIN MST_TOTAL_AGGR I&#xd;	ON A.COMPANY_CODE = I.COMPANY_CODE AND A.BRANCH_CODE = I.BRANCH_CODE AND A.VILLAGE_CODE = I.VILLAGE_CODE&#xd;	WHERE A.COMPANY_CODE = @COMPANY_CODE AND A.BRANCH_CODE = @BRANCH_CODE AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BUCKET_CODE = @BUCKET_CODE AND A.EFFECTIVE_DATE = @EFFECTIVE_DATE&#xd;&#xd;	UNION ALL&#xd;&#xd;	select &#xd;		A.company_code companyCode, &#xd;		A.branch_code branchCode,&#xd;		(select '') as branchName,&#xd;		A.product_code productCode,&#xd;		C.param_descrip productName,&#xd;		(select '') as bucketCode,&#xd;		(select '') as bucketName,&#xd;		(select '') as effectiveDate,&#xd;		A.village_code villageCode, &#xd;		B.village_name villageName,&#xd;		D.subdistrict_name subdistrictName,&#xd;		ISNULL(E.tot_aggr, 0) totalAggr,&#xd;		(select 0) as qtyAggrNo,&#xd;		(select '') as collCode,&#xd;		(select '') as fullnameColl,&#xd;		(select '') as collCodeDay,&#xd;		(select '') as collCodeDay&#xd;	from MST_COVER_AREA_DTL A&#xd;	LEFT JOIN MST_VILLAGE B &#xd;	ON A.VILLAGE_CODE=B.VILLAGE_CODE &#xd;	LEFT JOIN MST_GLOBAL_PARAM C &#xd;	ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT D&#xd;	ON B.SUBDISTRICT_CODE = D.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_TOTAL_AGGR E&#xd;	ON A.COMPANY_CODE = E.COMPANY_CODE AND A.BRANCH_CODE = E.BRANCH_CODE AND A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;	JOIN MST_COVER_AREA_HDR HDR&#xd;	ON A.COMPANY_CODE = HDR.COMPANY_CODE AND A.BRANCH_CODE = HDR.BRANCH_CODE AND HDR.FLAG_ACTIVE = '1'&#xd;	WHERE A.VILLAGE_CODE NOT IN (SELECT VILLAGE_CODE FROM MST_COLL_AREA_DTL CA WHERE CA.COMPANY_CODE = @COMPANY_CODE AND CA.BRANCH_CODE = @BRANCH_CODE AND CA.PRODUCT_CODE = @PRODUCT_CODE AND CA.BUCKET_CODE = @BUCKET_CODE AND CA.EFFECTIVE_DATE = @EFFECTIVE_DATE) AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BRANCH_CODE = @BRANCH_CODE&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="totalAggr" name="totalAggr" xsdType="string"/>
         <element column="qtyAggrNo" name="qtyAggrNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collCodeDay" name="collCodeDay" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
   </query>
   <query id="getColumnDetailMstCollAreaDtlDso" useConfig="collectiondso1">
      <sql>select 1 as companyCode</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
      </result>
   </query>
   <query id="getCountDetailMstCollAreaDtlDso" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(50)	= :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(50)	= :branchCode&#xd;DECLARE @PRODUCT_CODE VARCHAR(50)	= :productCode&#xd;DECLARE @BUCKET_CODE VARCHAR(50)	= :bucketCode&#xd;DECLARE @EFFECTIVE_DATE VARCHAR(50) = :effectiveDate&#xd;&#xd;SELECT COUNT(*) as total from (&#xd;	SELECT companyCode, branchCode, branchName, productCode, productName, bucketCode, bucketName, effectiveDate, villageCode, villageName, subdistrictName, totalAggr, qtyAggrNo,&#xd;	collCode, fullnameColl, collCodeDay, collDayName FROM (&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			B.BRANCH_NAME branchName,&#xd;			A.PRODUCT_CODE productCode,&#xd;			C.PARAM_DESCRIP productName,&#xd;			A.BUCKET_CODE bucketCode,&#xd;			D.DESCRIPTION bucketName,&#xd;			A.EFFECTIVE_DATE effectiveDate,&#xd;			A.VILLAGE_CODE villageCode,&#xd;			E.VILLAGE_NAME villageName,&#xd;			F.SUBDISTRICT_NAME subdistrictName,&#xd;			ISNULL(I.TOT_AGGR, 0) totalAggr,&#xd;			ISNULL(A.QTY_AGGR_NO, 0) qtyAggrNo,&#xd;			A.COLL_CODE collCode,&#xd;			G.FULLNAME fullnameColl,&#xd;			A.COLL_DAY_CODE collCodeDay,&#xd;			H.DESCRIPTION collDayName&#xd;		FROM MST_COLL_AREA_DTL A&#xd;		LEFT JOIN MST_BRANCH B&#xd;		ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM C&#xd;		ON A.PRODUCT_CODE = C.PARAM_CODE AND C.CONDITION = 'PRODUCT_CODE' AND C.FLAG_ACTIVE = '1'&#xd;		LEFT JOIN MST_BUCKET D&#xd;		ON A.BUCKET_CODE = D.BUCKET_CODE AND BUCKET_TYPE = 'FCOL' AND A.PRODUCT_CODE = D.PRODUCT_CODE&#xd;		LEFT JOIN MST_VILLAGE E&#xd;		ON A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT F&#xd;		ON E.SUBDISTRICT_CODE = F.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_EMPLOYEE G&#xd;		ON A.COLL_CODE = G.NIK&#xd;		LEFT JOIN MST_COLL_DAY_HDR H&#xd;		ON A.COLL_DAY_CODE = H.COLL_DAY_CODE AND A.PRODUCT_CODE = H.PRODUCT_CODE&#xd;		LEFT JOIN MST_TOTAL_AGGR I&#xd;		ON A.COMPANY_CODE = I.COMPANY_CODE AND A.BRANCH_CODE = I.BRANCH_CODE AND A.VILLAGE_CODE = I.VILLAGE_CODE&#xd;		WHERE A.COMPANY_CODE = @COMPANY_CODE AND A.BRANCH_CODE = @BRANCH_CODE AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BUCKET_CODE = @BUCKET_CODE AND A.EFFECTIVE_DATE = @EFFECTIVE_DATE&#xd;&#xd;		UNION ALL&#xd;&#xd;		select DISTINCT&#xd;			A.company_code companyCode, &#xd;			(select '') as branchCode,&#xd;			(select '') as branchName,&#xd;			A.product_code productCode,&#xd;			C.param_descrip productName,&#xd;			(select '') as bucketCode,&#xd;			(select '') as bucketName,&#xd;			(select '') as effectiveDate,&#xd;			A.village_code villageCode, &#xd;			B.village_name villageName,&#xd;			D.subdistrict_name subdistrictName,&#xd;			ISNULL(E.tot_aggr, 0) totalAggr,&#xd;			(select 0) as qtyAggrNo,&#xd;			(select '') as collCode,&#xd;			(select '') as fullnameColl,&#xd;			(select '') as collCodeDay,&#xd;			(select '') as collCodeDay&#xd;		from MST_COVER_AREA_DTL A&#xd;		LEFT JOIN MST_VILLAGE B &#xd;		ON A.VILLAGE_CODE=B.VILLAGE_CODE &#xd;		LEFT JOIN MST_GLOBAL_PARAM C &#xd;		ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT D&#xd;		ON B.SUBDISTRICT_CODE = D.SUBDISTRICT_CODE&#xd;		LEFT JOIN MST_TOTAL_AGGR E&#xd;		ON A.COMPANY_CODE = E.COMPANY_CODE AND A.BRANCH_CODE = E.BRANCH_CODE AND A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;		JOIN MST_COVER_AREA_HDR HDR&#xd;		ON A.COMPANY_CODE = HDR.COMPANY_CODE AND A.BRANCH_CODE = HDR.BRANCH_CODE AND HDR.FLAG_ACTIVE = '1'&#xd;		WHERE A.VILLAGE_CODE NOT IN (SELECT VILLAGE_CODE FROM MST_COLL_AREA_DTL CA WHERE CA.COMPANY_CODE = @COMPANY_CODE AND CA.BRANCH_CODE = @BRANCH_CODE AND CA.PRODUCT_CODE = @PRODUCT_CODE AND CA.BUCKET_CODE = @BUCKET_CODE AND CA.EFFECTIVE_DATE = @EFFECTIVE_DATE) AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BRANCH_CODE IN (select BRANCH_CODE from getViewBranch() where BRANCH_CODE = A.BRANCH_CODE AND DSO_CODE = @BRANCH_CODE)&#xd;	) a WHERE :search :filter&#xd;) t</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
   </query>
   <query id="getDataDetailMstCollAreaDtlDso" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(50)	= :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(50)	= :branchCode&#xd;DECLARE @PRODUCT_CODE VARCHAR(50)	= :productCode&#xd;DECLARE @BUCKET_CODE VARCHAR(50)	= :bucketCode&#xd;DECLARE @EFFECTIVE_DATE VARCHAR(50) = :effectiveDate&#xd;&#xd;SELECT companyCode, branchCode, branchName, productCode, productName, bucketCode, bucketName, effectiveDate, villageCode, villageName, subdistrictName, totalAggr, qtyAggrNo,&#xd;collCode, fullnameColl, collCodeDay, collDayName FROM (&#xd;		SELECT&#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_NAME branchName,&#xd;		A.PRODUCT_CODE productCode,&#xd;		C.PARAM_DESCRIP productName,&#xd;		A.BUCKET_CODE bucketCode,&#xd;		D.DESCRIPTION bucketName,&#xd;		A.EFFECTIVE_DATE effectiveDate,&#xd;		A.VILLAGE_CODE villageCode,&#xd;		E.VILLAGE_NAME villageName,&#xd;		F.SUBDISTRICT_NAME subdistrictName,&#xd;		ISNULL(I.TOT_AGGR, 0) totalAggr,&#xd;		ISNULL(A.QTY_AGGR_NO, 0) qtyAggrNo,&#xd;		A.COLL_CODE collCode,&#xd;		G.FULLNAME fullnameColl,&#xd;		A.COLL_DAY_CODE collCodeDay,&#xd;		H.DESCRIPTION collDayName&#xd;	FROM MST_COLL_AREA_DTL A&#xd;	LEFT JOIN MST_BRANCH B&#xd;	ON A.BRANCH_CODE = B.BRANCH_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM C&#xd;	ON A.PRODUCT_CODE = C.PARAM_CODE AND C.CONDITION = 'PRODUCT_CODE' AND C.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_BUCKET D&#xd;	ON A.BUCKET_CODE = D.BUCKET_CODE AND BUCKET_TYPE = 'FCOL' AND A.PRODUCT_CODE = D.PRODUCT_CODE&#xd;	LEFT JOIN MST_VILLAGE E&#xd;	ON A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT F&#xd;	ON E.SUBDISTRICT_CODE = F.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_EMPLOYEE G&#xd;	ON A.COLL_CODE = G.NIK&#xd;	LEFT JOIN MST_COLL_DAY_HDR H&#xd;	ON A.COLL_DAY_CODE = H.COLL_DAY_CODE AND A.PRODUCT_CODE = H.PRODUCT_CODE&#xd;	LEFT JOIN MST_TOTAL_AGGR I&#xd;	ON A.COMPANY_CODE = I.COMPANY_CODE AND A.BRANCH_CODE = I.BRANCH_CODE AND A.VILLAGE_CODE = I.VILLAGE_CODE&#xd;	WHERE A.COMPANY_CODE = @COMPANY_CODE AND A.BRANCH_CODE = @BRANCH_CODE AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BUCKET_CODE = @BUCKET_CODE AND A.EFFECTIVE_DATE = @EFFECTIVE_DATE&#xd;&#xd;	UNION ALL&#xd;&#xd;	select DISTINCT&#xd;		A.company_code companyCode, &#xd;		(select '') as branchCode,&#xd;		(select '') as branchName,&#xd;		A.product_code productCode,&#xd;		C.param_descrip productName,&#xd;		(select '') as bucketCode,&#xd;		(select '') as bucketName,&#xd;		(select '') as effectiveDate,&#xd;		A.village_code villageCode, &#xd;		B.village_name villageName,&#xd;		D.subdistrict_name subdistrictName,&#xd;		ISNULL(E.tot_aggr, 0) totalAggr,&#xd;		(select 0) as qtyAggrNo,&#xd;		(select '') as collCode,&#xd;		(select '') as fullnameColl,&#xd;		(select '') as collCodeDay,&#xd;		(select '') as collCodeDay&#xd;	from MST_COVER_AREA_DTL A&#xd;	LEFT JOIN MST_VILLAGE B &#xd;	ON A.VILLAGE_CODE=B.VILLAGE_CODE &#xd;	LEFT JOIN MST_GLOBAL_PARAM C &#xd;	ON A.PRODUCT_CODE=C.PARAM_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT D&#xd;	ON B.SUBDISTRICT_CODE = D.SUBDISTRICT_CODE&#xd;	LEFT JOIN MST_TOTAL_AGGR E&#xd;	ON A.COMPANY_CODE = E.COMPANY_CODE AND A.BRANCH_CODE = E.BRANCH_CODE AND A.VILLAGE_CODE = E.VILLAGE_CODE&#xd;	JOIN MST_COVER_AREA_HDR HDR&#xd;	ON A.COMPANY_CODE = HDR.COMPANY_CODE AND A.BRANCH_CODE = HDR.BRANCH_CODE AND HDR.FLAG_ACTIVE = '1'&#xd;	WHERE A.VILLAGE_CODE NOT IN (SELECT VILLAGE_CODE FROM MST_COLL_AREA_DTL CA WHERE CA.COMPANY_CODE = @COMPANY_CODE AND CA.BRANCH_CODE = @BRANCH_CODE AND CA.PRODUCT_CODE = @PRODUCT_CODE AND CA.BUCKET_CODE = @BUCKET_CODE AND CA.EFFECTIVE_DATE = @EFFECTIVE_DATE) AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BRANCH_CODE IN (select BRANCH_CODE from getViewBranch() where BRANCH_CODE = A.BRANCH_CODE AND DSO_CODE = @BRANCH_CODE)&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="bucketCode" name="bucketCode" xsdType="string"/>
         <element column="bucketName" name="bucketName" xsdType="string"/>
         <element column="effectiveDate" name="effectiveDate" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="totalAggr" name="totalAggr" xsdType="string"/>
         <element column="qtyAggrNo" name="qtyAggrNo" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="fullnameColl" name="fullnameColl" xsdType="string"/>
         <element column="collCodeDay" name="collCodeDay" xsdType="string"/>
         <element column="collDayName" name="collDayName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="bucketCode" sqlType="STRING"/>
      <param name="effectiveDate" sqlType="STRING"/>
   </query>
   <query id="getColumnMstExtCollBranch" useConfig="collectiondso1">
      <sql>select 1 as branchCode, 1 branchName</sql>
      <result element="Entries" rowName="">
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountMstExtCollBranch" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select&#xd;		br.company_code companyCode,&#xd;		br.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		colb.ext_coll_code extCollCode,&#xd;		case&#xd;			when colb.ext_coll_code is null then '0'&#xd;			else '1'&#xd;		end flagCheck&#xd;	from mst_branch br&#xd;	left join mst_ext_coll_branch colb&#xd;	on br.company_code = colb.company_code and br.branch_code = colb.branch_code and colb.flag_active = '1' and colb.ext_coll_code = :extCollCode&#xd;	where br.structure_type = 'ST04' and br.flag_active = '1'&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="extCollCode" sqlType="STRING"/>
   </query>
   <query id="getDataMstExtCollBranch" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, branchName, extCollCode, flagCheck from (&#xd;	select&#xd;		br.company_code companyCode,&#xd;		br.branch_code branchCode,&#xd;		br.branch_name branchName,&#xd;		colb.ext_coll_code extCollCode,&#xd;		case&#xd;			when colb.ext_coll_code is null then '0'&#xd;			else '1'&#xd;		end flagCheck&#xd;	from mst_branch br&#xd;	left join mst_ext_coll_branch colb&#xd;	on br.company_code = colb.company_code and br.branch_code = colb.branch_code and colb.flag_active = '1' and colb.ext_coll_code = :extCollCode&#xd;	where br.structure_type = 'ST04' and br.flag_active = '1'&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="extCollCode" name="extCollCode" xsdType="string"/>
         <element column="flagCheck" name="flagCheck" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
      <param name="extCollCode" sqlType="STRING"/>
   </query>
   <query id="callSpUpdSttuExpiredK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_STTU_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:sttuNo,&#xd;		:sttuSts,&#xd;		:eodDate,&#xd;		:returnVal       &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="sttuSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="callSpUpdSerahTerimaExpiredK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_SERAH_TERIMA_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:sttuNo,&#xd;		:sttuSts,&#xd;		:eodDate,&#xd;		:returnVal       &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="sttuSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="getListBranch" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, structureType from (&#xd;	select&#xd;		company_code companyCode,&#xd;		branch_code branchCode,&#xd;		structure_type structureType&#xd;	from mst_branch where flag_active = '1'&#xd;) a where companyCode = :companyCode and structureType in (:structureType) order by branchCode asc</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="structureType" name="structureType" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="structureType" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="getEodDate" useConfig="collectiondso1">
      <sql>select companyCode, eodDate from (&#xd;	select&#xd;		company_code companyCode,&#xd;		isnull(eod_date, getdate()) eodDate&#xd;	from mst_company&#xd;	where company_code = :companyCode&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="eodDate" name="eodDate" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
   </query>
   <query id="callSpJobProcessEK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[SP_JOB_PROCESS_E_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:eodDate,&#xd;		:processName,&#xd;		:start,&#xd;		:finish,&#xd;		:output,&#xd;		:returnVal       &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param name="processName" sqlType="STRING"/>
      <param name="start" sqlType="STRING"/>
      <param name="finish" sqlType="STRING"/>
      <param name="output" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="callSpUpdSolvingPerpanjanganExpiredK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_SOLVING_PERPANJANGAN_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:tuDepositNo,&#xd;		:tuSolvingDate,&#xd;		:appvSts,&#xd;		:eodDate,&#xd;		:returnVal       &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="callSpUpdSolvingPercepatanExpiredK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_SOLVING_PERCEPATAN_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:tuDepositNo,&#xd;		:tuSolvingDate,&#xd;		:appvSts,&#xd;		:eodDate,&#xd;		:returnVal       &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="callSpUpdPindahBaketExpiredK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_PINDAH_BAKET_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:trxCode,&#xd;		:appvSts,&#xd;		:eodDate,&#xd;		:returnVal    &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="trxCode" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="callSpUpdTuSellExpiredK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_TU_SELL_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:sellNo,&#xd;		:sellSts,&#xd;		:eodDate,&#xd;		:returnVal    &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="sellSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="getColumnFindOneVoucherNoDkhDtl" useConfig="collectiondso1">
      <sql>select 1 as companyCode, 1 branchCode, 1 dkhNo, 1 voucherNo, 1 aggrNo, 1 customerFullname, 1 paidCash</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="paidCash" name="paidCash" xsdType="string"/>
      </result>
   </query>
   <query id="getCountFindOneVoucherNoDkhDtl" useConfig="collectiondso1">
      <sql>select count(*) as total from (&#xd;	select &#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.dkh_no dkhNo,&#xd;		a.voucher_no voucherNo,&#xd;		a.aggr_no aggrNo,&#xd;		b.customer_fullname customerFullname,&#xd;		a.paid_cash paidCash&#xd;	from trx_dkh_dtl a&#xd;	left join trx_aggr b&#xd;	on a.company_code = b.company_code and a.aggr_no = b.aggr_no&#xd;) a WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataFindOneVoucherNoDkhDtl" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, dkhNo, voucherNo, aggrNo, customerFullname, paidCash from (&#xd;	select &#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.dkh_no dkhNo,&#xd;		a.voucher_no voucherNo,&#xd;		a.voucher_no setorNo,&#xd;		a.aggr_no aggrNo,&#xd;		b.customer_fullname customerFullname,&#xd;		a.paid_cash paidCash&#xd;	from trx_dkh_dtl a&#xd;	left join trx_aggr b&#xd;	on a.company_code = b.company_code and a.aggr_no = b.aggr_no&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="paidCash" name="paidCash" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <query id="checkPaymentPointStaging" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @NO_SETOR varchar(50) = :setorNo&#xd;&#xd;select trx_id as trxId from trx_payment_point_staging (nolock) where company_code = @COMPANY_CODE and no_setor = @NO_SETOR and  (reversal_sts = 0 or (reversal_sts=1 and schd_reversal_sts in (0,1)))</sql>
      <result element="Entries" rowName="contents">
         <element column="trxId" name="trxId" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="setorNo" sqlType="STRING"/>
   </query>
   <query id="callSpCancLkhSetor" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[CANC_LKH_SETOR]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:dkhNo,&#xd;		:setorNo,&#xd;		:reason,&#xd;		:totSetor,&#xd;		:userLogin,&#xd;		:message,&#xd;		:returnVal&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="message" name="message" xsdType="string"/>
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="setorNo" sqlType="STRING"/>
      <param name="reason" sqlType="STRING"/>
      <param name="totSetor" sqlType="STRING"/>
      <param name="userLogin" sqlType="STRING"/>
      <param defaultValue="1" name="message" optional="false" sqlType="STRING" type="OUT"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="cekCancelLkhSetor" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @NO_SETOR varchar(50) = :setorNo&#xd;&#xd;select setor_no as setorNo from trx_lkh_setor (nolock) where company_code = @COMPANY_CODE and setor_no = @NO_SETOR and (canceled_date is not null or canceled_pic is not null)</sql>
      <result element="Entries" rowName="contents">
         <element column="setorNo" name="setorNo" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="setorNo" sqlType="STRING"/>
   </query>
   <query id="updateAggrSchedule" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @DKH_NO VARCHAR(50) = :dkhNo&#xd;&#xd;UPDATE SC SET&#xd;	SC.COLL_FEE = &#xd;		IIF(DT.PAID_CASH &gt; 0 ,SC.COLL_FEE + DT.COLL_FEE_RATE,SC.COLL_FEE),&#xd;	SC.UPDATE_BY = &#xd;		IIF(DT.PAID_CASH &gt; 0 ,:userLogin,SC.UPDATE_BY),&#xd;	SC.UPDATE_DATE = &#xd;		IIF(DT.PAID_CASH &gt; 0 ,GETDATE(),SC.UPDATE_DATE)&#xd;FROM TRX_AGGR_SCHEDULE SC (NOLOCK)&#xd;JOIN TRX_DKH_DTL DT (NOLOCK)&#xd;ON SC.COMPANY_CODE = DT.COMPANY_CODE AND DT.AGGR_NO = SC.AGGR_NO AND DT.INST_FROM = SC.INST_NO&#xd;WHERE DT.COMPANY_CODE = @COMPANY_CODE&#xd;AND DT.AGGR_NO IN (:aggrNo)&#xd;AND DT.DKH_NO = @DKH_NO&#xd;AND DT.FLAG_SEND = 2</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" optional="false" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="userLogin" sqlType="STRING"/>
   </query>
   <query id="insertTrxEodJob" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @companyCode varchar(50) = :companyCode&#xd;declare @eodDate date = (select eod_date from mst_company where company_code = @companyCode and flag_active = '1')&#xd;declare @eodDateJob date = (select eod_date from TRX_EOD_JOB where eod_date = @eodDate and company_code = @companyCode and eod_job_type = 'SP_JOB_PROCESS_E_K2')&#xd;&#xd;IF(@eodDateJob IS NULL OR @eodDateJob = '')&#xd;BEGIN&#xd;	INSERT INTO TRX_EOD_JOB&#xd;	(&#xd;		COMPANY_CODE,&#xd;		EOD_DATE,&#xd;		EOD_JOB_TYPE,&#xd;		EOD_STS,&#xd;		EOD_DESCRIPTION,&#xd;		START_TIME,&#xd;		CREATED_DATE,&#xd;		CREATED_BY&#xd;	)&#xd;	VALUES&#xd;	(&#xd;		@companyCode,&#xd;		@eodDate,&#xd;		'SP_JOB_PROCESS_E_K2',&#xd;		'PROCESS',&#xd;		'',&#xd;		GETDATE(),&#xd;		GETDATE(),&#xd;		'SYSTEM'&#xd;	)&#xd;END&#xd;ELSE&#xd;BEGIN&#xd;	UPDATE TRX_EOD_JOB SET&#xd;		EOD_STS = 'PROCESS',&#xd;		START_TIME = GETDATE(),&#xd;		UPDATED_DATE = GETDATE(),&#xd;		UPDATED_BY = 'SYSTEM'&#xd;	WHERE COMPANY_CODE = @companyCode AND EOD_DATE = @eodDateJob and eod_job_type = 'SP_JOB_PROCESS_E_K2'&#xd;END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
   </query>
   <query id="updateTrxEodJob" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @companyCode varchar(50) = :companyCode&#xd;declare @eodDate date = (select eod_date from mst_company where company_code = @companyCode and flag_active = '1')&#xd;&#xd;UPDATE TRX_EOD_JOB SET&#xd;	EOD_STS = :eodSts,&#xd;	END_TIME = GETDATE(),&#xd;	UPDATED_DATE = GETDATE(),&#xd;	UPDATED_BY = 'SYSTEM'&#xd;WHERE COMPANY_CODE = @companyCode AND EOD_DATE = @eodDate and eod_job_type = 'SP_JOB_PROCESS_E_K2'</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="eodSts" sqlType="STRING"/>
   </query>
   <query id="deleteAggrNoDkhDtl" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;&#xd;DELETE FROM TRX_DKH_DTL&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	AGGR_NO IN (:aggrNo)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="updateFlagSendDkhDtlGroup" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @FLAG_SEND VARCHAR(10) = :flagSend&#xd;DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(20) = :branchCode&#xd;DECLARE @DKH_NO VARCHAR(50) = :dkhNo&#xd;&#xd;UPDATE TRX_DKH_DTL SET&#xd;	FLAG_SEND = @FLAG_SEND,&#xd;	FLAG_SEND_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	AGGR_NO IN (:aggrNo)&#xd;&#xd;&#xd;UPDATE TRX_DKH_GROUP SET&#xd;	FLAG_SEND = @FLAG_SEND,&#xd;	FLAG_SEND_DATE = GETDATE()&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	GROUP_CODE IN (:groupCode)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="flagSend" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
      <param name="groupCode" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="maintenanceLkSetor" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH_CODE VARCHAR(20) = :branchCode&#xd;DECLARE @DKH_NO VARCHAR(50) = :dkhNo&#xd;DECLARE @GROUP_CODE VARCHAR(50) = :groupCode&#xd;&#xd;UPDATE TRX_DKH_GROUP SET&#xd;	VISIT_CODE = :visitCodeDtl,&#xd;	VISIT_TIME = :visitTimeDtl,&#xd;	TU_DATE = :tuDateDtl,&#xd;	TU_TIME = :tuTimeDtl,&#xd;	UPDATED_DATE = GETDATE(),&#xd;	UPDATED_BY = 'sistem'&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	GROUP_CODE = @GROUP_CODE&#xd;&#xd;&#xd;UPDATE TRX_DKH_DTL SET&#xd;	PAID_STS = :paidSts,&#xd;	RECEIPT_NO = :receiptNo,&#xd;	TU_DATE = :tuDate,&#xd;	TU_TIME = :tuTime,&#xd;	TU_TIME_VALUE = :tuTimeValue,&#xd;	PAYMENT_DATE = :paymentDate,&#xd;	CUSTOMER_PAYMENT_DATE = :customerPaymentDate,&#xd;	PRESENCE_STS = :presenceSts,&#xd;	PREPAYMENT_STS = :prepaymentSts,&#xd;	PAID_COLL_FEE = :paidCollFee,&#xd;	PAID_PENALTY = :paidPenalty,&#xd;	PAID_INSTALL = :paidInstall,&#xd;	PAID_CASH = :paidCash,&#xd;	DISCOUNT = :discount,&#xd;	SP_RECEIPT_TYPE = :spReceiptType,&#xd;	SP_RECEIPT_NAME = :spReceiptName,&#xd;	SP_NOTES = :spNotes,&#xd;	FLAG_SEND = :flagSend,&#xd;	UPDATED_DATE = GETDATE(),&#xd;	UPDATED_BY = 'sistem'&#xd;WHERE&#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO AND&#xd;	AGGR_NO	 = :aggrNo AND&#xd;	GROUP_CODE = @GROUP_CODE</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
      <param name="visitCodeDtl" sqlType="STRING"/>
      <param name="visitTimeDtl" sqlType="STRING"/>
      <param name="tuDateDtl" sqlType="STRING"/>
      <param name="tuTimeDtl" sqlType="STRING"/>
      <param name="paidSts" sqlType="STRING"/>
      <param name="receiptNo" sqlType="STRING"/>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="tuTimeValue" sqlType="STRING"/>
      <param name="paymentDate" sqlType="STRING"/>
      <param name="customerPaymentDate" sqlType="STRING"/>
      <param name="presenceSts" sqlType="STRING"/>
      <param name="prepaymentSts" sqlType="STRING"/>
      <param name="paidCollFee" sqlType="STRING"/>
      <param name="paidPenalty" sqlType="STRING"/>
      <param name="paidInstall" sqlType="STRING"/>
      <param name="paidCash" sqlType="STRING"/>
      <param name="discount" sqlType="STRING"/>
      <param name="spReceiptType" sqlType="STRING"/>
      <param name="spReceiptName" sqlType="STRING"/>
      <param name="spNotes" sqlType="STRING"/>
      <param name="flagSend" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="checkVoucherNo" useConfig="collectiondso1">
      <sql>select&#xd;	a.dkh_no as dkhNo,&#xd;	a.aggr_no as aggrNo,&#xd;	a.paid_cash as paidCash,&#xd;	a.voucher_no as voucherNo,&#xd;	b.created_by as createdBy,&#xd;	b.setor_date as setorDate&#xd;from trx_dkh_dtl(nolock) a&#xd;left join trx_lkh_setor(nolock) b&#xd;on a.voucher_no = b.setor_no and a.dkh_no = b.dkh_no&#xd;where a.dkh_no = :dkhNo&#xd;and (a.voucher_no is not null or isnull(a.voucher_no, '') != '')&#xd;and a.aggr_no in (:aggrNo)</sql>
      <result element="Entries" rowName="contents">
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="paidCash" name="paidCash" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="createdBy" name="createdBy" xsdType="string"/>
         <element column="setorDate" name="setorDate" xsdType="string"/>
      </result>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" optional="false" paramType="ARRAY" sqlType="STRING"/>
   </query>
   <query id="updateAggrScheduleForMobile" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANYCODE varchar(10) = :companyCode&#xd;DECLARE @AGGRNO varchar(50) = :aggrNo&#xd;DECLARE @DKHNO varchar(50) = :dkhNo&#xd;DECLARE @UPDATEBY varchar(50) = :userLogin&#xd;&#xd;DECLARE @COLL_FEE_RATE AS NUMERIC(20,4)&#xd;DECLARE @INST_FROM AS TINYINT&#xd;select @COLL_FEE_RATE = COLL_FEE_RATE,@INST_FROM = INST_FROM from TRX_DKH_DTL (nolock)&#xd;where company_code = @COMPANYCODE AND DKH_NO = @DKHNO AND AGGR_NO = @AGGRNO&#xd;AND COLL_FEE_RATE &gt; 0 AND PAID_CASH &gt; 0 AND FLAG_SEND = 2 &#xd;		&#xd;if (@COLL_FEE_RATE &gt; 0)&#xd;begin&#xd;&#xd;UPDATE TRX_AGGR_SCHEDULE&#xd;SET COLL_FEE = COLL_FEE + @COLL_FEE_RATE,&#xd;UPDATE_BY = @UPDATEBY,&#xd;UPDATE_DATE = GETDATE()&#xd;WHERE COMPANY_CODE = @COMPANYCODE AND AGGR_NO = @AGGRNO AND INST_NO = @INST_FROM&#xd;end</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="userLogin" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
   </query>
   <query id="getDkhHdr" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @COLL_CODE varchar(30) = :collCode&#xd;declare @PRODUCT_CODE varchar(10) = :productCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;&#xd;SELECT companyCode, branchCode, productCode, productName, dkhNo, collCode, collName, dkhSts, dkhStsName, nameDay, jumlahTertagih, jumlahTidakTertagih, sp1, sp2, sp3, sp1Mikro, sp2Mikro, sp3Mikro, createdDate, createdBy, qtyCustomerCash, updatedDateStr, dkhStatusDateFilter, totalPenugasan, totalDikunjungi, totalTidakDikunjungi, totalBelumDikunjungi, picHead, qtyCustomer, qtyGroup, qtyGroupVisit, qtyGroupCash, totCollFee, totPenaltyValue, totInstallBill, totBill, totPaidCollFee, totPaidPenalty, totPaidInstallBill, totUtjPlus, totPaidCash, cashierDepositValue, paymentPointDeposit, collCashOnHand, totUtjUsage FROM (&#xd;		SELECT&#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.DKH_NO dkhNo,&#xd;			A.DKH_STS dkhSts,&#xd;			--C.PARAM_DESCRIP dkhStsName,&#xd;			(SELECT C.PARAM_DESCRIP FROM MST_GLOBAL_PARAM C (NOLOCK) WHERE A.DKH_STS = C.PARAM_CODE AND C.CONDITION = 'DKH_STS' AND C.FLAG_ACTIVE = '1') dkhStsName,&#xd;			A.PRODUCT_CODE productCode,&#xd;			--E.PARAM_DESCRIP productName,&#xd;			(SELECT D.PARAM_DESCRIP FROM MST_GLOBAL_PARAM D (NOLOCK) WHERE A.PRODUCT_CODE = D.PARAM_CODE AND D.CONDITION = 'PRODUCT_CODE' AND D.FLAG_ACTIVE = '1') productName,&#xd;			concat(A.COLL_CODE, ' ') collCode,&#xd;			--B.FULLNAME collName,&#xd;			(SELECT B.FULLNAME FROM MST_EMPLOYEE B (NOLOCK) WHERE A.COLL_CODE=B.NIK) collName,&#xd;			(&#xd;				case&#xd;					when datename(dw, A.DKH_DATE) = 'Sunday' then 'Minggu'&#xd;					when datename(dw, A.DKH_DATE) = 'Monday' then 'Senin'&#xd;					when datename(dw, A.DKH_DATE) = 'Tuesday' then 'Selasa'&#xd;					when datename(dw, A.DKH_DATE) = 'Wednesday' then 'Rabu'&#xd;					when datename(dw, A.DKH_DATE) = 'Thursday' then 'Kamis'&#xd;					when datename(dw, A.DKH_DATE) = 'Friday' then 'Jumat'&#xd;					when datename(dw, A.DKH_DATE) = 'Saturday' then 'Sabtu'&#xd;				end&#xd;			) as nameDay,&#xd;			CASE&#xd;				WHEN A.PRODUCT_CODE = 'PC02' THEN &#xd;				(SELECT COUNT(0) PAID_CASH FROM TRX_DKH_DTL F (nolock) WHERE F.DKH_NO = A.DKH_NO AND F.PAID_CASH &gt; 0 AND PAID_STS != '999')+(SELECT COUNT(0) PAID_CASH FROM TRX_DKH_DTL F (nolock) WHERE F.DKH_NO = A.DKH_NO AND F.PAID_CASH = 0 AND F.UTJ_APPV_STS = 'APPD' AND F.PAID_STS != '999')&#xd;				ELSE (SELECT COUNT(0) PAID_CASH FROM TRX_DKH_DTL F (nolock) WHERE F.DKH_NO = A.DKH_NO AND F.PAID_CASH &gt; 0 AND F.PAID_STS != '999')&#xd;			END as jumlahTertagih,&#xd;			CASE&#xd;				WHEN A.PRODUCT_CODE = 'PC02' THEN A.QTY_CUSTOMER-&#xd;				(SELECT COUNT(0) PAID_CASH FROM TRX_DKH_DTL F (nolock) WHERE F.DKH_NO = A.DKH_NO AND F.PAID_CASH &gt; 0 AND PAID_STS != '999')+(SELECT COUNT(0) PAID_CASH FROM TRX_DKH_DTL F (nolock) WHERE F.DKH_NO = A.DKH_NO AND F.PAID_CASH = 0 AND F.UTJ_APPV_STS = 'APPD' AND F.PAID_STS != '999')&#xd;				ELSE (A.QTY_CUSTOMER-(SELECT COUNT(0) PAID_CASH FROM TRX_DKH_DTL F (nolock) WHERE F.DKH_NO = A.DKH_NO AND F.PAID_CASH &gt; 0 AND F.PAID_STS != '999'))&#xd;			END jumlahTidakTertagih,&#xd;			(&#xd;				SELECT COUNT(0) SP_NO FROM TRX_DKH_DTL(nolock)&#xd;				WHERE SP_TYPE = '001' AND DKH_NO = A.DKH_NO &#xd;			) as sp1,&#xd;			(&#xd;				SELECT COUNT(0) SP_NO FROM TRX_DKH_DTL(nolock) &#xd;				WHERE SP_TYPE = '002' AND DKH_NO = A.DKH_NO &#xd;			) as sp2,&#xd;			(&#xd;				SELECT COUNT(0) SP_NO FROM TRX_DKH_DTL(nolock) &#xd;				WHERE SP_TYPE = '003' AND DKH_NO = A.DKH_NO &#xd;			) as sp3,&#xd;			(&#xd;				SELECT COUNT(0) SP_NO FROM TRX_DKH_DTL(nolock) &#xd;				WHERE SP_TYPE = '004' AND DKH_NO = A.DKH_NO &#xd;			) as sp1Mikro,&#xd;			(&#xd;				SELECT COUNT(0) SP_NO FROM TRX_DKH_DTL(nolock) &#xd;				WHERE SP_TYPE = '005' AND DKH_NO = A.DKH_NO &#xd;			) as sp2Mikro,&#xd;			(&#xd;				SELECT COUNT(0) SP_NO FROM TRX_DKH_DTL(nolock) &#xd;				WHERE SP_TYPE = '006' AND DKH_NO = A.DKH_NO &#xd;			) as sp3Mikro,&#xd;			A.CREATED_DATE createdDate,&#xd;			A.CREATED_BY createdBy,&#xd;			A.QTY_CUSTOMER_CASH qtyCustomerCash,&#xd;			CASE&#xd;				WHEN A.UPDATED_DATE IS NULL THEN '-'&#xd;				ELSE CONVERT(varchar, A.UPDATED_DATE, 121) &#xd;			END updatedDateStr,&#xd;			CASE&#xd;				WHEN A.DKH_STS = 'OPEN' THEN CONVERT(DATE, A.CREATED_DATE)&#xd;				WHEN A.DKH_STS = 'PROC' THEN CONVERT(DATE, A.SUBMITTED_DATE)&#xd;				WHEN A.DKH_STS = 'CLOS' THEN CONVERT(DATE, A.CLOSED_DATE)&#xd;				WHEN A.DKH_STS = 'CANC' THEN CONVERT(DATE, A.CANCELED_DATE)&#xd;			END dkhStatusDateFilter,&#xd;			(&#xd;				select count(aggr_no) as totalPenugasan from trx_dkh_dtl(nolock) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999'&#xd;			) as totalPenugasan,&#xd;			(&#xd;				select count(aggr_no) as totalPenugasan from trx_dkh_dtl(nolock) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and visit_code = '1'&#xd;			) as totalDikunjungi,&#xd;			(&#xd;				select count(aggr_no) as totalPenugasan from trx_dkh_dtl(nolock) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and visit_code = '0'&#xd;			) as totalTidakDikunjungi,&#xd;			(&#xd;				select count(aggr_no) as totalPenugasan from trx_dkh_dtl(nolock) where company_code = A.company_code and branch_code = A.branch_code and dkh_no = A.dkh_no and paid_sts != '999' and isnull(visit_code, '') = ''&#xd;			) as totalBelumDikunjungi,&#xd;			concat(A.PIC_HEAD, ' ') picHead,&#xd;			A.QTY_CUSTOMER qtyCustomer,&#xd;			A.QTY_GROUP qtyGroup,&#xd;			A.QTY_GROUP_VISIT qtyGroupVisit,&#xd;			A.QTY_GROUP_CASH qtyGroupCash,&#xd;			A.TOT_COLL_FEE totCollFee,&#xd;			A.TOT_PENALTY_VALUE totPenaltyValue,&#xd;			A.TOT_INSTALL_BILL totInstallBill,&#xd;			A.TOT_BILL totBill,&#xd;			A.TOT_PAID_COLL_FEE totPaidCollFee,&#xd;			A.TOT_PAID_PENALTY totPaidPenalty,&#xd;			A.TOT_PAID_INSTALL_BILL totPaidInstallBill,&#xd;			A.TOT_UTJ_PLUS totUtjPlus,&#xd;			A.TOT_PAID_CASH totPaidCash,&#xd;			A.CASHIER_DEPOSIT_VALUE cashierDepositValue,&#xd;			A.PAYMENT_POINT_DEPOSIT paymentPointDeposit,&#xd;			A.COLL_CASH_ON_HAND collCashOnHand,&#xd;			A.TOT_UTJ_USAGE totUtjUsage&#xd;		FROM TRX_DKH_HDR A (nolock)&#xd;		WHERE A.COMPANY_CODE = @COMPANY_CODE AND A.COLL_CODE = @COLL_CODE AND A.PRODUCT_CODE = @PRODUCT_CODE AND A.BRANCH_CODE = @BRANCH_CODE AND A.DKH_STS='PROC'&#xd;)  A</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="productCode" name="productCode" xsdType="string"/>
         <element column="productName" name="productName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhSts" name="dkhSts" xsdType="string"/>
         <element column="dkhStsName" name="dkhStsName" xsdType="string"/>
         <element column="nameDay" name="nameDay" xsdType="string"/>
         <element column="jumlahTertagih" name="jumlahTertagih" xsdType="string"/>
         <element column="jumlahTidakTertagih" name="jumlahTidakTertagih" xsdType="string"/>
         <element column="sp1" name="sp1" xsdType="string"/>
         <element column="sp2" name="sp2" xsdType="string"/>
         <element column="sp3" name="sp3" xsdType="string"/>
         <element column="sp1Mikro" name="sp1Mikro" xsdType="string"/>
         <element column="sp2Mikro" name="sp2Mikro" xsdType="string"/>
         <element column="sp3Mikro" name="sp3Mikro" xsdType="string"/>
         <element column="createdDate" name="createdDate" xsdType="string"/>
         <element column="createdBy" name="createdBy" xsdType="string"/>
         <element column="qtyCustomerCash" name="qtyCustomerCash" xsdType="string"/>
         <element column="updatedDateStr" name="updatedDateStr" xsdType="string"/>
         <element column="dkhStatusDateFilter" name="dkhStatusDateFilter" xsdType="string"/>
         <element column="totalPenugasan" name="totalPenugasan" xsdType="string"/>
         <element column="totalDikunjungi" name="totalDikunjungi" xsdType="string"/>
         <element column="totalTidakDikunjungi" name="totalTidakDikunjungi" xsdType="string"/>
         <element column="totalBelumDikunjungi" name="totalBelumDikunjungi" xsdType="string"/>
         <element column="picHead" name="picHead" xsdType="string"/>
         <element column="qtyCustomer" name="qtyCustomer" xsdType="string"/>
         <element column="qtyGroup" name="qtyGroup" xsdType="string"/>
         <element column="qtyGroupVisit" name="qtyGroupVisit" xsdType="string"/>
         <element column="qtyGroupCash" name="qtyGroupCash" xsdType="string"/>
         <element column="totCollFee" name="totCollFee" xsdType="string"/>
         <element column="totPenaltyValue" name="totPenaltyValue" xsdType="string"/>
         <element column="totInstallBill" name="totInstallBill" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="totPaidCollFee" name="totPaidCollFee" xsdType="string"/>
         <element column="totPaidPenalty" name="totPaidPenalty" xsdType="string"/>
         <element column="totPaidInstallBill" name="totPaidInstallBill" xsdType="string"/>
         <element column="totUtjPlus" name="totUtjPlus" xsdType="string"/>
         <element column="totPaidCash" name="totPaidCash" xsdType="string"/>
         <element column="cashierDepositValue" name="cashierDepositValue" xsdType="string"/>
         <element column="paymentPointDeposit" name="paymentPointDeposit" xsdType="string"/>
         <element column="collCashOnHand" name="collCashOnHand" xsdType="string"/>
         <element column="totUtjUsage" name="totUtjUsage" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="collCode" sqlType="STRING"/>
      <param name="productCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="getDkhDtl" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @GROUP_CODE varchar(50) = :groupCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;&#xd;SELECT companyCode, branchCode, branchCodeAggr, dkhNo, aggrNo, dkhTime, groupCode, groupName, customerCode, promiseeSts, dueDate, instFrom, instTo, dayOverdue, totUndueInstall, installment, collFee, penaltyValue,&#xd;installBill, totBill, visitCode, visitTime, paidSts, receiptNo, jbDate, jbTime, tuDate, tuTime, meetCode, meetName, addrSts, unitSts, paymentDate, presenceSts, prepaymentSts, paidCollFee, paidPenalty,&#xd;paidInstall, paidCash, discount, attCode, utjBalance, utjPlusValue, utjUsageValue, utjUsageReason, utjAppvSts, utjAppvDate, utjPosted, utjPostedDate, spNo, spType, spReceiptType, spReceiptName,&#xd;spNotes, sttuNo, collNotes, flagSend, flagSendDate, longtitude, latitude, cashierCode, billSts, customerFullname, rt, rw, hpNo1, &#xd;case when phoneArea1 is null then 'null' else phoneArea1 end phoneArea1,&#xd;case when phoneNo1 is null then 'null' else phoneNo1 end phoneNo1, &#xd;case when phoneArea2 is null then 'null' else phoneArea2 end phoneArea2,&#xd;case when phoneNo2 is null then 'null' else phoneNo2 end phoneNo2, &#xd;villageName, zipCode, subdistrictName, cityName, provinceName, collCode, collName, spTypeName, nopol, customerPaymentDate, address, branchName, tenor, iif(collFeeSchedule is null, 0,collFeeSchedule) collFeeSchedule, visitTimeValue, tuTimeValue, voucherNo, ratingCode, teamNo, billStsName, positionGroupName, dkhDate, attDesc, waktuDebitur FROM (&#xd;	SELECT &#xd;		A.COMPANY_CODE companyCode,&#xd;		A.BRANCH_CODE branchCode,&#xd;		B.BRANCH_CODE branchCodeAggr,&#xd;		A.DKH_NO dkhNo,&#xd;		CONCAT(' ',A.AGGR_NO) aggrNo,&#xd;		case&#xd;			when A.DKH_TIME = '' then 'null'&#xd;			when A.DKH_TIME is null then 'null'&#xd;			else A.DKH_TIME&#xd;		end dkhTime,&#xd;		CONCAT(A.GROUP_CODE, ' ') groupCode,&#xd;		L.GROUP_NAME groupName,&#xd;		case&#xd;			when A.CUSTOMER_CODE = '' then 'null'&#xd;			when A.CUSTOMER_CODE is null then 'null'&#xd;			else CONCAT(A.CUSTOMER_CODE, ' ')&#xd;		end customerCode,&#xd;		A.PROMISEE_STS promiseeSts,&#xd;		A.DUE_DATE dueDate,&#xd;		A.INST_FROM instFrom,&#xd;		A.INST_TO instTo,&#xd;		case &#xd;			when A.DAY_OVERDUE = 0 then 0&#xd;			when A.DAY_OVERDUE is null then 0&#xd;			else A.DAY_OVERDUE&#xd;		end dayOverdue,&#xd;		A.TOT_UNDUE_INSTALL totUndueInstall,&#xd;		A.INSTALLMENT installment,&#xd;		A.COLL_FEE collFee,&#xd;		A.PENALTY_VALUE penaltyValue,&#xd;		A.INSTALL_BILL installBill,&#xd;		A.TOT_BILL totBill,&#xd;		case&#xd;			when A.VISIT_CODE = '' then 'null'&#xd;			when A.VISIT_CODE is null then 'null'&#xd;			else A.VISIT_CODE&#xd;		end visitCode,&#xd;		case&#xd;			when A.VISIT_TIME = '' then 'null'&#xd;			when A.VISIT_TIME is null then 'null'&#xd;			else CONCAT(A.VISIT_TIME, ' ')&#xd;		end visitTime,&#xd;		case&#xd;			when A.PAID_STS = '' then 'null'&#xd;			when A.PAID_STS is null then 'null'&#xd;			else A.PAID_STS&#xd;		end paidSts,&#xd;		case&#xd;			when A.RECEIPT_NO = '' then 'null'&#xd;			when A.RECEIPT_NO is null then 'null'&#xd;			else CONCAT(A.RECEIPT_NO, ' ')&#xd;		end receiptNo,&#xd;		case&#xd;			when A.JB_DATE is null then '1900-01-01' &#xd;			else A.JB_DATE&#xd;		end jbDate,&#xd;		case&#xd;			when A.JB_TIME = '' then 'null'&#xd;			when A.JB_TIME is null then 'null'&#xd;			else A.JB_TIME&#xd;		end jbTime,&#xd;		case &#xd;			when A.TU_DATE is null then '1900-01-01' &#xd;			else A.TU_DATE&#xd;		end tuDate,&#xd;		case&#xd;			when A.TU_TIME = '' then 'null'&#xd;			when A.TU_TIME is null then 'null'&#xd;			else A.TU_TIME&#xd;		end tuTime,&#xd;		case&#xd;			when A.MEET_CODE = '' then 'null'&#xd;			when A.MEET_CODE is null then 'null'&#xd;			else A.MEET_CODE&#xd;		end meetCode,&#xd;		case&#xd;			when A.MEET_NAME = '' then 'null'&#xd;			when A.MEET_NAME is null then 'null'&#xd;			else A.MEET_NAME&#xd;		end meetName,&#xd;		case&#xd;			when A.ADDR_STS = '' then 'null'&#xd;			when A.ADDR_STS is null then 'null'&#xd;			else A.ADDR_STS&#xd;		end addrSts,&#xd;		case&#xd;			when A.UNIT_STS = '' then 'null'&#xd;			when A.UNIT_STS is null then 'null'&#xd;			else A.UNIT_STS&#xd;		end unitSts,&#xd;		case &#xd;			when A.PAYMENT_DATE is null then '1900-01-01' &#xd;			else A.PAYMENT_DATE&#xd;		end paymentDate,&#xd;		A.PRESENCE_STS presenceSts,&#xd;		A.PREPAYMENT_STS prepaymentSts,&#xd;		A.PAID_COLL_FEE paidCollFee,&#xd;		A.PAID_PENALTY paidPenalty,&#xd;		A.PAID_INSTALL paidInstall,&#xd;		A.PAID_CASH paidCash,&#xd;		A.DISCOUNT discount,&#xd;		case&#xd;			when A.ATT_CODE = '' then 'null'&#xd;			when A.ATT_CODE is null then 'null'&#xd;			else A.ATT_CODE&#xd;		end attCode,&#xd;		A.UTJ_BALANCE utjBalance,&#xd;		A.UTJ_PLUS_VALUE utjPlusValue,&#xd;		A.UTJ_USAGE_VALUE utjUsageValue,&#xd;		case&#xd;			when A.UTJ_USAGE_REASON = '' then 'null'&#xd;			when A.UTJ_USAGE_REASON is null then 'null'&#xd;			else A.UTJ_USAGE_REASON&#xd;		end utjUsageReason,&#xd;		case&#xd;			when A.UTJ_APPV_STS = '' then 'null'&#xd;			when A.UTJ_APPV_STS is null then 'null'&#xd;			else A.UTJ_APPV_STS&#xd;		end utjAppvSts,&#xd;		case&#xd;			when A.UTJ_APPV_DATE is null then '1900-01-01'&#xd;			else A.UTJ_APPV_DATE&#xd;		end utjAppvDate,&#xd;		case&#xd;			when A.UTJ_POSTED = '' then '0'&#xd;			when A.UTJ_POSTED is null then '0'&#xd;			else A.UTJ_POSTED&#xd;		end utjPosted,&#xd;		case&#xd;			when A.UTJ_POSTED_DATE = '' then '1900-01-01'&#xd;			when A.UTJ_POSTED_DATE is null then '1900-01-01'&#xd;			else A.UTJ_POSTED_DATE&#xd;		end utjPostedDate,&#xd;		case&#xd;			when A.SP_NO = '' then 'null'&#xd;			when A.SP_NO is null then 'null'&#xd;			else A.SP_NO&#xd;		end spNo,&#xd;		case&#xd;			when A.SP_TYPE = '' then 'null'&#xd;			when A.SP_TYPE is null then 'null'&#xd;			else A.SP_TYPE&#xd;		end spType,&#xd;		case&#xd;			when A.SP_RECEIPT_TYPE = '' then 'null'&#xd;			when A.SP_RECEIPT_TYPE is null then 'null'&#xd;			else A.SP_RECEIPT_TYPE&#xd;		end spReceiptType,&#xd;		case&#xd;			when A.SP_RECEIPT_NAME = '' then 'null'&#xd;			when A.SP_RECEIPT_NAME is null then 'null'&#xd;			else A.SP_RECEIPT_NAME&#xd;		end spReceiptName,&#xd;		case&#xd;			when A.SP_NOTES = '' then 'null'&#xd;			when A.SP_NOTES is null then 'null'&#xd;			else A.SP_NOTES&#xd;		end spNotes,&#xd;		case&#xd;			when A.STTU_NO = '' then 'null'&#xd;			when A.STTU_NO is null then 'null'&#xd;			else A.STTU_NO&#xd;		end sttuNo,&#xd;		case&#xd;			when A.COLL_NOTES = '' then 'null'&#xd;			when A.COLL_NOTES is null then 'null'&#xd;			else A.COLL_NOTES&#xd;		end collNotes,&#xd;		A.FLAG_SEND flagSend,&#xd;		case&#xd;			when A.FLAG_SEND_DATE is null then '1900-01-01' &#xd;			else A.FLAG_SEND_DATE&#xd;		end flagSendDate,&#xd;		case&#xd;			when A.LONGTITUDE = '' then 'null'&#xd;			when A.LONGTITUDE is null then 'null'&#xd;			else A.LONGTITUDE&#xd;		end longtitude,&#xd;		case&#xd;			when A.LATITUDE = '' then 'null'&#xd;			when A.LATITUDE is null then 'null'&#xd;			else A.LATITUDE&#xd;		end latitude,&#xd;		case&#xd;			when A.CASHIER_CODE = '' then 'null'&#xd;			when A.CASHIER_CODE is null then 'null'&#xd;			else A.CASHIER_CODE&#xd;		end cashierCode,&#xd;		A.BILL_STS billSts,&#xd;		B.CUSTOMER_FULLNAME customerFullname,&#xd;		M.COLL_ADDRESS_TYPE collAddressType,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IIF(CS.ID_ADDRESS = '' OR CS.ID_ADDRESS IS NULL, 'null', CS.ID_ADDRESS)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN IIF(CS.DOMICILE_ADDRESS = '' OR CS.DOMICILE_ADDRESS IS NULL, 'null', CS.DOMICILE_ADDRESS)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(F.OFFICE_ADDRESS = '' OR F.OFFICE_ADDRESS IS NULL, 'null', F.OFFICE_ADDRESS)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(CO.OFFICE_ADDRESS = '' OR CO.OFFICE_ADDRESS IS NULL, 'null', CO.OFFICE_ADDRESS)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(G.OFFICE_ADDRESS = '' OR G.OFFICE_ADDRESS IS NULL, 'null', G.OFFICE_ADDRESS)&#xd;			END AS RESULT&#xd;		) as address,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN IIF(CS.HP_NO1 = '' OR CS.HP_NO1 IS NULL, 'null', CS.HP_NO1)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(F.HP_NO = '' OR F.HP_NO IS NULL, 'null', F.HP_NO)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(CO.HP_NO1 = '' OR CO.HP_NO1 IS NULL, 'null', CO.HP_NO1)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(G.HP_NO = '' OR G.HP_NO IS NULL, 'null', G.HP_NO)&#xd;			END AS RESULT&#xd;		) as hpNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_AREA1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_AREA1&#xd;			END AS RESULT&#xd;		) as phoneArea1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN F.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN CO.PHONE_NO1&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN G.PHONE_NO1&#xd;			END AS RESULT&#xd;		) as phoneNo1,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_AREA2&#xd;			END AS RESULT&#xd;		) as phoneArea2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' OR B.COLL_ADDRESS_TYPE = 'D' THEN CS.PHONE_NO2&#xd;			END AS RESULT&#xd;		) as phoneNo2,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IIF(CS.ID_RT = '' OR CS.ID_RT IS NULL, 'null', CS.ID_RT)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN IIF(CS.DOMICILE_RT = '' OR CS.DOMICILE_RT IS NULL, 'null', CS.DOMICILE_RT)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(F.OFFICE_RT = '' OR F.OFFICE_RT IS NULL, 'null', F.OFFICE_RT)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(CO.OFFICE_RT = '' OR CO.OFFICE_RT IS NULL, 'null', CO.OFFICE_RT)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(G.OFFICE_RT = '' OR G.OFFICE_RT IS NULL, 'null', G.OFFICE_RT)&#xd;			END AS RESULT&#xd;		) as rt,&#xd;		(&#xd;			SELECT &#xd;			CASE &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IIF(CS.ID_RW = '' OR CS.ID_RW IS NULL, 'null', CS.ID_RW) &#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN IIF(CS.DOMICILE_RW = '' OR CS.DOMICILE_RW IS NULL, 'null', CS.DOMICILE_RW)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(F.OFFICE_RW = '' OR F.OFFICE_RW IS NULL, 'null', F.OFFICE_RW)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(CO.OFFICE_RW = '' OR CO.OFFICE_RW IS NULL, 'null', CO.OFFICE_RW)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(G.OFFICE_RW = '' OR G.OFFICE_RW IS NULL, 'null', G.OFFICE_RW)&#xd;			END AS RESULT&#xd;		) as rw,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IIF(IV.VILLAGE_NAME = '' OR IV.VILLAGE_NAME IS NULL, 'null', IV.VILLAGE_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN IIF(DV.VILLAGE_NAME = '' OR DV.VILLAGE_NAME IS NULL, 'null', DV.VILLAGE_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(KV.VILLAGE_NAME = '' OR KV.VILLAGE_NAME IS NULL, 'null', KV.VILLAGE_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(COV.VILLAGE_NAME = '' OR COV.VILLAGE_NAME IS NULL, 'null', COV.VILLAGE_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(BV.VILLAGE_NAME = '' OR BV.VILLAGE_NAME IS NULL, 'null', BV.VILLAGE_NAME)&#xd;			END&#xd;		) as villageName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IIF(ISUB.SUBDISTRICT_NAME = '' OR ISUB.SUBDISTRICT_NAME IS NULL, 'null', ISUB.SUBDISTRICT_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN IIF(DSUB.SUBDISTRICT_NAME = '' OR DSUB.SUBDISTRICT_NAME IS NULL, 'null', DSUB.SUBDISTRICT_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(KSUB.SUBDISTRICT_NAME = '' OR KSUB.SUBDISTRICT_NAME IS NULL, 'null', KSUB.SUBDISTRICT_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(COSUB.SUBDISTRICT_NAME = '' OR COSUB.SUBDISTRICT_NAME IS NULL, 'null', COSUB.SUBDISTRICT_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(BSUB.SUBDISTRICT_NAME = '' OR BSUB.SUBDISTRICT_NAME IS NULL, 'null', BSUB.SUBDISTRICT_NAME)&#xd;			END&#xd;		) as subdistrictName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IIF(IC.CITY_NAME = '' OR IC.CITY_NAME IS NULL, 'null', IC.CITY_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN IIF(DC.CITY_NAME = '' OR DC.CITY_NAME IS NULL, 'null', DC.CITY_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(KC.CITY_NAME = '' OR KC.CITY_NAME IS NULL, 'null', KC.CITY_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(COVC.CITY_NAME = '' OR COVC.CITY_NAME IS NULL, 'null', COVC.CITY_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(BC.CITY_NAME = '' OR BC.CITY_NAME IS NULL,'null', BC.CITY_NAME)&#xd;			END&#xd;		) as cityName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IIF(IP.PROVINCE_NAME = '' OR IP.PROVINCE_NAME IS NULL, 'null', IP.PROVINCE_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN IIF(DP.PROVINCE_NAME = '' OR DP.PROVINCE_NAME IS NULL, 'null', DP.PROVINCE_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(KP.PROVINCE_NAME = '' OR KP.PROVINCE_NAME IS NULL, 'null', KP.PROVINCE_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(COP.PROVINCE_NAME = '' OR COP.PROVINCE_NAME IS NULL, 'null', COP.PROVINCE_NAME)&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(BP.PROVINCE_NAME = '' OR BP.PROVINCE_NAME IS NULL, 'null', BP.PROVINCE_NAME)&#xd;			END&#xd;		) as provinceName,&#xd;		(&#xd;			CASE&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'I' THEN IIF(IV.ZIPCODE = '' OR IV.ZIPCODE IS NULL, 'null', CONCAT(IV.ZIPCODE, ' '))&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'D' THEN IIF(DV.ZIPCODE = '' OR DV.ZIPCODE IS NULL, 'null', CONCAT(DV.ZIPCODE, ' '))&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'P' THEN IIF(KV.ZIPCODE = '' OR KV.ZIPCODE IS NULL, 'null', CONCAT(KV.ZIPCODE, ' '))&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'K' AND B.CUSTOMER_TYPE = 'C' THEN IIF(COV.ZIPCODE = '' OR COV.ZIPCODE IS NULL, 'null', CONCAT(COV.ZIPCODE, ' '))&#xd;				WHEN B.COLL_ADDRESS_TYPE = 'B' THEN IIF(BV.ZIPCODE = '' OR BV.ZIPCODE IS NULL, 'null', CONCAT(BV.ZIPCODE, ' '))&#xd;			END&#xd;		) as zipCode,&#xd;		CONCAT(H.COLL_CODE, ' ') collCode,&#xd;		I.FULLNAME collName,&#xd;		case&#xd;			when (SELECT K.PARAM_DESCRIP FROM MST_GLOBAL_PARAM K (nolock) WHERE A.SP_TYPE = K.PARAM_CODE AND K.CONDITION = 'SP_TYPE' AND K.FLAG_ACTIVE = '1') = '' then 'null'&#xd;			when (SELECT K.PARAM_DESCRIP FROM MST_GLOBAL_PARAM K (nolock) WHERE A.SP_TYPE = K.PARAM_CODE AND K.CONDITION = 'SP_TYPE' AND K.FLAG_ACTIVE = '1') is null then 'null'&#xd;			else (SELECT K.PARAM_DESCRIP FROM MST_GLOBAL_PARAM K (nolock) WHERE A.SP_TYPE = K.PARAM_CODE AND K.CONDITION = 'SP_TYPE' AND K.FLAG_ACTIVE = '1')&#xd;		end spTypeName,&#xd;		case&#xd;			when N.NOPOL = '' then 'null'&#xd;			when N.NOPOL is null then 'null'&#xd;			else N.NOPOL&#xd;		end nopol,&#xd;		case&#xd;			when A.CUSTOMER_PAYMENT_DATE is null then '1900-01-01'&#xd;			else A.CUSTOMER_PAYMENT_DATE&#xd;		end customerPaymentDate,&#xd;		O.BRANCH_NAME branchName,&#xd;		B.TENOR	tenor,&#xd;		(&#xd;			SELECT &#xd;				SUM( isnull((COLL_FEE), 0) - isnull((COLL_FEE_PAID), 0) )&#xd;				total&#xd;			FROM TRX_AGGR_SCHEDULE (nolock) WHERE AGGR_NO = A.AGGR_NO AND COMPANY_CODE = A.COMPANY_CODE&#xd;		) as collFeeSchedule,&#xd;		case&#xd;			when A.VISIT_TIME_VALUE = '' then 'null'&#xd;			when A.VISIT_TIME_VALUE is null then 'null'&#xd;			else CONCAT(A.VISIT_TIME_VALUE, ' ')&#xd;		end visitTimeValue,&#xd;		case&#xd;			when A.TU_TIME_VALUE = '' then 'null'&#xd;			when A.TU_TIME_VALUE is null then 'null'&#xd;			else A.TU_TIME_VALUE&#xd;		end tuTimeValue,&#xd;		case&#xd;			when ISNULL(A.VOUCHER_NO, '') = '' then 'null'&#xd;			when A.VOUCHER_NO is null then 'null'&#xd;			else ISNULL(A.VOUCHER_NO, '')&#xd;		end voucherNo,&#xd;		case&#xd;			when A.RATING_CODE = '' then 'null'&#xd;			when A.RATING_CODE is null then 'null'&#xd;			else A.RATING_CODE&#xd;		end ratingCode,&#xd;		case&#xd;			when CAST(A.TEAM_NO AS VARCHAR(50)) = '' then 'null'&#xd;			when CAST(A.TEAM_NO AS VARCHAR(50)) is null then 'null'&#xd;			else CAST(A.TEAM_NO AS VARCHAR(50))&#xd;		end teamNo,&#xd;		P.PARAM_DESCRIP billStsName,&#xd;		GH.GROUP_CODE positionGroupCode,&#xd;		CASE&#xd;			WHEN ISNULL(GH.GROUP_CODE, '') != '' THEN (SELECT P1.PARAM_DESCRIP FROM MST_GLOBAL_PARAM P1 (nolock) WHERE A.COMPANY_CODE = P1.COMPANY_CODE AND P1.PARAM_CODE = 'P1' AND P1.CONDITION = 'POSITION_GROUP_CODE')&#xd;			WHEN ISNULL(GH.GROUP_CODE, '') = '' THEN (SELECT P2.PARAM_DESCRIP FROM MST_GLOBAL_PARAM P2 (nolock) WHERE A.COMPANY_CODE = P2.COMPANY_CODE AND P2.PARAM_CODE = 'P2' AND P2.CONDITION = 'POSITION_GROUP_CODE')&#xd;		END positionGroupName,&#xd;		H.DKH_DATE dkhDate,&#xd;		case&#xd;			when ATT.ATT_NAME = '' then 'null'&#xd;			when ATT.ATT_NAME is null then 'null'&#xd;			else ATT.ATT_NAME&#xd;		end attDesc,&#xd;		case&#xd;			when DGR.COLL_TIME = '' then 'null'&#xd;			when DGR.COLL_TIME is null then 'null'&#xd;			else CONCAT(DGR.COLL_TIME, ' ')&#xd;		end waktuDebitur &#xd;	FROM TRX_DKH_DTL A (nolock)&#xd;	LEFT JOIN TRX_AGGR B (nolock)&#xd;	ON A.AGGR_NO = B.AGGR_NO and A.COMPANY_CODE=B.COMPANY_CODE&#xd;	LEFT JOIN MST_GROUP_HDR GH (nolock)&#xd;	ON A.GROUP_CODE = GH.GROUP_CODE AND B.APPL_NO = GH.GROUP_LEADER AND A.COMPANY_CODE=GH.COMPANY_CODE&#xd;	--LEFT JOIN MST_GLOBAL_PARAM P1 (nolock)&#xd;	--ON A.COMPANY_CODE = P1.COMPANY_CODE AND P1.PARAM_CODE = 'P1' AND P1.CONDITION = 'POSITION_GROUP_CODE'&#xd;	--LEFT JOIN MST_GLOBAL_PARAM P2 (nolock)&#xd;	--ON A.COMPANY_CODE = P2.COMPANY_CODE AND P2.PARAM_CODE = 'P2' AND P2.CONDITION = 'POSITION_GROUP_CODE'&#xd;	LEFT JOIN MST_CUSTOMER C (nolock)&#xd;	ON B.CUSTOMER_CODE = C.CUSTOMER_CODE and B.COMPANY_CODE = C.COMPANY_CODE&#xd;	LEFT JOIN TRX_DKH_HDR H (nolock)&#xd;	ON A.DKH_NO = H.DKH_NO AND A.COMPANY_CODE=H.COMPANY_CODE AND A.BRANCH_CODE=H.BRANCH_CODE&#xd;	LEFT JOIN TRX_DKH_GROUP DGR (nolock)&#xd;	ON A.COMPANY_CODE = DGR.COMPANY_CODE AND A.DKH_NO = DGR.DKH_NO AND A.GROUP_CODE = DGR.GROUP_CODE AND A.BRANCH_CODE=DGR.BRANCH_CODE&#xd;	LEFT JOIN MST_EMPLOYEE I (nolock)&#xd;	ON H.COLL_CODE = I.NIK&#xd;	--LEFT JOIN MST_GLOBAL_PARAM K (nolock)&#xd;	--ON A.SP_TYPE = K.PARAM_CODE AND K.CONDITION = 'SP_TYPE' AND K.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_GROUP_HDR L (nolock)&#xd;	ON A.GROUP_CODE = L.GROUP_CODE AND A.COMPANY_CODE=L.COMPANY_CODE&#xd;	LEFT JOIN TRX_APPL M (nolock)&#xd;	ON B.APPL_NO = M.APPL_NO AND B.COMPANY_CODE=M.COMPANY_CODE&#xd;	LEFT JOIN TRX_AGGR_ASSET N (nolock)&#xd;	ON B.AGGR_NO = N.AGGR_NO AND B.COMPANY_CODE=N.COMPANY_CODE&#xd;	LEFT JOIN MST_BRANCH O (nolock)&#xd;	ON A.BRANCH_CODE = O.BRANCH_CODE AND A.COMPANY_CODE=O.COMPANY_CODE&#xd;	LEFT JOIN MST_GLOBAL_PARAM P (nolock)&#xd;	ON A.COMPANY_CODE = P.COMPANY_CODE AND A.BILL_STS = P.PARAM_CODE AND P.CONDITION = 'BILL_STS' AND P.FLAG_ACTIVE = '1'&#xd;	LEFT JOIN MST_COLL_ATTENDANCE ATT (nolock)&#xd;	ON A.COMPANY_CODE = ATT.COMPANY_CODE AND A.ATT_CODE = ATT.ATT_CODE&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON B.CUSTOMER_CODE = CS.CUSTOMER_CODE AND B.COMPANY_CODE=CS.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE IV (nolock)&#xd;	ON CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE and CS.COMPANY_CODE=IV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT ISUB (nolock)&#xd;	ON ISUB.SUBDISTRICT_CODE = IV.SUBDISTRICT_CODE AND ISUB.COMPANY_CODE = IV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY IC (nolock)&#xd;	ON IV.CITY_CODE = IC.CITY_CODE AND IV.COMPANY_CODE=IC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE IP (nolock)&#xd;	ON IV.PROVINCE_CODE = IP.PROVINCE_CODE AND IV.COMPANY_CODE=IP.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE DV (nolock)&#xd;	ON CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE AND CS.COMPANY_CODE=DV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT DSUB (nolock)&#xd;	ON DSUB.SUBDISTRICT_CODE = DV.SUBDISTRICT_CODE AND DSUB.COMPANY_CODE=DV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY DC (nolock)&#xd;	ON DV.CITY_CODE = DC.CITY_CODE AND DV.COMPANY_CODE=DC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE DP (nolock)&#xd;	ON DV.PROVINCE_CODE = DP.PROVINCE_CODE AND DV.COMPANY_CODE=DP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE F (nolock)&#xd;	ON B.CUSTOMER_CODE = F.CUSTOMER_CODE AND F.EMPLOYEE_TYPE = 'O' AND B.COMPANY_CODE=F.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE KV (nolock)&#xd;	ON F.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE AND F.COMPANY_CODE=KV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT KSUB (nolock)&#xd;	ON KSUB.SUBDISTRICT_CODE = KV.SUBDISTRICT_CODE AND KSUB.COMPANY_CODE=KV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY KC (nolock)&#xd;	ON KV.CITY_CODE = KC.CITY_CODE AND KV.COMPANY_CODE=KC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE KP (nolock)&#xd;	ON KV.PROVINCE_CODE = KP.PROVINCE_CODE AND KV.COMPANY_CODE=KP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE G (nolock)&#xd;	ON B.CUSTOMER_CODE = G.CUSTOMER_CODE AND G.EMPLOYEE_TYPE = 'B' AND B.COMPANY_CODE=G.COMPANY_CODE&#xd;	LEFT JOIN MST_VILLAGE BV (nolock)&#xd;	ON G.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE AND G.COMPANY_CODE = BV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT BSUB (nolock)&#xd;	ON BSUB.SUBDISTRICT_CODE = BV.SUBDISTRICT_CODE AND BSUB.COMPANY_CODE=BV.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY BC (nolock)&#xd;	ON BV.CITY_CODE = BC.CITY_CODE AND BV.COMPANY_CODE=BC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE BP (nolock)&#xd;	ON BV.PROVINCE_CODE = BP.PROVINCE_CODE AND BV.COMPANY_CODE=BP.COMPANY_CODE&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON A.COMPANY_CODE = CO.COMPANY_CODE AND A.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	LEFT JOIN MST_VILLAGE COV (nolock)&#xd;	ON CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE AND CO.COMPANY_CODE=COV.COMPANY_CODE&#xd;	LEFT JOIN MST_SUBDISTRICT COSUB (nolock)&#xd;	ON COV.SUBDISTRICT_CODE = COSUB.SUBDISTRICT_CODE AND COV.COMPANY_CODE=COSUB.COMPANY_CODE&#xd;	LEFT JOIN MST_CITY COVC (nolock)&#xd;	ON COV.CITY_CODE = COVC.CITY_CODE AND COV.COMPANY_CODE=COVC.COMPANY_CODE&#xd;	LEFT JOIN MST_PROVINCE COP (nolock)&#xd;	ON COV.PROVINCE_CODE = COP.PROVINCE_CODE AND COV.COMPANY_CODE=COP.COMPANY_CODE&#xd;	WHERE A.PAID_STS != '999' and A.COMPANY_CODE = @COMPANY_CODE and A.DKH_NO = @DKH_NO&#xd;	and CONCAT(A.GROUP_CODE, ' ') = @GROUP_CODE and A.FLAG_SEND in ('1','2')&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchCodeAggr" name="branchCodeAggr" xsdType="string"/>
         <element column="dkhTime" name="dkhTime" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="customerCode" name="customerCode" xsdType="string"/>
         <element column="promiseeSts" name="promiseeSts" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="totUndueInstall" name="totUndueInstall" xsdType="string"/>
         <element column="installment" name="installment" xsdType="string"/>
         <element column="collFee" name="collFee" xsdType="string"/>
         <element column="penaltyValue" name="penaltyValue" xsdType="string"/>
         <element column="installBill" name="installBill" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="visitCode" name="visitCode" xsdType="string"/>
         <element column="visitTime" name="visitTime" xsdType="string"/>
         <element column="paidSts" name="paidSts" xsdType="string"/>
         <element column="receiptNo" name="receiptNo" xsdType="string"/>
         <element column="jbDate" name="jbDate" xsdType="string"/>
         <element column="jbTime" name="jbTime" xsdType="string"/>
         <element column="tuDate" name="tuDate" xsdType="string"/>
         <element column="tuTime" name="tuTime" xsdType="string"/>
         <element column="meetCode" name="meetCode" xsdType="string"/>
         <element column="meetName" name="meetName" xsdType="string"/>
         <element column="addrSts" name="addrSts" xsdType="string"/>
         <element column="unitSts" name="unitSts" xsdType="string"/>
         <element column="paymentDate" name="paymentDate" xsdType="string"/>
         <element column="presenceSts" name="presenceSts" xsdType="string"/>
         <element column="prepaymentSts" name="prepaymentSts" xsdType="string"/>
         <element column="paidCollFee" name="paidCollFee" xsdType="string"/>
         <element column="paidPenalty" name="paidPenalty" xsdType="string"/>
         <element column="paidInstall" name="paidInstall" xsdType="string"/>
         <element column="paidCash" name="paidCash" xsdType="string"/>
         <element column="discount" name="discount" xsdType="string"/>
         <element column="attCode" name="attCode" xsdType="string"/>
         <element column="utjBalance" name="utjBalance" xsdType="string"/>
         <element column="utjPlusValue" name="utjPlusValue" xsdType="string"/>
         <element column="utjUsageValue" name="utjUsageValue" xsdType="string"/>
         <element column="utjUsageReason" name="utjUsageReason" xsdType="string"/>
         <element column="utjAppvSts" name="utjAppvSts" xsdType="string"/>
         <element column="utjAppvDate" name="utjAppvDate" xsdType="string"/>
         <element column="utjPosted" name="utjPosted" xsdType="string"/>
         <element column="utjPostedDate" name="utjPostedDate" xsdType="string"/>
         <element column="spNo" name="spNo" xsdType="string"/>
         <element column="spType" name="spType" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
         <element column="spReceiptName" name="spReceiptName" xsdType="string"/>
         <element column="spNotes" name="spNotes" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="collNotes" name="collNotes" xsdType="string"/>
         <element column="flagSend" name="flagSend" xsdType="string"/>
         <element column="flagSendDate" name="flagSendDate" xsdType="string"/>
         <element column="longtitude" name="longtitude" xsdType="string"/>
         <element column="latitude" name="latitude" xsdType="string"/>
         <element column="cashierCode" name="cashierCode" xsdType="string"/>
         <element column="billSts" name="billSts" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="rt" name="rt" xsdType="string"/>
         <element column="rw" name="rw" xsdType="string"/>
         <element column="hpNo1" name="hpNo1" xsdType="string"/>
         <element column="phoneArea1" name="phoneArea1" xsdType="string"/>
         <element column="phoneNo1" name="phoneNo1" xsdType="string"/>
         <element column="phoneArea2" name="phoneArea2" xsdType="string"/>
         <element column="phoneNo2" name="phoneNo2" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="zipCode" name="zipCode" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="nopol" name="nopol" xsdType="string"/>
         <element column="customerPaymentDate" name="customerPaymentDate" xsdType="string"/>
         <element column="address" name="address" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="tenor" name="tenor" xsdType="string"/>
         <element column="collFeeSchedule" name="collFeeSchedule" xsdType="string"/>
         <element column="visitTimeValue" name="visitTimeValue" xsdType="string"/>
         <element column="tuTimeValue" name="tuTimeValue" xsdType="string"/>
         <element column="voucherNo" name="voucherNo" xsdType="string"/>
         <element column="ratingCode" name="ratingCode" xsdType="string"/>
         <element column="teamNo" name="teamNo" xsdType="string"/>
         <element column="billStsName" name="billStsName" xsdType="string"/>
         <element column="positionGroupName" name="positionGroupName" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="attDesc" name="attDesc" xsdType="string"/>
         <element column="waktuDebitur" name="waktuDebitur" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
   </query>
   <query id="getDkhGroup" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;&#xd;SELECT companyCode, branchCode, dkhNo, groupCode, groupName, groupAddress, groupRt, groupRw, villageCode, villageName, subdistrictName, cityName, provinceName, collCode, collName,&#xd;dkhDate, collTime, visitCode, visitTime, jbDate, jbTime, tuDate, tuTime, reasonUnvisit, receiptNo, qtyCustomerPaid, totCollFee, totPenaltyValue, totInstallBill, totBill, totPaidCollFee,&#xd;totPaidPenalty, totPaidInstallBill, totUtjPlusValue, totPaidCash, totUtjUsageValue, billSts, flagSend, flagSendDate, dkhSts, dkhStsName, janjiTagih, billStsName, collTimeDescrip, flagRevitalization, flagGroup FROM (&#xd;	SELECT companyCode, branchCode, dkhNo, groupCode, groupName, groupAddress, groupRt, groupRw, villageCode, villageName, subdistrictName, cityName, provinceName, collCode, collName,&#xd;	dkhDate, collTime, visitCode, visitTime, jbDate, jbTime, tuDate, tuTime, reasonUnvisit, receiptNo, qtyCustomerPaid, totCollFee, totPenaltyValue, totInstallBill, totBill, totPaidCollFee,&#xd;	totPaidPenalty, totPaidInstallBill, totUtjPlusValue, totPaidCash, totUtjUsageValue, billSts, flagSend, flagSendDate, dkhSts, dkhStsName, janjiTagih, billStsName, collTimeDescrip, jumlahDebitur, jumlahDebiturHapus, flagRevitalization, flagGroup FROM (&#xd;		SELECT &#xd;			A.COMPANY_CODE companyCode,&#xd;			A.BRANCH_CODE branchCode,&#xd;			A.DKH_NO dkhNo,&#xd;			CONCAT(A.GROUP_CODE, ' ') groupCode,&#xd;			case&#xd;				when B.GROUP_NAME = '' then 'null'&#xd;				when B.GROUP_NAME is null then 'null'&#xd;				else B.GROUP_NAME&#xd;			end groupName,&#xd;			case&#xd;				when B.GROUP_ADDRESS = '' then 'null'&#xd;				when B.GROUP_ADDRESS is null then 'null'&#xd;				else B.GROUP_ADDRESS&#xd;			end groupAddress,&#xd;			case&#xd;				when B.GROUP_RT = '' then 'null'&#xd;				when B.GROUP_RT is null then 'null'&#xd;				else B.GROUP_RT&#xd;			end groupRt,&#xd;			case&#xd;				when B.GROUP_RW = '' then 'null'&#xd;				when B.GROUP_RW is null then 'null'&#xd;				else B.GROUP_RW&#xd;			end groupRw,&#xd;			case&#xd;				when B.GROUP_VILLAGE_CODE = '' then 'null'&#xd;				when B.GROUP_VILLAGE_CODE IS NULL then 'null'&#xd;				else CONCAT(B.GROUP_VILLAGE_CODE, ' ')&#xd;			end villageCode,&#xd;			B.FLAG_REVITALIZATION flagRevitalization,&#xd;			case&#xd;				when C.VILLAGE_NAME = '' then 'null'&#xd;				when C.VILLAGE_NAME IS NULL then 'null'&#xd;				else C.VILLAGE_NAME&#xd;			end villageName,&#xd;			case&#xd;				when D.SUBDISTRICT_NAME = '' then 'null'&#xd;				when D.SUBDISTRICT_NAME IS NULL then 'null'&#xd;				else D.SUBDISTRICT_NAME&#xd;			end subdistrictName,&#xd;			case&#xd;				when E.CITY_NAME = '' then 'null'&#xd;				when E.CITY_NAME IS NULL then 'null'&#xd;				else E.CITY_NAME&#xd;			end cityName,&#xd;			case&#xd;				when F.PROVINCE_NAME = '' then 'null'&#xd;				when F.PROVINCE_NAME IS NULL then 'null'&#xd;				else F.PROVINCE_NAME&#xd;			end provinceName,&#xd;			CONCAT(G.COLL_CODE, ' ') collCode,&#xd;			H.FULLNAME collName,&#xd;			G.DKH_DATE dkhDate,&#xd;			G.DKH_STS dkhSts,&#xd;			IIF(I.PARAM_DESCRIP = '' OR I.PARAM_DESCRIP IS NULL, 'null', I.PARAM_DESCRIP) dkhStsName,&#xd;			case&#xd;				when A.COLL_TIME = '' then 'null'&#xd;				when A.COLL_TIME IS NULL then 'null'&#xd;				else CONCAT(A.COLL_TIME, ' ')&#xd;			end collTime,&#xd;			case&#xd;				when K.PARAM_DESCRIP = '' then 'null'&#xd;				when K.PARAM_DESCRIP IS NULL then 'null'&#xd;				else K.PARAM_DESCRIP&#xd;			end collTimeDescrip,&#xd;			case&#xd;				when A.VISIT_CODE = '' then 'null'&#xd;				when A.VISIT_CODE IS NULL then 'null'&#xd;				else A.VISIT_CODE&#xd;			end visitCode,&#xd;			case&#xd;				when A.VISIT_TIME = '' then 'null'&#xd;				when A.VISIT_TIME IS NULL then 'null'&#xd;				else CONCAT(A.VISIT_TIME, ' ')&#xd;			end visitTime,&#xd;			case&#xd;				when A.JB_DATE is null then '1900-01-01'&#xd;				else A.JB_DATE&#xd;			end jbDate,&#xd;			case&#xd;				when A.JB_TIME = '' then 'null'&#xd;				when A.JB_TIME IS NULL then 'null'&#xd;				else A.JB_TIME&#xd;			end jbTime,&#xd;			case&#xd;				when A.TU_DATE is null then '1900-01-01' &#xd;				else A.TU_DATE&#xd;			end tuDate,&#xd;			case&#xd;				when A.TU_TIME = '' then 'null'&#xd;				when A.TU_TIME IS NULL then 'null'&#xd;				else A.TU_TIME&#xd;			end tuTime,&#xd;			case&#xd;				when A.REASON_UNVISIT = '' then 'null'&#xd;				when A.REASON_UNVISIT IS NULL then 'null'&#xd;				else A.REASON_UNVISIT&#xd;			end reasonUnvisit,&#xd;			case&#xd;				when A.RECEIPT_NO = '' then 'null'&#xd;				when A.RECEIPT_NO IS NULL then 'null'&#xd;				else CONCAT(A.RECEIPT_NO, ' ')&#xd;			end receiptNo,&#xd;			A.QTY_CUSTOMER_PAID qtyCustomerPaid,&#xd;			A.TOT_COLL_FEE totCollFee,&#xd;			A.TOT_PENALTY_VALUE totPenaltyValue,&#xd;			A.TOT_INSTALL_BILL totInstallBill,&#xd;			A.TOT_BILL totBill,&#xd;			A.TOT_PAID_COLL_FEE totPaidCollFee,&#xd;			A.TOT_PAID_PENALTY totPaidPenalty,&#xd;			A.TOT_PAID_INSTALL_BILL totPaidInstallBill,&#xd;			A.TOT_UTJ_PLUS_VALUE totUtjPlusValue,&#xd;			A.TOT_PAID_CASH totPaidCash,&#xd;			A.TOT_UTJ_USAGE_VALUE totUtjUsageValue,&#xd;			IIF(A.BILL_STS = '' OR A.BILL_STS IS NULL, 'null', A.BILL_STS) billSts,&#xd;			A.FLAG_SEND flagSend,&#xd;			A.FLAG_SEND_DATE flagSendDate,&#xd;			(SELECT ISNULL(COUNT(0),0) GROUP_CODE &#xd;			FROM TRX_TAGIH_ULANG Q (nolock) &#xd;			LEFT JOIN TRX_DKH_GROUP R (nolock)&#xd;			ON Q.GROUP_CODE = R.GROUP_CODE WHERE Q.COMPANY_CODE = A.COMPANY_CODE AND Q.GROUP_CODE = A.GROUP_CODE AND Q.TU_DATE = CONVERT(DATE, GETDATE())) as janjiTagih,&#xd;			IIF(J.PARAM_DESCRIP = '' OR J.PARAM_DESCRIP IS NULL, 'null', J.PARAM_DESCRIP) billStsName,&#xd;			(select count(0) as total from trx_dkh_dtl(nolock) where COMPANY_CODE = A.COMPANY_CODE and BRANCH_CODE = A.BRANCH_CODE and dkh_no = A.DKH_NO and group_code = A.GROUP_CODE) jumlahDebitur,&#xd;			(select count(0) as total from trx_dkh_dtl(nolock) where COMPANY_CODE = A.COMPANY_CODE and BRANCH_CODE = A.BRANCH_CODE and dkh_no = A.DKH_NO and group_code = A.GROUP_CODE and paid_sts = '999') jumlahDebiturHapus,&#xd;			'0' as flagGroup&#xd;		FROM TRX_DKH_GROUP A (nolock)&#xd;		LEFT JOIN MST_GROUP_HDR B (nolock)&#xd;		ON A.GROUP_CODE = B.GROUP_CODE AND A.COMPANY_CODE=B.COMPANY_CODE	&#xd;		LEFT JOIN MST_VILLAGE C (nolock)&#xd;		ON B.GROUP_VILLAGE_CODE = C.VILLAGE_CODE AND B.COMPANY_CODE = C.COMPANY_CODE&#xd;		LEFT JOIN MST_SUBDISTRICT D (nolock)&#xd;		ON C.SUBDISTRICT_CODE = D.SUBDISTRICT_CODE AND C.COMPANY_CODE=D.COMPANY_CODE&#xd;		LEFT JOIN MST_CITY E (nolock)&#xd;		ON C.CITY_CODE = E.CITY_CODE AND C.COMPANY_CODE=E.COMPANY_CODE&#xd;		LEFT JOIN MST_PROVINCE F (nolock)&#xd;		ON C.PROVINCE_CODE = F.PROVINCE_CODE AND C.COMPANY_CODE=F.COMPANY_CODE&#xd;		LEFT JOIN TRX_DKH_HDR G (nolock)&#xd;		ON A.DKH_NO = G.DKH_NO AND A.COMPANY_CODE=G.COMPANY_CODE AND A.BRANCH_CODE=G.BRANCH_CODE&#xd;		LEFT JOIN MST_EMPLOYEE H (nolock)&#xd;		ON G.COLL_CODE = H.NIK&#xd;		LEFT JOIN MST_GLOBAL_PARAM I (nolock)&#xd;		ON G.DKH_STS = I.PARAM_CODE AND I.CONDITION = 'DKH_STS' AND I.FLAG_ACTIVE = '1' AND G.COMPANY_CODE=I.COMPANY_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM J (nolock)&#xd;		ON A.BILL_STS = J.PARAM_CODE AND J.CONDITION = 'BILL_STS' AND J.FLAG_ACTIVE = '1' AND A.COMPANY_CODE=J.COMPANY_CODE&#xd;		LEFT JOIN MST_GLOBAL_PARAM K (nolock)&#xd;		ON A.COLL_TIME = K.PARAM_CODE AND K.CONDITION = 'VISIT_TIME' AND K.FLAG_ACTIVE = '1' AND A.COMPANY_CODE=K.COMPANY_CODE&#xd;		WHERE A.COMPANY_CODE = @COMPANY_CODE AND A.DKH_NO = @DKH_NO AND A.FLAG_SEND IN ('1','2')&#xd;	) t WHERE jumlahDebitur != jumlahDebiturHapus&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="groupAddress" name="groupAddress" xsdType="string"/>
         <element column="groupRt" name="groupRt" xsdType="string"/>
         <element column="groupRw" name="groupRw" xsdType="string"/>
         <element column="villageCode" name="villageCode" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
         <element column="subdistrictName" name="subdistrictName" xsdType="string"/>
         <element column="cityName" name="cityName" xsdType="string"/>
         <element column="provinceName" name="provinceName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="collTime" name="collTime" xsdType="string"/>
         <element column="visitCode" name="visitCode" xsdType="string"/>
         <element column="visitTime" name="visitTime" xsdType="string"/>
         <element column="jbDate" name="jbDate" xsdType="string"/>
         <element column="jbTime" name="jbTime" xsdType="string"/>
         <element column="tuDate" name="tuDate" xsdType="string"/>
         <element column="tuTime" name="tuTime" xsdType="string"/>
         <element column="reasonUnvisit" name="reasonUnvisit" xsdType="string"/>
         <element column="receiptNo" name="receiptNo" xsdType="string"/>
         <element column="qtyCustomerPaid" name="qtyCustomerPaid" xsdType="string"/>
         <element column="totCollFee" name="totCollFee" xsdType="string"/>
         <element column="totPenaltyValue" name="totPenaltyValue" xsdType="string"/>
         <element column="totInstallBill" name="totInstallBill" xsdType="string"/>
         <element column="totBill" name="totBill" xsdType="string"/>
         <element column="totPaidCollFee" name="totPaidCollFee" xsdType="string"/>
         <element column="totPaidPenalty" name="totPaidPenalty" xsdType="string"/>
         <element column="totPaidInstallBill" name="totPaidInstallBill" xsdType="string"/>
         <element column="totUtjPlusValue" name="totUtjPlusValue" xsdType="string"/>
         <element column="totPaidCash" name="totPaidCash" xsdType="string"/>
         <element column="totUtjUsageValue" name="totUtjUsageValue" xsdType="string"/>
         <element column="billSts" name="billSts" xsdType="string"/>
         <element column="flagSend" name="flagSend" xsdType="string"/>
         <element column="flagSendDate" name="flagSendDate" xsdType="string"/>
         <element column="dkhSts" name="dkhSts" xsdType="string"/>
         <element column="dkhStsName" name="dkhStsName" xsdType="string"/>
         <element column="janjiTagih" name="janjiTagih" xsdType="string"/>
         <element column="billStsName" name="billStsName" xsdType="string"/>
         <element column="collTimeDescrip" name="collTimeDescrip" xsdType="string"/>
         <element column="flagRevitalization" name="flagRevitalization" xsdType="string"/>
         <element column="flagGroup" name="flagGroup" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
   </query>
   <query id="callSpLkhSetor" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[GEN_LKH_SETOR] &#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:dkhNo,&#xd;		:createdBy,&#xd;		:setorNo,&#xd;		:aggrNo,&#xd;		:totSetor,&#xd;		:noSetor,&#xd;		:returnVal&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
         <element column="totSetor" name="totSetor" xsdType="string"/>
         <element column="noSetor" name="noSetor" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="createdBy" sqlType="STRING"/>
      <param name="setorNo" sqlType="STRING"/>
      <param name="aggrNo" optional="false" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
      <param defaultValue="1" name="totSetor" optional="false" sqlType="STRING" type="OUT"/>
      <param defaultValue="1" name="noSetor" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="callSpGenTrxPrepaymentHdrDtl" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[GEN_TRX_PREPAYMENT_HDR_DTL] &#xd;	(&#xd;		:companyCode,&#xd;		:tuDepositNo,&#xd;		:solvingType,&#xd;		:nikApproval,&#xd;		:notes,&#xd;		:returnVal&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="solvingType" sqlType="STRING"/>
      <param name="nikApproval" sqlType="STRING"/>
      <param name="notes" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="listExpiredPenyelesaianPelunasan" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, tuDepositNo, tuSolvingDate, hiePositionVersion from (	&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.tu_deposit_no tuDepositNo,&#xd;		a.tu_solving_date tuSolvingDate,&#xd;		c.hie_position_version hiePositionVersion&#xd;	from trx_tu_solving a&#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,&#xd;					trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT117'&#xd;		) b&#xd;		on a.company_code	= b.companyCode &#xd;		and a.tu_deposit_no	= b.trxCode&#xd;		and a.tu_solving_type in ('5','6')&#xd;	join trx_approval c&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts = 'APPR'&#xd;	and a.company_code = c.company_code and a.tu_deposit_no = c.trx_code&#xd;	where a.tu_solving_date = :eodDate and a.appv_sts in ('APPR')&#xd;) a where companyCode = :companyCode and branchCode = :branchCode order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="tuSolvingDate" name="tuSolvingDate" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
      </result>
      <param name="eodDate" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="callSpUpdSolvingPelunasanExpiredK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_SOLVING_PELUNASAN_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:tuDepositNo,&#xd;		:tuSolvingDate,&#xd;		:appvSts,&#xd;		:eodDate,&#xd;		:returnVal       &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="listExpiredPenyelesaianPembayaranTunggakan" useConfig="collectiondso1">
      <sql>select companyCode, branchCode, tuDepositNo, tuSolvingDate, hiePositionVersion from (	&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.tu_deposit_no tuDepositNo,&#xd;		a.tu_solving_date tuSolvingDate,&#xd;		c.hie_position_version hiePositionVersion&#xd;	from trx_tu_solving a&#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,&#xd;					trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT117'&#xd;		) b&#xd;		on a.company_code	= b.companyCode &#xd;		and a.tu_deposit_no	= b.trxCode&#xd;		and a.tu_solving_type = '4'&#xd;	join trx_approval c&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts = 'APPR'&#xd;	and a.company_code = c.company_code and a.tu_deposit_no = c.trx_code&#xd;	where a.tu_solving_date = :eodDate and a.appv_sts in ('APPR')&#xd;) a where companyCode = :companyCode and branchCode = :branchCode order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="tuDepositNo" name="tuDepositNo" xsdType="string"/>
         <element column="tuSolvingDate" name="tuSolvingDate" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
      </result>
      <param name="eodDate" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
   </query>
   <query id="callSpUpdSolvingPembayaranTunggakanExpiredK2" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_SOLVING_PEMBAYARAN_TUNGGAKAN_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:tuDepositNo,&#xd;		:tuSolvingDate,&#xd;		:appvSts,&#xd;		:eodDate,&#xd;		:returnVal       &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="tuDepositNo" sqlType="STRING"/>
      <param name="tuSolvingDate" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="rejectCancelSell" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @companyCode varchar(10) = :companyCode&#xd;declare @sellNo varchar(50) = :sellNo&#xd;declare @nik varchar(50) = :userLogin&#xd;&#xd;UPDATE A SET&#xd;	SELL_STS = IIF(B.REF_NO IS NULL, 'APPD','PAYM'),&#xd;	UPDATE_DATE = GETDATE(),&#xd;	UPDATE_BY = @nik,&#xd;	APPV_DATE=GETDATE()&#xd;FROM TRX_SELL_HDR A&#xd;LEFT JOIN TRX_PAYMENT_HDR B&#xd;ON A.COMPANY_CODE = B.COMPANY_CODE&#xd;AND A.SELL_NO = B.REF_NO&#xd;WHERE A.SELL_NO=@sellNo</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="sellNo" sqlType="STRING"/>
      <param name="userLogin" sqlType="STRING"/>
   </query>
   <query id="cekCashierValue" useConfig="collectiondso1">
      <sql>DECLARE @COMPANY_CODE VARCHAR(10) = :companyCode&#xd;DECLARE @DKH_NO VARCHAR(50) = :dkhNo&#xd;&#xd;SELECT TOP 1 cashierCode FROM (&#xd;SELECT &#xd;	CD.CASH_CODE as cashCode,&#xd;	CH.CASHIER_CODE as cashierCode,&#xd;	CH.COMPANY_CODE as companyCode,&#xd;	CH.BRANCH_CODE as branchCode,&#xd;	GP.PARAM_CODE as flagRPA&#xd;FROM TRX_CASHIER_HDR CH&#xd;LEFT OUTER JOIN TRX_CASHIER_DTL CD ON (CD.CASHIER_CODE = CH.CASHIER_CODE AND CD.BRANCH_CODE = CH.BRANCH_CODE AND CD.COMPANY_CODE = CH.COMPANY_CODE AND CD.CASH_OPNAM_CODE = CH.CASH_OPNAM_CODE AND CONVERT(DATE, CD.ASSIGN_DATE, 23) = CONVERT(DATE, CH.ASSIGN_DATE, 23))&#xd;JOIN TRX_DKH_HDR DK ON CH.COMPANY_CODE = DK.COMPANY_CODE AND CH.BRANCH_CODE = DK.BRANCH_CODE AND DK.DKH_NO = @DKH_NO&#xd;LEFT JOIN MST_EMPLOYEE EM ON CH.COMPANY_CODE = DK.COMPANY_CODE AND CH.CASHIER_CODE = EM.NIK&#xd;LEFT JOIN MST_GLOBAL_PARAM GP ON EM.COMPANY_CODE = GP.COMPANY_CODE AND GP.CONDITION = 'POSITION_RPA' AND EM.POSITION_CODE = GP.PARAM_CODE AND GP.FLAG_ACTIVE = 1&#xd;WHERE CONVERT(DATE, CH.ASSIGN_DATE, 23) = CONVERT(DATE, GETDATE(), 23)&#xd;) TBL WHERE companyCode = @COMPANY_CODE &#xd;AND cashCode IN ('COLLECTION_AND_AM') &#xd;AND flagRPA is null</sql>
      <result element="Entries" rowName="contents">
         <element column="cashierCode" name="cashierCode" xsdType="string"/>
      </result>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
   </query>
   <query id="updUtjApprove" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_UTJ_APPROVE] &#xd;	(&#xd;		:companyCode,&#xd;		:dkhNo,&#xd;		:aggrNo,&#xd;        :userLogin,&#xd;		:flagApprove,&#xd;		:notes,&#xd;		:returnVal&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="userLogin" sqlType="STRING"/>
      <param name="flagApprove" sqlType="STRING"/>
      <param name="notes" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="checkUtjApprove" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[CHECK_UTJ_APPROVE] &#xd;	(&#xd;		:companyCode,&#xd;		:dkhNo,&#xd;		:aggrNo,&#xd;        :promiseeSts,&#xd;		:message,&#xd;		:returnVal&#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="message" name="message" xsdType="string"/>
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="promiseeSts" sqlType="STRING"/>
      <param defaultValue="1" name="message" optional="false" sqlType="STRING" type="OUT"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="checkSubmitKelompok" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @GROUP_CODE varchar(50) = :groupCode&#xd;&#xd;select&#xd;	company_code companyCode,&#xd;	group_code groupCode,&#xd;	dkh_no dkhNo&#xd;from trx_dkh_group(nolock)&#xd;where company_code = @COMPANY_CODE and dkh_no = @DKH_NO and group_code = @GROUP_CODE and flag_send = 2</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
   </query>
   <query id="checkSubmitDebitur" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;&#xd;select&#xd;	company_code companyCode,&#xd;	aggr_no aggrNo,&#xd;	dkh_no dkhNo&#xd;from trx_dkh_dtl(nolock)&#xd;where company_code = @COMPANY_CODE and dkh_no = @DKH_NO and aggr_no = @AGGR_NO and flag_send = 2</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="allMstUtj" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;declare @AGGR_NO varchar(50) = :aggrNo&#xd;declare @GROUP_CODE varchar(50) = :groupCode&#xd;&#xd;select companyCode,branchCode,dkhNo,groupCode,aggr_No aggrNoRecipient,aggrNoDonor aggrNo,&#xd;customerFullname,utjBalanceDonor,utjUsageValueRecipient bookValue,utjBalanceDonor - isnull(b.utjUsageValueTotalDonor,0) sisaUtj&#xd;from &#xd;(&#xd;	select distinct &#xd;	a.companyCode&#xd;	, a.branchCode&#xd;	, a.dkhNo&#xd;	, a.groupCode&#xd;	, a.aggr_No&#xd;	, a.customerFullname&#xd;	, a.aggrNoDonor&#xd;	,c.utjBalanceDonor&#xd;	, a.utjUsageValueRecipient&#xd;	 &#xd;	from &#xd;	(	&#xd;		select distinct&#xd;			a.companyCode&#xd;			, a.branchCode&#xd;			, a.dkhNo&#xd;			, a.groupCode&#xd;			,a.aggr_no&#xd;			,a.customerFullname&#xd;			,a.aggrNoDonor&#xd;			,isnull(b.utjUsageValueRecipient,0) utjUsageValueRecipient&#xd;		from&#xd;		(&#xd;			SELECT distinct &#xd;				c.company_Code companyCode&#xd;				, c.branch_Code branchCode&#xd;				, c.dkh_No dkhNo&#xd;				, c.group_Code groupCode&#xd;				,c.aggr_no&#xd;				,b.aggr_no aggrNoDonor&#xd;				,d.customer_Fullname customerFullname&#xd;			FROM trx_dkh_dtl c (nolock)&#xd;			&#xd;			left join trx_dkh_dtl b (nolock)&#xd;				on b.company_code = c.company_code&#xd;				and b.dkh_no=c.dkh_no&#xd;				and b.group_code = c.group_code&#xd;			LEFT JOIN TRX_AGGR d (nolock)&#xd;				ON d.company_code = b.company_code&#xd;				and d.AGGR_NO = b.AGGR_NO&#xd;			) as a&#xd;		left join&#xd;			(&#xd;				SELECT distinct &#xd;					a.COMPANY_CODE companyCode,&#xd;					a.BRANCH_CODE branchCode,&#xd;					a.DKH_NO dkhNo,&#xd;					A.AGGR_NO_RECIPIENT aggrNoRecipient,&#xd;					a.utj_usage_value utjUsageValueRecipient,&#xd;					a.aggr_no_donor aggrNoDonor&#xd;				FROM TRX_DKH_DTL_UTJ A (nolock)	 			&#xd;			) b&#xd;				on b.companyCode = a.companyCode&#xd;				and b.dkhNo = a.dkhNo&#xd;				and a.aggr_no = b.aggrNoRecipient&#xd;				and b.aggrNoDonor = a.aggrNodonor&#xd;&#xd;	) as a&#xd;	left join &#xd;		(&#xd;			select company_code,dkh_no,group_code,aggr_no,utj_balance utjBalanceDonor&#xd;			from &#xd;				trx_dkh_dtl b (nolock)&#xd;	) c&#xd;		on c.company_code = a.companyCode&#xd;		and c.dkh_no = a.dkhNo&#xd;		and c.aggr_no = a.aggrNoDonor&#xd;&#xd;) as a&#xd;left join &#xd;	(&#xd;		select &#xd;			b.company_code, b.dkh_no, b.aggr_no_donor, sum(b.utj_usage_value) utjUsageValueTotalDonor&#xd;		from trx_dkh_dtl_utj b (nolock)&#xd;		group by b.company_code, b.dkh_no, b.aggr_no_donor&#xd;	) b&#xd;	on a.companyCode = b.company_code&#xd;	and a.dkhNo = b.Dkh_No&#xd;	and a.aggrNoDonor = b.aggr_No_Donor&#xd;WHERE &#xd;	companyCode = @COMPANY_CODE and&#xd;	branchCode = @BRANCH_CODE and&#xd;	dkhNo = @DKH_NO and&#xd;	aggr_No = @AGGR_NO and&#xd;	groupCode = @GROUP_CODE</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="groupCode" name="groupCode" xsdType="string"/>
         <element column="aggrNoRecipient" name="aggrNoRecipient" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="utjBalanceDonor" name="utjBalanceDonor" xsdType="string"/>
         <element column="bookValue" name="bookValue" xsdType="string"/>
         <element column="sisaUtj" name="sisaUtj" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" optional="false" sqlType="QUERY_STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="cekJumlahSetujuPnjualanTarikUnit" useConfig="collectiondso1">
      <sql>SELECT COUNT(0) cekApprove from TRX_APPROVAL(NOLOCK)&#xd;WHERE MENU_CODE='CLT119' and subject='Approval Penjualan Tarik Unit'&#xd;and DECISION_STS='APPD' and trx_code=:trxCode</sql>
      <result element="Entries" rowName="contents">
         <element column="cekApprove" name="cekApprove" xsdType="string"/>
      </result>
      <param name="trxCode" sqlType="STRING"/>
   </query>
   <query id="trxDkhDtlFileByDkh" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;&#xd;DELETE FROM TRX_DKH_DTL_FILE&#xd;WHERE &#xd;	COMPANY_CODE = @COMPANY_CODE AND&#xd;	BRANCH_CODE = @BRANCH_CODE AND&#xd;	DKH_NO = @DKH_NO</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
   </query>
   <query id="trxDkhDtlFileByDkhGroup" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DELETE FROM TRX_DKH_DTL_FILE A WHERE &#xd;A.COMPANY_CODE = :companyCode AND A.BRANCH_CODE = :branchCode AND A.DKH_NO =:dkhNo AND&#xd;EXISTS (SELECT 1 FROM TRX_DKH_DTL B with (nolock) WHERE  B.COMPANY_CODE = A.COMPANY_CODE  AND B.BRANCH_CODE = A.BRANCH_CODE&#xd;AND B.DKH_NO = A.DKH_NO AND B.GROUP_CODE=:groupCode AND B.AGGR_NO = A.AGGR_NO)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
   </query>
   <query id="trxDkhDtlFileByDkhString" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>declare @COMPANY_CODE varchar(10) = :companyCode&#xd;declare @BRANCH_CODE varchar(10) = :branchCode&#xd;declare @DKH_NO varchar(50) = :dkhNo&#xd;&#xd;DELETE FROM TRX_DKH_DTL_FILE WHERE &#xd;COMPANY_CODE = @COMPANY_CODE AND BRANCH_CODE = @BRANCH_CODE AND DKH_NO = @DKH_NO AND&#xd;AGGR_NO IN (:listAggr)</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="listAggr" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="updTrxDkhDtlNew" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @PAID_CASH NUMERIC(20,4) = :paidCash&#xd;DECLARE @FLAG_SEND tinyint = :flagSend&#xd;DECLARE @COMPANYCODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCHCODE VARCHAR(30) = :branchCode&#xd;DECLARE @DKHNO VARCHAR(50) = :dkhNo&#xd;DECLARE @AGGRNO VARCHAR(50) = :aggrNo&#xd;DECLARE @TUDATE date = :tuDate&#xd;DECLARE @TUTIME varchar(10) = :tuTime&#xd;DECLARE @TUTIMEVALUE varchar(5) = :tuTimeValue&#xd;DECLARE @UPDATEBY varchar(30) = :updatedBy&#xd;DECLARE @EXIST_FLAG_SEND tinyint = 0&#xd;DECLARE @DKH_TIME VARCHAR(10) = :dkhTime&#xd;DECLARE @PROMISEE_STS tinyint = :promiseeSts&#xd;DECLARE @DUE_DATE DATE = :dueDate&#xd;DECLARE @INST_FROM tinyint = :instFrom&#xd;DECLARE @INST_TO tinyint = :instTo&#xd;DECLARE @DAY_OVERDUE NUMERIC(5,0) = :dayOverdue&#xd;DECLARE @TOT_UNDUE_INSTALL NUMERIC(20,4) = :totUndueInstall&#xd;DECLARE @INSTALLMENT NUMERIC(20,4) = :installment&#xd;DECLARE @COLL_FEE NUMERIC(20,4) = :collFee&#xd;DECLARE @PENALTY_VALUE NUMERIC(20,4) = :penaltyValue&#xd;DECLARE @INSTALL_BILL NUMERIC(20,4) = :installBill&#xd;DECLARE @TOT_BILL NUMERIC(20,4) = :totBill&#xd;DECLARE @VISIT_CODE VARCHAR(10) = :visitCode&#xd;DECLARE @VISIT_TIME VARCHAR(10) = :visitTime&#xd;DECLARE @VISIT_TIME_VALUE VARCHAR(5) = :visitTimeValue&#xd;DECLARE @PAID_STS VARCHAR(10) = :paidSts&#xd;DECLARE @RECEIPT_NO VARCHAR(50) = :receiptNo&#xd;DECLARE @JB_DATE DATE = :jbDate&#xd;DECLARE @JB_TIME VARCHAR(10) = :jbTime&#xd;DECLARE @MEET_CODE VARCHAR(10) = :meetCode&#xd;DECLARE @MEET_NAME VARCHAR(100) = :meetName&#xd;DECLARE @ADDR_STS VARCHAR(10) = :addrSts&#xd;DECLARE @UNIT_STS VARCHAR(10) = :unitSts&#xd;DECLARE @PAYMENT_DATE DATE = :paymentDate&#xd;DECLARE @CUSTOMER_PAYMENT_DATE DATE = :customerPaymentDate&#xd;DECLARE @PRESENCE_STS tinyint = :presenceSts&#xd;DECLARE @PREPAYMENT_STS tinyint = :prepaymentSts&#xd;DECLARE @PAID_COLL_FEE NUMERIC(20,4) = :paidCollFee&#xd;DECLARE @LATITUDE VARCHAR(30) = :latitude&#xd;DECLARE @LONGTITUDE VARCHAR(30) = :longtitude&#xd;DECLARE @PAID_INSTALL NUMERIC(20,4) = :paidInstall&#xd;DECLARE @DISCOUNT NUMERIC(20,4) = :discount&#xd;DECLARE @ATT_CODE VARCHAR(50) = :attCode&#xd;DECLARE @UTJ_BALANCE NUMERIC(20,4) = :utjBalance&#xd;DECLARE @UTJ_PLUS_VALUE NUMERIC(20,4) = :utjPlusValue&#xd;DECLARE @UTJ_USAGE_VALUE NUMERIC(20,4) = :utjUsageValue&#xd;DECLARE @UTJ_USAGE_REASON VARCHAR(500) = :utjUsageReason&#xd;DECLARE @UTJ_APPV_STS VARCHAR(10) = :utjAppvSts&#xd;DECLARE @UTJ_APPV_DATE DATETIME = :utjAppvDate&#xd;DECLARE @SP_NO VARCHAR(50) = :spNo&#xd;DECLARE @SP_TYPE VARCHAR(10) = :spType&#xd;DECLARE @SP_RECEIPT_TYPE VARCHAR(10) = :spReceiptType&#xd;DECLARE @SP_RECEIPT_NAME VARCHAR(100) = :spReceiptName&#xd;DECLARE @SP_NOTES VARCHAR(500) = :spNotes&#xd;DECLARE @STTU_NO VARCHAR(50) = :sttuNo&#xd;DECLARE @COLL_NOTES VARCHAR(500) = :collNotes&#xd;DECLARE @FLAG_SEND_DATE DATETIME = :flagSendDate&#xd;DECLARE @BILL_STS VARCHAR(10) =  :billSts&#xd;&#xd;DECLARE @PAIDPENALTY varchar(50) = :paidPenalty&#xd;IF @PAIDPENALTY = '' or @PAIDPENALTY ='null'&#xd;BEGIN&#xd;SET @PAIDPENALTY=0&#xd;END&#xd;&#xd;&#xd;SELECT @EXIST_FLAG_SEND = FLAG_SEND FROM TRX_DKH_DTL(nolock)&#xd;WHERE COMPANY_CODE = @COMPANYCODE  AND BRANCH_CODE = @BRANCHCODE AND&#xd;DKH_NO = @DKHNO AND AGGR_NO = @AGGRNO&#xd;&#xd;IF @EXIST_FLAG_SEND = 2        &#xd;        BEGIN&#xd;                UPDATE TRX_DKH_DTL SET&#xd;                        TU_DATE = @TUDATE,&#xd;                        TU_TIME = @TUTIME,&#xd;                        TU_TIME_VALUE =@TUTIMEVALUE,&#xd;                        UPDATED_DATE = GETDATE(),&#xd;                        UPDATED_BY = @UPDATEBY&#xd;                WHERE&#xd;                        COMPANY_CODE =@COMPANYCODE AND&#xd;                        BRANCH_CODE =@BRANCHCODE AND&#xd;                        DKH_NO = @DKHNO AND&#xd;                        AGGR_NO = @AGGRNO&#xd;                &#xd;        END&#xd;ELSE&#xd;        BEGIN&#xd;                UPDATE TRX_DKH_DTL SET&#xd;                        DKH_TIME = @DKH_TIME,&#xd;                        PROMISEE_STS = @PROMISEE_STS,&#xd;                        DUE_DATE = @DUE_DATE,&#xd;                        INST_FROM = @INST_FROM,&#xd;                        INST_TO = @INST_TO,&#xd;                        DAY_OVERDUE = @DAY_OVERDUE,&#xd;                        TOT_UNDUE_INSTALL = @TOT_UNDUE_INSTALL,&#xd;                        INSTALLMENT = @INSTALLMENT,&#xd;                        COLL_FEE = @COLL_FEE,&#xd;                        PENALTY_VALUE = @PENALTY_VALUE,&#xd;                        INSTALL_BILL = @INSTALL_BILL,&#xd;                        TOT_BILL = @TOT_BILL,&#xd;                        VISIT_CODE = @VISIT_CODE,&#xd;                        VISIT_TIME = @VISIT_TIME,&#xd;                        VISIT_TIME_VALUE = @VISIT_TIME_VALUE,&#xd;                        PAID_STS = @PAID_STS,&#xd;                        RECEIPT_NO = IIF(PAID_CASH &gt; 0,RECEIPT_NO,@RECEIPT_NO),-- 2 kondisi&#xd;                        JB_DATE = @JB_DATE,&#xd;                        JB_TIME = @JB_TIME,&#xd;                        TU_DATE = @TUDATE,&#xd;                        TU_TIME = @TUTIME,&#xd;                        TU_TIME_VALUE = @TUTIMEVALUE,&#xd;                        MEET_CODE = @MEET_CODE,&#xd;                        MEET_NAME = @MEET_NAME,&#xd;                        ADDR_STS = @ADDR_STS,&#xd;                        UNIT_STS = @UNIT_STS,&#xd;                        PAYMENT_DATE = CASE WHEN @PAID_CASH = 0 THEN NULL ELSE @PAYMENT_DATE END, -- 2 kondisi&#xd;                        CUSTOMER_PAYMENT_DATE = CASE WHEN @PAID_CASH = 0 THEN NULL ELSE @CUSTOMER_PAYMENT_DATE END, -- 2 kondisi&#xd;                        PRESENCE_STS = @PRESENCE_STS,&#xd;                        PREPAYMENT_STS = @PREPAYMENT_STS,&#xd;                        PAID_COLL_FEE = @PAID_COLL_FEE,&#xd;                        PAID_PENALTY = @PAIDPENALTY,&#xd;                        PAID_INSTALL = IIF(PAID_CASH &gt; 0,PAID_INSTALL, @PAID_INSTALL), --2 kondisi&#xd;                        PAID_CASH = IIF(PAID_CASH &gt; 0,PAID_CASH,@PAID_CASH), -- 2 kondisi&#xd;                        DISCOUNT = @DISCOUNT,&#xd;                        ATT_CODE = @ATT_CODE,&#xd;                        UTJ_BALANCE = @UTJ_BALANCE,&#xd;                        UTJ_PLUS_VALUE = @UTJ_PLUS_VALUE,&#xd;                        UTJ_USAGE_VALUE = @UTJ_USAGE_VALUE,&#xd;                        UTJ_USAGE_REASON = @UTJ_USAGE_REASON,&#xd;                        UTJ_APPV_STS = @UTJ_APPV_STS,&#xd;                        UTJ_APPV_DATE = @UTJ_APPV_DATE,&#xd;                        SP_NO = @SP_NO,&#xd;                        SP_TYPE = @SP_TYPE,&#xd;                        SP_RECEIPT_TYPE = @SP_RECEIPT_TYPE,&#xd;                        SP_RECEIPT_NAME = @SP_RECEIPT_NAME,&#xd;                        SP_NOTES = @SP_NOTES,&#xd;                        STTU_NO = @STTU_NO,&#xd;                        COLL_NOTES = @COLL_NOTES,&#xd;                        FLAG_SEND = @FLAG_SEND,&#xd;                        FLAG_SEND_DATE = @FLAG_SEND_DATE,&#xd;                        LATITUDE = @LATITUDE,&#xd;						LONGTITUDE = @LONGTITUDE,&#xd;                        BILL_STS = @BILL_STS,&#xd;                        UPDATED_DATE = GETDATE(),&#xd;                        UPDATED_BY = @UPDATEBY&#xd;                WHERE&#xd;                        COMPANY_CODE = @COMPANYCODE AND&#xd;                        BRANCH_CODE = @BRANCHCODE AND&#xd;                        DKH_NO = @DKHNO AND&#xd;                        AGGR_NO = @AGGRNO&#xd;        END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="paidCash" sqlType="STRING"/>
      <param name="flagSend" sqlType="STRING"/>
      <param name="dkhTime" sqlType="STRING"/>
      <param name="promiseeSts" sqlType="STRING"/>
      <param name="dueDate" sqlType="STRING"/>
      <param name="instFrom" sqlType="STRING"/>
      <param name="instTo" sqlType="STRING"/>
      <param name="dayOverdue" sqlType="STRING"/>
      <param name="totUndueInstall" sqlType="STRING"/>
      <param name="installment" sqlType="STRING"/>
      <param name="collFee" sqlType="STRING"/>
      <param name="penaltyValue" sqlType="STRING"/>
      <param name="installBill" sqlType="STRING"/>
      <param name="totBill" sqlType="STRING"/>
      <param name="visitCode" sqlType="STRING"/>
      <param name="visitTime" sqlType="STRING"/>
      <param name="visitTimeValue" sqlType="STRING"/>
      <param name="paidSts" sqlType="STRING"/>
      <param name="receiptNo" sqlType="STRING"/>
      <param name="jbDate" sqlType="STRING"/>
      <param name="jbTime" sqlType="STRING"/>
      <param name="tuDate" sqlType="STRING"/>
      <param name="tuTime" sqlType="STRING"/>
      <param name="tuTimeValue" sqlType="STRING"/>
      <param name="meetCode" sqlType="STRING"/>
      <param name="meetName" sqlType="STRING"/>
      <param name="addrSts" sqlType="STRING"/>
      <param name="unitSts" sqlType="STRING"/>
      <param name="paymentDate" sqlType="STRING"/>
      <param name="customerPaymentDate" sqlType="STRING"/>
      <param name="presenceSts" sqlType="STRING"/>
      <param name="prepaymentSts" sqlType="STRING"/>
      <param name="paidCollFee" sqlType="STRING"/>
      <param name="paidPenalty" sqlType="STRING"/>
      <param name="paidInstall" sqlType="STRING"/>
      <param name="discount" sqlType="STRING"/>
      <param name="attCode" sqlType="STRING"/>
      <param name="utjBalance" sqlType="STRING"/>
      <param name="utjPlusValue" sqlType="STRING"/>
      <param name="utjUsageValue" sqlType="STRING"/>
      <param name="utjUsageReason" sqlType="STRING"/>
      <param name="utjAppvSts" sqlType="STRING"/>
      <param name="utjAppvDate" sqlType="STRING"/>
      <param name="spNo" sqlType="STRING"/>
      <param name="spType" sqlType="STRING"/>
      <param name="spReceiptType" sqlType="STRING"/>
      <param name="spReceiptName" sqlType="STRING"/>
      <param name="spNotes" sqlType="STRING"/>
      <param name="sttuNo" sqlType="STRING"/>
      <param name="collNotes" sqlType="STRING"/>
      <param name="flagSendDate" sqlType="STRING"/>
      <param name="latitude" sqlType="STRING"/>
      <param name="longtitude" sqlType="STRING"/>
      <param name="billSts" sqlType="STRING"/>
      <param name="updatedBy" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
   </query>
   <query id="listExpiredApprovalUtj" useConfig="collectiondso1">
      <sql>declare @EODDATE date = :eodDate&#xd;&#xd;select companyCode,branchCode,aggrNo,dkhNo,trxDate,hiePositionVersion,subject from (	&#xd;	select&#xd;		a.company_code companyCode,&#xd;		a.branch_code branchCode,&#xd;		a.AGGR_NO aggrNo,&#xd;		a.DKH_NO dkhNo,&#xd;		convert(date,a.Flag_send_Date) trxDate,&#xd;		c.hie_position_version hiePositionVersion,&#xd;		c.subject&#xd;	from trx_dkh_dtl a (nolock)&#xd;	join&#xd;		( &#xd;			select distinct&#xd;				company_code companyCode,&#xd;				trx_code trxCode,&#xd;				max(trx_seq) over(partition by company_code,trx_code) trxMax&#xd;			from trx_approval&#xd;			where menu_code = 'CLT112' --AND subject ='Approval Pemakaian UTJ'&#xd;		) b&#xd;		on a.company_code = b.companyCode &#xd;		and a.aggr_no= b.trxCode&#xd;	join trx_approval c (nolock)&#xd;	on c.company_code = b.companyCode and c.trx_code = b.trxCode and c.trx_seq = b.trxMax and c.decision_sts = 'APPR'&#xd;	and a.company_code = c.company_code and a.aggr_no = c.trx_code&#xd;	where a.flag_send=2 and A.UTJ_APPV_STS ='APPR' and&#xd;	dateAdd(day, +3, cast(A.Flag_send_Date as date)) &lt;= DATEADD(dd,+1, @EODDATE)&#xd;	and a.company_code = :companyCode and a.branch_code = :branchCode&#xd;) a order by branchCode</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="trxDate" name="trxDate" xsdType="string"/>
         <element column="hiePositionVersion" name="hiePositionVersion" xsdType="string"/>
         <element column="subject" name="subject" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
   </query>
   <query id="callSpUpdDkhPakaiLunasExp" useConfig="collectiondso1">
      <sql>{&#xd;	call [dbo].[UPD_DKH_PAKAI_LUNAS_EXPIRED_K2]&#xd;	(&#xd;		:companyCode,&#xd;		:branchCode,&#xd;		:aggrNo,&#xd;		:appvSts,&#xd;		:eodDate,&#xd;		:dkhNo,&#xd;		:returnVal       &#xd;	)&#xd;}</sql>
      <result element="Entries" rowName="contents">
         <element column="returnVal" name="returnVal" xsdType="string"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="appvSts" sqlType="STRING"/>
      <param name="eodDate" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param defaultValue="1" name="returnVal" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="cekIsSubmitDkhMikro" useConfig="collectiondso1">
      <sql>DECLARE @AGGRNO VARCHAR(50) = :aggrNo&#xd;DECLARE @COMPANYCODE VARCHAR(10) = :companyCode&#xd;DECLARE @DKHNO VARCHAR(50) = :dkhNo&#xd;DECLARE @BRANCHCODE VARCHAR(30) = :branchCode&#xd;DECLARE @GROUPCODE VARCHAR(50) = :groupCode&#xd;&#xd;IF @AGGRNO = '-'&#xd;BEGIN&#xd;select iif(count(0)&gt;0,'Y','N') isSubmit from trx_dkh_dtl (nolock)&#xd;where company_code=@COMPANYCODE AND branch_code=@BRANCHCODE AND dkh_no=@DKHNO AND group_code=@GROUPCODE AND FLAG_SEND=2&#xd;END&#xd;ELSE&#xd;BEGIN&#xd;select iif(count(0)&gt;0,'Y','N') isSubmit from trx_dkh_dtl (nolock)&#xd;where company_code=@COMPANYCODE AND branch_code=@BRANCHCODE AND dkh_no=@DKHNO AND group_code=@GROUPCODE&#xd;AND AGGR_NO=@AGGRNO AND FLAG_SEND=2&#xd;END</sql>
      <result element="Entries" rowName="contents">
         <element column="isSubmit" name="isSubmit" xsdType="string"/>
      </result>
      <param name="aggrNo" sqlType="STRING"/>
      <param name="companyCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="groupCode" sqlType="STRING"/>
   </query>
   <query id="getInfoFieldApprovalUtj" useConfig="collectiondso1">
      <sql>DECLARE @REQUESTER varchar(100) = :requester&#xd;DECLARE @FOLIO varchar(100) = :folio&#xd;DECLARE @PROCESSNAME VARCHAR(200) = :processName&#xd;DECLARE @REQUESTERNAME VARCHAR(100) = (SELECT TOP 1 FULLNAME FROM MST_EMPLOYEE (NOLOCK) WHERE USERNAME=@REQUESTER)&#xd;DECLARE @FORMTITLE VARCHAR(200) = (SELECT FORM_TITLE FROM MST_WORKFLOW (nolock) WHERE PROCESS_NAME =@PROCESSNAME)&#xd;&#xd;SELECT dkhNo, branchCode, branchName, customerFullname,requesterName,formTitle FROM (&#xd;SELECT TOP 1 A.BRANCH_CODE branchCode,A.DKH_NO dkhNo,&#xd;(SELECT B.BRANCH_NAME FROM MST_BRANCH B (NOLOCK) WHERE B.BRANCH_CODE=A.BRANCH_CODE AND B.COMPANY_CODE=A.COMPANY_CODE) branchName,&#xd;(SELECT C.CUSTOMER_FULLNAME FROM TRX_AGGR C (NOLOCK) WHERE C.COMPANY_CODE=A.COMPANY_CODE AND C.AGGR_NO=A.AGGR_NO) customerFullname,&#xd;@REQUESTERNAME requesterName,@FORMTITLE formTitle&#xd;FROM TRX_DKH_DTL A (NOLOCK)&#xd;WHERE A.AGGR_NO = @FOLIO AND A.UTJ_APPV_STS = 'APPR' AND A.COMPANY_CODE='EDV'&#xd;) a</sql>
      <result element="Entries" rowName="contents">
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="branchCode" name="branchCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="requesterName" name="requesterName" xsdType="string"/>
         <element column="formTitle" name="formTitle" xsdType="string"/>
      </result>
      <param name="requester" sqlType="STRING"/>
      <param name="folio" sqlType="STRING"/>
      <param name="processName" sqlType="STRING"/>
   </query>
   <query id="trxDkhDtlFileByDkhStringNew" returnUpdatedRowCount="true" useConfig="collectiondso1">
      <sql>DECLARE @COMPANYCODE VARCHAR(10) = :companyCode&#xd;DECLARE @BRANCH VARCHAR(50) = :branchCode&#xd;DECLARE @DKHNO VARCHAR(50) = :dkhNo&#xd;DECLARE @CEK int = (SELECT COUNT(0) FROM TRX_DKH_DTL_FILE (NOLOCK) WHERE COMPANY_CODE = @COMPANYCODE  AND BRANCH_CODE = @BRANCH  &#xd;AND DKH_NO = @DKHNO AND AGGR_NO IN (:listKontrak))&#xd;&#xd;IF @CEK &gt; 0&#xd;BEGIN&#xd;&#xd;DELETE FROM TRX_DKH_DTL_FILE WHERE &#xd;COMPANY_CODE = @COMPANYCODE  AND BRANCH_CODE = @BRANCH  AND DKH_NO = @DKHNO AND&#xd;AGGR_NO IN (:listAggr)&#xd;&#xd;END</sql>
      <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
         <element column="1" name="Value" xsdType="integer"/>
      </result>
      <param name="companyCode" sqlType="STRING"/>
      <param name="branchCode" sqlType="STRING"/>
      <param name="dkhNo" sqlType="STRING"/>
      <param name="listKontrak" optional="false" sqlType="QUERY_STRING"/>
      <param name="listAggr" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="submitDkhSp" useConfig="collectiondso1">
      <sql>{call [dbo].[SP_TRX_MICRO_MOBILE] (:jsonParam,:errorCode,:result)}</sql>
      <result element="Entries" rowName="contents">
         <element column="result" name="result" xsdType="string"/>
      </result>
      <param name="jsonParam" sqlType="STRING"/>
      <param defaultValue="1" name="errorCode" optional="false" sqlType="STRING" type="OUT"/>
      <param defaultValue="1" name="result" optional="false" sqlType="STRING" type="OUT"/>
   </query>
   <query id="getColumnReportLkhNew" useConfig="collectiondso1">
      <sql>select 1 as companyCode, 1 branchName, 1 dsoName, 1 areaName, 1 regionName, 1 collCode, 1 collName, 1 dkhNo, 1 dkhDate, 1 groupName, 1 tanggalTagihUlangKelompok, 1 jamTagihUlangKelompok, 1 aggrNo, 1 customerFullname, 1 kunjunganKelompok, 1 jamKunjunganKelompok, &#xd;	1 kunjunganDebitur, 1 jamKunjunganDebitur, 1 kehadiran, 1 interaksi, 1 hasilInteraksi, 1 spTypeName, 1 spReceiptType, 1 sttuNo, 1 tanggalTagihUlangDebitur, 1 tanggalBayarDebitur, 1 jumlahPembayaran, 1 collNotes, 1 dayOverdue, 1 dueDate, 1 instFrom, 1 instTo, 1 villageName</sql>
      <result element="Entries" rowName="">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="tanggalTagihUlangKelompok" name="tanggalTagihUlangKelompok" xsdType="string"/>
         <element column="jamTagihUlangKelompok" name="jamTagihUlangKelompok" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="kunjunganKelompok" name="kunjunganKelompok" xsdType="string"/>
         <element column="jamKunjunganKelompok" name="jamKunjunganKelompok" xsdType="string"/>
         <element column="kunjunganDebitur" name="kunjunganDebitur" xsdType="string"/>
         <element column="jamKunjunganDebitur" name="jamKunjunganDebitur" xsdType="string"/>
         <element column="kehadiran" name="kehadiran" xsdType="string"/>
         <element column="interaksi" name="interaksi" xsdType="string"/>
         <element column="hasilInteraksi" name="hasilInteraksi" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="tanggalTagihUlangDebitur" name="tanggalTagihUlangDebitur" xsdType="string"/>
         <element column="tanggalBayarDebitur" name="tanggalBayarDebitur" xsdType="string"/>
         <element column="jumlahPembayaran" name="jumlahPembayaran" xsdType="string"/>
         <element column="collNotes" name="collNotes" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
      </result>
   </query>
   <query id="getCountReportLkhNew" useConfig="collectiondso1">
      <sql>select count(0) as total from (&#xd;	select distinct&#xd;		a.company_code companyCode,&#xd;		case&#xd;			when c.structure_type = 'ST05' then a.branch_code&#xd;			when c.structure_type = 'ST04' then g.branch_code&#xd;		end branchCode,&#xd;		b.product_code productCode,&#xd;		case&#xd;			when c.structure_type = 'ST05' then c.branch_name&#xd;			when c.structure_type = 'ST04' then ba.branch_name&#xd;		end branchName,&#xd;		case&#xd;			when c.structure_type = 'ST04' then vd.dso_name&#xd;			else vb.dso_name&#xd;		end dsoName,&#xd;		case&#xd;			when c.structure_type = 'ST04' then vd.area_name&#xd;			else vb.area_name&#xd;		end areaName,&#xd;		case&#xd;			when c.structure_type = 'ST04' then vd.region_name&#xd;			else vb.region_name&#xd;		end regionName,&#xd;		b.coll_code collCode,&#xd;		d.fullname collName,&#xd;		a.dkh_no dkhNo,&#xd;		b.dkh_date dkhDate,&#xd;		isnull(e.group_code, '') groupCode,&#xd;		isnull(f.group_name, '') groupName,&#xd;		(&#xd;			case &#xd;				when e.tu_date  = '1900-01-01 00:00:00' then null&#xd;				else e.tu_date &#xd;			end&#xd;		) as tanggalTagihUlangKelompok,&#xd;		isnull(e.tu_time, '') as jamTagihUlangKelompok,&#xd;		a.aggr_no aggrNo,&#xd;		g.customer_fullname customerFullname,&#xd;		( &#xd;			case&#xd;				when e.visit_code = '0' then 'Tidak di Kunjungi' &#xd;				when e.visit_code = '1' then 'Di Kunjungi'&#xd;				else ''&#xd;			end&#xd;		) as kunjunganKelompok,&#xd;		isnull(e.visit_time, '') jamKunjunganKelompok,&#xd;		( &#xd;			case&#xd;				when a.visit_code = '0' then 'Tidak di Kunjungi' &#xd;				when a.visit_code = '1' then 'DiKunjungi'&#xd;				when a.visit_code is null then 'Belum Dikunjungi'&#xd;			end&#xd;		) as kunjunganDebitur,&#xd;		isnull(a.visit_time, '') jamKunjunganDebitur,&#xd;		(&#xd;			case&#xd;				when a.presence_sts = '0' then 'Tidak Hadir'&#xd;				when a.presence_sts = '1' then 'Hadir'&#xd;			end&#xd;		) as kehadiran,&#xd;		(select isnull(h.param_descrip, '') from mst_global_param h (nolock) where h.company_code = 'EDV' and h.param_code = a.meet_code and h.condition = 'MEET_CODE' and h.flag_active = '1') as interaksi,&#xd;		(select isnull(i.param_descrip, 'Belum di Tagih') from mst_global_param i (nolock) where i.company_code = 'EDV' and i.param_code = a.paid_sts and i.condition = 'PAID_STS' and i.flag_active = '1') as hasilInteraksi,&#xd;		(select k.param_descrip from mst_global_param K (nolock) where k.company_code = 'EDV' and K.param_code = a.sp_type and K.condition = 'SP_TYPE' and K.flag_active = '1') as spTypeName,&#xd;		case&#xd;			when isnull(a.sp_no, '') = '' then 'Tidak Ada SP'&#xd;			when isnull(a.sp_no, '') != '' and isnull(sp_receipt_type, '') = '' then 'Tidak Diberikan'&#xd;			else (select j.param_descrip from mst_global_param j (nolock) where j.company_code = 'EDV' and j.param_code = a.sp_receipt_type and j.condition = 'SP_RECEIPT_TYPE' and j.flag_active = '1')&#xd;		end spReceiptType,&#xd;		a.sttu_no sttuNo,&#xd;		(&#xd;			case &#xd;				when a.tu_date = '1900-01-01' then null&#xd;				else a.tu_date&#xd;			end&#xd;		) as tanggalTagihUlangDebitur,&#xd;		(&#xd;			case &#xd;				when a.payment_date = '1900-01-01' then null&#xd;				else a.payment_date&#xd;			end&#xd;		) as tanggalBayarDebitur,&#xd;		a.paid_cash jumlahPembayaran,&#xd;		a.coll_notes collNotes,&#xd;		a.day_overdue dayOverdue,&#xd;		a.due_date dueDate,&#xd;		a.inst_from instFrom,&#xd;		a.inst_to instTo,&#xd;		(&#xd;			CASE&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'I' THEN (SELECT IV.VILLAGE_NAME FROM MST_VILLAGE IV (nolock) WHERE IV.COMPANY_CODE = CS.COMPANY_CODE and CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE)&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DV.VILLAGE_NAME FROM MST_VILLAGE DV (nolock) WHERE dv.COMPANY_CODE = cs.COMPANY_CODE and CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE)&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'K' AND G.CUSTOMER_TYPE = 'P' THEN (SELECT KV.VILLAGE_NAME FROM MST_VILLAGE KV (nolock) WHERE KV.COMPANY_CODE = EF.COMPANY_CODE and EF.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE)&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'K' AND G.CUSTOMER_TYPE = 'C' THEN (SELECT COV.VILLAGE_NAME FROM MST_VILLAGE COV (nolock) WHERE COV.COMPANY_CODE = CO.COMPANY_CODE and CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE)&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'B' THEN (SELECT BV.VILLAGE_NAME FROM MST_VILLAGE BV (nolock) WHERE  BV.COMPANY_CODE = EG.COMPANY_CODE and EG.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE)&#xd;			END&#xd;		) as villageName&#xd;	from trx_dkh_hdr b (nolock)&#xd;	left join trx_dkh_dtl a (nolock)&#xd;	on a.company_code = b.company_code and a.branch_code = b.branch_code and a.dkh_no = b.dkh_no&#xd;	left join getViewBranch() vb&#xd;	on a.company_code = vb.company_code and a.branch_code = vb.branch_code&#xd;	left join mst_branch c (nolock)&#xd;	on c.company_code = a.company_code and a.branch_code = c.branch_code&#xd;	left join mst_employee d (nolock)&#xd;	on b.company_code = d.company_code and b.coll_code = d.nik&#xd;	left join trx_dkh_group e (nolock)&#xd;	on a.company_code = e.company_code and a.branch_code = e.branch_code and a.dkh_no = e.dkh_no and a.group_code = e.group_code&#xd;	left join mst_group_hdr f (nolock)&#xd;	on e.company_code = f.company_code and e.group_code = f.group_code&#xd;	left join trx_aggr g (nolock)&#xd;	on a.company_code = g.company_code and a.aggr_no = g.aggr_no&#xd;	left join mst_branch ba (nolock)&#xd;	on g.company_code = ba.company_code and g.branch_code = ba.branch_code&#xd;	left join getViewBranch() vd&#xd;	on a.company_code = vd.company_code and a.branch_code = vd.dso_code&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON CS.COMPANY_CODE = g.COMPANY_CODE and g.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE EF&#xd;	ON EF.COMPANY_CODE = g.COMPANY_CODE and g.CUSTOMER_CODE = EF.CUSTOMER_CODE AND EF.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE EG (nolock)&#xd;	ON eg.COMPANY_CODE = g.COMPANY_CODE and g.CUSTOMER_CODE = EG.CUSTOMER_CODE AND EG.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON g.COMPANY_CODE = CO.COMPANY_CODE AND g.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	where a.company_code = 'EDV' and a.paid_sts != '999'&#xd;	and b.dkh_sts not in ('CANC')&#xd;) t WHERE :search :filter</sql>
      <result element="count" rowName="">
         <element column="total" name="total" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
   </query>
   <query id="getDataReportLkhNew" useConfig="collectiondso1">
      <sql>select companyCode, branchName, dsoName, areaName, regionName, collCode, collName, dkhNo, dkhDate, groupName, tanggalTagihUlangKelompok, jamTagihUlangKelompok, aggrNo, customerFullname, kunjunganKelompok, jamKunjunganKelompok, &#xd;	kunjunganDebitur, jamKunjunganDebitur, kehadiran, isnull(interaksi, '') as interaksi, isnull(hasilInteraksi, 'Belum di Tagih') as hasilInteraksi, spTypeName, spReceiptType, sttuNo, tanggalTagihUlangDebitur, tanggalBayarDebitur, jumlahPembayaran, collNotes, dayOverdue, dueDate, instFrom, instTo, villageName FROM (&#xd;		select distinct&#xd;		a.company_code companyCode,&#xd;		case&#xd;			when c.structure_type = 'ST05' then a.branch_code&#xd;			when c.structure_type = 'ST04' then g.branch_code&#xd;		end branchCode,&#xd;		b.product_code productCode,&#xd;		case&#xd;			when c.structure_type = 'ST05' then c.branch_name&#xd;			when c.structure_type = 'ST04' then ba.branch_name&#xd;		end branchName,&#xd;		case&#xd;			when c.structure_type = 'ST04' then vd.dso_name&#xd;			else vb.dso_name&#xd;		end dsoName,&#xd;		case&#xd;			when c.structure_type = 'ST04' then vd.area_name&#xd;			else vb.area_name&#xd;		end areaName,&#xd;		case&#xd;			when c.structure_type = 'ST04' then vd.region_name&#xd;			else vb.region_name&#xd;		end regionName,&#xd;		b.coll_code collCode,&#xd;		d.fullname collName,&#xd;		a.dkh_no dkhNo,&#xd;		b.dkh_date dkhDate,&#xd;		isnull(e.group_code, '') groupCode,&#xd;		isnull(f.group_name, '') groupName,&#xd;		(&#xd;			case &#xd;				when e.tu_date  = '1900-01-01 00:00:00' then null&#xd;				else e.tu_date &#xd;			end&#xd;		) as tanggalTagihUlangKelompok,&#xd;		isnull(e.tu_time, '') as jamTagihUlangKelompok,&#xd;		a.aggr_no aggrNo,&#xd;		g.customer_fullname customerFullname,&#xd;		( &#xd;			case&#xd;				when e.visit_code = '0' then 'Tidak di Kunjungi' &#xd;				when e.visit_code = '1' then 'Di Kunjungi'&#xd;				else ''&#xd;			end&#xd;		) as kunjunganKelompok,&#xd;		isnull(e.visit_time, '') jamKunjunganKelompok,&#xd;		( &#xd;			case&#xd;				when a.visit_code = '0' then 'Tidak di Kunjungi' &#xd;				when a.visit_code = '1' then 'DiKunjungi'&#xd;				when a.visit_code is null then 'Belum Dikunjungi'&#xd;			end&#xd;		) as kunjunganDebitur,&#xd;		isnull(a.visit_time, '') jamKunjunganDebitur,&#xd;		(&#xd;			case&#xd;				when a.presence_sts = '0' then 'Tidak Hadir'&#xd;				when a.presence_sts = '1' then 'Hadir'&#xd;			end&#xd;		) as kehadiran,&#xd;		(select isnull(h.param_descrip, '') from mst_global_param h (nolock) where h.company_code = 'EDV' and h.param_code = a.meet_code and h.condition = 'MEET_CODE' and h.flag_active = '1') as interaksi,&#xd;		(select i.param_descrip from mst_global_param i (nolock) where i.company_code = 'EDV' and i.param_code = a.paid_sts and i.condition = 'PAID_STS' and i.flag_active = '1') as hasilInteraksi,&#xd;		(select k.param_descrip from mst_global_param K (nolock) where k.company_code = 'EDV' and K.param_code = a.sp_type and K.condition = 'SP_TYPE' and K.flag_active = '1') as spTypeName,&#xd;		case&#xd;			when isnull(a.sp_no, '') = '' then 'Tidak Ada SP'&#xd;			when isnull(a.sp_no, '') != '' and isnull(sp_receipt_type, '') = '' then 'Tidak Diberikan'&#xd;			else (select j.param_descrip from mst_global_param j (nolock) where j.company_code = 'EDV' and j.param_code = a.sp_receipt_type and j.condition = 'SP_RECEIPT_TYPE' and j.flag_active = '1')&#xd;		end spReceiptType,&#xd;		a.sttu_no sttuNo,&#xd;		(&#xd;			case &#xd;				when a.tu_date = '1900-01-01' then null&#xd;				else a.tu_date&#xd;			end&#xd;		) as tanggalTagihUlangDebitur,&#xd;		(&#xd;			case &#xd;				when a.payment_date = '1900-01-01' then null&#xd;				else a.payment_date&#xd;			end&#xd;		) as tanggalBayarDebitur,&#xd;		a.paid_cash jumlahPembayaran,&#xd;		a.coll_notes collNotes,&#xd;		a.day_overdue dayOverdue,&#xd;		a.due_date dueDate,&#xd;		a.inst_from instFrom,&#xd;		a.inst_to instTo,&#xd;		(&#xd;			CASE&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'I' THEN (SELECT IV.VILLAGE_NAME FROM MST_VILLAGE IV (nolock) WHERE IV.COMPANY_CODE = CS.COMPANY_CODE and CS.ID_VILLAGE_CODE = IV.VILLAGE_CODE)&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'D' THEN (SELECT DV.VILLAGE_NAME FROM MST_VILLAGE DV (nolock) WHERE dv.COMPANY_CODE = cs.COMPANY_CODE and CS.DOMICILE_VILLAGE_CODE = DV.VILLAGE_CODE)&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'K' AND G.CUSTOMER_TYPE = 'P' THEN (SELECT KV.VILLAGE_NAME FROM MST_VILLAGE KV (nolock) WHERE KV.COMPANY_CODE = EF.COMPANY_CODE and EF.OFFICE_VILLAGE_CODE = KV.VILLAGE_CODE)&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'K' AND G.CUSTOMER_TYPE = 'C' THEN (SELECT COV.VILLAGE_NAME FROM MST_VILLAGE COV (nolock) WHERE COV.COMPANY_CODE = CO.COMPANY_CODE and CO.OFFICE_VILLAGE_CODE = COV.VILLAGE_CODE)&#xd;				WHEN G.COLL_ADDRESS_TYPE = 'B' THEN (SELECT BV.VILLAGE_NAME FROM MST_VILLAGE BV (nolock) WHERE  BV.COMPANY_CODE = EG.COMPANY_CODE and EG.OFFICE_VILLAGE_CODE = BV.VILLAGE_CODE)&#xd;			END&#xd;		) as villageName&#xd;	from trx_dkh_hdr b (nolock)&#xd;	left join trx_dkh_dtl a (nolock)&#xd;	on a.company_code = b.company_code and a.branch_code = b.branch_code and a.dkh_no = b.dkh_no&#xd;	left join getViewBranch() vb&#xd;	on a.company_code = vb.company_code and a.branch_code = vb.branch_code&#xd;	left join mst_branch c (nolock)&#xd;	on c.company_code = a.company_code and a.branch_code = c.branch_code&#xd;	left join mst_employee d (nolock)&#xd;	on b.company_code = d.company_code and b.coll_code = d.nik&#xd;	left join trx_dkh_group e (nolock)&#xd;	on a.company_code = e.company_code and a.branch_code = e.branch_code and a.dkh_no = e.dkh_no and a.group_code = e.group_code&#xd;	left join mst_group_hdr f (nolock)&#xd;	on e.company_code = f.company_code and e.group_code = f.group_code&#xd;	left join trx_aggr g (nolock)&#xd;	on a.company_code = g.company_code and a.aggr_no = g.aggr_no&#xd;	left join mst_branch ba (nolock)&#xd;	on g.company_code = ba.company_code and g.branch_code = ba.branch_code&#xd;	left join getViewBranch() vd&#xd;	on a.company_code = vd.company_code and a.branch_code = vd.dso_code&#xd;	LEFT JOIN MST_CUSTOMER CS (nolock)&#xd;	ON CS.COMPANY_CODE = g.COMPANY_CODE and g.CUSTOMER_CODE = CS.CUSTOMER_CODE&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE EF&#xd;	ON EF.COMPANY_CODE = g.COMPANY_CODE and g.CUSTOMER_CODE = EF.CUSTOMER_CODE AND EF.EMPLOYEE_TYPE = 'O'&#xd;	LEFT JOIN MST_CUSTOMER_EMPLOYEE EG (nolock)&#xd;	ON eg.COMPANY_CODE = g.COMPANY_CODE and g.CUSTOMER_CODE = EG.CUSTOMER_CODE AND EG.EMPLOYEE_TYPE = 'B'&#xd;	LEFT JOIN MST_CUSTOMER_CO CO (nolock)&#xd;	ON g.COMPANY_CODE = CO.COMPANY_CODE AND g.CUSTOMER_CODE = CO.CUSTOMER_CODE&#xd;	where a.company_code = 'EDV' and a.paid_sts != '999' and b.dkh_sts not in ('CANC')&#xd;) a WHERE :search :filter ORDER BY :orderBy :direction OFFSET :page ROWS FETCH NEXT :limit ROWS ONLY</sql>
      <result element="Entries" rowName="contents">
         <element column="companyCode" name="companyCode" xsdType="string"/>
         <element column="branchName" name="branchName" xsdType="string"/>
         <element column="dsoName" name="dsoName" xsdType="string"/>
         <element column="areaName" name="areaName" xsdType="string"/>
         <element column="regionName" name="regionName" xsdType="string"/>
         <element column="collCode" name="collCode" xsdType="string"/>
         <element column="collName" name="collName" xsdType="string"/>
         <element column="dkhNo" name="dkhNo" xsdType="string"/>
         <element column="dkhDate" name="dkhDate" xsdType="string"/>
         <element column="groupName" name="groupName" xsdType="string"/>
         <element column="tanggalTagihUlangKelompok" name="tanggalTagihUlangKelompok" xsdType="string"/>
         <element column="jamTagihUlangKelompok" name="jamTagihUlangKelompok" xsdType="string"/>
         <element column="aggrNo" name="aggrNo" xsdType="string"/>
         <element column="customerFullname" name="customerFullname" xsdType="string"/>
         <element column="kunjunganKelompok" name="kunjunganKelompok" xsdType="string"/>
         <element column="jamKunjunganKelompok" name="jamKunjunganKelompok" xsdType="string"/>
         <element column="kunjunganDebitur" name="kunjunganDebitur" xsdType="string"/>
         <element column="jamKunjunganDebitur" name="jamKunjunganDebitur" xsdType="string"/>
         <element column="kehadiran" name="kehadiran" xsdType="string"/>
         <element column="interaksi" name="interaksi" xsdType="string"/>
         <element column="hasilInteraksi" name="hasilInteraksi" xsdType="string"/>
         <element column="spTypeName" name="spTypeName" xsdType="string"/>
         <element column="spReceiptType" name="spReceiptType" xsdType="string"/>
         <element column="sttuNo" name="sttuNo" xsdType="string"/>
         <element column="tanggalTagihUlangDebitur" name="tanggalTagihUlangDebitur" xsdType="string"/>
         <element column="tanggalBayarDebitur" name="tanggalBayarDebitur" xsdType="string"/>
         <element column="jumlahPembayaran" name="jumlahPembayaran" xsdType="string"/>
         <element column="collNotes" name="collNotes" xsdType="string"/>
         <element column="dayOverdue" name="dayOverdue" xsdType="string"/>
         <element column="dueDate" name="dueDate" xsdType="string"/>
         <element column="instFrom" name="instFrom" xsdType="string"/>
         <element column="instTo" name="instTo" xsdType="string"/>
         <element column="villageName" name="villageName" xsdType="string"/>
      </result>
      <param name="search" optional="false" sqlType="QUERY_STRING"/>
      <param name="filter" optional="false" sqlType="QUERY_STRING"/>
      <param name="orderBy" optional="false" sqlType="QUERY_STRING"/>
      <param name="direction" optional="false" sqlType="QUERY_STRING"/>
      <param name="page" optional="false" sqlType="INTEGER"/>
      <param name="limit" optional="false" sqlType="INTEGER"/>
   </query>
   <resource method="POST" path="/mstCollDayHdr">
      <call-query href="insertMstCollDayHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collDayCode" query-param="collDayCode"/>
         <with-param name="collDayName" query-param="collDayName"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstCollDayHdr">
      <call-query href="updateMstCollDayHdr">
         <with-param name="collDayName" query-param="collDayName"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collDayCode" query-param="collDayCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstCollDayDtl">
      <call-query href="insertMstCollDayDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collDayCode" query-param="collDayCode"/>
         <with-param name="dayCode" query-param="dayCode"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstCollAttendance">
      <call-query href="insertMstCollAttendance">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="attName" query-param="attName"/>
         <with-param name="attendFlag" query-param="attendFlag"/>
         <with-param name="cashFlag" query-param="cashFlag"/>
         <with-param name="utjFlag" query-param="utjFlag"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="attCode" query-param="attCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstCollAttendance">
      <call-query href="updateMstCollAttendance">
         <with-param name="attName" query-param="attName"/>
         <with-param name="attendFlag" query-param="attendFlag"/>
         <with-param name="cashFlag" query-param="cashFlag"/>
         <with-param name="utjFlag" query-param="utjFlag"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="attCode" query-param="attCode"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstCollAttendance">
      <call-query href="getColumnMstCollAttendance"/>
   </resource>
   <resource method="POST" path="/getData/mstCollAttendance">
      <call-query href="getDataMstCollAttendance">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getCount/mstCollAttendance">
      <call-query href="getCountMstCollAttendance">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstBucket">
      <call-query href="insertMstBucket">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="odDayFrom" query-param="odDayFrom"/>
         <with-param name="odDayTo" query-param="odDayTo"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="description" query-param="description"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="flagRevitalisasi" query-param="flagRevitalisasi"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstBucket">
      <call-query href="updateMstBucket">
         <with-param name="odDayFrom" query-param="odDayFrom"/>
         <with-param name="odDayTo" query-param="odDayTo"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="description" query-param="description"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="flagRevitalisasi" query-param="flagRevitalisasi"/>
         <with-param name="productCode" query-param="productCode"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstBucket">
      <call-query href="getColumnMstBucket"/>
   </resource>
   <resource method="POST" path="/getCount/mstBucket">
      <call-query href="getCountMstBucket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstBucket">
      <call-query href="getDataMstBucket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/mstCollDayDtl">
      <call-query href="deleteMstCollDayDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collDayCode" query-param="collDayCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstExtColl">
      <call-query href="insertMstExtColl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
         <with-param name="extCollName" query-param="extCollName"/>
         <with-param name="address" query-param="address"/>
         <with-param name="rt" query-param="rt"/>
         <with-param name="rw" query-param="rw"/>
         <with-param name="villageCode" query-param="villageCode"/>
         <with-param name="areaCodePhone1" query-param="areaCodePhone1"/>
         <with-param name="phoneNo1" query-param="phoneNo1"/>
         <with-param name="areaCodePhone2" query-param="areaCodePhone2"/>
         <with-param name="phoneNo2" query-param="phoneNo2"/>
         <with-param name="hpNo" query-param="hpNo"/>
         <with-param name="email" query-param="email"/>
         <with-param name="npwp" query-param="npwp"/>
         <with-param name="pic" query-param="pic"/>
         <with-param name="accountNo" query-param="accountNo"/>
         <with-param name="accountName" query-param="accountName"/>
         <with-param name="bankCode" query-param="bankCode"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="idType" query-param="idType"/>
         <with-param name="idNo" query-param="idNo"/>
         <with-param name="extCollType" query-param="extCollType"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstExtColl">
      <call-query href="updateMstExtColl">
         <with-param name="address" query-param="address"/>
         <with-param name="rt" query-param="rt"/>
         <with-param name="rw" query-param="rw"/>
         <with-param name="villageCode" query-param="villageCode"/>
         <with-param name="areaCodePhone1" query-param="areaCodePhone1"/>
         <with-param name="phoneNo1" query-param="phoneNo1"/>
         <with-param name="areaCodePhone2" query-param="areaCodePhone2"/>
         <with-param name="phoneNo2" query-param="phoneNo2"/>
         <with-param name="hpNo" query-param="hpNo"/>
         <with-param name="email" query-param="email"/>
         <with-param name="npwp" query-param="npwp"/>
         <with-param name="pic" query-param="pic"/>
         <with-param name="accountNo" query-param="accountNo"/>
         <with-param name="accountName" query-param="accountName"/>
         <with-param name="bankCode" query-param="bankCode"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
         <with-param name="idType" query-param="idType"/>
         <with-param name="idNo" query-param="idNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstExtColl">
      <call-query href="getColumnMstExtColl"/>
   </resource>
   <resource method="POST" path="/getCount/mstExtColl">
      <call-query href="getCountMstExtColl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstExtColl">
      <call-query href="getDataMstExtColl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstExtCollBranchLoop">
      <call-query href="insertMstExtCollBranchLoop">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/deleteMstExtCollBranch">
      <call-query href="deleteMstExtCollBranch">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getMstExtCollBranch">
      <call-query href="getMstExtCollBranch">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstCollDay">
      <call-query href="getDataMstCollDay">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getCount/mstCollDay">
      <call-query href="getCountMstCollDay">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstCollDay">
      <call-query href="getColumnMstCollDay"/>
   </resource>
   <resource method="POST" path="/getMstCollDayDtl">
      <call-query href="getMstCollDayDtl">
         <with-param name="collDayCode" query-param="collDayCode"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstRating">
      <call-query href="insertMstRating">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="paymentFreq" query-param="paymentFreq"/>
         <with-param name="ratingCode" query-param="ratingCode"/>
         <with-param name="valueFrom" query-param="valueFrom"/>
         <with-param name="valueTo" query-param="valueTo"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="criteriaCode" query-param="criteriaCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstRating">
      <call-query href="updateMstRating">
         <with-param name="valueFrom" query-param="valueFrom"/>
         <with-param name="valueTo" query-param="valueTo"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="paymentFreq" query-param="paymentFreq"/>
         <with-param name="ratingCode" query-param="ratingCode"/>
         <with-param name="criteriaCode" query-param="criteriaCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstRating">
      <call-query href="getDataMstRating">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getCount/mstRating">
      <call-query href="getCountMstRating">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstRating">
      <call-query href="getColumnMstRating"/>
   </resource>
   <resource method="POST" path="/lovAtasanKolektorInternal">
      <call-query href="lovGetAtasanKolektorInternal">
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/lovColectorKolektorInternal">
      <call-query href="lovGetColectorKolektorInternal">
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstCollector">
      <call-query href="insertMstCollector">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="collHeadCode" query-param="collHeadCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="joinDate" query-param="joinDate"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="bucketType" query-param="bucketType"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstCollector">
      <call-query href="updateMstCollector">
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="collHeadCode" query-param="collHeadCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findOneMstCollectorByCollHeadCode">
      <call-query href="findOneMstCollectorByCollHeadCode">
         <with-param name="collHeadCode" query-param="collHeadCode"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstCollector">
      <call-query href="getColumnMstCollector"/>
   </resource>
   <resource method="POST" path="/getCount/mstCollector">
      <call-query href="getCountMstCollector">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstCollector">
      <call-query href="getDataMstCollector">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovGetAtasan">
      <call-query href="getColumnLovGetAtasan"/>
   </resource>
   <resource method="POST" path="/getCount/lovGetAtasan">
      <call-query href="getCountLovGetAtasan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovGetAtasan">
      <call-query href="getDataLovGetAtasan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovGetKolektor">
      <call-query href="getColumnLovGetKolektor"/>
   </resource>
   <resource method="POST" path="/getCount/lovGetKolektor">
      <call-query href="getCountLovGetKolektor">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovGetKolektor">
      <call-query href="getDataLovGetKolektor">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getCount/lovGetCodeHead">
      <call-query href="getCountLovGetCodeHead">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovGetCodeHead">
      <call-query href="getDataLovGetCodeHead">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovGetCodeHead">
      <call-query href="getColumnLovGetCodeHead"/>
   </resource>
   <resource method="GET" path="/getColumn/mstCollArea">
      <call-query href="getColumnMstCollArea"/>
   </resource>
   <resource method="POST" path="/getCount/mstCollArea">
      <call-query href="getCountMstCollArea">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstCollArea">
      <call-query href="getDataMstCollArea">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstCollAreaHdr">
      <call-query href="insertMstCollAreaHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstCollAreaDtl">
      <call-query href="insertMstCollAreaDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
         <with-param name="villageCode" query-param="villageCode"/>
         <with-param name="qtyAggrNo" query-param="qtyAggrNo"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="collDayCode" query-param="collDayCode"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/deleteMstCollAreaDtl">
      <call-query href="deleteMstCollAreaDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstCollAreaDtl">
      <call-query href="getColumMstCollAreaDtl"/>
   </resource>
   <resource method="POST" path="/getCount/mstCollAreaDtl">
      <call-query href="getCountMstCollAreaDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstCollAreaDtl">
      <call-query href="getDataMstCollAreaDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxSp">
      <call-query href="getColumnTrxSp"/>
   </resource>
   <resource method="POST" path="/getCount/trxSp">
      <call-query href="getCountTrxSp">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxSp">
      <call-query href="getDataTrxSp">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxSp">
      <call-query href="insertTrxSp">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="spNo" query-param="spNo"/>
         <with-param name="spDate" query-param="spDate"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="customerCode" query-param="customerCode"/>
         <with-param name="spType" query-param="spType"/>
         <with-param name="spSolvingDay" query-param="spSolvingDay"/>
         <with-param name="expiredDate" query-param="expiredDate"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="instFrom" query-param="instFrom"/>
         <with-param name="instTo" query-param="instTo"/>
         <with-param name="osInstallment" query-param="osInstallment"/>
         <with-param name="penaltyFee" query-param="penaltyFee"/>
         <with-param name="dueDate" query-param="dueDate"/>
         <with-param name="dayOverdue" query-param="dayOverdue"/>
         <with-param name="spSts" query-param="spSts"/>
         <with-param name="printedDate" query-param="printedDate"/>
         <with-param name="sentDate" query-param="sentDate"/>
         <with-param name="returnedDate" query-param="returnedDate"/>
         <with-param name="canceledDate" query-param="canceledDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="collFee" query-param="collFee"/>
         <with-param name="utjBalance" query-param="utjBalance"/>
         <with-param name="installmentPaid" query-param="installmentPaid"/>
         <with-param name="tenor" query-param="tenor"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="dateDisscussion" query-param="dateDisscussion"/>
         <with-param name="timeDisscussion" query-param="timeDisscussion"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxSp">
      <call-query href="updateTrxSp">
         <with-param name="spDate" query-param="spDate"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="customerCode" query-param="customerCode"/>
         <with-param name="spType" query-param="spType"/>
         <with-param name="spSolvingDay" query-param="spSolvingDay"/>
         <with-param name="expiredDate" query-param="expiredDate"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="instFrom" query-param="instFrom"/>
         <with-param name="instTo" query-param="instTo"/>
         <with-param name="osInstallment" query-param="osInstallment"/>
         <with-param name="penaltyFee" query-param="penaltyFee"/>
         <with-param name="dueDate" query-param="dueDate"/>
         <with-param name="dayOverdue" query-param="dayOverdue"/>
         <with-param name="spSts" query-param="spSts"/>
         <with-param name="printedDate" query-param="printedDate"/>
         <with-param name="returnedDate" query-param="returnedDate"/>
         <with-param name="canceledDate" query-param="canceledDate"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="spNo" query-param="spNo"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="sentDate" query-param="sentDate"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="dateDisscussion" query-param="dateDisscussion"/>
         <with-param name="timeDisscussion" query-param="timeDisscussion"/>
         <with-param name="printedBy" query-param="printedBy"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstCollFee">
      <call-query href="getColumnMstCollFee"/>
   </resource>
   <resource method="POST" path="/getCount/mstCollFee">
      <call-query href="getCountMstCollFee">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstCollFee">
      <call-query href="getDataMstCollFee">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/mstCollFee">
      <call-query href="insertMstCollFee">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collKindFee" query-param="collKindFee"/>
         <with-param name="categoryCode" query-param="categoryCode"/>
         <with-param name="collFee" query-param="collFee"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstCollFee">
      <call-query href="updateMstCollFee">
         <with-param name="collFee" query-param="collFee"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collKindFee" query-param="collKindFee"/>
         <with-param name="effectiveDateNew" query-param="effectiveDateNew"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxDkh">
      <call-query href="getColumnTrxDkh"/>
   </resource>
   <resource method="POST" path="/getCount/trxDkh">
      <call-query href="getCountTrxDkh">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="dateFrom" query-param="dateFrom"/>
         <with-param name="dateUntil" query-param="dateUntil"/>
         <with-param name="customFilter" query-param="customFilter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxDkh">
      <call-query href="getDataTrxDkh">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="dateFrom" query-param="dateFrom"/>
         <with-param name="dateUntil" query-param="dateUntil"/>
         <with-param name="customFilter" query-param="customFilter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxDkhHdr">
      <call-query href="insertTrxDkhHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="dkhDate" query-param="dkhDate"/>
         <with-param name="picHead" query-param="picHead"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="dkhSts" query-param="dkhSts"/>
         <with-param name="qtyCustomer" query-param="qtyCustomer"/>
         <with-param name="qtyGroup" query-param="qtyGroup"/>
         <with-param name="qtyGroupVisit" query-param="qtyGroupVisit"/>
         <with-param name="qtyGroupCash" query-param="qtyGroupCash"/>
         <with-param name="totCollFee" query-param="totCollFee"/>
         <with-param name="totPenaltyValue" query-param="totPenaltyValue"/>
         <with-param name="totInstallBill" query-param="totInstallBill"/>
         <with-param name="totBill" query-param="totBill"/>
         <with-param name="totPaidCollFee" query-param="totPaidCollFee"/>
         <with-param name="totPaidPenalty" query-param="totPaidPenalty"/>
         <with-param name="totPaidInstallBill" query-param="totPaidInstallBill"/>
         <with-param name="totUtjPlus" query-param="totUtjPlus"/>
         <with-param name="totPaidCash" query-param="totPaidCash"/>
         <with-param name="cashierDepositValue" query-param="cashierDepositValue"/>
         <with-param name="paymentPointDeposit" query-param="paymentPointDeposit"/>
         <with-param name="collCashOnHand" query-param="collCashOnHand"/>
         <with-param name="totUtjUsage" query-param="totUtjUsage"/>
         <with-param name="submittedDate" query-param="submittedDate"/>
         <with-param name="submittedBy" query-param="submittedBy"/>
         <with-param name="canceledDate" query-param="canceledDate"/>
         <with-param name="canceledBy" query-param="canceledBy"/>
         <with-param name="closedDate" query-param="closedDate"/>
         <with-param name="closedBy" query-param="closedBy"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxDkhDtl">
      <call-query href="insertTrxDkhDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="dkhTime" query-param="dkhTime"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="customerCode" query-param="customerCode"/>
         <with-param name="promiseeSts" query-param="promiseeSts"/>
         <with-param name="dueDate" query-param="dueDate"/>
         <with-param name="instFrom" query-param="instFrom"/>
         <with-param name="instTo" query-param="instTo"/>
         <with-param name="dayOverdue" query-param="dayOverdue"/>
         <with-param name="totUndueInstall" query-param="totUndueInstall"/>
         <with-param name="installment" query-param="installment"/>
         <with-param name="collFee" query-param="collFee"/>
         <with-param name="penaltyValue" query-param="penaltyValue"/>
         <with-param name="installBill" query-param="installBill"/>
         <with-param name="totBill" query-param="totBill"/>
         <with-param name="visitCode" query-param="visitCode"/>
         <with-param name="visitTime" query-param="visitTime"/>
         <with-param name="paidSts" query-param="paidSts"/>
         <with-param name="receiptNo" query-param="receiptNo"/>
         <with-param name="jbDate" query-param="jbDate"/>
         <with-param name="jbTime" query-param="jbTime"/>
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="meetCode" query-param="meetCode"/>
         <with-param name="meetName" query-param="meetName"/>
         <with-param name="addrSts" query-param="addrSts"/>
         <with-param name="unitSts" query-param="unitSts"/>
         <with-param name="paymentDate" query-param="paymentDate"/>
         <with-param name="presenceSts" query-param="presenceSts"/>
         <with-param name="prepaymentSts" query-param="prepaymentSts"/>
         <with-param name="paidCollFee" query-param="paidCollFee"/>
         <with-param name="paidPenalty" query-param="paidPenalty"/>
         <with-param name="paidInstall" query-param="paidInstall"/>
         <with-param name="paidCash" query-param="paidCash"/>
         <with-param name="discount" query-param="discount"/>
         <with-param name="attCode" query-param="attCode"/>
         <with-param name="utjBalance" query-param="utjBalance"/>
         <with-param name="utjPlusValue" query-param="utjPlusValue"/>
         <with-param name="utjUsageValue" query-param="utjUsageValue"/>
         <with-param name="utjUsageReason" query-param="utjUsageReason"/>
         <with-param name="utjAppvSts" query-param="utjAppvSts"/>
         <with-param name="utjAppvDate" query-param="utjAppvDate"/>
         <with-param name="utjPosted" query-param="utjPosted"/>
         <with-param name="utjPostedDate" query-param="utjPostedDate"/>
         <with-param name="spNo" query-param="spNo"/>
         <with-param name="spType" query-param="spType"/>
         <with-param name="spReceiptType" query-param="spReceiptType"/>
         <with-param name="spReceiptName" query-param="spReceiptName"/>
         <with-param name="spNotes" query-param="spNotes"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="collNotes" query-param="collNotes"/>
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="flagSendDate" query-param="flagSendDate"/>
         <with-param name="longtitude" query-param="longtitude"/>
         <with-param name="latitude" query-param="latitude"/>
         <with-param name="cashierCode" query-param="cashierCode"/>
         <with-param name="billSts" query-param="billSts"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="customerPaymentDate" query-param="customerPaymentDate"/>
         <with-param name="visitTimeValue" query-param="visitTimeValue"/>
         <with-param name="tuTimeValue" query-param="tuTimeValue"/>
         <with-param name="teamNo" query-param="teamNo"/>
         <with-param name="collFeeRate" query-param="collFeeRate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxDkhGroup">
      <call-query href="insertTrxDkhGroup">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="collTime" query-param="collTime"/>
         <with-param name="visitCode" query-param="visitCode"/>
         <with-param name="visitTime" query-param="visitTime"/>
         <with-param name="jbDate" query-param="jbDate"/>
         <with-param name="jbTime" query-param="jbTime"/>
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="reasonUnvisit" query-param="reasonUnvisit"/>
         <with-param name="receiptNo" query-param="receiptNo"/>
         <with-param name="qtyCustomerPaid" query-param="qtyCustomerPaid"/>
         <with-param name="totCollFee" query-param="totCollFee"/>
         <with-param name="totPenaltyValue" query-param="totPenaltyValue"/>
         <with-param name="totInstallBill" query-param="totInstallBill"/>
         <with-param name="totBill" query-param="totBill"/>
         <with-param name="totPaidCollFee" query-param="totPaidCollFee"/>
         <with-param name="totPaidPenalty" query-param="totPaidPenalty"/>
         <with-param name="totPaidInstallBill" query-param="totPaidInstallBill"/>
         <with-param name="totUtjPlusValue" query-param="totUtjPlusValue"/>
         <with-param name="totPaidCash" query-param="totPaidCash"/>
         <with-param name="totUtjUsageValue" query-param="totUtjUsageValue"/>
         <with-param name="billSts" query-param="billSts"/>
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="flagSendDate" query-param="flagSendDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxDkhHdr">
      <call-query href="updateTrxDkhHdr">
         <with-param name="dkhSts" query-param="dkhSts"/>
         <with-param name="qtyCustomer" query-param="qtyCustomer"/>
         <with-param name="qtyGroup" query-param="qtyGroup"/>
         <with-param name="qtyGroupVisit" query-param="qtyGroupVisit"/>
         <with-param name="qtyGroupCash" query-param="qtyGroupCash"/>
         <with-param name="totCollFee" query-param="totCollFee"/>
         <with-param name="totPenaltyValue" query-param="totPenaltyValue"/>
         <with-param name="totInstallBill" query-param="totInstallBill"/>
         <with-param name="totBill" query-param="totBill"/>
         <with-param name="totPaidCollFee" query-param="totPaidCollFee"/>
         <with-param name="totPaidPenalty" query-param="totPaidPenalty"/>
         <with-param name="totPaidInstallBill" query-param="totPaidInstallBill"/>
         <with-param name="totUtjPlus" query-param="totUtjPlus"/>
         <with-param name="totPaidCash" query-param="totPaidCash"/>
         <with-param name="collCashOnHand" query-param="collCashOnHand"/>
         <with-param name="totUtjUsage" query-param="totUtjUsage"/>
         <with-param name="submittedDate" query-param="submittedDate"/>
         <with-param name="submittedBy" query-param="submittedBy"/>
         <with-param name="canceledDate" query-param="canceledDate"/>
         <with-param name="canceledBy" query-param="canceledBy"/>
         <with-param name="closedDate" query-param="closedDate"/>
         <with-param name="closedBy" query-param="closedBy"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="qtyCustomerCash" query-param="qtyCustomerCash"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxDkhDtl">
      <call-query href="updateTrxDkhDtl">
         <with-param name="promiseeSts" query-param="promiseeSts"/>
         <with-param name="dueDate" query-param="dueDate"/>
         <with-param name="instFrom" query-param="instFrom"/>
         <with-param name="instTo" query-param="instTo"/>
         <with-param name="dayOverdue" query-param="dayOverdue"/>
         <with-param name="totUndueInstall" query-param="totUndueInstall"/>
         <with-param name="installment" query-param="installment"/>
         <with-param name="collFee" query-param="collFee"/>
         <with-param name="penaltyValue" query-param="penaltyValue"/>
         <with-param name="installBill" query-param="installBill"/>
         <with-param name="totBill" query-param="totBill"/>
         <with-param name="visitCode" query-param="visitCode"/>
         <with-param name="visitTime" query-param="visitTime"/>
         <with-param name="paidSts" query-param="paidSts"/>
         <with-param name="receiptNo" query-param="receiptNo"/>
         <with-param name="jbDate" query-param="jbDate"/>
         <with-param name="jbTime" query-param="jbTime"/>
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="meetCode" query-param="meetCode"/>
         <with-param name="meetName" query-param="meetName"/>
         <with-param name="addrSts" query-param="addrSts"/>
         <with-param name="unitSts" query-param="unitSts"/>
         <with-param name="paymentDate" query-param="paymentDate"/>
         <with-param name="presenceSts" query-param="presenceSts"/>
         <with-param name="prepaymentSts" query-param="prepaymentSts"/>
         <with-param name="paidCollFee" query-param="paidCollFee"/>
         <with-param name="paidPenalty" query-param="paidPenalty"/>
         <with-param name="paidInstall" query-param="paidInstall"/>
         <with-param name="paidCash" query-param="paidCash"/>
         <with-param name="discount" query-param="discount"/>
         <with-param name="attCode" query-param="attCode"/>
         <with-param name="utjBalance" query-param="utjBalance"/>
         <with-param name="utjPlusValue" query-param="utjPlusValue"/>
         <with-param name="utjUsageValue" query-param="utjUsageValue"/>
         <with-param name="utjUsageReason" query-param="utjUsageReason"/>
         <with-param name="utjAppvSts" query-param="utjAppvSts"/>
         <with-param name="utjAppvDate" query-param="utjAppvDate"/>
         <with-param name="spNo" query-param="spNo"/>
         <with-param name="spType" query-param="spType"/>
         <with-param name="spReceiptType" query-param="spReceiptType"/>
         <with-param name="spReceiptName" query-param="spReceiptName"/>
         <with-param name="spNotes" query-param="spNotes"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="collNotes" query-param="collNotes"/>
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="flagSendDate" query-param="flagSendDate"/>
         <with-param name="billSts" query-param="billSts"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="customerPaymentDate" query-param="customerPaymentDate"/>
         <with-param name="visitTimeValue" query-param="visitTimeValue"/>
         <with-param name="tuTimeValue" query-param="tuTimeValue"/>
         <with-param name="dkhTime" query-param="dkhTime"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxDkhGroup">
      <call-query href="updateTrxDkhGroup">
         <with-param name="collTime" query-param="collTime"/>
         <with-param name="visitCode" query-param="visitCode"/>
         <with-param name="visitTime" query-param="visitTime"/>
         <with-param name="jbDate" query-param="jbDate"/>
         <with-param name="jbTime" query-param="jbTime"/>
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="reasonUnvisit" query-param="reasonUnvisit"/>
         <with-param name="receiptNo" query-param="receiptNo"/>
         <with-param name="qtyCustomerPaid" query-param="qtyCustomerPaid"/>
         <with-param name="totCollFee" query-param="totCollFee"/>
         <with-param name="totPenaltyValue" query-param="totPenaltyValue"/>
         <with-param name="totInstallBill" query-param="totInstallBill"/>
         <with-param name="totBill" query-param="totBill"/>
         <with-param name="totPaidCollFee" query-param="totPaidCollFee"/>
         <with-param name="totPaidPenalty" query-param="totPaidPenalty"/>
         <with-param name="totPaidInstallBill" query-param="totPaidInstallBill"/>
         <with-param name="totUtjPlusValue" query-param="totUtjPlusValue"/>
         <with-param name="totPaidCash" query-param="totPaidCash"/>
         <with-param name="totUtjUsageValue" query-param="totUtjUsageValue"/>
         <with-param name="billSts" query-param="billSts"/>
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="flagSendDate" query-param="flagSendDate"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/lovCollAllBucket">
      <call-query href="lovCollAllBucket">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
         <with-param name="villageCode" query-param="villageCode"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxDkhGroup">
      <call-query href="getColumnTrxDkhGroup"/>
   </resource>
   <resource method="POST" path="/getCount/trxDkhGroup">
      <call-query href="getCountTrxDkhGroup">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxDkhGroup">
      <call-query href="getDataTrxDkhGroup">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxDkhDtl">
      <call-query href="getColumnTrxDkhDtl"/>
   </resource>
   <resource method="POST" path="/getCount/trxDkhDtl">
      <call-query href="getCountTrxDkhDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxDkhDtl">
      <call-query href="getDataTrxDkhDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxDkhPindah">
      <call-query href="trxDkhPindah">
         <with-param name="groupCode" query-param="groupCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateStatusHapusByGroupCode">
      <call-query href="updateStatusHapusByGroupCode">
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovDkhPindah">
      <call-query href="getColumnLovDkhPindah"/>
   </resource>
   <resource method="POST" path="/getCount/lovDkhPindah">
      <call-query href="getCountLovDkhNo">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="dkhDate" query-param="dkhDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovDkhPindah">
      <call-query href="getDataLovDkhPindah">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="dkhDate" query-param="dkhDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovRiwayatPembayaran">
      <call-query href="getColumnLovRiwayatPembayaran"/>
   </resource>
   <resource method="POST" path="/getCount/lovRiwayatPembayaran">
      <call-query href="getCountLovRiwayatPembayaran">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovRiwayatPembayaran">
      <call-query href="getDataLovRiwayatPembayaran">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovRiwayatPenanganan">
      <call-query href="getColumnRiwayatPenanganan"/>
   </resource>
   <resource method="POST" path="/getCount/lovRiwayatPenanganan">
      <call-query href="getCountRiwayatPenanganan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovRiwayatPenanganan">
      <call-query href="getDataRiwayatPenanganan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovUtjAwal">
      <call-query href="getColumnLovUtjAwal"/>
   </resource>
   <resource method="POST" path="/getCount/lovUtjAwal">
      <call-query href="getCountLovUtjAwal">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovUtjAwal">
      <call-query href="getDataLovUthAwal">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovKelompokCustom">
      <call-query href="getColumnLovKelompok"/>
   </resource>
   <resource method="POST" path="/getCount/lovKelompokCustom">
      <call-query href="getCountLovKelompok">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="collDay" query-param="collDay"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovKelompokCustom">
      <call-query href="getDataLovKelompok">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="collDay" query-param="collDay"/>
      </call-query>
   </resource>
   <resource method="POST" path="/lovPeringkat">
      <call-query href="lovPeringkat">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="ratingCode" query-param="ratingCode"/>
         <with-param name="ratingName" query-param="ratingName"/>
         <with-param name="absenceValue" query-param="absenceValue"/>
         <with-param name="utjRecipient" query-param="utjRecipient"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updatePaidStsByAggrNo">
      <call-query href="updatePaidStsByAggrNo">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/hapusDebiturByGroupAggr">
      <call-query href="hapusDebiturByGroupAggr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateFlagMove">
      <call-query href="updateFlagMove">
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxCollMoveBucket">
      <call-query href="insertTrxCollMoveBucket">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="bucketCodeFrom" query-param="bucketCodeFrom"/>
         <with-param name="bucketCodeTo" query-param="bucketCodeTo"/>
         <with-param name="collCodeFrom" query-param="collCodeFrom"/>
         <with-param name="picPositionFrom" query-param="picPositionFrom"/>
         <with-param name="trxSts" query-param="trxSts"/>
         <with-param name="apprvSts" query-param="apprvSts"/>
         <with-param name="apprvDate" query-param="apprvDate"/>
         <with-param name="cancelDate" query-param="cancelDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="bucketTypeTo" query-param="bucketTypeTo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxCollMoveBucket">
      <call-query href="getColumnTrxCollMoveBucket"/>
   </resource>
   <resource method="POST" path="/getCount/trxCollMoveBucket">
      <call-query href="getCountTrxCollMoveBucket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxCollMoveBucket">
      <call-query href="getDataTrxCollMoveBucket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxCollMoveBucket">
      <call-query href="updateTrxCollMoveBucket">
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="bucketCodeFrom" query-param="bucketCodeFrom"/>
         <with-param name="bucketCodeTo" query-param="bucketCodeTo"/>
         <with-param name="collCodeFrom" query-param="collCodeFrom"/>
         <with-param name="picPositionFrom" query-param="picPositionFrom"/>
         <with-param name="trxSts" query-param="trxSts"/>
         <with-param name="apprvSts" query-param="apprvSts"/>
         <with-param name="apprvDate" query-param="apprvDate"/>
         <with-param name="cancelDate" query-param="cancelDate"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="trxDate" query-param="trxDate"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="bucketTypeTo" query-param="bucketTypeTo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNomorKontrak">
      <call-query href="getColumnLovNomorKontrak"/>
   </resource>
   <resource method="POST" path="/getCount/lovNomorKontrak">
      <call-query href="getCountLovNomorKontrak">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="dkhDate" query-param="dkhDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNomorKontrak">
      <call-query href="getDataLovNomorKonrak">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="dkhDate" query-param="dkhDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxSttu">
      <call-query href="getColumnTrxSttu"/>
   </resource>
   <resource method="POST" path="/getCount/trxSttu">
      <call-query href="getCountTrxSttu">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxSttu">
      <call-query href="getDataTrxSttu">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxSttu">
      <call-query href="insertTrxSttu">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="expiredDate" query-param="expiredDate"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="sttuSts" query-param="sttuSts"/>
         <with-param name="sttuStsDate" query-param="sttuStsDate"/>
         <with-param name="customerCode" query-param="customerCode"/>
         <with-param name="villageCode" query-param="villageCode"/>
         <with-param name="printedDate" query-param="printedDate"/>
         <with-param name="printCount" query-param="printCount"/>
         <with-param name="agentType" query-param="agentType"/>
         <with-param name="pic1Code" query-param="pic1Code"/>
         <with-param name="pic1Position" query-param="pic1Position"/>
         <with-param name="pic2Code" query-param="pic2Code"/>
         <with-param name="pic2Position" query-param="pic2Position"/>
         <with-param name="picHead" query-param="picHead"/>
         <with-param name="picHeadPosition" query-param="picHeadPosition"/>
         <with-param name="tuReason" query-param="tuReason"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="chronological" query-param="chronological"/>
         <with-param name="picProductCode" query-param="picProductCode"/>
         <with-param name="picBucketType" query-param="picBucketType"/>
         <with-param name="pic1BucketCode" query-param="pic1BucketCode"/>
         <with-param name="pic2BucketCode" query-param="pic2BucketCode"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
         <with-param name="dayOverdue" query-param="dayOverdue"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxSttu">
      <call-query href="updateTrxSttu">
         <with-param name="sttuDate" query-param="sttuDate"/>
         <with-param name="expiredDate" query-param="expiredDate"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="sttuSts" query-param="sttuSts"/>
         <with-param name="sttuStsDate" query-param="sttuStsDate"/>
         <with-param name="customerCode" query-param="customerCode"/>
         <with-param name="villageCode" query-param="villageCode"/>
         <with-param name="printedDate" query-param="printedDate"/>
         <with-param name="printCount" query-param="printCount"/>
         <with-param name="agentType" query-param="agentType"/>
         <with-param name="pic1Code" query-param="pic1Code"/>
         <with-param name="pic1Position" query-param="pic1Position"/>
         <with-param name="pic2Code" query-param="pic2Code"/>
         <with-param name="pic2Position" query-param="pic2Position"/>
         <with-param name="picHead" query-param="picHead"/>
         <with-param name="picHeadPosition" query-param="picHeadPosition"/>
         <with-param name="tuReason" query-param="tuReason"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="chronological" query-param="chronological"/>
         <with-param name="picProductCode" query-param="picProductCode"/>
         <with-param name="picBucketType" query-param="picBucketType"/>
         <with-param name="pic1BucketCode" query-param="pic1BucketCode"/>
         <with-param name="pic2BucketCode" query-param="pic2BucketCode"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxSttuCost">
      <call-query href="getColumnTrxSttuCost"/>
   </resource>
   <resource method="POST" path="/getCount/trxSttuCost">
      <call-query href="getCountTrxSttuCost">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxSttuCost">
      <call-query href="getDataTrxSttuCost">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/detailTrxSttuCost">
      <call-query href="getColumnDetailTrxSttuCost"/>
   </resource>
   <resource method="POST" path="/getCount/detailTrxSttuCost">
      <call-query href="getCountDetailTrxSttuCost">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/detailTrxSttuCost">
      <call-query href="getDataDetailTrxSttuCost">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxSttuCostHdr">
      <call-query href="insertTrxSttuCostHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="typeCost" query-param="typeCost"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="totReqValue" query-param="totReqValue"/>
         <with-param name="totRealValue" query-param="totRealValue"/>
         <with-param name="picCode" query-param="picCode"/>
         <with-param name="picPosition" query-param="picPosition"/>
         <with-param name="successFlag" query-param="successFlag"/>
         <with-param name="disbDate" query-param="disbDate"/>
         <with-param name="realDate" query-param="realDate"/>
         <with-param name="closeDate" query-param="closeDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="chronological" query-param="chronological"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxSttuCostDtl">
      <call-query href="insertTrxSttuCostDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
         <with-param name="seqNo" query-param="seqNo"/>
         <with-param name="costNote" query-param="costNote"/>
         <with-param name="reqValue" query-param="reqValue"/>
         <with-param name="realValue" query-param="realValue"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxSttuCostHdr">
      <call-query href="updateTrxSttuCostHdr">
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="typeCost" query-param="typeCost"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="totReqValue" query-param="totReqValue"/>
         <with-param name="totRealValue" query-param="totRealValue"/>
         <with-param name="picCode" query-param="picCode"/>
         <with-param name="picPosition" query-param="picPosition"/>
         <with-param name="successFlag" query-param="successFlag"/>
         <with-param name="reqCostSts" query-param="reqCostSts"/>
         <with-param name="reqCostStsDate" query-param="reqCostStsDate"/>
         <with-param name="disbDate" query-param="disbDate"/>
         <with-param name="realDate" query-param="realDate"/>
         <with-param name="closeDate" query-param="closeDate"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
         <with-param name="chronological" query-param="chronological"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxSttuCostDtl">
      <call-query href="updateTrxSttuCostDtl">
         <with-param name="costNote" query-param="costNote"/>
         <with-param name="reqValue" query-param="reqValue"/>
         <with-param name="realValue" query-param="realValue"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
         <with-param name="seqNo" query-param="seqNo"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxSttuCostDtl">
      <call-query href="deleteTrxSttuCostDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
         <with-param name="seqNo" query-param="seqNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/paymentSequence">
      <call-query href="getColumnPaymentSequence"/>
   </resource>
   <resource method="POST" path="/getCount/paymentSequence">
      <call-query href="getCountPaymentSequence">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/paymentSequence">
      <call-query href="getDataPaymentSequence">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovBayarUtj">
      <call-query href="getColumnLovBayarUtj"/>
   </resource>
   <resource method="POST" path="/getCount/lovBayarUtj">
      <call-query href="getCountLovBayarUtj">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovBayarUtj">
      <call-query href="getDataLovBayarUtj">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstUtj">
      <call-query href="updateMstUtj">
         <with-param name="bookValue" query-param="bookValue"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="plusValue" query-param="plusValue"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxUtj">
      <call-query href="insertTrxUtj">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="reffNo" query-param="reffNo"/>
         <with-param name="utjTransCode" query-param="utjTransCode"/>
         <with-param name="plusValue" query-param="plusValue"/>
         <with-param name="bookValue" query-param="bookValue"/>
         <with-param name="aggrNoRecipient" query-param="aggrNoRecipient"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxDkhDtlFile">
      <call-query href="insertTrxDkhDtlFile">
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="fileLocation" query-param="fileLocation"/>
         <with-param name="fileName" query-param="fileName"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxDkhDtlFile">
      <call-query href="deleteTrxDkhDtlFile">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getListUploadFile">
      <call-query href="getListUploadFile">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxTuDeposit">
      <call-query href="getColumnTrxTuDeposit"/>
   </resource>
   <resource method="POST" path="/getCount/trxTuDeposit">
      <call-query href="getCountTrxTuDeposit">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxTuDeposit">
      <call-query href="getDataTrxTuDeposit">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuDeposit">
      <call-query href="insertTrxTuDeposit">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuDepositDate" query-param="tuDepositDate"/>
         <with-param name="executionDate" query-param="executionDate"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="receiptFrom" query-param="receiptFrom"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="balPrincipalValue" query-param="balPrincipalValue"/>
         <with-param name="balIntValue" query-param="balIntValue"/>
         <with-param name="balTenor" query-param="balTenor"/>
         <with-param name="expiredDate" query-param="expiredDate"/>
         <with-param name="stnkExpiredDate" query-param="stnkExpiredDate"/>
         <with-param name="km" query-param="km"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
         <with-param name="tuCost" query-param="tuCost"/>
         <with-param name="penaltyTuValue" query-param="penaltyTuValue"/>
         <with-param name="notesPicReceive1" query-param="notesPicReceive1"/>
         <with-param name="notesPicReceive2" query-param="notesPicReceive2"/>
         <with-param name="locCode" query-param="locCode"/>
         <with-param name="locReceiptCode" query-param="locReceiptCode"/>
         <with-param name="printedBy" query-param="printedBy"/>
         <with-param name="printedDate" query-param="printedDate"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="appvDate" query-param="appvDate"/>
         <with-param name="solvingType" query-param="solvingType"/>
         <with-param name="solvingDate" query-param="solvingDate"/>
         <with-param name="solvingNotes" query-param="solvingNotes"/>
         <with-param name="extCount" query-param="extCount"/>
         <with-param name="vehcOutDate" query-param="vehcOutDate"/>
         <with-param name="vehcOutBy" query-param="vehcOutBy"/>
         <with-param name="otrValue" query-param="otrValue"/>
         <with-param name="taksasiValue" query-param="taksasiValue"/>
         <with-param name="totMinusValue" query-param="totMinusValue"/>
         <with-param name="totAddValue" query-param="totAddValue"/>
         <with-param name="depositSts" query-param="depositSts"/>
         <with-param name="voucherNo" query-param="voucherNo"/>
         <with-param name="voucherDate" query-param="voucherDate"/>
         <with-param name="unitCondition" query-param="unitCondition"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="collFee" query-param="collFee"/>
         <with-param name="penaltyValue" query-param="penaltyValue"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
         <with-param name="daysOverdue" query-param="daysOverdue"/>
         <with-param name="locNotes" query-param="locNotes"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuSparepart">
      <call-query href="insertTrxTuSparepart">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="sparepartCode" query-param="sparepartCode"/>
         <with-param name="notes" query-param="notes"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxTuDeposit">
      <call-query href="updateTrxTuDeposit">
         <with-param name="tuDepositDate" query-param="tuDepositDate"/>
         <with-param name="executionDate" query-param="executionDate"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="receiptFrom" query-param="receiptFrom"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="balPrincipalValue" query-param="balPrincipalValue"/>
         <with-param name="balIntValue" query-param="balIntValue"/>
         <with-param name="instNo" query-param="instNo"/>
         <with-param name="balTenor" query-param="balTenor"/>
         <with-param name="expiredDate" query-param="expiredDate"/>
         <with-param name="stnkExpiredDate" query-param="stnkExpiredDate"/>
         <with-param name="km" query-param="km"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
         <with-param name="tuCost" query-param="tuCost"/>
         <with-param name="penaltyTuValue" query-param="penaltyTuValue"/>
         <with-param name="notesPicReceive1" query-param="notesPicReceive1"/>
         <with-param name="notesPicReceive2" query-param="notesPicReceive2"/>
         <with-param name="locCode" query-param="locCode"/>
         <with-param name="locReceiptCode" query-param="locReceiptCode"/>
         <with-param name="printedBy" query-param="printedBy"/>
         <with-param name="printedDate" query-param="printedDate"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="appvDate" query-param="appvDate"/>
         <with-param name="solvingType" query-param="solvingType"/>
         <with-param name="solvingDate" query-param="solvingDate"/>
         <with-param name="solvingNotes" query-param="solvingNotes"/>
         <with-param name="extCount" query-param="extCount"/>
         <with-param name="vehcOutDate" query-param="vehcOutDate"/>
         <with-param name="vehcOutBy" query-param="vehcOutBy"/>
         <with-param name="otrValue" query-param="otrValue"/>
         <with-param name="taksasiValue" query-param="taksasiValue"/>
         <with-param name="totMinusValue" query-param="totMinusValue"/>
         <with-param name="totAddValue" query-param="totAddValue"/>
         <with-param name="depositSts" query-param="depositSts"/>
         <with-param name="voucherNo" query-param="voucherNo"/>
         <with-param name="voucherDate" query-param="voucherDate"/>
         <with-param name="unitCondition" query-param="unitCondition"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="collFee" query-param="collFee"/>
         <with-param name="penaltyValue" query-param="penaltyValue"/>
         <with-param name="locNotes" query-param="locNotes"/>
         <with-param name="kmDeposit" query-param="kmDeposit"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxTuSparepart">
      <call-query href="deleteTrxTuSparepart">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxTuSparepart">
      <call-query href="getColumnTrxTuSparepart"/>
   </resource>
   <resource method="POST" path="/getCount/trxTuSparepart">
      <call-query href="getCountTrxTuSparepart">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxTuSparepart">
      <call-query href="getDataTrxTuSparepart">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuFile">
      <call-query href="insertTrxTuFile">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="fileLocation" query-param="fileLocation"/>
         <with-param name="fileName" query-param="fileName"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxTuFile">
      <call-query href="deleteTrxTuFile">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxTuFile">
      <call-query href="getColumnTrxTuFile"/>
   </resource>
   <resource method="POST" path="/getCount/trxTuFile">
      <call-query href="getCountTrxTuFile">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxTuFile">
      <call-query href="getDataTrxTuFile">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuSolving">
      <call-query href="insertTrxTuSolving">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
         <with-param name="tuSolvingType" query-param="tuSolvingType"/>
         <with-param name="notes" query-param="notes"/>
         <with-param name="inventoryDateOld" query-param="inventoryDateOld"/>
         <with-param name="inventoryDateNew" query-param="inventoryDateNew"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="appvDate" query-param="appvDate"/>
         <with-param name="totPayment" query-param="totPayment"/>
         <with-param name="payInstallBill" query-param="payInstallBill"/>
         <with-param name="payCollFee" query-param="payCollFee"/>
         <with-param name="payPenalty" query-param="payPenalty"/>
         <with-param name="payPenaltyTu" query-param="payPenaltyTu"/>
         <with-param name="payCostTu" query-param="payCostTu"/>
         <with-param name="discountValue" query-param="discountValue"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuSolvingDoc">
      <call-query href="insertTrxTuSolvingDoc">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
         <with-param name="documentCode" query-param="documentCode"/>
         <with-param name="flagChoose" query-param="flagChoose"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxTuSolvingDoc">
      <call-query href="deleteTrxTuSolvingDoc">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxTuSolving">
      <call-query href="getColumnTrxTuSolving"/>
   </resource>
   <resource method="POST" path="/getCount/trxTuSolving">
      <call-query href="getCountTrxTuSolving">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxTuSolving">
      <call-query href="getDataTrxTuSolving">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateBucketTrxAggr">
      <call-query href="updateBucketTrxAggr">
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findBranchCodePindahBaket">
      <call-query href="findBranchCodePindahBaket">
         <with-param name="trxNo" query-param="trxNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findFormTitleWorkFlow">
      <call-query href="findFormitleMstWorkFlow">
         <with-param name="processName" query-param="processName"/>
      </call-query>
   </resource>
   <resource method="POST" path="/riwayatTransaksiPindahBaket">
      <call-query href="riwayatTransaksiTaskToDo">
         <with-param name="trxCode" query-param="trxCode"/>
         <with-param name="companyCode" query-param="companyCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/printDateTrxSp">
      <call-query href="printDateTrxSp">
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="spNo" query-param="spNo"/>
         <with-param name="printedDate" query-param="printedDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxTuMutasi">
      <call-query href="getColumnTrxTuMutasi"/>
   </resource>
   <resource method="POST" path="/getCount/trxTuMutasi">
      <call-query href="getCountTrxTuMutasi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxTuMutasi">
      <call-query href="getDataTrxTuMutasi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuMutasiHdr">
      <call-query href="insertTrxTuMutasiHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="trxDate" query-param="trxDate"/>
         <with-param name="branchTo" query-param="branchTo"/>
         <with-param name="notes" query-param="notes"/>
         <with-param name="picCode" query-param="picCode"/>
         <with-param name="picPosition" query-param="picPosition"/>
         <with-param name="receivedDate" query-param="receivedDate"/>
         <with-param name="receivedBy" query-param="receivedBy"/>
         <with-param name="receivedPosition" query-param="receivedPosition"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="trxSts" query-param="trxSts"/>
         <with-param name="branchFrom" query-param="branchFrom"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuMutasiDtl">
      <call-query href="insertTrxTuMutasiDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxTuMutasiDtl">
      <call-query href="deleteTrxTuMutasiDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxTuMutasiHdr">
      <call-query href="updateTrxTuMutasiHdr">
         <with-param name="trxDate" query-param="trxDate"/>
         <with-param name="branchTo" query-param="branchTo"/>
         <with-param name="notes" query-param="notes"/>
         <with-param name="picCode" query-param="picCode"/>
         <with-param name="picPosition" query-param="picPosition"/>
         <with-param name="receivedDate" query-param="receivedDate"/>
         <with-param name="receivedBy" query-param="receivedBy"/>
         <with-param name="receivedPosition" query-param="receivedPosition"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="trxSts" query-param="trxSts"/>
         <with-param name="branchCodeFrom" query-param="branchCodeFrom"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNopol">
      <call-query href="getColumnLovNopol"/>
   </resource>
   <resource method="POST" path="/getCount/lovNopol">
      <call-query href="getCountLovNopol">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNopol">
      <call-query href="getDataLovNopol">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxTuMutasiDtl">
      <call-query href="getColumnTrxTuMutasiDtl"/>
   </resource>
   <resource method="POST" path="/getCount/trxTuMutasiDtl">
      <call-query href="getCountTrxTuMutasiDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxTuMutasiDtl">
      <call-query href="getDataTrxTuMutasiDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoTransaksi">
      <call-query href="getColumnLovNoTransaksi"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoTransaksi">
      <call-query href="getCountLovNoTransaksi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoTransaksi">
      <call-query href="getDataLovNoTransaksi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getTuSolvingDoc">
      <call-query href="getTuSolvingDoc">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxSell">
      <call-query href="getColumnTrxSell"/>
   </resource>
   <resource method="POST" path="/getCount/trxSell">
      <call-query href="getCountTrxSell">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxSell">
      <call-query href="getDataTrxSell">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxSellHdr">
      <call-query href="insertTrxSellHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="sellType" query-param="sellType"/>
         <with-param name="paymentType" query-param="paymentType"/>
         <with-param name="expiredDate" query-param="expiredDate"/>
         <with-param name="totUnit" query-param="totUnit"/>
         <with-param name="totBidder" query-param="totBidder"/>
         <with-param name="totOsp" query-param="totOsp"/>
         <with-param name="totPenaltyTu" query-param="totPenaltyTu"/>
         <with-param name="totCostTu" query-param="totCostTu"/>
         <with-param name="totSelling" query-param="totSelling"/>
         <with-param name="totSellLoss" query-param="totSellLoss"/>
         <with-param name="appvDate" query-param="appvDate"/>
         <with-param name="cancelDate" query-param="cancelDate"/>
         <with-param name="voucherNo" query-param="voucherNo"/>
         <with-param name="voucherDate" query-param="voucherDate"/>
         <with-param name="sellSts" query-param="sellSts"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxSellUnit">
      <call-query href="insertTrxSellUnit">
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="marketPrice" query-param="marketPrice"/>
         <with-param name="osp" query-param="osp"/>
         <with-param name="penaltyTu" query-param="penaltyTu"/>
         <with-param name="costTu" query-param="costTu"/>
         <with-param name="selling" query-param="selling"/>
         <with-param name="vehcOutDate" query-param="vehcOutDate"/>
         <with-param name="sellLoss" query-param="sellLoss"/>
         <with-param name="vehcOutBy" query-param="vehcOutBy"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="marketPriceAreaCode" query-param="marketPriceAreaCode"/>
         <with-param name="marketModelCode" query-param="marketModelCode"/>
         <with-param name="marketNewUsed" query-param="marketNewUsed"/>
         <with-param name="marketYearMfg" query-param="marketYearMfg"/>
         <with-param name="marketEffectiveDate" query-param="marketEffectiveDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxSellBidder">
      <call-query href="insertTrxSellBidder">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="customerFullname" query-param="customerFullname"/>
         <with-param name="dateBidder" query-param="dateBidder"/>
         <with-param name="idType" query-param="idType"/>
         <with-param name="idNo" query-param="idNo"/>
         <with-param name="address" query-param="address"/>
         <with-param name="rt" query-param="rt"/>
         <with-param name="rw" query-param="rw"/>
         <with-param name="hpNo" query-param="hpNo"/>
         <with-param name="villageCode" query-param="villageCode"/>
         <with-param name="areaCodePhone1" query-param="areaCodePhone1"/>
         <with-param name="phoneNo1" query-param="phoneNo1"/>
         <with-param name="areaCodePhone2" query-param="areaCodePhone2"/>
         <with-param name="phoneNo2" query-param="phoneNo2"/>
         <with-param name="selling" query-param="selling"/>
         <with-param name="winnerSts" query-param="winnerSts"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxSellHdr">
      <call-query href="updateTrxSellHdr">
         <with-param name="sellType" query-param="sellType"/>
         <with-param name="paymentType" query-param="paymentType"/>
         <with-param name="totUnit" query-param="totUnit"/>
         <with-param name="totBidder" query-param="totBidder"/>
         <with-param name="totOsp" query-param="totOsp"/>
         <with-param name="totPenaltyTu" query-param="totPenaltyTu"/>
         <with-param name="totCostTu" query-param="totCostTu"/>
         <with-param name="totSelling" query-param="totSelling"/>
         <with-param name="totSellLoss" query-param="totSellLoss"/>
         <with-param name="sellSts" query-param="sellSts"/>
         <with-param name="appvDate" query-param="appvDate"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="updateBy" query-param="updateBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxSellBidder">
      <call-query href="updateTrxSellBidder">
         <with-param name="customerFullname" query-param="customerFullname"/>
         <with-param name="dateBidder" query-param="dateBidder"/>
         <with-param name="idType" query-param="idType"/>
         <with-param name="idNo" query-param="idNo"/>
         <with-param name="address" query-param="address"/>
         <with-param name="rt" query-param="rt"/>
         <with-param name="rw" query-param="rw"/>
         <with-param name="villageCode" query-param="villageCode"/>
         <with-param name="hpNo" query-param="hpNo"/>
         <with-param name="areaCodePhone1" query-param="areaCodePhone1"/>
         <with-param name="phoneNo1" query-param="phoneNo1"/>
         <with-param name="areaCodePhone2" query-param="areaCodePhone2"/>
         <with-param name="phoneNo2" query-param="phoneNo2"/>
         <with-param name="selling" query-param="selling"/>
         <with-param name="winnerSts" query-param="winnerSts"/>
         <with-param name="flagActive" query-param="flagActive"/>
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="seqNo" query-param="seqNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/hapusTrxSellUnit">
      <call-query href="hapusTrxSellUnit">
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/hapusTrxSellBidder">
      <call-query href="hapusTrxSellBidder">
         <with-param name="updateBy" query-param="updateBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="seqNo" query-param="seqNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxSellBidder">
      <call-query href="getColumnTrxSellBidder"/>
   </resource>
   <resource method="POST" path="/getCount/trxSellBidder">
      <call-query href="getCountTrxSellBidder">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxSellBidder">
      <call-query href="getDataTrxSellBidder">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxSellUnit">
      <call-query href="getColumnTrxSellUnit"/>
   </resource>
   <resource method="POST" path="/getCount/trxSellUnit">
      <call-query href="getCountTrxSellUnit">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxSellUnit">
      <call-query href="getDataTrxSellUnit">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxTuOutHdr">
      <call-query href="getColumnTrxTuOutHdr"/>
   </resource>
   <resource method="POST" path="/getCount/trxTuOutHdr">
      <call-query href="getCountTrxTuOutHdr">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxTuOutHdr">
      <call-query href="getDataTrxTuOutHdr">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuOutHdr">
      <call-query href="insertTrxTuOutHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="trxDate" query-param="trxDate"/>
         <with-param name="customerName" query-param="customerName"/>
         <with-param name="voucherNo" query-param="voucherNo"/>
         <with-param name="voucherDate" query-param="voucherDate"/>
         <with-param name="receiverName" query-param="receiverName"/>
         <with-param name="trxType" query-param="trxType"/>
         <with-param name="reffNo" query-param="reffNo"/>
         <with-param name="printedBy" query-param="printedBy"/>
         <with-param name="printedDate" query-param="printedDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTuOutDtl">
      <call-query href="insertTrxTuOutDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="enterDate" query-param="enterDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updatePrintPengeluaranUnit">
      <call-query href="updatePrintPengeluaranUnit">
         <with-param name="printedBy" query-param="printedBy"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getListDetailPengeluaranUnit">
      <call-query href="getListDetailPengeluaranUnit">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoPembayaran">
      <call-query href="getColumnLovNoPembayaran"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoPembayaran">
      <call-query href="getCountLovNoPembayaran">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoPembayaran">
      <call-query href="getDataLovNoPembayaran">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/detailKontrakNonPenjualan">
      <call-query href="listDetailKontrakNonPenjualan">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/detailKontrakPenjualan">
      <call-query href="listDetailKontrakPenjualan">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="voucherNo" query-param="voucherNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/monitoringDebiturParamcode6">
      <call-query href="listMonitoringdebiturparamcode6">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="valuesFrom" query-param="valuesFrom"/>
         <with-param name="valuesTo" query-param="valuesTo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/monitoringDebiturParamcode7">
      <call-query href="listMonitoringdebiturparamcode7">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="valuesFrom" query-param="valuesFrom"/>
         <with-param name="valuesTo" query-param="valuesTo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/monitoringDebitur">
      <call-query href="listMonitoringdebitur">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="valuesFrom" query-param="valuesFrom"/>
         <with-param name="valuesTo" query-param="valuesTo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateAppvStsSttuCost">
      <call-query href="updateAppvStsSttuCost">
         <with-param name="appvsts" query-param="appvsts"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/monitoringPersediaanUnit">
      <call-query href="getColumnMonitorPersediaan"/>
   </resource>
   <resource method="POST" path="/getCount/monitoringPersediaanUnit">
      <call-query href="getCountMonitorPersediaan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/monitoringPersediaanUnit">
      <call-query href="getDataMonitorPersediaan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findBranchCodeBiayaTarikUnit">
      <call-query href="findBranchCodeBiayaTarikUnit">
         <with-param name="reqCostNo" query-param="reqCostNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/monitoringUtj">
      <call-query href="getColumnMonitorUtj"/>
   </resource>
   <resource method="POST" path="/getCount/monitoringUtj">
      <call-query href="getCountMonitorUtj">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/monitoringUtj">
      <call-query href="getDataMonitorUtj">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNomorKontrakSp">
      <call-query href="getColumnLovNomorKontrakSp"/>
   </resource>
   <resource method="POST" path="/getCount/lovNomorKontrakSp">
      <call-query href="getCountLovNomorKontrakSp">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNomorKontrakSp">
      <call-query href="getDataLovNomorKontrakSp">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNomorKontrakIndex">
      <call-query href="getColumnLovNomorKontrakIndex"/>
   </resource>
   <resource method="POST" path="/getCount/lovNomorKontrakIndex">
      <call-query href="getCountLovNomorKontrakIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNomorKontrakIndex">
      <call-query href="getDataLovNomorKontrakIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxTuSolving">
      <call-query href="updateTrxTuSolving">
         <with-param name="tuSolvingDateNew" query-param="tuSolvingDateNew"/>
         <with-param name="tuSolvingType" query-param="tuSolvingType"/>
         <with-param name="notes" query-param="notes"/>
         <with-param name="inventoryDateOld" query-param="inventoryDateOld"/>
         <with-param name="inventoryDateNew" query-param="inventoryDateNew"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="appvDate" query-param="appvDate"/>
         <with-param name="totPayment" query-param="totPayment"/>
         <with-param name="payInstallBill" query-param="payInstallBill"/>
         <with-param name="payCollFee" query-param="payCollFee"/>
         <with-param name="payPenalty" query-param="payPenalty"/>
         <with-param name="payPenaltyTu" query-param="payPenaltyTu"/>
         <with-param name="payCostTu" query-param="payCostTu"/>
         <with-param name="discountValue" query-param="discountValue"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/solvingTypeTuDeposit">
      <call-query href="updateSolvingTypeTuDeposit">
         <with-param name="tuSolvingType" query-param="tuSolvingType"/>
         <with-param name="tuSolvingDateNew" query-param="tuSolvingDateNew"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getSolvingTypeTuDeposit">
      <call-query href="getSolvingTypeTuDeposit">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/appvStsTuDeposit">
      <call-query href="updateAppvStsTuDeposit">
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/sellStsSellHdr">
      <call-query href="updateSellStsSellHdr">
         <with-param name="sellSts" query-param="sellSts"/>
         <with-param name="sellNo" query-param="sellNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/sellingTrxSellUnit">
      <call-query href="updateSellingTrxSellUnit">
         <with-param name="selling" query-param="selling"/>
         <with-param name="sellLoss" query-param="sellLoss"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/winnerStsTrxSellBidder">
      <call-query href="updateWinnerStsTrxSellBidder">
         <with-param name="winnerSts" query-param="winnerSts"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="seqNo" query-param="seqNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/sttuStsTrxSttu">
      <call-query href="updateSttuStsTrxSttu">
         <with-param name="sttuSts" query-param="sttuSts"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/totSellingTrxSellHdr">
      <call-query href="updateSellingTrxSellHdr">
         <with-param name="totSelling" query-param="totSelling"/>
         <with-param name="totSellLoss" query-param="totSellLoss"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findBranchCodeSellHdr">
      <call-query href="findBranchCodeSellHdr">
         <with-param name="sellNo" query-param="sellNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/prosesBayarPenjualanTarikUnit">
      <call-query href="prosesBayarPenjualanTarikUnit">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="sellDate" query-param="sellDate"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/appvStsSerahTerimaUnit">
      <call-query href="appvStsSerahTerimaUnit">
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="dateInventoryNew" query-param="dateInventoryNew"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="solvingType" query-param="solvingType"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findBranchCodeSttu">
      <call-query href="findBranchCodeSttu">
         <with-param name="sttuNo" query-param="sttuNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/appvStsTuSolving">
      <call-query href="updateAppvStsTuSolving">
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findBranchCodeTuSolving">
      <call-query href="findBranchCodeTuSolving">
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/appvStsValidasiPenerimaan">
      <call-query href="appvStsValidasiPenerimaan">
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findBranchCodeTuDeposit">
      <call-query href="findBranchCodeTuDeposit">
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/paymentHdrPenyelesaian">
      <call-query href="insertPaymentHdrPenyelesaian">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="paymentTypeCode" query-param="paymentTypeCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/appvStsDkhDtl">
      <call-query href="appvStsDkhDtl">
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/dkhSts">
      <call-query href="updateDkhSts">
         <with-param name="dkhSts" query-param="dkhSts"/>
         <with-param name="submittedBy" query-param="submittedBy"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findBranchCodeDkhUtj">
      <call-query href="findBranchCodeDkhUtj">
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkPaidStsDkh">
      <call-query href="checkPaidStsDkh">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/appvStsSerahTerimaUnitReadyToSell">
      <call-query href="appvStsSerahTerimaUnitReadyToSell">
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="invSolvingType" query-param="invSolvingType"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/statusKirimDkhUtj">
      <call-query href="statusKirimDkhUtj">
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/insertTrxUtjApprove">
      <call-query href="insertTrxUtjApprove">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="utjPlusValue" query-param="utjPlusValue"/>
         <with-param name="flagApprove" query-param="flagApprove"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="utjTransCode" query-param="utjTransCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateFlagSendDkhDtl">
      <call-query href="updateFlagSendDkhDtl">
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxDkhDtlUtj">
      <call-query href="insertTrxDkhDtlUtj">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNoRecipient" query-param="aggrNoRecipient"/>
         <with-param name="aggrNoDonor" query-param="aggrNoDonor"/>
         <with-param name="utjTransCode" query-param="utjTransCode"/>
         <with-param name="utjUsageValue" query-param="utjUsageValue"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findOneAggrAsset">
      <call-query href="findOneAggrAsset">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/subStsAggr">
      <call-query href="updateSubStsAggr">
         <with-param name="subSts" query-param="subSts"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/tuCostTuDeposit">
      <call-query href="updateTuCostTuDeposit">
         <with-param name="totRealValue" query-param="totRealValue"/>
         <with-param name="reqCostNo" query-param="reqCostNo"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxTagihUlang">
      <call-query href="insertTrxTagihUlang">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="customerCode" query-param="customerCode"/>
         <with-param name="tuType" query-param="tuType"/>
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNomorKontrakSttu">
      <call-query href="getColumnLovNomorKontrakSttu"/>
   </resource>
   <resource method="POST" path="/getCount/lovNomorKontrakSttu">
      <call-query href="getCountLovNomorKontrakSttu">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNomorKontrakSttu">
      <call-query href="getDataLovNomorKontrakSttu">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovCollector">
      <call-query href="getColumnLovCollector"/>
   </resource>
   <resource method="POST" path="/getCount/lovCollector">
      <call-query href="getCountLovCollector">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovCollector">
      <call-query href="getDataLovCollector">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/sttuNoDkhDtl">
      <call-query href="updateSttuNoDkhDtl">
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdCollByDkh">
      <call-query href="callSpUpdCollByDkh">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNoFrom" query-param="dkhNoFrom"/>
         <with-param name="collCodeTo" query-param="collCodeTo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="userLogin" query-param="userLogin"/>
         <with-param name="returnVal" query-param="returnVal"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="productCode" query-param="productCode"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoKontrakPindahBaket">
      <call-query href="getColumnLovNoKontrakPindahBaket"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoKontrakPindahBaket">
      <call-query href="getCountLovNoKontrakPindahBaket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoKontrakPindahBaket">
      <call-query href="getDataLovNoKontrakPindahBaket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/collFeeTxSchedule">
      <call-query href="updateCollFeeTrxSchedule">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="collFee" query-param="collFee"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/printedSttu">
      <call-query href="printedSttu">
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="printedDate" query-param="printedDate"/>
         <with-param name="printedBy" query-param="printedBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateLockTu">
      <call-query href="updateLockTu">
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateLockReadyToSell">
      <call-query href="updateLockReadyToSell">
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lisDebitur">
      <call-query href="GetDataLisDebitur">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getCount/lisDebitur">
      <call-query href="GetCountLisDebitur">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lisDebitur">
      <call-query href="GetColumnLisDebitur"/>
   </resource>
   <resource method="POST" path="/checkUpdateMstBucket">
      <call-query href="checkUpdatedMstBucket">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUpdateMstCollAttendance">
      <call-query href="checkUpdatedMstCollAttendance">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="attCode" query-param="attCode"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUpdateMstRating">
      <call-query href="checkUpdatedMstRating">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="paymentFreq" query-param="paymentFreq"/>
         <with-param name="ratingCode" query-param="ratingCode"/>
         <with-param name="criteriaCode" query-param="criteriaCode"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUpdateMstCollDay">
      <call-query href="checkUpdatedMstCollDay">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collDayCode" query-param="collDayCode"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUpdateMstCollFee">
      <call-query href="checkUpdatedMstCollFee">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="collKindFee" query-param="collKindFee"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUpdateMstCollector">
      <call-query href="checkUpdatedMstCollector">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="bucketType" query-param="bucketType"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUpdateMstExtColl">
      <call-query href="checkUpdatedMstExtColl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxTagihUlang">
      <call-query href="updateTrxTagihUlang">
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxTagihUlangMikro">
      <call-query href="updateTrxTagihUlangMikro">
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUpdateMstExtCollArea">
      <call-query href="checkUpdatedMstExtCollArea">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="POST" path="/histArSts">
      <call-query href="insertHistArSts">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="trxCode" query-param="trxCode"/>
         <with-param name="arSts" query-param="arSts"/>
         <with-param name="subSts" query-param="subSts"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxCodeMstArSts">
      <call-query href="getTrxCodeMstArSts">
         <with-param name="arSts" query-param="arSts"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNomorKontrakSell">
      <call-query href="getColumnLovNomorKontrakSell"/>
   </resource>
   <resource method="POST" path="/getCount/lovNomorKontrakSell">
      <call-query href="getCountLovNomorKontrakSell">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNomorKontrakSell">
      <call-query href="getDataLovNomorKontrakSell">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoKontrakIndexBaket">
      <call-query href="getColumnNoKontrakIndexPindahBalket"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoKontrakIndexBaket">
      <call-query href="getCountNoKontrakIndexPindahBalket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoKontrakIndexBaket">
      <call-query href="getDataNoKontrakIndexPindahBalket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/deletePaymentHdr">
      <call-query href="deletePaymentHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="refNo" query-param="refNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportLkhOld">
      <call-query href="getColumnReportLkh"/>
   </resource>
   <resource method="POST" path="/getCount/reportLkhOld">
      <call-query href="getCountReportLkh">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportLkhOld">
      <call-query href="getDataReportLkh">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportSp">
      <call-query href="getColumnReportSp"/>
   </resource>
   <resource method="POST" path="/getCount/reportSp">
      <call-query href="getCountReportSp">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportSp">
      <call-query href="getDataReportSp">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportSttu">
      <call-query href="getColumnReportSttu"/>
   </resource>
   <resource method="POST" path="/getCount/reportSttu">
      <call-query href="getCountReportSttu">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportSttu">
      <call-query href="getDataReportSttu">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/lkhSetor">
      <call-query href="insertTrxLkhSetor">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="setorNo" query-param="setorNo"/>
         <with-param name="setorDate" query-param="setorDate"/>
         <with-param name="totSetor" query-param="totSetor"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listDebiturLkhSetor">
      <call-query href="listDebiturLkhSetor">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/totPaidCashDkh">
      <call-query href="updateTotPaidCashDkh">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="paymentPointDeposit" query-param="paymentPointDeposit"/>
         <with-param name="voucherNo" query-param="voucherNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/voucherNoDkhDtl">
      <call-query href="updateVoucherNoDkhDtl">
         <with-param name="voucherNo" query-param="voucherNo"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lkhSetor">
      <call-query href="getColumnLkhSetor"/>
   </resource>
   <resource method="POST" path="/getCount/lkhSetor">
      <call-query href="getCountLkhSetor">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lkhSetor">
      <call-query href="getDataLkhSetor">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findOneLkhSetor">
      <call-query href="findOneLkhSetor">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="setorNo" query-param="setorNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/findOneVoucherNoDkhDtl">
      <call-query href="findOneVoucherNoDkhDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="setorNo" query-param="setorNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxInventory">
      <call-query href="insertTrxInventory">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="locCode" query-param="locCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="balPrincipalValue" query-param="balPrincipalValue"/>
         <with-param name="balIntValue" query-param="balIntValue"/>
         <with-param name="penaltyTuValue" query-param="penaltyTuValue"/>
         <with-param name="tuCost" query-param="tuCost"/>
         <with-param name="createdBy" query-param="createdBy"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxRequestCm">
      <call-query href="insertTrxRequestCm">
         <with-param name="typeCost" query-param="typeCost"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="requestNo" query-param="requestNo"/>
         <with-param name="requestValue" query-param="requestValue"/>
         <with-param name="refNo" query-param="refNo"/>
         <with-param name="picCode" query-param="picCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="requestPosition" query-param="requestPosition"/>
         <with-param name="requestNik" query-param="requestNik"/>
         <with-param name="requestName" query-param="requestName"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="brTo" query-param="brTo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/cekDataTrxXcollateral">
      <call-query href="cekDataTrxXcollateral">
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/cekArStsTrxAggr">
      <call-query href="cekArStsTrxAggr">
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/cekAppdXCollateral">
      <call-query href="cekAppdXCollateral">
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpGenClosingDkh">
      <call-query href="collSpGenClosingDkh">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="dateEod" query-param="dateEod"/>
         <with-param name="returnVal1" query-param="returnVal1"/>
         <with-param name="message" query-param="message"/>
         <with-param name="returnVal2" query-param="returnVal2"/>
         <with-param name="userLogin" query-param="userLogin"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpGenDkh">
      <call-query href="collSpGenDkh">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dateEod" query-param="dateEod"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="returnVal" query-param="returnVal"/>
         <with-param name="checkGen" query-param="checkGen"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkDateDkh">
      <call-query href="checkDateDkh">
         <with-param name="dkhDate" query-param="dkhDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovPositionHeadCodeKolektorInternal">
      <call-query href="getColumnLovGetPositionHeadCode"/>
   </resource>
   <resource method="POST" path="/getCount/lovPositionHeadCodeKolektorInternal">
      <call-query href="getCountLovGetPositionHeadCode">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovPositionHeadCodeKolektorInternal">
      <call-query href="getDataLovGetPositionHeadCode">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkExistDataCollAttendance">
      <call-query href="checkExistDataCollAttendance">
         <with-param name="attendFlag" query-param="attendFlag"/>
         <with-param name="cashFlag" query-param="cashFlag"/>
         <with-param name="utjFlag" query-param="utjFlag"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkExistDataCollDay">
      <call-query href="checkExistDataCollDay">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="codeHariTagih" query-param="codeHariTagih"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/filterMstCollFee">
      <call-query href="getColumnFilterMstCollFee"/>
   </resource>
   <resource method="POST" path="/getCount/filterMstCollFee">
      <call-query href="getCountFilterMstCollFee">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/filterMstCollFee">
      <call-query href="getDataFilterMstCollFee">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/filterMstCollArea">
      <call-query href="getColumnFilterMstCollArea"/>
   </resource>
   <resource method="POST" path="/getCount/filterMstCollArea">
      <call-query href="getCountFilterMstCollArea">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/filterMstCollArea">
      <call-query href="getDataFilterMstCollArea">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstCollectorByCollHeadCode">
      <call-query href="getColumnMstCollectorByCollHeadCode"/>
   </resource>
   <resource method="POST" path="/getCount/mstCollectorByCollHeadCode">
      <call-query href="getCountMstCollectorByCollHeadCode">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstCollectorByCollHeadCode">
      <call-query href="getDataMstCollectorByCollHeadCode">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovPositionHeadCodeIndex">
      <call-query href="getColumnLovPositionHeadCodeIndex"/>
   </resource>
   <resource method="POST" path="/getCount/lovPositionHeadCodeIndex">
      <call-query href="getCountLovPositionHeadCodeIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovPositionHeadCodeIndex">
      <call-query href="getDataLovPositionHeadCodeIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovGetAtasanIndex">
      <call-query href="getColumnLovGetAtasanIndex"/>
   </resource>
   <resource method="POST" path="/getCount/lovGetAtasanIndex">
      <call-query href="getCountLovGetAtasanIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovGetAtasanIndex">
      <call-query href="getDataLovGetAtasanIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getDetailMstCollAreaDtl">
      <call-query href="getDetailMstCollAreaDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/monitorLkh">
      <call-query href="getColumnMonitorLkh"/>
   </resource>
   <resource method="POST" path="/getCount/monitorLkh">
      <call-query href="getCountMonitorLkh">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/monitorLkh">
      <call-query href="getDataMonitorLkh">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovKolektor">
      <call-query href="getColumnLovKolektor"/>
   </resource>
   <resource method="POST" path="/getCount/lovKolektor">
      <call-query href="getCountLovKolektor">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovKolektor">
      <call-query href="getDataLovKolektor">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/approveBatalPindahBaket">
      <call-query href="rejectPindahBaket">
         <with-param name="trxNo" query-param="trxNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovKelompok">
      <call-query href="getColumnLovKelompokTagihUlang"/>
   </resource>
   <resource method="POST" path="/getCount/lovKelompok">
      <call-query href="getCountLovKelompokTagihUlang">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovKelompok">
      <call-query href="getDataLovKelompokTagihUlang">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/riwayatPersetujuan">
      <call-query href="getColumnRiwayatTaskToDo"/>
   </resource>
   <resource method="POST" path="/getCount/riwayatPersetujuan">
      <call-query href="getCountRiwayatTaskToDo">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/riwayatPersetujuan">
      <call-query href="getDataRiwayatTaskToDo">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/generateMstCoverAreaDtlDso">
      <call-query href="generateMstCoverAreaDtlDso">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getDetailMstCollAreaDtlDso">
      <call-query href="getDetailMstCollAreaDtlDso">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/prcUpdCollCode">
      <call-query href="callSpPrcUpdCollCode">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovCollectorIndex">
      <call-query href="getColumnLovCollectorIndex"/>
   </resource>
   <resource method="POST" path="/getCount/lovCollectorIndex">
      <call-query href="getCountLovCollectorIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovCollectorIndex">
      <call-query href="getDataLovCollectorIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/spCheckFlagSendSatu">
      <call-query href="spCheckFlagSendSatu">
         <with-param name="spNo" query-param="spNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/spCheckFlagSendNol">
      <call-query href="spCheckFlagSendNol">
         <with-param name="spNo" query-param="spNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateSpsts">
      <call-query href="updateSpsts">
         <with-param name="spNo" query-param="spNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateSpNoDkhDtl">
      <call-query href="updateSpNoDkhDtl">
         <with-param name="dkhNo" query-param="dkhNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateLockUnlockInventory">
      <call-query href="updateLockUnlockInventory">
         <with-param name="inventorySts" query-param="inventorySts"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/cancelSellUnit">
      <call-query href="cancelSellUnit">
         <with-param name="sellSts" query-param="sellSts"/>
         <with-param name="sellNo" query-param="sellNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateReadyToSellUnit">
      <call-query href="updateReadyToSellUnit">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="inventorySts" query-param="inventorySts"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/mstCollAreaHdr">
      <call-query href="updateMstCollAreaHdr">
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovKelompokMonitorUtj">
      <call-query href="getColumnLovKelompokMonitorUtj"/>
   </resource>
   <resource method="POST" path="/getCount/lovKelompokMonitorUtj">
      <call-query href="getCountLovKelompokMonitorUtj">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovKelompokMonitorUtj">
      <call-query href="getDataLovKelompokMonitorUtj">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovDebitur">
      <call-query href="getColumnLovDebitur"/>
   </resource>
   <resource method="POST" path="/getCount/lovDebitur">
      <call-query href="getCountLovDebitur">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovDebitur">
      <call-query href="getDataLovDebitur">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateLockUnlockPenyelesaianTarikUnit">
      <call-query href="updateLockUnlockPenyelesaianTarikUnit">
         <with-param name="inventorySts" query-param="inventorySts"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNomorKontrakSpUkm">
      <call-query href="getColumnLovNomorKontrakSpUkm"/>
   </resource>
   <resource method="POST" path="/getCount/lovNomorKontrakSpUkm">
      <call-query href="getCountLovNomorKontrakSpUkm">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNomorKontrakSpUkm">
      <call-query href="getDataLovNomorKontrakSpUkm">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoKontrakIndexPindahBaket">
      <call-query href="getColumnLovNoKontrakIndexPindahBaket"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoKontrakIndexPindahBaket">
      <call-query href="getCountLovNoKontrakIndexPindahBaket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoKontrakIndexPindahBaket">
      <call-query href="getDataLovNoKontrakIndexPindahBaket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lisDebiturDtl">
      <call-query href="GetColumnLisDebiturDtl"/>
   </resource>
   <resource method="POST" path="/getCount/lisDebiturDtl">
      <call-query href="GetCountLisDebiturDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lisDebiturDtl">
      <call-query href="GetDataLisDebiturDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoKontrakIndexSerahTerima">
      <call-query href="getColumnLovNoKontrakIndexSerahTerima"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoKontrakIndexSerahTerima">
      <call-query href="getCountLovNoKontrakIndexSerahTerima">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoKontrakIndexSerahTerima">
      <call-query href="getDataLovNoKontrakIndexSerahTerima">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/totalDendaRiwayatPembayaran">
      <call-query href="totalDendaRiwayatPembayaran">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/areaDtlMoveBucket">
      <call-query href="getColumnAreaDtlMoveBucket"/>
   </resource>
   <resource method="POST" path="/getCount/areaDtlMoveBucket">
      <call-query href="getCountAreaDtlMoveBucket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/areaDtlMoveBucket">
      <call-query href="getDataAreaDtlMoveBucket">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovPartner">
      <call-query href="getColumnLovPartner"/>
   </resource>
   <resource method="POST" path="/getCount/lovPartner">
      <call-query href="getCountLovPartner">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovPartner">
      <call-query href="getDataLovPartner">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getRequesterCollection">
      <call-query href="getRequesterCollection">
         <with-param name="requester" query-param="requester"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/riwayatSetor">
      <call-query href="getColumnRiwayatSetor"/>
   </resource>
   <resource method="POST" path="/getCount/riwayatSetor">
      <call-query href="getCountRiwayatSetor">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/riwayatSetor">
      <call-query href="getDataRiwayatSetor">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/prcDkhUtj">
      <call-query href="callSpPrcDkhUtj">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="userLogin" query-param="userLogin"/>
         <with-param name="returnVal" query-param="returnVal"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/trxDkhDtlUtj">
      <call-query href="getColumnTrxDkhDtlUtj"/>
   </resource>
   <resource method="POST" path="/getCount/trxDkhDtlUtj">
      <call-query href="getCountTrxDkhDtlUtj">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/trxDkhDtlUtj">
      <call-query href="getDataTrxDkhDtlUtj">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovKelengkapan">
      <call-query href="getColumnLovKelengkapan"/>
   </resource>
   <resource method="POST" path="/getCount/lovKelengkapan">
      <call-query href="getCountLovKelengkapan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovKelengkapan">
      <call-query href="getDataLovKelengkapan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportPenarikanPenjualan">
      <call-query href="getColumnReportPenarikanPenjualan"/>
   </resource>
   <resource method="POST" path="/getCount/reportPenarikanPenjualan">
      <call-query href="getCountReportPenarikanPenjualan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportPenarikanPenjualan">
      <call-query href="getDataReportPenarikanPenjualan">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportListDebitur">
      <call-query href="getColumnReportListDebitur"/>
   </resource>
   <resource method="POST" path="/getCount/reportListDebitur">
      <call-query href="getCountReportListDebitur">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportListDebitur">
      <call-query href="getDataReportListDebitur">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getListDocumentSolving">
      <call-query href="getListDocumentSolving">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="solvingType" query-param="solvingType"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/validasiPenyelesaianPerpanjangan">
      <call-query href="checkValidasiPenyelesaianPerpanjangan">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportAbsensiWithGroup">
      <call-query href="getColumnReportAbsensiWithGroup"/>
   </resource>
   <resource method="POST" path="/getCount/reportAbsensiWithGroup">
      <call-query href="getCountReportAbsensiWithGroup">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportAbsensiWithGroup">
      <call-query href="getDataReportAbsensiWithGroup">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportAbsensiNotGroup">
      <call-query href="getColumnReportAbsensiNotGroup"/>
   </resource>
   <resource method="POST" path="/getCount/reportAbsensiNotGroup">
      <call-query href="getCountReportAbsensiNotGroup">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportAbsensiNotGroup">
      <call-query href="getDataReportAbsensiNotGroup">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportAbsensiSummary">
      <call-query href="getColumnReportAbsensiSummary"/>
   </resource>
   <resource method="POST" path="/getCount/reportAbsensiSummary">
      <call-query href="getCountReportAbsensiSummary">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportAbsensiSummary">
      <call-query href="getDataReportAbsensiSummary">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/rejectPenyelesaian">
      <call-query href="rejectPenyelesaian">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="solvingType" query-param="solvingType"/>
         <with-param name="woDate" query-param="woDate"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoKontrakMutasi">
      <call-query href="getColumnLovNoKontrakMutasi"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoKontrakMutasi">
      <call-query href="getCountLovNoKontrakMutasi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoKontrakMutasi">
      <call-query href="getDataLovNoKontrakMutasi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportScoreBoard">
      <call-query href="getColumnReportScoreBoard"/>
   </resource>
   <resource method="POST" path="/getCount/reportScoreBoard">
      <call-query href="getCountReportScoreBoard">
         <with-param name="year" query-param="year"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="companyCode" query-param="companyCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportScoreBoard">
      <call-query href="getDataReportScoreBoard">
         <with-param name="year" query-param="year"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="companyCode" query-param="companyCode"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/deleteUnitBidder">
      <call-query href="deleteUnitBidder">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateReadyToSellPenjualan">
      <call-query href="updateReadyToSellPenjualan">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoKontrakIndexLkh">
      <call-query href="getColumnLovNoKontrakIndexLkh"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoKontrakIndexLkh">
      <call-query href="getCountLovNoKontrakIndexLkh">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoKontrakIndexLkh">
      <call-query href="getDataLovNoKontrakIndexLkh">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getPositionPenjualanTarikUnit">
      <call-query href="getPositionPenjualanTarikUnit">
         <with-param name="positionCode" query-param="positionCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxDkhDtlUtj">
      <call-query href="updateTrxDkhDtlUtj">
         <with-param name="utjTransCode" query-param="utjTransCode"/>
         <with-param name="utjUsageValue" query-param="utjUsageValue"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNoRecipient" query-param="aggrNoRecipient"/>
         <with-param name="aggrNoDonor" query-param="aggrNoDonor"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getDataPemakaianUtj">
      <call-query href="getDataPemakaianUtj">
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkPositionHeadCollector">
      <call-query href="checkPositionHeadCollector">
         <with-param name="positionCode" query-param="positionCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUpdatedTrxDkh">
      <call-query href="checkUpdatedTrxDkh">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="updatedDateStr" query-param="updatedDateStr"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovSttuPettyCash">
      <call-query href="getColumnLovSttuPettyCash"/>
   </resource>
   <resource method="POST" path="/getCount/lovSttuPettyCash">
      <call-query href="getCountLovSttuPettyCash">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovSttuPettyCash">
      <call-query href="getDataLovSttuPettyCash">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovSttuKlaim">
      <call-query href="getColumnLovSttuKlaim"/>
   </resource>
   <resource method="POST" path="/getCount/lovSttuKlaim">
      <call-query href="getCountLovSttuKlaim">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovSttuKlaim">
      <call-query href="getDataLovSttuKlaim">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateSpTrxDkhDtl">
      <call-query href="updateSpTrxDkhDtl">
         <with-param name="spNo" query-param="spNo"/>
         <with-param name="spType" query-param="spType"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNomorKontrakSttuIndex">
      <call-query href="getColumnLovNomorKontrakSttuIndex"/>
   </resource>
   <resource method="POST" path="/getCount/lovNomorKontrakSttuIndex">
      <call-query href="getCountLovNomorKontrakSttuIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNomorKontrakSttuIndex">
      <call-query href="getDataLovNomorKontrakSttuIndex">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNoKontrakIndexSpUkm">
      <call-query href="getColumnLovNoKontrakIndexSpUkm"/>
   </resource>
   <resource method="POST" path="/getCount/lovNoKontrakIndexSpUkm">
      <call-query href="getCountLovNoKontrakIndexSpUkm">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNoKontrakIndexSpUkm">
      <call-query href="getDataLovNoKontrakIndexSpUkm">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredSttu">
      <call-query href="listExpiredSttu">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredSerahTerimaUnit">
      <call-query href="listExpiredSerahTerimaUnit">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updatedExpiredSttuSts">
      <call-query href="updatedExpiredSttuSts">
         <with-param name="sttuSts" query-param="sttuSts"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="companyCode" query-param="companyCode"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovRegion">
      <call-query href="getColumnLovRegion"/>
   </resource>
   <resource method="POST" path="/getCount/lovRegion">
      <call-query href="getCountLovRegion">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovRegion">
      <call-query href="getDataLovRegion">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovArea">
      <call-query href="getColumnLovArea"/>
   </resource>
   <resource method="POST" path="/getCount/lovArea">
      <call-query href="getCountLovArea">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovArea">
      <call-query href="getDataLovArea">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovDso">
      <call-query href="getColumnLovDso"/>
   </resource>
   <resource method="POST" path="/getCount/lovDso">
      <call-query href="getCountLovDso">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovDso">
      <call-query href="getDataLovDso">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovStatusKontrak">
      <call-query href="getColumnLovStatusKontrak"/>
   </resource>
   <resource method="POST" path="/getCount/lovStatusKontrak">
      <call-query href="getCountLovStatusKontrak">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovStatusKontrak">
      <call-query href="getDataLovStatusKontrak">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportAngsuranKelompok">
      <call-query href="getColumnReportPenerimaanAngsuranKelompok"/>
   </resource>
   <resource method="POST" path="/getCount/reportAngsuranKelompok">
      <call-query href="getCountReportPenerimaanAngsuranKelompok">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="dkhFrom" query-param="dkhFrom"/>
         <with-param name="dkhTo" query-param="dkhTo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportAngsuranKelompok">
      <call-query href="getDataReportPenerimaanAngsuranKelompok">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="dkhFrom" query-param="dkhFrom"/>
         <with-param name="dkhTo" query-param="dkhTo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/printedTuOutHdr">
      <call-query href="printedTuOutHdr">
         <with-param name="printedBy" query-param="printedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/dkhRecalculate">
      <call-query href="callSpDkhRecalculate">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovNopolMutasi">
      <call-query href="getColumnLovNopolMutasi"/>
   </resource>
   <resource method="POST" path="/getCount/lovNopolMutasi">
      <call-query href="getCountLovNopolMutasi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovNopolMutasi">
      <call-query href="getDataLovNopolMutasi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovCabangAsalMutasi">
      <call-query href="getColumLovCabangAsalMutasi"/>
   </resource>
   <resource method="POST" path="/getCount/lovCabangAsalMutasi">
      <call-query href="getCountLovCabangAsalMutasi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovCabangAsalMutasi">
      <call-query href="getDataLovCabangAsalMutasi">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateTuDepositValidasiMutasi">
      <call-query href="updateTuDepositValidasiMutasi">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="trxNo" query-param="trxNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getDataCollectorTujuan">
      <call-query href="getDataCollectorTujuan">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="bucketTujuan" query-param="bucketTujuan"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getPimpinanCabang">
      <call-query href="getPimpinanCabang">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/updateSolvingDocRevisi">
      <call-query href="updateSolvingDocRevisi">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/lovKolektorEksternal">
      <call-query href="getColumnLovKolektorEksternal"/>
   </resource>
   <resource method="POST" path="/getCount/lovKolektorEksternal">
      <call-query href="getCountLovKolektorEksternal">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/lovKolektorEksternal">
      <call-query href="getDataLovKolektorEksternal">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredPenyelesaianPerpanjangan">
      <call-query href="listExpiredPenyelesaianPerpanjangan">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredPenyelesaianPercepatan">
      <call-query href="listExpiredPenyelesaianPercepatan">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateExpiredPenyelesaianTarikUnit">
      <call-query href="updateExpiredPenyelesaianTarikUnit">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
         <with-param name="appvSts" query-param="appvSts"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredPindahBaketPermanen">
      <call-query href="listExpiredPindahBaketPermanen">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateExpiredPindahBaket">
      <call-query href="updateExpiredPindahBaket">
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="trxCode" query-param="trxCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredPenjualanUnit">
      <call-query href="listExpiredPenjualanUnit">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateExpiredPenjualanUnit">
      <call-query href="updateExpiredPenjualanUnit">
         <with-param name="sellSts" query-param="sellSts"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkPrepaymetHdr">
      <call-query href="checkPrepaymentHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/detailMstCollAreaDtl">
      <call-query href="getColumnDetailMstCollAreaDtl"/>
   </resource>
   <resource method="POST" path="/getCount/detailMstCollAreaDtl">
      <call-query href="getCountDetailMstCollAreaDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/detailMstCollAreaDtl">
      <call-query href="getDataDetailMstCollAreaDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/detailMstCollAreaDtlDso">
      <call-query href="getColumnDetailMstCollAreaDtlDso"/>
   </resource>
   <resource method="POST" path="/getCount/detailMstCollAreaDtlDso">
      <call-query href="getCountDetailMstCollAreaDtlDso">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/detailMstCollAreaDtlDso">
      <call-query href="getDataDetailMstCollAreaDtlDso">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="bucketCode" query-param="bucketCode"/>
         <with-param name="effectiveDate" query-param="effectiveDate"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/mstExtCollBranch">
      <call-query href="getColumnMstExtCollBranch"/>
   </resource>
   <resource method="POST" path="/getCount/mstExtCollBranch">
      <call-query href="getCountMstExtCollBranch">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/mstExtCollBranch">
      <call-query href="getDataMstExtCollBranch">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
         <with-param name="extCollCode" query-param="extCollCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdSttuExpiredK2">
      <call-query href="callSpUpdSttuExpiredK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="sttuSts" query-param="sttuSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdSerahTerimaExpiredK2">
      <call-query href="callSpUpdSerahTerimaExpiredK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="sttuSts" query-param="sttuSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getListBranch">
      <call-query href="getListBranch">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="structureType" query-param="structureType"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getEodDate">
      <call-query href="getEodDate">
         <with-param name="companyCode" query-param="companyCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpJobProcessEK2">
      <call-query href="callSpJobProcessEK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="processName" query-param="processName"/>
         <with-param name="start" query-param="start"/>
         <with-param name="finish" query-param="finish"/>
         <with-param name="output" query-param="output"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdSolvingPerpanjanganExpiredK2">
      <call-query href="callSpUpdSolvingPerpanjanganExpiredK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdSolvingPercepatanExpiredK2">
      <call-query href="callSpUpdSolvingPercepatanExpiredK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdPindahBaketExpiredK2">
      <call-query href="callSpUpdPindahBaketExpiredK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="trxCode" query-param="trxCode"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdTuSellExpiredK2">
      <call-query href="callSpUpdTuSellExpiredK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="sellSts" query-param="sellSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/findOneVoucherNoDkhDtl">
      <call-query href="getColumnFindOneVoucherNoDkhDtl"/>
   </resource>
   <resource method="POST" path="/getCount/findOneVoucherNoDkhDtl">
      <call-query href="getCountFindOneVoucherNoDkhDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/findOneVoucherNoDkhDtl">
      <call-query href="getDataFindOneVoucherNoDkhDtl">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkPaymentPointStaging">
      <call-query href="checkPaymentPointStaging">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="setorNo" query-param="setorNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/cancelLkhSetor">
      <call-query href="callSpCancLkhSetor">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="setorNo" query-param="setorNo"/>
         <with-param name="reason" query-param="reason"/>
         <with-param name="totSetor" query-param="totSetor"/>
         <with-param name="userLogin" query-param="userLogin"/>
         <with-param name="message" query-param="message"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/cekCancelLkhSetor">
      <call-query href="cekCancelLkhSetor">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="setorNo" query-param="setorNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateAggrSchedule">
      <call-query href="updateAggrSchedule">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="userLogin" query-param="userLogin"/>
      </call-query>
   </resource>
   <resource method="POST" path="/insertTrxEodJob">
      <call-query href="insertTrxEodJob">
         <with-param name="companyCode" query-param="companyCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateTrxEodJob">
      <call-query href="updateTrxEodJob">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="eodSts" query-param="eodSts"/>
      </call-query>
   </resource>
   <resource method="POST" path="/deleteAggrNoDkhDtl">
      <call-query href="deleteAggrNoDkhDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateFlagSendDkhDtlGroup">
      <call-query href="updateFlagSendDkhDtlGroup">
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/maintenanceLkSetor">
      <call-query href="maintenanceLkSetor">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="visitCodeDtl" query-param="visitCodeDtl"/>
         <with-param name="visitTimeDtl" query-param="visitTimeDtl"/>
         <with-param name="tuDateDtl" query-param="tuDateDtl"/>
         <with-param name="tuTimeDtl" query-param="tuTimeDtl"/>
         <with-param name="paidSts" query-param="paidSts"/>
         <with-param name="receiptNo" query-param="receiptNo"/>
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="tuTimeValue" query-param="tuTimeValue"/>
         <with-param name="paymentDate" query-param="paymentDate"/>
         <with-param name="customerPaymentDate" query-param="customerPaymentDate"/>
         <with-param name="presenceSts" query-param="presenceSts"/>
         <with-param name="prepaymentSts" query-param="prepaymentSts"/>
         <with-param name="paidCollFee" query-param="paidCollFee"/>
         <with-param name="paidPenalty" query-param="paidPenalty"/>
         <with-param name="paidInstall" query-param="paidInstall"/>
         <with-param name="paidCash" query-param="paidCash"/>
         <with-param name="discount" query-param="discount"/>
         <with-param name="spReceiptType" query-param="spReceiptType"/>
         <with-param name="spReceiptName" query-param="spReceiptName"/>
         <with-param name="spNotes" query-param="spNotes"/>
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkVoucherNo">
      <call-query href="checkVoucherNo">
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/updateAggrScheduleForMobile">
      <call-query href="updateAggrScheduleForMobile">
         <with-param name="userLogin" query-param="userLogin"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getDkhHdr">
      <call-query href="getDkhHdr">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="collCode" query-param="collCode"/>
         <with-param name="productCode" query-param="productCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getDkhDtl">
      <call-query href="getDkhDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getDkhGroup">
      <call-query href="getDkhGroup">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/trxLkhSetorMobile">
      <call-query href="callSpLkhSetor">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="createdBy" query-param="createdBy"/>
         <with-param name="setorNo" query-param="setorNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="returnVal" query-param="returnVal"/>
         <with-param name="totSetor" query-param="totSetor"/>
         <with-param name="noSetor" query-param="noSetor"/>
      </call-query>
   </resource>
   <resource method="POST" path="/genPrepaymentHdrDtl">
      <call-query href="callSpGenTrxPrepaymentHdrDtl">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="solvingType" query-param="solvingType"/>
         <with-param name="nikApproval" query-param="nikApproval"/>
         <with-param name="notes" query-param="notes"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredPenyelesaianPelunasan">
      <call-query href="listExpiredPenyelesaianPelunasan">
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdSolvingPelunasanExpiredK2">
      <call-query href="callSpUpdSolvingPelunasanExpiredK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredPenyelesaianPembayaranTunggakan">
      <call-query href="listExpiredPenyelesaianPembayaranTunggakan">
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdSolvingPembayaranTunggakanExpiredK2">
      <call-query href="callSpUpdSolvingPembayaranTunggakanExpiredK2">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="tuDepositNo" query-param="tuDepositNo"/>
         <with-param name="tuSolvingDate" query-param="tuSolvingDate"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/rejectCancelSell">
      <call-query href="rejectCancelSell">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="sellNo" query-param="sellNo"/>
         <with-param name="userLogin" query-param="userLogin"/>
      </call-query>
   </resource>
   <resource method="POST" path="/cekCashierValue">
      <call-query href="cekCashierValue">
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="companyCode" query-param="companyCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/updUtjApprove">
      <call-query href="updUtjApprove">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="userLogin" query-param="userLogin"/>
         <with-param name="flagApprove" query-param="flagApprove"/>
         <with-param name="notes" query-param="notes"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkUtjApprove">
      <call-query href="checkUtjApprove">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="promiseeSts" query-param="promiseeSts"/>
         <with-param name="message" query-param="message"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkSubmitKelompok">
      <call-query href="checkSubmitKelompok">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/checkSubmitDebitur">
      <call-query href="checkSubmitDebitur">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/allMstUtj">
      <call-query href="allMstUtj">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/cekJumlahSetujuPnjualanTarikUnit">
      <call-query href="cekJumlahSetujuPnjualanTarikUnit">
         <with-param name="trxCode" query-param="trxCode"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxDkhDtlFileByDkh">
      <call-query href="trxDkhDtlFileByDkh">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxDkhDtlFileByDkhGroup">
      <call-query href="trxDkhDtlFileByDkhGroup">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="groupCode" query-param="groupCode"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxDkhDtlFileByDkhString">
      <call-query href="trxDkhDtlFileByDkhString">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="listAggr" query-param="listAggr"/>
      </call-query>
   </resource>
   <resource method="PUT" path="/trxDkhDtlNew">
      <call-query href="updTrxDkhDtlNew">
         <with-param name="paidCash" query-param="paidCash"/>
         <with-param name="flagSend" query-param="flagSend"/>
         <with-param name="dkhTime" query-param="dkhTime"/>
         <with-param name="promiseeSts" query-param="promiseeSts"/>
         <with-param name="dueDate" query-param="dueDate"/>
         <with-param name="instFrom" query-param="instFrom"/>
         <with-param name="instTo" query-param="instTo"/>
         <with-param name="dayOverdue" query-param="dayOverdue"/>
         <with-param name="totUndueInstall" query-param="totUndueInstall"/>
         <with-param name="installment" query-param="installment"/>
         <with-param name="collFee" query-param="collFee"/>
         <with-param name="penaltyValue" query-param="penaltyValue"/>
         <with-param name="installBill" query-param="installBill"/>
         <with-param name="totBill" query-param="totBill"/>
         <with-param name="visitCode" query-param="visitCode"/>
         <with-param name="visitTime" query-param="visitTime"/>
         <with-param name="visitTimeValue" query-param="visitTimeValue"/>
         <with-param name="paidSts" query-param="paidSts"/>
         <with-param name="receiptNo" query-param="receiptNo"/>
         <with-param name="jbDate" query-param="jbDate"/>
         <with-param name="jbTime" query-param="jbTime"/>
         <with-param name="tuDate" query-param="tuDate"/>
         <with-param name="tuTime" query-param="tuTime"/>
         <with-param name="tuTimeValue" query-param="tuTimeValue"/>
         <with-param name="meetCode" query-param="meetCode"/>
         <with-param name="meetName" query-param="meetName"/>
         <with-param name="addrSts" query-param="addrSts"/>
         <with-param name="unitSts" query-param="unitSts"/>
         <with-param name="paymentDate" query-param="paymentDate"/>
         <with-param name="customerPaymentDate" query-param="customerPaymentDate"/>
         <with-param name="presenceSts" query-param="presenceSts"/>
         <with-param name="prepaymentSts" query-param="prepaymentSts"/>
         <with-param name="paidCollFee" query-param="paidCollFee"/>
         <with-param name="paidPenalty" query-param="paidPenalty"/>
         <with-param name="paidInstall" query-param="paidInstall"/>
         <with-param name="discount" query-param="discount"/>
         <with-param name="attCode" query-param="attCode"/>
         <with-param name="utjBalance" query-param="utjBalance"/>
         <with-param name="utjPlusValue" query-param="utjPlusValue"/>
         <with-param name="utjUsageValue" query-param="utjUsageValue"/>
         <with-param name="utjUsageReason" query-param="utjUsageReason"/>
         <with-param name="utjAppvSts" query-param="utjAppvSts"/>
         <with-param name="utjAppvDate" query-param="utjAppvDate"/>
         <with-param name="spNo" query-param="spNo"/>
         <with-param name="spType" query-param="spType"/>
         <with-param name="spReceiptType" query-param="spReceiptType"/>
         <with-param name="spReceiptName" query-param="spReceiptName"/>
         <with-param name="spNotes" query-param="spNotes"/>
         <with-param name="sttuNo" query-param="sttuNo"/>
         <with-param name="collNotes" query-param="collNotes"/>
         <with-param name="flagSendDate" query-param="flagSendDate"/>
         <with-param name="latitude" query-param="latitude"/>
         <with-param name="longtitude" query-param="longtitude"/>
         <with-param name="billSts" query-param="billSts"/>
         <with-param name="updatedBy" query-param="updatedBy"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
      </call-query>
   </resource>
   <resource method="POST" path="/listExpiredApprovalUtj">
      <call-query href="listExpiredApprovalUtj">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="eodDate" query-param="eodDate"/>
      </call-query>
   </resource>
   <resource method="POST" path="/callSpUpdDkhPakaiLunasExp">
      <call-query href="callSpUpdDkhPakaiLunasExp">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="appvSts" query-param="appvSts"/>
         <with-param name="eodDate" query-param="eodDate"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="returnVal" query-param="returnVal"/>
      </call-query>
   </resource>
   <resource method="POST" path="/cekIsSubmitDkhMikro">
      <call-query href="cekIsSubmitDkhMikro">
         <with-param name="aggrNo" query-param="aggrNo"/>
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="groupCode" query-param="groupCode"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getInfoFieldApprovalUtj">
      <call-query href="getInfoFieldApprovalUtj">
         <with-param name="requester" query-param="requester"/>
         <with-param name="folio" query-param="folio"/>
         <with-param name="processName" query-param="processName"/>
      </call-query>
   </resource>
   <resource method="DELETE" path="/trxDkhDtlFileByDkhStringNew">
      <call-query href="trxDkhDtlFileByDkhStringNew">
         <with-param name="companyCode" query-param="companyCode"/>
         <with-param name="branchCode" query-param="branchCode"/>
         <with-param name="dkhNo" query-param="dkhNo"/>
         <with-param name="listKontrak" query-param="listKontrak"/>
         <with-param name="listAggr" query-param="listAggr"/>
      </call-query>
   </resource>
   <resource method="POST" path="/submitDkhSp">
      <call-query href="submitDkhSp">
         <with-param name="jsonParam" query-param="jsonParam"/>
         <with-param name="errorCode" query-param="errorCode"/>
         <with-param name="result" query-param="result"/>
      </call-query>
   </resource>
   <resource method="GET" path="/getColumn/reportLkh">
      <call-query href="getColumnReportLkhNew"/>
   </resource>
   <resource method="POST" path="/getCount/reportLkh">
      <call-query href="getCountReportLkhNew">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
      </call-query>
   </resource>
   <resource method="POST" path="/getData/reportLkh">
      <call-query href="getDataReportLkhNew">
         <with-param name="search" query-param="search"/>
         <with-param name="filter" query-param="filter"/>
         <with-param name="orderBy" query-param="orderBy"/>
         <with-param name="direction" query-param="direction"/>
         <with-param name="page" query-param="page"/>
         <with-param name="limit" query-param="limit"/>
      </call-query>
   </resource>
</data>
</root>